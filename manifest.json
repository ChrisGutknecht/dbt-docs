{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.8", "generated_at": "2022-09-21T09:00:41.226795Z", "invocation_id": "f8f1a23b-a565-4e12-a86d-12fd967ae142", "env": {"DBT_CLOUD_PROJECT_ID": "20074", "DBT_CLOUD_RUN_ID": "83484262", "DBT_CLOUD_JOB_ID": "111741", "DBT_CLOUD_RUN_REASON": "scheduled", "DBT_CLOUD_RUN_REASON_CATEGORY": "scheduled"}, "project_id": "8445815bd7cf40d4bfeb171861818040", "user_id": "f21bc624-a9ea-4d20-aa35-d81d24d0178b", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.sql_repository_bz.int_attribution_markov_path_level_monthly": {"raw_sql": "with path_data as (\r\n    select * except (sk_id)\r\n    from {{ ref('stg_channelattribution_path_level') }}\r\n/* here we use the attribution calculation of the previous month to correct order values of the current month */\r\n    where transaction_date >= date_sub(parse_date('%Y-%m-%d', '{{ var(\"start_date_fy\") }}' ), interval 1 month)\r\n),\r\n\r\ngrouped_data_path_level as (\r\n    select\r\n        country_grouping,\t\r\n        channel as channel_name,\r\n        substr(cast(transaction_date as string),1,7) as jahr_monat,\r\n        sum(total_conversions_attribution) as total_conversion,\r\n        sum(total_conversion_value_attribution_korr) as total_conversion_value,\r\n        min(transaction_date) as min_transaction_date_per_month,\r\n        max(transaction_date) as max_transaction_date_per_month,\r\n        /* here we use the attribution calculation of the previous month to correct order values of the current month */\r\n        format_datetime('%Y-%m',date_add(max(transaction_date), interval 1 month)) as month,\r\n        min(transaction_date) || ' - ' || max(transaction_date) as t_window\r\n    from path_data\r\n    group by 1,2,3\r\n), \r\n\r\nnew_vars as (\r\n\r\n    select \r\n        *,\r\n        month as year_month_markov,\r\n        sum(total_conversion_value) over (partition by country_grouping, jahr_monat) as order_value_gesamt\r\n    from grouped_data_path_level\r\n    /* we only use full months*/\r\n    --where max_transaction_date_per_month = last_day(max_transaction_date_per_month) \r\n    --and extract(day from min_transaction_date_per_month) = 1\r\n\r\n),\r\n\r\nchannelanteil as (\r\n    select \r\n        *,\r\n        total_conversion_value/order_value_gesamt as channelanteil_markov\r\n    from new_vars\r\n\r\n)\r\n\r\nselect * from channelanteil", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_channelattribution_path_level"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "channel_attribution", "int_attribution_markov_path_level_monthly"], "unique_id": "model.sql_repository_bz.int_attribution_markov_path_level_monthly", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/channel_attribution/int_attribution_markov_path_level_monthly.sql", "original_file_path": "models/02_intermediate/channel_attribution/int_attribution_markov_path_level_monthly.sql", "name": "int_attribution_markov_path_level_monthly", "alias": "int_attribution_markov_path_level_monthly", "checksum": {"name": "sha256", "checksum": "3f6ce6201170784a0f2d61a18602ef1a98322654e0ac02bc5928d10baaa6ca6d"}, "tags": [], "refs": [["stg_channelattribution_path_level"]], "sources": [], "description": "this model groups all attributed transactions by month", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/channel_attribution/_models_int_attribution.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/channel_attribution/int_attribution_markov_path_level_monthly.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.3527098, "compiled_sql": "with path_data as (\n    select * except (sk_id)\n    from `bergzeit`.`dbt_analytics_staging`.`stg_channelattribution_path_level`\n/* here we use the attribution calculation of the previous month to correct order values of the current month */\n    where transaction_date >= date_sub(parse_date('%Y-%m-%d', '2022-03-01' ), interval 1 month)\n),\n\ngrouped_data_path_level as (\n    select\n        country_grouping,\t\n        channel as channel_name,\n        substr(cast(transaction_date as string),1,7) as jahr_monat,\n        sum(total_conversions_attribution) as total_conversion,\n        sum(total_conversion_value_attribution_korr) as total_conversion_value,\n        min(transaction_date) as min_transaction_date_per_month,\n        max(transaction_date) as max_transaction_date_per_month,\n        /* here we use the attribution calculation of the previous month to correct order values of the current month */\n        format_datetime('%Y-%m',date_add(max(transaction_date), interval 1 month)) as month,\n        min(transaction_date) || ' - ' || max(transaction_date) as t_window\n    from path_data\n    group by 1,2,3\n), \n\nnew_vars as (\n\n    select \n        *,\n        month as year_month_markov,\n        sum(total_conversion_value) over (partition by country_grouping, jahr_monat) as order_value_gesamt\n    from grouped_data_path_level\n    /* we only use full months*/\n    --where max_transaction_date_per_month = last_day(max_transaction_date_per_month) \n    --and extract(day from min_transaction_date_per_month) = 1\n\n),\n\nchannelanteil as (\n    select \n        *,\n        total_conversion_value/order_value_gesamt as channelanteil_markov\n    from new_vars\n\n)\n\nselect * from channelanteil", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_attribution_markov_path_level_monthly`"}, "model.sql_repository_bz.int_weather_avg_temp_to_monthly_avg": {"raw_sql": "with temps_by_day as (\r\n\r\n    select\r\n        date,\r\n        weekday_index,\r\n        weekday_name,\r\n        country,\r\n        year_month,\r\n        avg_temp\r\n    from {{ ref('int_weather_avg_temp_by_country') }}\r\n    where\r\n        date between {{ get_last_n_days_date_range(90) }} or\r\n        date between {{ get_last_n_days_prev_year(90) }}\r\n\r\n),\r\n\r\n/* calculate averages by month */\r\ntemps_by_month as (\r\n\r\n    select\r\n        country as m_country,\r\n        year_month as m_year_month,\r\n        round(avg(temperature),2) as m_avg_temp\r\n    from {{ ref('stg_weather_dach_daily') }}\r\n    where\r\n        date between {{ get_last_n_days_date_range(90) }} or\r\n        date between {{ get_last_n_days_prev_year(90) }}\r\n    group by 1,2\r\n\r\n),\r\n\r\ntemps_by_day_and_month_joined as (\r\n\r\n    select\r\n        date,\r\n        weekday_index,\r\n        weekday_name,\r\n        country,\r\n        year_month,\r\n        avg_temp,\r\n        m_avg_temp,\r\n        round(avg_temp - m_avg_temp, 4) AS temp_diff_to_m_avg\r\n    from temps_by_day\r\n    left join temps_by_month on\r\n        temps_by_day.country = temps_by_month.m_country\r\n        and temps_by_day.year_month = temps_by_month.m_year_month\r\n\r\n)\r\n\r\nselect * from temps_by_day_and_month_joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range", "macro.sql_repository_bz.get_last_n_days_prev_year"], "nodes": ["model.sql_repository_bz.int_weather_avg_temp_by_country", "model.sql_repository_bz.stg_weather_dach_daily"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "weather_data", "int_weather_avg_temp_to_monthly_avg"], "unique_id": "model.sql_repository_bz.int_weather_avg_temp_to_monthly_avg", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/weather_data/int_weather_avg_temp_to_monthly_avg.sql", "original_file_path": "models/02_intermediate/weather_data/int_weather_avg_temp_to_monthly_avg.sql", "name": "int_weather_avg_temp_to_monthly_avg", "alias": "int_weather_avg_temp_to_monthly_avg", "checksum": {"name": "sha256", "checksum": "838cae6ff96b817c436e935ffdddcba3cd36bd4c4ccbd9e822b31e7dac3df7df"}, "tags": [], "refs": [["int_weather_avg_temp_by_country"], ["stg_weather_dach_daily"]], "sources": [], "description": "average monthly temperature by country", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/weather_data/_models_int_weather.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/weather_data/int_weather_avg_temp_to_monthly_avg.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.3551037, "compiled_sql": "with temps_by_day as (\n\n    select\n        date,\n        weekday_index,\n        weekday_name,\n        country,\n        year_month,\n        avg_temp\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_weather_avg_temp_by_country`\n    where\n        date between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n or\n        date between \n    -- get date n days ago of last year\n    date_sub(date_sub(current_date(), interval 1 year), interval 90 day)\n    -- get yesterday last year\n    and date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n\n),\n\n/* calculate averages by month */\ntemps_by_month as (\n\n    select\n        country as m_country,\n        year_month as m_year_month,\n        round(avg(temperature),2) as m_avg_temp\n    from `bergzeit`.`dbt_analytics_staging`.`stg_weather_dach_daily`\n    where\n        date between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n or\n        date between \n    -- get date n days ago of last year\n    date_sub(date_sub(current_date(), interval 1 year), interval 90 day)\n    -- get yesterday last year\n    and date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n    group by 1,2\n\n),\n\ntemps_by_day_and_month_joined as (\n\n    select\n        date,\n        weekday_index,\n        weekday_name,\n        country,\n        year_month,\n        avg_temp,\n        m_avg_temp,\n        round(avg_temp - m_avg_temp, 4) AS temp_diff_to_m_avg\n    from temps_by_day\n    left join temps_by_month on\n        temps_by_day.country = temps_by_month.m_country\n        and temps_by_day.year_month = temps_by_month.m_year_month\n\n)\n\nselect * from temps_by_day_and_month_joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_weather_avg_temp_to_monthly_avg`"}, "model.sql_repository_bz.int_weather_avg_temp_by_country": {"raw_sql": "with avg_daily_temp_by_country as (\r\n\r\n    select\r\n        date,\r\n        weekday_index,\r\n        weekday_name,\r\n        country,\r\n        year_month,\r\n        round(avg(temperature),2) as avg_temp,\r\n        round(avg(humidity),2) as avg_humidity\r\n    from {{ ref('stg_weather_dach_daily') }}\r\n    where date between {{ get_last_n_days_date_range(90) }}\r\n    group by 1,2,3,4,5\r\n\r\n)\r\n\r\nselect * from avg_daily_temp_by_country", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_weather_dach_daily"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "weather_data", "int_weather_avg_temp_by_country"], "unique_id": "model.sql_repository_bz.int_weather_avg_temp_by_country", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/weather_data/int_weather_avg_temp_by_country.sql", "original_file_path": "models/02_intermediate/weather_data/int_weather_avg_temp_by_country.sql", "name": "int_weather_avg_temp_by_country", "alias": "int_weather_avg_temp_by_country", "checksum": {"name": "sha256", "checksum": "9524aab01882e88bb0849b714a378eb2dcb622987b7a223d53167fae854c1eda"}, "tags": [], "refs": [["stg_weather_dach_daily"]], "sources": [], "description": "average daily temperature by country", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/weather_data/_models_int_weather.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/weather_data/int_weather_avg_temp_by_country.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.3540738, "compiled_sql": "with avg_daily_temp_by_country as (\n\n    select\n        date,\n        weekday_index,\n        weekday_name,\n        country,\n        year_month,\n        round(avg(temperature),2) as avg_temp,\n        round(avg(humidity),2) as avg_humidity\n    from `bergzeit`.`dbt_analytics_staging`.`stg_weather_dach_daily`\n    where date between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1,2,3,4,5\n\n)\n\nselect * from avg_daily_temp_by_country", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_weather_avg_temp_by_country`"}, "model.sql_repository_bz.int_gads_de_adstats_and_attributes": {"raw_sql": "/* fetch all ads with min x impressions in lookback period */\r\n\r\nwith ad_stats as (\r\n\r\n    select\r\n        account,\r\n        account_id,\r\n        CampaignId as campaign_id,\r\n        AdGroupId as adgroup_id,\r\n        CreativeId as creative_id,\r\n        sum(Impressions) as impressions,\r\n        sum(Clicks) as clicks,\r\n        round(safe_divide(sum(clicks),sum(impressions)),4) as ctr,\r\n        sum(Conversions) as conversions\r\n    from {{ ref('stg_gads_all_ads_stats') }}\r\n    where\r\n        /* fetch 90 days for link check use case */\r\n        date between date_sub(current_date(), interval 90 day)\r\n        and date_sub(current_date(), interval 1 day)\r\n        and impressions > 0\r\n    group by 1,2,3,4,5\r\n   \r\n),\r\n\r\nad_info as (\r\n\r\n    select\r\n        creative_id,\r\n        ad_type,\r\n        final_url,\r\n        ad_status\r\n    from {{ ref('stg_gads_all_ads_info_current') }}\r\n\r\n),\r\n\r\ncampaign_info as (\r\n\r\n    select\r\n        CampaignId as campaign_id,\r\n        CampaignName as campaign_name,\r\n        CampaignStatus as campaign_status\r\n    from {{ref ('stg_gads_all_campaigns_info_current') }}\r\n\r\n),\r\n\r\nadgroup_info as (\r\n\r\n    select\r\n        AdGroupId as adgroup_id,\r\n        AdGroupName as adgroup_name,\r\n        AdGroupStatus as adgroup_status\r\n    from {{ ref('stg_gads_all_adgroups_info_current') }}\r\n\r\n),\r\n\r\nad_stats_with_all_info as (\r\n\r\n    select *\r\n    from ad_stats as stats\r\n    inner join ad_info using (creative_id)\r\n    inner join campaign_info using (campaign_id)\r\n    inner join adgroup_info using (adgroup_id)\r\n    where\r\n        ad_type in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\r\n        and campaign_status = 'ENABLED'\r\n        and adgroup_status = 'ENABLED'\r\n\r\n)\r\n\r\nselect * from ad_stats_with_all_info", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gads_all_ads_stats", "model.sql_repository_bz.stg_gads_all_ads_info_current", "model.sql_repository_bz.stg_gads_all_campaigns_info_current", "model.sql_repository_bz.stg_gads_all_adgroups_info_current"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_ads", "int_gads_de_adstats_and_attributes"], "unique_id": "model.sql_repository_bz.int_gads_de_adstats_and_attributes", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_ads/int_gads_de_adstats_and_attributes.sql", "original_file_path": "models/02_intermediate/google_ads/int_gads_de_adstats_and_attributes.sql", "name": "int_gads_de_adstats_and_attributes", "alias": "int_gads_de_adstats_and_attributes", "checksum": {"name": "sha256", "checksum": "11233e583f724a2055fc83825541bab9df69a5ff091b496f6bdb7e85f5bcda4a"}, "tags": [], "refs": [["stg_gads_all_ads_stats"], ["stg_gads_all_ads_info_current"], ["stg_gads_all_campaigns_info_current"], ["stg_gads_all_adgroups_info_current"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_ads/int_gads_de_adstats_and_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750845.623862, "compiled_sql": "/* fetch all ads with min x impressions in lookback period */\n\nwith ad_stats as (\n\n    select\n        account,\n        account_id,\n        CampaignId as campaign_id,\n        AdGroupId as adgroup_id,\n        CreativeId as creative_id,\n        sum(Impressions) as impressions,\n        sum(Clicks) as clicks,\n        round(safe_divide(sum(clicks),sum(impressions)),4) as ctr,\n        sum(Conversions) as conversions\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_ads_stats`\n    where\n        /* fetch 90 days for link check use case */\n        date between date_sub(current_date(), interval 90 day)\n        and date_sub(current_date(), interval 1 day)\n        and impressions > 0\n    group by 1,2,3,4,5\n   \n),\n\nad_info as (\n\n    select\n        creative_id,\n        ad_type,\n        final_url,\n        ad_status\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_ads_info_current`\n\n),\n\ncampaign_info as (\n\n    select\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n        CampaignStatus as campaign_status\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaigns_info_current`\n\n),\n\nadgroup_info as (\n\n    select\n        AdGroupId as adgroup_id,\n        AdGroupName as adgroup_name,\n        AdGroupStatus as adgroup_status\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_adgroups_info_current`\n\n),\n\nad_stats_with_all_info as (\n\n    select *\n    from ad_stats as stats\n    inner join ad_info using (creative_id)\n    inner join campaign_info using (campaign_id)\n    inner join adgroup_info using (adgroup_id)\n    where\n        ad_type in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\n        and campaign_status = 'ENABLED'\n        and adgroup_status = 'ENABLED'\n\n)\n\nselect * from ad_stats_with_all_info", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gads_de_adstats_and_attributes`"}, "model.sql_repository_bz.int_gads_all_query_stats": {"raw_sql": "with all_query_stats as (\r\n\r\n    select\r\n        date,\r\n        account,\r\n        account_id,\r\n        campaign_name,\r\n        query,\r\n        device,\r\n        sum(cost) as cost,\r\n        sum(clicks) as clicks,\r\n        sum(impressions) as impressions,\r\n        sum(conversions) as conversions\r\n    from {{ ref('stg_gads_all_query_stats') }}\r\n    left join {{ ref('stg_gads_all_campaign_names') }} using (campaign_id)\r\n    group by 1,2,3,4,5,6\r\n\r\n)\r\n\r\nselect * from all_query_stats", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gads_all_query_stats", "model.sql_repository_bz.stg_gads_all_campaign_names"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_ads", "int_gads_all_query_stats"], "unique_id": "model.sql_repository_bz.int_gads_all_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_ads/int_gads_all_query_stats.sql", "original_file_path": "models/02_intermediate/google_ads/int_gads_all_query_stats.sql", "name": "int_gads_all_query_stats", "alias": "int_gads_all_query_stats", "checksum": {"name": "sha256", "checksum": "d30a9afc7f936491a827220b559756d6bd029a5cb6f5296262d19dbc123f86d9"}, "tags": [], "refs": [["stg_gads_all_query_stats"], ["stg_gads_all_campaign_names"]], "sources": [], "description": "all query stats of all accounts", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_ads/_int_gads_models.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_ads/int_gads_all_query_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.356166, "compiled_sql": "with all_query_stats as (\n\n    select\n        date,\n        account,\n        account_id,\n        campaign_name,\n        query,\n        device,\n        sum(cost) as cost,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        sum(conversions) as conversions\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_query_stats`\n    left join `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaign_names` using (campaign_id)\n    group by 1,2,3,4,5,6\n\n)\n\nselect * from all_query_stats", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gads_all_query_stats`"}, "model.sql_repository_bz.int_gads_all_crawled_ads_urls_classified": {"raw_sql": "with crawled_ads_urls_classified as (\r\n\r\n    select\r\n        url,\r\n        if(redirect_urls = 'nan', url, redirect_urls) as original_url,\r\n        title,\r\n        case\r\n            when regexp_contains(title, 'Deine Suche ergab') then '0 Treffer'\r\n            when title = 'Fehler 404' then 'Fehler 404'\r\n            when title = 'Kategorie leer' then 'Kategorie leer'\r\n            when regexp_contains(h4, 'Hoppla - Diese Kategorie enth\u00e4lt keine Artikel mehr') then 'Kategorie leer'\r\n            else 'Erfolg'\r\n        end as result_type,\r\n        h1,\r\n        split(split(h1,'(')[safe_offset(1)],' Artikel')[safe_offset(0)] as result_count,\r\n        status,\r\n        canonical,\r\n        redirect_urls\r\n    from {{ ref('stg_gads_all_crawled_ads_urls') }}\r\n\r\n)\r\n\r\nselect * from crawled_ads_urls_classified", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gads_all_crawled_ads_urls"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_ads", "link_checker", "int_gads_all_crawled_ads_urls_classified"], "unique_id": "model.sql_repository_bz.int_gads_all_crawled_ads_urls_classified", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_ads/link_checker/int_gads_all_crawled_ads_urls_classified.sql", "original_file_path": "models/02_intermediate/google_ads/link_checker/int_gads_all_crawled_ads_urls_classified.sql", "name": "int_gads_all_crawled_ads_urls_classified", "alias": "int_gads_all_crawled_ads_urls_classified", "checksum": {"name": "sha256", "checksum": "0cb94b1ed43c7a71ac3248f6c7d02d2ef1f68bb069662a020becd55f8ada881e"}, "tags": [], "refs": [["stg_gads_all_crawled_ads_urls"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_ads/link_checker/int_gads_all_crawled_ads_urls_classified.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750845.687448, "compiled_sql": "with crawled_ads_urls_classified as (\n\n    select\n        url,\n        if(redirect_urls = 'nan', url, redirect_urls) as original_url,\n        title,\n        case\n            when regexp_contains(title, 'Deine Suche ergab') then '0 Treffer'\n            when title = 'Fehler 404' then 'Fehler 404'\n            when title = 'Kategorie leer' then 'Kategorie leer'\n            when regexp_contains(h4, 'Hoppla - Diese Kategorie enth\u00e4lt keine Artikel mehr') then 'Kategorie leer'\n            else 'Erfolg'\n        end as result_type,\n        h1,\n        split(split(h1,'(')[safe_offset(1)],' Artikel')[safe_offset(0)] as result_count,\n        status,\n        canonical,\n        redirect_urls\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_crawled_ads_urls`\n\n)\n\nselect * from crawled_ads_urls_classified", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gads_all_crawled_ads_urls_classified`"}, "model.sql_repository_bz.int_gads_all_feedadgroups": {"raw_sql": "with feedagroup_names as (\r\n\r\n    select distinct target_ad_group \r\n    from `bergzeit.dbt_feed_campaigns.brand_cat_all`\r\n\r\n    union all\r\n\r\n    select distinct target_ad_group \r\n    from `bergzeit.dbt_feed_campaigns.brand_mod_all`\r\n    \r\n)\r\n\r\nselect * from feedagroup_names", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_ads", "link_checker", "int_gads_all_feedadgroups"], "unique_id": "model.sql_repository_bz.int_gads_all_feedadgroups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_ads/link_checker/int_gads_all_feedadgroups.sql", "original_file_path": "models/02_intermediate/google_ads/link_checker/int_gads_all_feedadgroups.sql", "name": "int_gads_all_feedadgroups", "alias": "int_gads_all_feedadgroups", "checksum": {"name": "sha256", "checksum": "ebbbd3744ba3bf4f6643d9e6f325211bf4c7b3c916f8bb42a72e3917e9c097f5"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_ads/link_checker/int_gads_all_feedadgroups.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750845.7025607, "compiled_sql": "with feedagroup_names as (\r\n\r\n    select distinct target_ad_group \r\n    from `bergzeit.dbt_feed_campaigns.brand_cat_all`\r\n\r\n    union all\r\n\r\n    select distinct target_ad_group \r\n    from `bergzeit.dbt_feed_campaigns.brand_mod_all`\r\n    \r\n)\r\n\r\nselect * from feedagroup_names", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gads_all_feedadgroups`"}, "model.sql_repository_bz.int_gads_product_data_and_shopping_by_day": {"raw_sql": "-- get all product data with attributes by day\r\nwith product_data as (\r\n\r\n    select\r\n        date, \r\n        offer_id, \r\n        top_category, \r\n        category_l1_2, \r\n        category_l_2, \r\n        category_l_3, \r\n        product_brand as brand, \r\n        avg_discount_groups_custom, \r\n        avg_price_groups_custom\r\n    from {{ ref('int_gmc_product_attr_and_stock_by_day') }}\r\n    where date between {{ get_last_n_days_date_range(31) }}\r\n    and products_country = 'de'\r\n    \r\n),\r\n  \r\n-- fetch shopping clicks  \r\nclick_data as (\r\n\r\n    select \r\n      gads_account,\r\n      gads_date ,\r\n      gads_offer_id ,\r\n      shopping_clicks ,\r\n      shopping_cost ,\r\n      shopping_conversions ,\r\n      shopping_conversion_value  \r\n    from {{ ref('int_gads_product_stats_by_day') }}\r\n    where gads_date between {{ get_last_n_days_date_range(31) }}\r\n\r\n  ),\r\n\r\nclicks_all_countries as (\r\n  select \r\n      gads_date ,\r\n      gads_offer_id ,\r\n      sum(shopping_clicks) as shopping_clicks,\r\n      sum(shopping_cost) as  shopping_cost,\r\n      sum(shopping_conversions) as shopping_conversions ,\r\n      sum(shopping_conversion_value) as  shopping_conversion_value \r\n  from click_data\r\n  group by 1,2\r\n)\r\n\r\n  \r\n-- join data\r\nselect\r\n  * except (gads_date, gads_offer_id)\r\nfrom product_data\r\nleft join click_data as clicks \r\n    on product_data.date = clicks.gads_date \r\n    and product_data.offer_id = clicks.gads_offer_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day", "model.sql_repository_bz.int_gads_product_stats_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_ads", "shopping", "int_gads_product_data_and_shopping_by_day"], "unique_id": "model.sql_repository_bz.int_gads_product_data_and_shopping_by_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_ads/shopping/int_gads_product_data_and_shopping_by_day.sql", "original_file_path": "models/02_intermediate/google_ads/shopping/int_gads_product_data_and_shopping_by_day.sql", "name": "int_gads_product_data_and_shopping_by_day", "alias": "int_gads_product_data_and_shopping_by_day", "checksum": {"name": "sha256", "checksum": "9ac23d383786312dc229304501ad1ba6f0fe088f34f12610333f9500fe481c0a"}, "tags": [], "refs": [["int_gmc_product_attr_and_stock_by_day"], ["int_gads_product_stats_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_ads/shopping/int_gads_product_data_and_shopping_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750845.711129, "compiled_sql": "-- get all product data with attributes by day\nwith product_data as (\n\n    select\n        date, \n        offer_id, \n        top_category, \n        category_l1_2, \n        category_l_2, \n        category_l_3, \n        product_brand as brand, \n        avg_discount_groups_custom, \n        avg_price_groups_custom\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_product_attr_and_stock_by_day`\n    where date between \n    date_sub(current_date(), interval 31 day)\n    and date_sub(current_date(), interval 1 day)\n\n    and products_country = 'de'\n    \n),\n  \n-- fetch shopping clicks  \nclick_data as (\n\n    select \n      gads_account,\n      gads_date ,\n      gads_offer_id ,\n      shopping_clicks ,\n      shopping_cost ,\n      shopping_conversions ,\n      shopping_conversion_value  \n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gads_product_stats_by_day`\n    where gads_date between \n    date_sub(current_date(), interval 31 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n  ),\n\nclicks_all_countries as (\n  select \n      gads_date ,\n      gads_offer_id ,\n      sum(shopping_clicks) as shopping_clicks,\n      sum(shopping_cost) as  shopping_cost,\n      sum(shopping_conversions) as shopping_conversions ,\n      sum(shopping_conversion_value) as  shopping_conversion_value \n  from click_data\n  group by 1,2\n)\n\n  \n-- join data\nselect\n  * except (gads_date, gads_offer_id)\nfrom product_data\nleft join click_data as clicks \n    on product_data.date = clicks.gads_date \n    and product_data.offer_id = clicks.gads_offer_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gads_product_data_and_shopping_by_day`"}, "model.sql_repository_bz.int_gads_all_shopping_criteria": {"raw_sql": "with shopping_criteria as (\r\n\r\n    select distinct\r\n        country,\r\n        ExternalCustomerId as account_id,\r\n        CampaignId as campaign_id,\r\n        AdGroupId as adgroup_id,\r\n        CriterionId as criterion_id,\r\n        Criteria as shopping_product_group,\r\n        brand\r\n    from {{ ref('stg_gads_all_criteria_info_current') }}\r\n    where\r\n        CriteriaType = 'PRODUCT_PARTITION'\r\n        and Criteria is not null\r\n        and Criteria not like '%&+%'\r\n        and Criteria not like '%id==%'\r\n        and Criteria != 'brand==*'\r\n        and Criteria != ''\r\n\r\n),\r\n\r\nshopping_campaign_names as (\r\n\r\n    select\r\n        CampaignId as campaign_id,\r\n        CampaignName as campaign_name,\r\n        lower(CampaignStatus) as campaign_status\r\n    from {{ ref('stg_gads_all_campaigns_info_current') }}\r\n\r\n),\r\n\r\nshopping_adgroup_names as (\r\n\r\n    select\r\n        AdGroupId as adgroup_id,\r\n        AdGroupName as adgroup_name,\r\n    from {{ ref('stg_gads_all_adgroups_info_current') }}\r\n    \r\n), \r\n\r\nshopping_criteria_joined as (\r\n\r\n    select *\r\n    from shopping_criteria\r\n    left join shopping_campaign_names using (campaign_id)\r\n    left join shopping_adgroup_names using (adgroup_id)\r\n    where\r\n        campaign_name like '%Sma%'\r\n        and campaign_status = 'enabled'\r\n\r\n)\r\n\r\nselect * from shopping_criteria_joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gads_all_criteria_info_current", "model.sql_repository_bz.stg_gads_all_campaigns_info_current", "model.sql_repository_bz.stg_gads_all_adgroups_info_current"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_ads", "shopping", "int_gads_all_shopping_criteria"], "unique_id": "model.sql_repository_bz.int_gads_all_shopping_criteria", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_ads/shopping/int_gads_all_shopping_criteria.sql", "original_file_path": "models/02_intermediate/google_ads/shopping/int_gads_all_shopping_criteria.sql", "name": "int_gads_all_shopping_criteria", "alias": "int_gads_all_shopping_criteria", "checksum": {"name": "sha256", "checksum": "b4dcee31181bf937a2f652d08859a6dbe7e9b959e7ee5374577c0eca5dfd8248"}, "tags": [], "refs": [["stg_gads_all_criteria_info_current"], ["stg_gads_all_campaigns_info_current"], ["stg_gads_all_adgroups_info_current"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_ads/shopping/int_gads_all_shopping_criteria.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750845.7333615, "compiled_sql": "with shopping_criteria as (\n\n    select distinct\n        country,\n        ExternalCustomerId as account_id,\n        CampaignId as campaign_id,\n        AdGroupId as adgroup_id,\n        CriterionId as criterion_id,\n        Criteria as shopping_product_group,\n        brand\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_criteria_info_current`\n    where\n        CriteriaType = 'PRODUCT_PARTITION'\n        and Criteria is not null\n        and Criteria not like '%&+%'\n        and Criteria not like '%id==%'\n        and Criteria != 'brand==*'\n        and Criteria != ''\n\n),\n\nshopping_campaign_names as (\n\n    select\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n        lower(CampaignStatus) as campaign_status\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaigns_info_current`\n\n),\n\nshopping_adgroup_names as (\n\n    select\n        AdGroupId as adgroup_id,\n        AdGroupName as adgroup_name,\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_adgroups_info_current`\n    \n), \n\nshopping_criteria_joined as (\n\n    select *\n    from shopping_criteria\n    left join shopping_campaign_names using (campaign_id)\n    left join shopping_adgroup_names using (adgroup_id)\n    where\n        campaign_name like '%Sma%'\n        and campaign_status = 'enabled'\n\n)\n\nselect * from shopping_criteria_joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gads_all_shopping_criteria`"}, "model.sql_repository_bz.int_gads_product_stats_by_day": {"raw_sql": "with gads_all_product_stats as (\r\n\r\n    select\r\n        account as gads_account,\r\n        date as gads_date,\r\n        sku as gads_offer_id,\r\n        sum(clicks) as shopping_clicks,\r\n        round(sum(cost),2) as shopping_cost,\r\n        round(sum(conversions),4) as shopping_conversions,\r\n        round(sum(conversion_value),4) as shopping_conversion_value\r\n    from {{ ref('stg_gads_all_product_stats') }}\r\n    where sku is not null\r\n    group by 1,2,3\r\n\r\n)\r\n\r\nselect * from gads_all_product_stats", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gads_all_product_stats"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_ads", "shopping", "int_gads_product_stats_by_day"], "unique_id": "model.sql_repository_bz.int_gads_product_stats_by_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_ads/shopping/int_gads_product_stats_by_day.sql", "original_file_path": "models/02_intermediate/google_ads/shopping/int_gads_product_stats_by_day.sql", "name": "int_gads_product_stats_by_day", "alias": "int_gads_product_stats_by_day", "checksum": {"name": "sha256", "checksum": "e3109a81eed855fc7553e43d6fc8a34c8f0d0984797106cb41cae2ad9af7fa4c"}, "tags": [], "refs": [["stg_gads_all_product_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_ads/shopping/int_gads_product_stats_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750845.754462, "compiled_sql": "with gads_all_product_stats as (\n\n    select\n        account as gads_account,\n        date as gads_date,\n        sku as gads_offer_id,\n        sum(clicks) as shopping_clicks,\n        round(sum(cost),2) as shopping_cost,\n        round(sum(conversions),4) as shopping_conversions,\n        round(sum(conversion_value),4) as shopping_conversion_value\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_product_stats`\n    where sku is not null\n    group by 1,2,3\n\n)\n\nselect * from gads_all_product_stats", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gads_product_stats_by_day`"}, "model.sql_repository_bz.int_gads_campaign_stats_by_brand": {"raw_sql": "with all_campaign_stats as (\r\n\r\n    select\r\n        account,\r\n        account_id,\r\n        date,\r\n        campaign_id,\r\n        device,\r\n        impressions,\r\n        clicks,\r\n        cost,\r\n        conversions\r\n    from {{ref('stg_gads_all_campaign_stats')}}\r\n\r\n),\r\n\r\ncampaign_names as (\r\n\r\n    select\r\n        campaign_id,\r\n        campaign_name,\r\n        brand\r\n    from {{ref('stg_gads_all_campaign_names')}}\r\n\r\n), \r\n\r\ncampaign_stats_by_brand as (\r\n\r\n    select\r\n        account,\r\n        account_id,\r\n        date,\r\n        brand,\r\n        device,\r\n        sum(impressions) as impressions,\r\n        sum(clicks) as clicks,\r\n        sum(cost) as cost,\r\n        sum(conversions) as conversions\r\n    from all_campaign_stats\r\n    left join campaign_names using (campaign_id)\r\n    group by 1,2,3,4,5\r\n    \r\n)\r\n\r\nselect * from campaign_stats_by_brand", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gads_all_campaign_stats", "model.sql_repository_bz.stg_gads_all_campaign_names"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_ads", "cost_by_brand", "int_gads_campaign_stats_by_brand"], "unique_id": "model.sql_repository_bz.int_gads_campaign_stats_by_brand", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_ads/cost_by_brand/int_gads_campaign_stats_by_brand.sql", "original_file_path": "models/02_intermediate/google_ads/cost_by_brand/int_gads_campaign_stats_by_brand.sql", "name": "int_gads_campaign_stats_by_brand", "alias": "int_gads_campaign_stats_by_brand", "checksum": {"name": "sha256", "checksum": "fa3442b0082052ead78eea4cc989b3bae0280f2e5e46ee471223e67a897bea02"}, "tags": [], "refs": [["stg_gads_all_campaign_stats"], ["stg_gads_all_campaign_names"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_ads/cost_by_brand/int_gads_campaign_stats_by_brand.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750845.758212, "compiled_sql": "with all_campaign_stats as (\n\n    select\n        account,\n        account_id,\n        date,\n        campaign_id,\n        device,\n        impressions,\n        clicks,\n        cost,\n        conversions\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaign_stats`\n\n),\n\ncampaign_names as (\n\n    select\n        campaign_id,\n        campaign_name,\n        brand\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaign_names`\n\n), \n\ncampaign_stats_by_brand as (\n\n    select\n        account,\n        account_id,\n        date,\n        brand,\n        device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum(cost) as cost,\n        sum(conversions) as conversions\n    from all_campaign_stats\n    left join campaign_names using (campaign_id)\n    group by 1,2,3,4,5\n    \n)\n\nselect * from campaign_stats_by_brand", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gads_campaign_stats_by_brand`"}, "model.sql_repository_bz.int_gads_all_product_stats_by_brand": {"raw_sql": "with grouped_product_stats as (\r\n\r\n    select\r\n        account,\r\n        account_id,\r\n        date,\r\n        brand,\r\n        device,\r\n        sum(impressions) as impressions,\r\n        sum(clicks) as clicks,\r\n        sum(cost) as cost,\r\n        sum(conversions) as conversions\r\n    from {{ ref('stg_gads_all_product_stats') }}\r\n    group by 1,2,3,4,5\r\n\r\n)\r\n\r\nselect * from grouped_product_stats", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gads_all_product_stats"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_ads", "cost_by_brand", "int_gads_all_product_stats_by_brand"], "unique_id": "model.sql_repository_bz.int_gads_all_product_stats_by_brand", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_ads/cost_by_brand/int_gads_all_product_stats_by_brand.sql", "original_file_path": "models/02_intermediate/google_ads/cost_by_brand/int_gads_all_product_stats_by_brand.sql", "name": "int_gads_all_product_stats_by_brand", "alias": "int_gads_all_product_stats_by_brand", "checksum": {"name": "sha256", "checksum": "4305aad3bb5769c59c462c2b175cfd0d6a8577fa54eaf505951f2ab8664c9e9d"}, "tags": [], "refs": [["stg_gads_all_product_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_ads/cost_by_brand/int_gads_all_product_stats_by_brand.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750845.7786605, "compiled_sql": "with grouped_product_stats as (\n\n    select\n        account,\n        account_id,\n        date,\n        brand,\n        device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum(cost) as cost,\n        sum(conversions) as conversions\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_product_stats`\n    group by 1,2,3,4,5\n\n)\n\nselect * from grouped_product_stats", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gads_all_product_stats_by_brand`"}, "model.sql_repository_bz.int_gads_all_dynamic_query_cost_by_brand": {"raw_sql": "with query_stats as (\r\n\r\n    select\r\n        date,\r\n        account,\r\n        account_id,\r\n        campaign_name,\r\n        query,\r\n        device,\r\n        cost,\r\n        clicks,\r\n        impressions,\r\n        conversions\r\n    from {{ ref('int_gads_all_query_stats')}}\r\n    where\r\n        -- only classify queries for dynamic campaigns \r\n        (campaign_name like '%SQA%' or campaign_name like '%DSA%') and\r\n        -- reduce number of queries to be classified\r\n        impressions > 2\r\n    \r\n),\r\n\r\nbrands as (\r\n    \r\n    select *\r\n    from {{ ref('stg_gmc_product_brands') }}\r\n\r\n),\r\n\r\n\r\nbrand_keywords as (\r\n\r\n    select distinct\r\n        query as search_query,\r\n        lower(brand) as brand\r\n    from query_stats\r\n    join brands\r\n        on REGEXP_CONTAINS(query_stats.query, CONCAT(r'(?i)\\b', lower(brands.brand), r'\\b'))\r\n\r\n), \r\n\r\ngrouped_query_data as (\r\n\r\n    select\r\n        * except (search_query),\r\n    from query_stats as query\r\n    left join brand_keywords as brand\r\n    on query.query = brand.search_query\r\n\r\n)\r\n\r\nselect\r\n    date,\r\n    account,\r\n    account_id,\r\n    campaign_name,\r\n    brand,\r\n    device,\r\n    sum(cost) as cost,\r\n    sum(clicks) as clicks,\r\n    sum(impressions) as impressions,\r\n    sum(conversions) as conversions\r\nfrom grouped_query_data\r\ngroup by 1,2,3,4,5,6", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gads_all_query_stats", "model.sql_repository_bz.stg_gmc_product_brands"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_ads", "cost_by_brand", "int_gads_all_dynamic_query_cost_by_brand"], "unique_id": "model.sql_repository_bz.int_gads_all_dynamic_query_cost_by_brand", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_ads/cost_by_brand/int_gads_all_dynamic_query_cost_by_brand.sql", "original_file_path": "models/02_intermediate/google_ads/cost_by_brand/int_gads_all_dynamic_query_cost_by_brand.sql", "name": "int_gads_all_dynamic_query_cost_by_brand", "alias": "int_gads_all_dynamic_query_cost_by_brand", "checksum": {"name": "sha256", "checksum": "454f72dc72488162b1bd65bb1579bf565b16c58ed64df37bf9c696951b66d2a1"}, "tags": [], "refs": [["int_gads_all_query_stats"], ["stg_gmc_product_brands"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_ads/cost_by_brand/int_gads_all_dynamic_query_cost_by_brand.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750845.7828152, "compiled_sql": "with query_stats as (\n\n    select\n        date,\n        account,\n        account_id,\n        campaign_name,\n        query,\n        device,\n        cost,\n        clicks,\n        impressions,\n        conversions\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gads_all_query_stats`\n    where\n        -- only classify queries for dynamic campaigns \n        (campaign_name like '%SQA%' or campaign_name like '%DSA%') and\n        -- reduce number of queries to be classified\n        impressions > 2\n    \n),\n\nbrands as (\n    \n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_brands`\n\n),\n\n\nbrand_keywords as (\n\n    select distinct\n        query as search_query,\n        lower(brand) as brand\n    from query_stats\n    join brands\n        on REGEXP_CONTAINS(query_stats.query, CONCAT(r'(?i)\\b', lower(brands.brand), r'\\b'))\n\n), \n\ngrouped_query_data as (\n\n    select\n        * except (search_query),\n    from query_stats as query\n    left join brand_keywords as brand\n    on query.query = brand.search_query\n\n)\n\nselect\n    date,\n    account,\n    account_id,\n    campaign_name,\n    brand,\n    device,\n    sum(cost) as cost,\n    sum(clicks) as clicks,\n    sum(impressions) as impressions,\n    sum(conversions) as conversions\nfrom grouped_query_data\ngroup by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gads_all_dynamic_query_cost_by_brand`"}, "model.sql_repository_bz.int_cp_product_attributes_90d": {"raw_sql": "with channelpilot_attributes_90d as (\r\n\r\n    select\r\n        date as w_date,\r\n        product_id as w_sku,\r\n        price_net as w_price,\r\n        price_purchase as w_price_wholesale,\r\n        /* current ipim with issues with missing prices, thus price_net can be null */\r\n        coalesce(safe_divide(price_purchase,price_net),0) as w_wholesale_to_price,\r\n        avg(price_net) over (partition by product_id) as w_price_avg,\r\n        avg(coalesce(safe_divide(price_purchase,price_net),0)) over (partition by product_id) as w_wholesale_to_price_sku_avg,\r\n        avg(coalesce(safe_divide(price_purchase,price_net),0)) over () as w_wholesale_to_price_overall_avg\r\n    from {{ ref('stg_channel_pilot_profit_bidding_90d') }}\r\n\r\n) \r\n\r\nselect * from channelpilot_attributes_90d", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "channelpilot", "int_cp_product_attributes_90d"], "unique_id": "model.sql_repository_bz.int_cp_product_attributes_90d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/channelpilot/int_cp_product_attributes_90d.sql", "original_file_path": "models/02_intermediate/channelpilot/int_cp_product_attributes_90d.sql", "name": "int_cp_product_attributes_90d", "alias": "int_cp_product_attributes_90d", "checksum": {"name": "sha256", "checksum": "9d0dfde59c0d92fd16dbd0146cc3edcf783ca1a6ace9117721ef7222b3df8abb"}, "tags": [], "refs": [["stg_channel_pilot_profit_bidding_90d"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/channelpilot/_models_int_cp.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/channelpilot/int_cp_product_attributes_90d.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.357181, "compiled_sql": "with channelpilot_attributes_90d as (\n\n    select\n        date as w_date,\n        product_id as w_sku,\n        price_net as w_price,\n        price_purchase as w_price_wholesale,\n        /* current ipim with issues with missing prices, thus price_net can be null */\n        coalesce(safe_divide(price_purchase,price_net),0) as w_wholesale_to_price,\n        avg(price_net) over (partition by product_id) as w_price_avg,\n        avg(coalesce(safe_divide(price_purchase,price_net),0)) over (partition by product_id) as w_wholesale_to_price_sku_avg,\n        avg(coalesce(safe_divide(price_purchase,price_net),0)) over () as w_wholesale_to_price_overall_avg\n    from `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_profit_bidding_90d`\n\n) \n\nselect * from channelpilot_attributes_90d", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_cp_product_attributes_90d`"}, "model.sql_repository_bz.int_cp_product_price_overall": {"raw_sql": "with channelpilot_price_overall as (\r\n\r\n    select\r\n        w_sku as wo_sku,\r\n        avg(w_price_wholesale) as wo_price_wholesale,\r\n        avg(w_wholesale_to_price_sku_avg) as wo_wholesale_to_price_sku_avg,\r\n        avg(w_wholesale_to_price_overall_avg) as wo_wholesale_to_price_overall_avg\r\n    from {{ ref('int_cp_product_attributes_90d') }}\r\n    group by 1\r\n\r\n)\r\n\r\nselect * from channelpilot_price_overall", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_cp_product_attributes_90d"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "channelpilot", "int_cp_product_price_overall"], "unique_id": "model.sql_repository_bz.int_cp_product_price_overall", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/channelpilot/int_cp_product_price_overall.sql", "original_file_path": "models/02_intermediate/channelpilot/int_cp_product_price_overall.sql", "name": "int_cp_product_price_overall", "alias": "int_cp_product_price_overall", "checksum": {"name": "sha256", "checksum": "930f3dccf0596501b28a306ce22ff666d6a42e540755727736d01b2bbe36f073"}, "tags": [], "refs": [["int_cp_product_attributes_90d"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/channelpilot/_models_int_cp.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/channelpilot/int_cp_product_price_overall.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.3580604, "compiled_sql": "with channelpilot_price_overall as (\n\n    select\n        w_sku as wo_sku,\n        avg(w_price_wholesale) as wo_price_wholesale,\n        avg(w_wholesale_to_price_sku_avg) as wo_wholesale_to_price_sku_avg,\n        avg(w_wholesale_to_price_overall_avg) as wo_wholesale_to_price_overall_avg\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_cp_product_attributes_90d`\n    group by 1\n\n)\n\nselect * from channelpilot_price_overall", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_cp_product_price_overall`"}, "model.sql_repository_bz.int_cp_source_feeds_with_errors": {"raw_sql": "with channel_pilot_feeds_ipim_with_errors as (\r\n\r\n    select\r\n        *,\r\n        if(verkaufspreis is null, 1,0) as price_is_missing,\r\n        if(uvp is null, 1,0) as price_uvp_is_missing,\r\n        if(verkaufspreis > uvp, 1,0) as price_higher_than_uvp,\r\n        if(ean is null, 1,0) as ean_is_missing,\r\n        if(base_title is null, 1,0) as base_title_is_missing,\r\n        if(externeid is null, 1,0) as externeid_is_missing,\r\n        if(short_description is null, 1,0) as description_is_missing,\r\n        if(brand is null, 1,0) as brand_is_missing,\r\n        if(category_path is null, 1,0) as category_path_is_missing\r\n    from {{ ref('stg_channel_pilot_source_feeds_ipim') }}\r\n\r\n)\r\n\r\nselect * from channel_pilot_feeds_ipim_with_errors", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "channelpilot", "int_cp_source_feeds_with_errors"], "unique_id": "model.sql_repository_bz.int_cp_source_feeds_with_errors", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/channelpilot/int_cp_source_feeds_with_errors.sql", "original_file_path": "models/02_intermediate/channelpilot/int_cp_source_feeds_with_errors.sql", "name": "int_cp_source_feeds_with_errors", "alias": "int_cp_source_feeds_with_errors", "checksum": {"name": "sha256", "checksum": "4c41afedac8f3ae3123e76a57d4977951712a566df7f115e5bbe98903020f32f"}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "this model list all channelpilot source feed skus and a classification of missing data", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/channelpilot/_models_int_cp.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/channelpilot/int_cp_source_feeds_with_errors.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.3626988, "compiled_sql": "with channel_pilot_feeds_ipim_with_errors as (\n\n    select\n        *,\n        if(verkaufspreis is null, 1,0) as price_is_missing,\n        if(uvp is null, 1,0) as price_uvp_is_missing,\n        if(verkaufspreis > uvp, 1,0) as price_higher_than_uvp,\n        if(ean is null, 1,0) as ean_is_missing,\n        if(base_title is null, 1,0) as base_title_is_missing,\n        if(externeid is null, 1,0) as externeid_is_missing,\n        if(short_description is null, 1,0) as description_is_missing,\n        if(brand is null, 1,0) as brand_is_missing,\n        if(category_path is null, 1,0) as category_path_is_missing\n    from `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\n\n)\n\nselect * from channel_pilot_feeds_ipim_with_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_cp_source_feeds_with_errors`"}, "model.sql_repository_bz.int_cp_product_price_per_day": {"raw_sql": "with channelpilot_price_per_day as (\r\n\r\n    select\r\n        w_date,\r\n        w_sku,\r\n        /* w_price, not needed*/\r\n        w_price_wholesale,\r\n        w_wholesale_to_price\r\n        /* w_price_avg, not needed */\r\n    from {{ ref('int_cp_product_attributes_90d') }}\r\n\r\n)\r\n\r\nselect * from channelpilot_price_per_day", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_cp_product_attributes_90d"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "channelpilot", "int_cp_product_price_per_day"], "unique_id": "model.sql_repository_bz.int_cp_product_price_per_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/channelpilot/int_cp_product_price_per_day.sql", "original_file_path": "models/02_intermediate/channelpilot/int_cp_product_price_per_day.sql", "name": "int_cp_product_price_per_day", "alias": "int_cp_product_price_per_day", "checksum": {"name": "sha256", "checksum": "fe43720d036abe4fb9201d13cd73a4da9dcd8e500865633e03850360ee14e3da"}, "tags": [], "refs": [["int_cp_product_attributes_90d"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/channelpilot/_models_int_cp.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/channelpilot/int_cp_product_price_per_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.3592691, "compiled_sql": "with channelpilot_price_per_day as (\n\n    select\n        w_date,\n        w_sku,\n        /* w_price, not needed*/\n        w_price_wholesale,\n        w_wholesale_to_price\n        /* w_price_avg, not needed */\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_cp_product_attributes_90d`\n\n)\n\nselect * from channelpilot_price_per_day", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_cp_product_price_per_day`"}, "model.sql_repository_bz.int_gmc_most_recent_prod_attr": {"raw_sql": "with cp_product_attributes_daily as (\r\n   \r\n   select \r\n      date as last_product_date_cp,\r\n      product_id as product_sku,\r\n      substr(product_id, 1, 7) as product_parent_id,\r\n      category as product_category,\r\n      brand as product_brand,\r\n      description as product_description,\r\n      color as product_color,\r\n      size as product_size,\r\n      concat(parent_id, '_', lower(color)) as product_parent_and_color,\r\n      gender as product_gender,\r\n      parent_title as product_parent_title,\r\n      sportart as product_sportstype,\r\n      mut as product_mut_attribute,\r\n      row_number() over(partition by product_id order by date(date) desc) as rn\r\n   from {{ ref('stg_gmc_product_attributes_daily')}}\r\n\r\n),\r\n\r\nlast_cp_attributes as (\r\n   select * except (rn)\r\n   from cp_product_attributes_daily\r\n   where rn = 1\r\n),\r\n\r\nmc_product_attributes as (\r\n\r\n   select\r\n      p_date as last_product_date_gmc,\r\n      parent_id as product_parent_id,\r\n      title_short,\r\n      top_category,\r\n      category_l1_2,\r\n      category_l_2,\r\n      category_l_3,\r\n      last_category,\r\n      row_number() over(partition by parent_id order by date(p_date) desc) as rn\r\n   from {{ ref('stg_gmc_all_products') }}\r\n   where products_country = 'de'\r\n),\r\n\r\nlast_mc_product_attributes as (\r\n   select * except (rn)\r\n   from mc_product_attributes\r\n   where rn = 1\r\n),\r\n\r\njoined_data as (\r\n   select *\r\n   from last_cp_attributes\r\n   left join last_mc_product_attributes\r\n      using(product_parent_id)\r\n)\r\n\r\nselect * from joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gmc_product_attributes_daily", "model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_most_recent_prod_attr"], "unique_id": "model.sql_repository_bz.int_gmc_most_recent_prod_attr", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_most_recent_prod_attr.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_most_recent_prod_attr.sql", "name": "int_gmc_most_recent_prod_attr", "alias": "int_gmc_most_recent_prod_attr", "checksum": {"name": "sha256", "checksum": "11385225d432bce347f460bec77a303393420dceb3aefd850159eec13bb33fdd"}, "tags": [], "refs": [["stg_gmc_product_attributes_daily"], ["stg_gmc_all_products"]], "sources": [], "description": "this model lists the most recent attributes per product sku", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_merchant_center/_models_int_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_most_recent_prod_attr.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.397773, "compiled_sql": "with cp_product_attributes_daily as (\n   \n   select \n      date as last_product_date_cp,\n      product_id as product_sku,\n      substr(product_id, 1, 7) as product_parent_id,\n      category as product_category,\n      brand as product_brand,\n      description as product_description,\n      color as product_color,\n      size as product_size,\n      concat(parent_id, '_', lower(color)) as product_parent_and_color,\n      gender as product_gender,\n      parent_title as product_parent_title,\n      sportart as product_sportstype,\n      mut as product_mut_attribute,\n      row_number() over(partition by product_id order by date(date) desc) as rn\n   from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\n\n),\n\nlast_cp_attributes as (\n   select * except (rn)\n   from cp_product_attributes_daily\n   where rn = 1\n),\n\nmc_product_attributes as (\n\n   select\n      p_date as last_product_date_gmc,\n      parent_id as product_parent_id,\n      title_short,\n      top_category,\n      category_l1_2,\n      category_l_2,\n      category_l_3,\n      last_category,\n      row_number() over(partition by parent_id order by date(p_date) desc) as rn\n   from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n   where products_country = 'de'\n),\n\nlast_mc_product_attributes as (\n   select * except (rn)\n   from mc_product_attributes\n   where rn = 1\n),\n\njoined_data as (\n   select *\n   from last_cp_attributes\n   left join last_mc_product_attributes\n      using(product_parent_id)\n)\n\nselect * from joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_most_recent_prod_attr`"}, "model.sql_repository_bz.int_gmc_prices_chf_to_eur": {"raw_sql": "with all_prices as (\r\n\r\n    select\r\n        p_date,\r\n        products_country,\r\n        brand,\r\n        top_category,\r\n        category_l_2,\r\n        offer_id as sku,\r\n        price,\r\n        currency_price\r\n    from {{ ref('stg_gmc_all_products') }}\r\n    where \r\n        p_date between {{ get_last_n_days_date_range(365) }}\r\n        and products_country in ('de','ch')\r\n\r\n),\r\n\r\nde_prices as (\r\n\r\n    select \r\n        p_date || '__' || sku as date_sku,\r\n        p_date,\r\n        brand,\r\n        top_category,\r\n        category_l_2,\r\n        sku,\r\n        price as price_eur\r\n    from all_prices\r\n    where products_country = 'de'\r\n\r\n), \r\n\r\nch_prices as (\r\n\r\n    select \r\n        p_date || '__' || sku as date_sku,\r\n        price as price_chf,\r\n    from all_prices\r\n    where \r\n      products_country = 'ch'\r\n      and price is not null\r\n\r\n), \r\n\r\njoined_price_data as (\r\n\r\n    select \r\n        p_date,\r\n        brand,\r\n        top_category,\r\n        category_l_2,\r\n        sku, \r\n        price_eur, \r\n        price_chf, \r\n        round(safe_divide(price_chf, price_eur),4) as price_chf_to_eur\r\n    from de_prices \r\n    inner join ch_prices using (date_sku)\r\n\r\n)\r\n\r\nselect * from joined_price_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_prices_chf_to_eur"], "unique_id": "model.sql_repository_bz.int_gmc_prices_chf_to_eur", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_prices_chf_to_eur.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_prices_chf_to_eur.sql", "name": "int_gmc_prices_chf_to_eur", "alias": "int_gmc_prices_chf_to_eur", "checksum": {"name": "sha256", "checksum": "4c4ea583dc7c5fafa58882b7f0989bb3d36337133a8a365073d7d2cb64eae65f"}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "this model lists the average price difference from CHF to EUR per day", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_merchant_center/_models_int_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_prices_chf_to_eur.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.4011593, "compiled_sql": "with all_prices as (\n\n    select\n        p_date,\n        products_country,\n        brand,\n        top_category,\n        category_l_2,\n        offer_id as sku,\n        price,\n        currency_price\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n    where \n        p_date between \n    date_sub(current_date(), interval 365 day)\n    and date_sub(current_date(), interval 1 day)\n\n        and products_country in ('de','ch')\n\n),\n\nde_prices as (\n\n    select \n        p_date || '__' || sku as date_sku,\n        p_date,\n        brand,\n        top_category,\n        category_l_2,\n        sku,\n        price as price_eur\n    from all_prices\n    where products_country = 'de'\n\n), \n\nch_prices as (\n\n    select \n        p_date || '__' || sku as date_sku,\n        price as price_chf,\n    from all_prices\n    where \n      products_country = 'ch'\n      and price is not null\n\n), \n\njoined_price_data as (\n\n    select \n        p_date,\n        brand,\n        top_category,\n        category_l_2,\n        sku, \n        price_eur, \n        price_chf, \n        round(safe_divide(price_chf, price_eur),4) as price_chf_to_eur\n    from de_prices \n    inner join ch_prices using (date_sku)\n\n)\n\nselect * from joined_price_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_prices_chf_to_eur`"}, "model.sql_repository_bz.int_gmc_current_brands": {"raw_sql": "/* lowercase all brand names to compare againgst shopping product groups */ \r\n\r\nwith current_brands as (\r\n\r\n    select distinct lower(brand) as brand_lower\r\n    from {{ ref('stg_gmc_all_products') }}\r\n    where \r\n        products_country = 'de' and\r\n        p_date between \r\n            date_sub(current_date(), interval 4 day) and \r\n            date_sub(current_date(), interval 0 day)\r\n    \r\n)\r\n\r\nselect * from current_brands", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_current_brands"], "unique_id": "model.sql_repository_bz.int_gmc_current_brands", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_current_brands.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_current_brands.sql", "name": "int_gmc_current_brands", "alias": "int_gmc_current_brands", "checksum": {"name": "sha256", "checksum": "f36ff055ad5344a908dc48d667224a9f59beb9dc34a47eeb3481236b389a59c5"}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "this model lists all current brands", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_merchant_center/_models_int_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_current_brands.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.3799179, "compiled_sql": "/* lowercase all brand names to compare againgst shopping product groups */ \n\nwith current_brands as (\n\n    select distinct lower(brand) as brand_lower\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n    where \n        products_country = 'de' and\n        p_date between \n            date_sub(current_date(), interval 4 day) and \n            date_sub(current_date(), interval 0 day)\n    \n)\n\nselect * from current_brands", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_current_brands`"}, "model.sql_repository_bz.int_gmc_stock_feeds_consolidated": {"raw_sql": "with product_stock_de as (\r\n    select\r\n        stock_date,\r\n        stock_product_id,\r\n        stock as stock_total,\r\n        stock_lvs,\r\n        stock_ghp, \r\n        stock_gmund,\r\n        stock_fl as stock_supplier,\r\n        indikator_fremdlager\r\n    from {{ ref('stg_gmc_product_stock') }}\r\n\r\n),\r\n\r\nprod_attr_stock_data as (\r\n    select \r\n        date as stock_date,\r\n        product_id as stock_product_id,\r\n        stock_total,\r\n        stock_lvs,\r\n        stock_ghp,\r\n        stock_gmund,\r\n        stock_supplier,\r\n        if(stock_supplier > 0, 1, 0) as indikator_fremdlager\r\n\r\n    from {{ ref('stg_gmc_product_attributes_daily') }}\r\n    -- ab hier schreiben wir den Feed weg\r\n    where date >= '2021-01-31'\r\n),\r\n\r\nunioned_data as (\r\n\r\n    select * from product_stock_de\r\n    union all\r\n    select * from prod_attr_stock_data\r\n)\r\n\r\nselect\r\n    *,\r\n    case\r\n    when stock_lvs <= 0 and stock_supplier > 0 then true\r\n    else false\r\n    end as is_only_foreign_stock\r\n\r\nfrom unioned_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gmc_product_stock", "model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_stock_feeds_consolidated"], "unique_id": "model.sql_repository_bz.int_gmc_stock_feeds_consolidated", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_stock_feeds_consolidated.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_stock_feeds_consolidated.sql", "name": "int_gmc_stock_feeds_consolidated", "alias": "int_gmc_stock_feeds_consolidated", "checksum": {"name": "sha256", "checksum": "7af8f9a8bc3725dce80fcdaab43e12780fcb3f67c065b4799b2140fa0bdb34f8"}, "tags": [], "refs": [["stg_gmc_product_stock"], ["stg_gmc_product_attributes_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_stock_feeds_consolidated.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750845.8684149, "compiled_sql": "with product_stock_de as (\n    select\n        stock_date,\n        stock_product_id,\n        stock as stock_total,\n        stock_lvs,\n        stock_ghp, \n        stock_gmund,\n        stock_fl as stock_supplier,\n        indikator_fremdlager\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_stock`\n\n),\n\nprod_attr_stock_data as (\n    select \n        date as stock_date,\n        product_id as stock_product_id,\n        stock_total,\n        stock_lvs,\n        stock_ghp,\n        stock_gmund,\n        stock_supplier,\n        if(stock_supplier > 0, 1, 0) as indikator_fremdlager\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\n    -- ab hier schreiben wir den Feed weg\n    where date >= '2021-01-31'\n),\n\nunioned_data as (\n\n    select * from product_stock_de\n    union all\n    select * from prod_attr_stock_data\n)\n\nselect\n    *,\n    case\n    when stock_lvs <= 0 and stock_supplier > 0 then true\n    else false\n    end as is_only_foreign_stock\n\nfrom unioned_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_stock_feeds_consolidated`"}, "model.sql_repository_bz.int_gmc_max_sku_count_by_parent": {"raw_sql": "with max_var_count_by_day as (\r\n\r\n    select\r\n        parent_id,\r\n        count(distinct offer_id) as max_sku_count\r\n         \r\n    from {{ ref('stg_gmc_all_products') }}\r\n    where\r\n        products_country = 'de'\r\n        and p_date between {{ get_last_n_days_date_range(180) }}\r\n    group by 1\r\n    \r\n)\r\n\r\nselect * from max_var_count_by_day", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_max_sku_count_by_parent"], "unique_id": "model.sql_repository_bz.int_gmc_max_sku_count_by_parent", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_max_sku_count_by_parent.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_max_sku_count_by_parent.sql", "name": "int_gmc_max_sku_count_by_parent", "alias": "int_gmc_max_sku_count_by_parent", "checksum": {"name": "sha256", "checksum": "29f3f5293e8d6df8940901a1bfabb4c2dcfeef01cb53cf92b79e7cdddb716af5"}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "this model lists the maximum of sku selection per parent id over a selected longer period, for inventory score", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_merchant_center/_models_int_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_max_sku_count_by_parent.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.3907216, "compiled_sql": "with max_var_count_by_day as (\n\n    select\n        parent_id,\n        count(distinct offer_id) as max_sku_count\n         \n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n    where\n        products_country = 'de'\n        and p_date between \n    date_sub(current_date(), interval 180 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1\n    \n)\n\nselect * from max_var_count_by_day", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_max_sku_count_by_parent`"}, "model.sql_repository_bz.int_gmc_avg_return_rates_by_country": {"raw_sql": "select\r\n    country as r_country,\r\n    top_category as r_top_category,\r\n    round(avg(return_rate),4) as r_return_rate_per_country_and_top_category\r\nfrom {{ ref('stg_qlik_return_rates') }}\r\ngroup by 1,2", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_qlik_return_rates"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_avg_return_rates_by_country"], "unique_id": "model.sql_repository_bz.int_gmc_avg_return_rates_by_country", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_avg_return_rates_by_country.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_avg_return_rates_by_country.sql", "name": "int_gmc_avg_return_rates_by_country", "alias": "int_gmc_avg_return_rates_by_country", "checksum": {"name": "sha256", "checksum": "ee8b1e0cbed7d7042ec6eb1454b4d71329fbd41babea16e7077dd3a88ce816d2"}, "tags": [], "refs": [["stg_qlik_return_rates"]], "sources": [], "description": "this model provides country return rates", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_merchant_center/_models_int_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_avg_return_rates_by_country.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.3661654, "compiled_sql": "select\n    country as r_country,\n    top_category as r_top_category,\n    round(avg(return_rate),4) as r_return_rate_per_country_and_top_category\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_qlik_return_rates`\ngroup by 1,2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_avg_return_rates_by_country`"}, "model.sql_repository_bz.int_gmc_avg_return_rates_overall": {"raw_sql": "with avg_data as (\r\n    \r\n    select\r\n        brand as rwc_brand,\r\n        top_category as rwc_top_category,\r\n        round(avg(return_rate) over (partition by top_category, brand),4) as rwc_return_rate_per_brand_and_top_category,\r\n        round(avg(return_rate) over (partition by top_category),4) as rwc_return_rate_per_top_category_overall,\r\n        round(avg(return_rate) over (),4) as rwc_return_rate_overall\r\n    from {{ ref('stg_qlik_return_rates') }}\r\n\r\n)\r\n\r\nselect distinct * from avg_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_qlik_return_rates"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_avg_return_rates_overall"], "unique_id": "model.sql_repository_bz.int_gmc_avg_return_rates_overall", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_avg_return_rates_overall.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_avg_return_rates_overall.sql", "name": "int_gmc_avg_return_rates_overall", "alias": "int_gmc_avg_return_rates_overall", "checksum": {"name": "sha256", "checksum": "fefc8fcc61835dd874076dd3d832f5e816dec946967ac4d6a2768e684a646c2c"}, "tags": [], "refs": [["stg_qlik_return_rates"]], "sources": [], "description": "this model provides overall return rates as fallback to country values", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_merchant_center/_models_int_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_avg_return_rates_overall.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.3698628, "compiled_sql": "with avg_data as (\n    \n    select\n        brand as rwc_brand,\n        top_category as rwc_top_category,\n        round(avg(return_rate) over (partition by top_category, brand),4) as rwc_return_rate_per_brand_and_top_category,\n        round(avg(return_rate) over (partition by top_category),4) as rwc_return_rate_per_top_category_overall,\n        round(avg(return_rate) over (),4) as rwc_return_rate_overall\n    from `bergzeit`.`dbt_analytics_staging`.`stg_qlik_return_rates`\n\n)\n\nselect distinct * from avg_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_avg_return_rates_overall`"}, "model.sql_repository_bz.int_gmc_current_brands_and_countries": {"raw_sql": "-- get list of all existing brands with full gads country list\r\nwith brands_and_country_list as (\r\n\r\n    select \r\n        brand_lower,\r\n        {{var('gads_countries')}} as countries\r\n    from \r\n        {{ref ('int_gmc_current_brands')}}\r\n\r\n),\r\n\r\n-- pivot country array to get one country-brand row, e.g. at-abk, be-abk, ch-abk etc\r\nbrands_and_split_countries as (\r\n\r\n    select\r\n        country,\r\n        brand_lower as brand\r\n    from brands_and_country_list \r\n    cross join unnest(countries) as country\r\n\r\n)\r\n\r\nselect * from brands_and_split_countries", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gmc_current_brands"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_current_brands_and_countries"], "unique_id": "model.sql_repository_bz.int_gmc_current_brands_and_countries", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_current_brands_and_countries.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_current_brands_and_countries.sql", "name": "int_gmc_current_brands_and_countries", "alias": "int_gmc_current_brands_and_countries", "checksum": {"name": "sha256", "checksum": "ff4f3f4db37fda029ecfdf59ff02d76017b091a8d264c41bc0fe7b8274c468bb"}, "tags": [], "refs": [["int_gmc_current_brands"]], "sources": [], "description": "this model lists all current brands, multiplied by available countries", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_merchant_center/_models_int_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_current_brands_and_countries.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.376605, "compiled_sql": "-- get list of all existing brands with full gads country list\nwith brands_and_country_list as (\n\n    select \n        brand_lower,\n        ['de', 'at', 'ch', 'nl', 'be', 'it', 'uk', 'dk', 'se', 'fr', 'cz', 'fi'] as countries\n    from \n        `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_current_brands`\n\n),\n\n-- pivot country array to get one country-brand row, e.g. at-abk, be-abk, ch-abk etc\nbrands_and_split_countries as (\n\n    select\n        country,\n        brand_lower as brand\n    from brands_and_country_list \n    cross join unnest(countries) as country\n\n)\n\nselect * from brands_and_split_countries", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_current_brands_and_countries`"}, "model.sql_repository_bz.int_gmc_current_season": {"raw_sql": "with sku_and_current_season as (\r\n\r\n    select distinct\r\n        product_id,\r\n        last_value(season) over (partition by product_id order by date) as current_season_flag\r\n    from {{ ref('stg_gmc_product_attributes_daily')}}\r\n    where date between date_sub(current_date(), interval 30 day) and date_sub(current_date(), interval 0 day)\r\n\r\n) \r\n\r\nselect * from sku_and_current_season", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_current_season"], "unique_id": "model.sql_repository_bz.int_gmc_current_season", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_current_season.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_current_season.sql", "name": "int_gmc_current_season", "alias": "int_gmc_current_season", "checksum": {"name": "sha256", "checksum": "4f9aa0594667d20a202281a56bd88aa3f2724781b82c89203760633042d9e3b3"}, "tags": [], "refs": [["stg_gmc_product_attributes_daily"]], "sources": [], "description": "this model lists all product sku with their current season", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_merchant_center/_models_int_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_current_season.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.3873093, "compiled_sql": "with sku_and_current_season as (\n\n    select distinct\n        product_id,\n        last_value(season) over (partition by product_id order by date) as current_season_flag\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\n    where date between date_sub(current_date(), interval 30 day) and date_sub(current_date(), interval 0 day)\n\n) \n\nselect * from sku_and_current_season", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_current_season`"}, "model.sql_repository_bz.int_gmc_current_parent_ids": {"raw_sql": "with current_parent_ids as (\r\n\r\n    select distinct parent_id \r\n    from {{ ref('stg_gmc_all_products') }}\r\n    where\r\n        products_country = 'de'\r\n        and p_date = date_sub(current_date(), interval 1 day) \r\n    \r\n)\r\n\r\nselect * from current_parent_ids", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_current_parent_ids"], "unique_id": "model.sql_repository_bz.int_gmc_current_parent_ids", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_current_parent_ids.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_current_parent_ids.sql", "name": "int_gmc_current_parent_ids", "alias": "int_gmc_current_parent_ids", "checksum": {"name": "sha256", "checksum": "83fb576a8c21d7d868f1163b5b53f192a42bcc782d6e8203eb9a9a096ea4c1b2"}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "this model lists all current parent ids", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_merchant_center/_models_int_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_current_parent_ids.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.3837867, "compiled_sql": "with current_parent_ids as (\n\n    select distinct parent_id \n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n    where\n        products_country = 'de'\n        and p_date = date_sub(current_date(), interval 1 day) \n    \n)\n\nselect * from current_parent_ids", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_current_parent_ids`"}, "model.sql_repository_bz.int_gmc_brands_to_url_format": {"raw_sql": "with gmc_all_products as (\r\n    select *\r\n    from {{ ref('stg_gmc_product_brands') }}\r\n    where brand is not null\r\n),\r\n\r\ntrim_white_space as (\r\n\r\n  select distinct trim(brand) as brand\r\n  from gmc_all_products\r\n\r\n),\r\n\r\n/* lower case brand name and substitute white space with - */\r\nremove_white_space as (\r\n\r\n    select distinct lower(replace(brand,' ', '-')) as brand\r\n    from trim_white_space\r\n\r\n),\r\n\r\n/* remove special characters at string end */\r\nremove_special_char_end as (\r\n\r\n    select trim(brand, '!,%?-.') as brand\r\n    from remove_white_space\r\n\r\n),\r\n\r\n/* remove special characters within string */\r\nremove_special_char_text as (\r\n\r\n    select replace(translate(brand, '!,%?& ', '#'),'#', '') as brand\r\n    from remove_special_char_end\r\n\r\n),\r\n\r\nreplace_umlaute as (\r\n\r\n    select\r\n        case\r\n          when brand like ('%\u00e4%') then replace(brand, '\u00e4', 'ae')\r\n          when brand like ('%\u00f6%') then replace(brand, '\u00f6', 'oe') \r\n          when brand like ('%\u00fc%') then replace(brand, '\u00fc', 'ue')\r\n          when brand like ('%\u00e5%') then replace(brand, '\u00e5', 'a')   \r\n          when brand like ('%\u00e9%') then replace(brand, '\u00e9', 'e') \r\n          when brand like ('%.%') then replace(brand, '.', '-')\r\n          when brand like ('%/%') then replace(brand, '/', '-')                                       \r\n          when brand like ('%+%') then replace(brand, '+', 'plus')  \r\n        else brand end as brand\r\n    from remove_special_char_text\r\n\r\n),\r\n\r\nremove_single_quote as (\r\n\r\n  select replace(brand,chr(39),'') as brand\r\n  from replace_umlaute\r\n\r\n)\r\n\r\nselect * from remove_single_quote\r\norder by brand asc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gmc_product_brands"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_brands_to_url_format"], "unique_id": "model.sql_repository_bz.int_gmc_brands_to_url_format", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_brands_to_url_format.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_brands_to_url_format.sql", "name": "int_gmc_brands_to_url_format", "alias": "int_gmc_brands_to_url_format", "checksum": {"name": "sha256", "checksum": "2d91206413112b00f085c63e6d02832fdba50fd7803b08626e2591b8f7e947e0"}, "tags": [], "refs": [["stg_gmc_product_brands"]], "sources": [], "description": "this model transforms the brand names from merchant center into an url ready format", "columns": {}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_merchant_center/_models_int_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_brands_to_url_format.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.373365, "compiled_sql": "with gmc_all_products as (\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_brands`\n    where brand is not null\n),\n\ntrim_white_space as (\n\n  select distinct trim(brand) as brand\n  from gmc_all_products\n\n),\n\n/* lower case brand name and substitute white space with - */\nremove_white_space as (\n\n    select distinct lower(replace(brand,' ', '-')) as brand\n    from trim_white_space\n\n),\n\n/* remove special characters at string end */\nremove_special_char_end as (\n\n    select trim(brand, '!,%?-.') as brand\n    from remove_white_space\n\n),\n\n/* remove special characters within string */\nremove_special_char_text as (\n\n    select replace(translate(brand, '!,%?& ', '#'),'#', '') as brand\n    from remove_special_char_end\n\n),\n\nreplace_umlaute as (\n\n    select\n        case\n          when brand like ('%\u00e4%') then replace(brand, '\u00e4', 'ae')\n          when brand like ('%\u00f6%') then replace(brand, '\u00f6', 'oe') \n          when brand like ('%\u00fc%') then replace(brand, '\u00fc', 'ue')\n          when brand like ('%\u00e5%') then replace(brand, '\u00e5', 'a')   \n          when brand like ('%\u00e9%') then replace(brand, '\u00e9', 'e') \n          when brand like ('%.%') then replace(brand, '.', '-')\n          when brand like ('%/%') then replace(brand, '/', '-')                                       \n          when brand like ('%+%') then replace(brand, '+', 'plus')  \n        else brand end as brand\n    from remove_special_char_text\n\n),\n\nremove_single_quote as (\n\n  select replace(brand,chr(39),'') as brand\n  from replace_umlaute\n\n)\n\nselect * from remove_single_quote\norder by brand asc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_brands_to_url_format`"}, "model.sql_repository_bz.int_gmc_product_categories": {"raw_sql": "-- split product categories that contain more than one keyword and are separated by &\r\nwith extract_product_categories as (\r\n    select distinct\r\n        trim(lower(split(last_category, '&')[safe_offset(0)]))\r\n        as last_category\r\n    from {{ ref('stg_gmc_all_products') }}\r\n    where last_category is not null\r\n    and not regexp_contains(last_category, '^-?[0-9.]+$')\r\n\r\n    union all\r\n    \r\n    select distinct\r\n        trim(lower(split(last_category, '&')[safe_offset(1)]))\r\n        as last_category\r\n    from {{ ref('stg_gmc_all_products') }}\r\n    where last_category is not null\r\n    and not regexp_contains(last_category, '^-?[0-9.]+$')\r\n    \r\n\r\n),\r\n\r\nsingular_product_categories as(\r\n    select\r\n        case \r\n            when last_category like('%hosen%') then replace(last_category,'hosen','hose')\r\n            when last_category like('%jacken%') then replace(last_category,'jacken','jacke')\r\n            when last_category like('%s\u00e4cke%') then replace(last_category,'s\u00e4cke','sack')\r\n            when last_category like('%matten%') then replace(last_category,'matten','matte')\r\n            when last_category like('%hosen%') then replace(last_category,'hosen','hose')\r\n            when last_category like('%flaschen%') then replace(last_category,'flaschen','flasche')\r\n            when last_category like('%ger\u00e4te%') then replace(last_category,'ger\u00e4te','ger\u00e4t')\r\n            when last_category like('%t\u00fccher%') then replace(last_category,'t\u00fccher','tuch')\r\n            when last_category like('%taschen%') then replace(last_category,'taschen','tasche')\r\n            when last_category like('%uhren%') then replace(last_category,'uhren','uhr')\r\n            when last_category like('%z\u00fcge%') then replace(last_category,'z\u00fcge','zug')\r\n            when last_category like('%schlingen%') then replace(last_category,'schlingen','schlinge')\r\n            when last_category like('%brillen%') then replace(last_category,'brillen','brille')\r\n            when last_category like('%helme%') then replace(last_category,'helme','helm')\r\n            when last_category like('%sticks%') then replace(last_category,'sticks','stick')\r\n            when last_category like('%bindungen%') then replace(last_category,'bindungen','bindung')\r\n            when last_category like('%sleeves%') then replace(last_category,'sleeves','sleeve')\r\n            when last_category like('%trikots%') then replace(last_category,'trikots','trikot')\r\n            when last_category like('schuh') then replace(last_category,'schuh', null)\r\n            else last_category\r\n        end as last_category_cleaned\r\n    from extract_product_categories\r\n),\r\n\r\nshortened_product_categories as(\r\n    select\r\n        case \r\n            when last_category_cleaned like('%fahrrad%') then replace(last_category_cleaned,'fahrrad','rad')\r\n            when last_category_cleaned like('hose') then replace(last_category_cleaned,'hose',' hose')\r\n            when last_category_cleaned like('jacke') then replace(last_category_cleaned,'jacke',' jacke')\r\n            when last_category_cleaned like('schuhe') then replace(last_category_cleaned,'schuhe',' schuhe')\r\n            when last_category_cleaned like('rucksack') then replace(last_category_cleaned,'rucksack',' rucksack')\r\n            else last_category_cleaned\r\n        end as last_category_short\r\n    from singular_product_categories\r\n\r\n)\r\n\r\n\r\nselect distinct * from shortened_product_categories\r\nwhere last_category_short is not null\r\nORDER BY char_length(last_category_short) desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gmc_all_products", "model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_product_categories"], "unique_id": "model.sql_repository_bz.int_gmc_product_categories", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_product_categories.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_product_categories.sql", "name": "int_gmc_product_categories", "alias": "int_gmc_product_categories", "checksum": {"name": "sha256", "checksum": "074e75a99b436401cec1f20ed2afaf01918cbd570bb8b97633feef62483d6e40"}, "tags": [], "refs": [["stg_gmc_all_products"], ["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_product_categories.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750845.9571507, "compiled_sql": "-- split product categories that contain more than one keyword and are separated by &\nwith extract_product_categories as (\n    select distinct\n        trim(lower(split(last_category, '&')[safe_offset(0)]))\n        as last_category\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n    where last_category is not null\n    and not regexp_contains(last_category, '^-?[0-9.]+$')\n\n    union all\n    \n    select distinct\n        trim(lower(split(last_category, '&')[safe_offset(1)]))\n        as last_category\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n    where last_category is not null\n    and not regexp_contains(last_category, '^-?[0-9.]+$')\n    \n\n),\n\nsingular_product_categories as(\n    select\n        case \n            when last_category like('%hosen%') then replace(last_category,'hosen','hose')\n            when last_category like('%jacken%') then replace(last_category,'jacken','jacke')\n            when last_category like('%s\u00e4cke%') then replace(last_category,'s\u00e4cke','sack')\n            when last_category like('%matten%') then replace(last_category,'matten','matte')\n            when last_category like('%hosen%') then replace(last_category,'hosen','hose')\n            when last_category like('%flaschen%') then replace(last_category,'flaschen','flasche')\n            when last_category like('%ger\u00e4te%') then replace(last_category,'ger\u00e4te','ger\u00e4t')\n            when last_category like('%t\u00fccher%') then replace(last_category,'t\u00fccher','tuch')\n            when last_category like('%taschen%') then replace(last_category,'taschen','tasche')\n            when last_category like('%uhren%') then replace(last_category,'uhren','uhr')\n            when last_category like('%z\u00fcge%') then replace(last_category,'z\u00fcge','zug')\n            when last_category like('%schlingen%') then replace(last_category,'schlingen','schlinge')\n            when last_category like('%brillen%') then replace(last_category,'brillen','brille')\n            when last_category like('%helme%') then replace(last_category,'helme','helm')\n            when last_category like('%sticks%') then replace(last_category,'sticks','stick')\n            when last_category like('%bindungen%') then replace(last_category,'bindungen','bindung')\n            when last_category like('%sleeves%') then replace(last_category,'sleeves','sleeve')\n            when last_category like('%trikots%') then replace(last_category,'trikots','trikot')\n            when last_category like('schuh') then replace(last_category,'schuh', null)\n            else last_category\n        end as last_category_cleaned\n    from extract_product_categories\n),\n\nshortened_product_categories as(\n    select\n        case \n            when last_category_cleaned like('%fahrrad%') then replace(last_category_cleaned,'fahrrad','rad')\n            when last_category_cleaned like('hose') then replace(last_category_cleaned,'hose',' hose')\n            when last_category_cleaned like('jacke') then replace(last_category_cleaned,'jacke',' jacke')\n            when last_category_cleaned like('schuhe') then replace(last_category_cleaned,'schuhe',' schuhe')\n            when last_category_cleaned like('rucksack') then replace(last_category_cleaned,'rucksack',' rucksack')\n            else last_category_cleaned\n        end as last_category_short\n    from singular_product_categories\n\n)\n\n\nselect distinct * from shortened_product_categories\nwhere last_category_short is not null\nORDER BY char_length(last_category_short) desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_product_categories`"}, "model.sql_repository_bz.int_gmc_missing_product_groups": {"raw_sql": "-- fetch all brand and countries\r\nwith brands_and_split_countries as (\r\n\r\n    select \r\n        brand, \r\n        country\r\n    from {{ ref ('int_gmc_current_brands_and_countries') }}\r\n\r\n), \r\n\r\n-- fetch all smart shopping product groups\r\nexisting_product_groups as (\r\n\r\n    select \r\n        country as p_country, \r\n        account_id,\r\n        campaign_name,\r\n        adgroup_name,\r\n        shopping_product_group, \r\n        brand as p_brand\r\n    from {{ ref('int_gads_all_shopping_criteria') }}\r\n\r\n), \r\n\r\n\r\n\r\n-- compare all brand and country list against existing product groups to identify missing\r\nmissing_product_groups as (\r\n\r\n    select \r\n        country,\r\n        brand\r\n    from brands_and_split_countries as brands\r\n    left join existing_product_groups as products on\r\n        brands.country = products.p_country and \r\n        brands.brand = products.p_brand\r\n    -- find brands that are not yet product groups   \r\n    where products.p_brand is null\r\n\r\n)\r\n\r\nselect * from missing_product_groups", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gmc_current_brands_and_countries", "model.sql_repository_bz.int_gads_all_shopping_criteria"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_missing_product_groups"], "unique_id": "model.sql_repository_bz.int_gmc_missing_product_groups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_missing_product_groups.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_missing_product_groups.sql", "name": "int_gmc_missing_product_groups", "alias": "int_gmc_missing_product_groups", "checksum": {"name": "sha256", "checksum": "d2f969aa834455a282497a3edb69f62fd732127054ad9207e6e169acdcbbbb2b"}, "tags": [], "refs": [["int_gmc_current_brands_and_countries"], ["int_gads_all_shopping_criteria"]], "sources": [], "description": "this model lists all missing products groups the Google Shopping product group refresher", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_merchant_center/_models_int_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_missing_product_groups.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.3945246, "compiled_sql": "-- fetch all brand and countries\nwith brands_and_split_countries as (\n\n    select \n        brand, \n        country\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_current_brands_and_countries`\n\n), \n\n-- fetch all smart shopping product groups\nexisting_product_groups as (\n\n    select \n        country as p_country, \n        account_id,\n        campaign_name,\n        adgroup_name,\n        shopping_product_group, \n        brand as p_brand\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gads_all_shopping_criteria`\n\n), \n\n\n\n-- compare all brand and country list against existing product groups to identify missing\nmissing_product_groups as (\n\n    select \n        country,\n        brand\n    from brands_and_split_countries as brands\n    left join existing_product_groups as products on\n        brands.country = products.p_country and \n        brands.brand = products.p_brand\n    -- find brands that are not yet product groups   \n    where products.p_brand is null\n\n)\n\nselect * from missing_product_groups", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_missing_product_groups`"}, "model.sql_repository_bz.int_gmc_sku_count_by_day": {"raw_sql": "with current_parent_ids as (\r\n\r\n    select *\r\n    from {{ ref('int_gmc_current_parent_ids') }}\r\n    \r\n),\r\n\r\nmax_sku_count as (\r\n\r\n    select * \r\n    from {{ ref('int_gmc_max_sku_count_by_parent')}}\r\n    \r\n),\r\n\r\nsku_count_by_day as (\r\n\r\n    select\r\n        products_country as account, \r\n        p_date,\r\n        -- currently only on parent level,\r\n        parent_id, \r\n        -- parent_and_color,\r\n        brand,\r\n        top_category, \r\n        category_l1_2,\r\n        category_l_2, \r\n        category_l_3,\r\n        count(parent_id) as sku_count\r\n         \r\n    from {{ ref('stg_gmc_all_products') }}\r\n    where\r\n        products_country = 'de'\r\n        and p_date between {{ get_last_n_days_date_range(60) }}\r\n    group by 1,2,3,4,5,6,7,8\r\n    \r\n), \r\n\r\nsku_count_of_current_parents_to_max_skus as (\r\n\r\n    select *\r\n    from sku_count_by_day\r\n    inner join current_parent_ids using (parent_id)\r\n    left join max_sku_count using (parent_id)\r\n\r\n)\r\n\r\nselect * from sku_count_of_current_parents_to_max_skus", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.int_gmc_current_parent_ids", "model.sql_repository_bz.int_gmc_max_sku_count_by_parent", "model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_sku_count_by_day"], "unique_id": "model.sql_repository_bz.int_gmc_sku_count_by_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_sku_count_by_day.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_sku_count_by_day.sql", "name": "int_gmc_sku_count_by_day", "alias": "int_gmc_sku_count_by_day", "checksum": {"name": "sha256", "checksum": "143877d9b59ee33c5cfdf4a7f36ea5abb360dacfa30c40125dbfd0e8b541bb5c"}, "tags": [], "refs": [["int_gmc_current_parent_ids"], ["int_gmc_max_sku_count_by_parent"], ["stg_gmc_all_products"]], "sources": [], "description": "this model calculates sku info per parent article per day, including sku count to calculate inventory score", "columns": {"parent_id": {"name": "parent_id", "description": "the id of the product parent, e.g. 1063146 instead of 1063146-026 (SKU)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account": {"name": "account", "description": "the country of the merchant center account data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "p_date": {"name": "p_date", "description": "the y-m-d date of the product information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_category": {"name": "top_category", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_l1_2": {"name": "category_l1_2", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_l_2": {"name": "category_l_2", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_l_3": {"name": "category_l_3", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sku_count": {"name": "sku_count", "description": "this column counts the current number of skus per parent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_sku_count": {"name": "max_sku_count", "description": "this column looks back 90 days to find the maximum available sku count for that parentid.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_merchant_center/_models_int_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_sku_count_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.413412, "compiled_sql": "with current_parent_ids as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_current_parent_ids`\n    \n),\n\nmax_sku_count as (\n\n    select * \n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_max_sku_count_by_parent`\n    \n),\n\nsku_count_by_day as (\n\n    select\n        products_country as account, \n        p_date,\n        -- currently only on parent level,\n        parent_id, \n        -- parent_and_color,\n        brand,\n        top_category, \n        category_l1_2,\n        category_l_2, \n        category_l_3,\n        count(parent_id) as sku_count\n         \n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n    where\n        products_country = 'de'\n        and p_date between \n    date_sub(current_date(), interval 60 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1,2,3,4,5,6,7,8\n    \n), \n\nsku_count_of_current_parents_to_max_skus as (\n\n    select *\n    from sku_count_by_day\n    inner join current_parent_ids using (parent_id)\n    left join max_sku_count using (parent_id)\n\n)\n\nselect * from sku_count_of_current_parents_to_max_skus", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_sku_count_by_day`"}, "model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day": {"raw_sql": "with cp_product_attributes_daily as (\r\n\r\n    select \r\n        'de' as cp_country,\r\n        date,\r\n        product_id,\r\n        season as product_season,\r\n        price_gross,\r\n        uvp,\r\n        avg_discount_rounded,\r\n        avg_discount_groups_custom,\r\n        avg_price_groups_custom,\r\n        avg_price_groups_custom_sort_index,\r\n        price_purchase,\r\n        is_special_item\r\n    from {{ ref('stg_gmc_product_attributes_daily') }}\r\n    where date between  {{ get_last_n_days_date_range(31) }}\r\n          or date between {{ get_last_n_days_prev_year(31) }}\r\n          or date = current_date()\r\n\r\n), \r\n\r\nmc_daily_product_data as (\r\n\r\n    select \r\n        products_country,\r\n        p_date,\r\n        offer_id,\r\n        --parent_id, andere Tabelle\r\n        -- url_noutm, nicht verwendet\r\n        --parent_and_color, andere Tabelle\r\n        --product_gtin, nicht verwendet\r\n        --title_short, neue Tabelle\r\n        --top_category, neue Tabelle\r\n        --category_l1_2, neue Tabelle\r\n        --category_l_2, neue Tabelle\r\n        --category_l_3, neue Tabelle\r\n        --age_group, nicht verwendet\r\n        --brand, andere Tabelle\r\n        -- color, andere Tabelle\r\n        -- size, andere Tabelle\r\n        -- gender, andere Tabelle\r\n        gmc_availability,\r\n        price_uvp,\r\n        currency_price_uvp,\r\n        price,\r\n        currency_price\r\n    from {{ ref('stg_gmc_all_products') }} \r\n    where \r\n        p_date = current_date()\r\n        or p_date between  {{ get_last_n_days_date_range(31) }}\r\n        or p_date between {{ get_last_n_days_prev_year(31) }}\r\n\r\n),\r\n\r\nslow_changing_product_attributes as (\r\n\r\n    select *\r\n    from {{ ref('int_gmc_most_recent_prod_attr') }}\r\n),\r\n\r\ndaily_stock_data as (\r\n\r\n    select\r\n        stock_date,\r\n        stock_product_id,\r\n        stock_total,\r\n        stock_lvs,\r\n        stock_ghp, \r\n        stock_gmund,\r\n        stock_supplier,\r\n        indikator_fremdlager,\r\n        is_only_foreign_stock\r\n    from {{ ref('int_gmc_stock_feeds_consolidated') }}\r\n    where stock_date between  {{ get_last_n_days_date_range(31) }}\r\n          or stock_date between {{ get_last_n_days_prev_year(31) }}\r\n\r\n), \r\n\r\nproduct_stock_and_attributes_daily as (\r\n\r\n    select * except(stock_date, stock_product_id, offer_id, p_date, product_sku)\r\n    from cp_product_attributes_daily as attributes \r\n\r\n    /* join on product_sku, no date */\r\n    left join slow_changing_product_attributes sc\r\n        on attributes.product_id = sc.product_sku\r\n\r\n    /* one-to-one join */\r\n    left join daily_stock_data as stock \r\n        on attributes.date = stock.stock_date\r\n        and attributes.product_id = stock.stock_product_id\r\n    /* one-to-one join  */\r\n    /* outer join to also get today's data from cp product attributes*/\r\n    left join mc_daily_product_data as product \r\n        on product.p_date = attributes.date\r\n        and product.offer_id = attributes.product_id\r\n        and product.products_country = attributes.cp_country\r\n\r\n)\r\n\r\nselect \r\n    * except (product_id),\r\n    product_id as offer_id\r\nfrom product_stock_and_attributes_daily", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range", "macro.sql_repository_bz.get_last_n_days_prev_year"], "nodes": ["model.sql_repository_bz.stg_gmc_product_attributes_daily", "model.sql_repository_bz.stg_gmc_all_products", "model.sql_repository_bz.int_gmc_most_recent_prod_attr", "model.sql_repository_bz.int_gmc_stock_feeds_consolidated"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_merchant_center", "int_gmc_product_attr_and_stock_by_day"], "unique_id": "model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_merchant_center/int_gmc_product_attr_and_stock_by_day.sql", "original_file_path": "models/02_intermediate/google_merchant_center/int_gmc_product_attr_and_stock_by_day.sql", "name": "int_gmc_product_attr_and_stock_by_day", "alias": "int_gmc_product_attr_and_stock_by_day", "checksum": {"name": "sha256", "checksum": "3f2682f7e9bc3e88d7419e4091a162d6ac90d66945fead0fe18be6d3dc41536e"}, "tags": [], "refs": [["stg_gmc_product_attributes_daily"], ["stg_gmc_all_products"], ["int_gmc_most_recent_prod_attr"], ["int_gmc_stock_feeds_consolidated"]], "sources": [], "description": "this model joins product attributes from both, b&m and a&o feeds (products and stock) - only for DE - collecting all available attributes", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_merchant_center/_models_int_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_merchant_center/int_gmc_product_attr_and_stock_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.401801, "compiled_sql": "with cp_product_attributes_daily as (\n\n    select \n        'de' as cp_country,\n        date,\n        product_id,\n        season as product_season,\n        price_gross,\n        uvp,\n        avg_discount_rounded,\n        avg_discount_groups_custom,\n        avg_price_groups_custom,\n        avg_price_groups_custom_sort_index,\n        price_purchase,\n        is_special_item\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\n    where date between  \n    date_sub(current_date(), interval 31 day)\n    and date_sub(current_date(), interval 1 day)\n\n          or date between \n    -- get date n days ago of last year\n    date_sub(date_sub(current_date(), interval 1 year), interval 31 day)\n    -- get yesterday last year\n    and date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n          or date = current_date()\n\n), \n\nmc_daily_product_data as (\n\n    select \n        products_country,\n        p_date,\n        offer_id,\n        --parent_id, andere Tabelle\n        -- url_noutm, nicht verwendet\n        --parent_and_color, andere Tabelle\n        --product_gtin, nicht verwendet\n        --title_short, neue Tabelle\n        --top_category, neue Tabelle\n        --category_l1_2, neue Tabelle\n        --category_l_2, neue Tabelle\n        --category_l_3, neue Tabelle\n        --age_group, nicht verwendet\n        --brand, andere Tabelle\n        -- color, andere Tabelle\n        -- size, andere Tabelle\n        -- gender, andere Tabelle\n        gmc_availability,\n        price_uvp,\n        currency_price_uvp,\n        price,\n        currency_price\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products` \n    where \n        p_date = current_date()\n        or p_date between  \n    date_sub(current_date(), interval 31 day)\n    and date_sub(current_date(), interval 1 day)\n\n        or p_date between \n    -- get date n days ago of last year\n    date_sub(date_sub(current_date(), interval 1 year), interval 31 day)\n    -- get yesterday last year\n    and date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n\n),\n\nslow_changing_product_attributes as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_most_recent_prod_attr`\n),\n\ndaily_stock_data as (\n\n    select\n        stock_date,\n        stock_product_id,\n        stock_total,\n        stock_lvs,\n        stock_ghp, \n        stock_gmund,\n        stock_supplier,\n        indikator_fremdlager,\n        is_only_foreign_stock\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_stock_feeds_consolidated`\n    where stock_date between  \n    date_sub(current_date(), interval 31 day)\n    and date_sub(current_date(), interval 1 day)\n\n          or stock_date between \n    -- get date n days ago of last year\n    date_sub(date_sub(current_date(), interval 1 year), interval 31 day)\n    -- get yesterday last year\n    and date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n\n), \n\nproduct_stock_and_attributes_daily as (\n\n    select * except(stock_date, stock_product_id, offer_id, p_date, product_sku)\n    from cp_product_attributes_daily as attributes \n\n    /* join on product_sku, no date */\n    left join slow_changing_product_attributes sc\n        on attributes.product_id = sc.product_sku\n\n    /* one-to-one join */\n    left join daily_stock_data as stock \n        on attributes.date = stock.stock_date\n        and attributes.product_id = stock.stock_product_id\n    /* one-to-one join  */\n    /* outer join to also get today's data from cp product attributes*/\n    left join mc_daily_product_data as product \n        on product.p_date = attributes.date\n        and product.offer_id = attributes.product_id\n        and product.products_country = attributes.cp_country\n\n)\n\nselect \n    * except (product_id),\n    product_id as offer_id\nfrom product_stock_and_attributes_daily", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gmc_product_attr_and_stock_by_day`"}, "model.sql_repository_bz.int_consentless_transactions_eur": {"raw_sql": "with consentless_data as (\r\n\r\n    select *\r\n    from {{ ref('stg_consentless_transactions') }}\r\n\r\n),\r\n\r\ncurrency_data as (\r\n\r\n    select *\r\n    from {{ ref('stg_gsheets_currency_factor_all_countries') }}\r\n\r\n),\r\n\r\njoined_data as (\r\n\r\n    select * except(currency_date, currency_code)\r\n    from consentless_data as con\r\n    left join currency_data as cd\r\n        on con.date = cd.currency_date\r\n        and con.transaction_currency = cd.currency_code\r\n\r\n)\r\n\r\nselect\r\n    *,\r\n    -- transform to EUR if currency is not EUR by multiplying with currency factor\r\n    if(currency_factor is null, transaction_value, transaction_value * currency_factor) as transaction_value_eur\r\nfrom joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_consentless_transactions", "model.sql_repository_bz.stg_gsheets_currency_factor_all_countries"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "consentless", "int_consentless_transactions_eur"], "unique_id": "model.sql_repository_bz.int_consentless_transactions_eur", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/consentless/int_consentless_transactions_eur.sql", "original_file_path": "models/02_intermediate/consentless/int_consentless_transactions_eur.sql", "name": "int_consentless_transactions_eur", "alias": "int_consentless_transactions_eur", "checksum": {"name": "sha256", "checksum": "01d31d1004ec64e5be415856dbf923caa28d057fd0caacab97a10d25a5d27c38"}, "tags": [], "refs": [["stg_consentless_transactions"], ["stg_gsheets_currency_factor_all_countries"]], "sources": [], "description": "takes consentless ishop transactions and transforms transaction value from local currency to EUR", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/consentless/_models_int_consentless.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/consentless/int_consentless_transactions_eur.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.414617, "compiled_sql": "with consentless_data as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions`\n\n),\n\ncurrency_data as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_all_countries`\n\n),\n\njoined_data as (\n\n    select * except(currency_date, currency_code)\n    from consentless_data as con\n    left join currency_data as cd\n        on con.date = cd.currency_date\n        and con.transaction_currency = cd.currency_code\n\n)\n\nselect\n    *,\n    -- transform to EUR if currency is not EUR by multiplying with currency factor\n    if(currency_factor is null, transaction_value, transaction_value * currency_factor) as transaction_value_eur\nfrom joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_consentless_transactions_eur`"}, "model.sql_repository_bz.int_consentless_offline_pages": {"raw_sql": "with consentless_offline_pages as (\r\n\r\n  select\r\n      hittype,\r\n      date,\r\n      datetime,\r\n      pagepath,\r\n      host,\r\n      browser,\r\n      current_timestamp_utc,\r\n      hit_timestamp_utc\r\n  from {{ ref('stg_consentless_page_views_live') }}\r\n  where\r\n    date = current_date()\r\n    and timestamp(datetime, \"Europe/Berlin\") between timestamp_sub(current_timestamp(), interval 60 minute)  and current_timestamp()\r\n    and pagePath like '%offline%'\r\n\r\n)\r\n\r\nselect * from consentless_offline_pages", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_consentless_page_views_live"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "consentless", "int_consentless_offline_pages"], "unique_id": "model.sql_repository_bz.int_consentless_offline_pages", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/consentless/int_consentless_offline_pages.sql", "original_file_path": "models/02_intermediate/consentless/int_consentless_offline_pages.sql", "name": "int_consentless_offline_pages", "alias": "int_consentless_offline_pages", "checksum": {"name": "sha256", "checksum": "47b245e10a477f2c1b3e357b61b40a96607251465f2a41f33efe8d54d102e545"}, "tags": [], "refs": [["stg_consentless_page_views_live"]], "sources": [], "description": "takes consentless ishop pageviews and filters for offline pages in the last 60 min", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/consentless/_models_int_consentless.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/consentless/int_consentless_offline_pages.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.4155328, "compiled_sql": "with consentless_offline_pages as (\n\n  select\n      hittype,\n      date,\n      datetime,\n      pagepath,\n      host,\n      browser,\n      current_timestamp_utc,\n      hit_timestamp_utc\n  from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_page_views_live`\n  where\n    date = current_date()\n    and timestamp(datetime, \"Europe/Berlin\") between timestamp_sub(current_timestamp(), interval 60 minute)  and current_timestamp()\n    and pagePath like '%offline%'\n\n)\n\nselect * from consentless_offline_pages", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_consentless_offline_pages`"}, "model.sql_repository_bz.int_consentless_transactions_aggr_by_day_country": {"raw_sql": "with consentless_data_ishop as (\r\n    \r\n    select\r\n        date,\r\n        session_id,\r\n        replace(concat('https://', host), '.gb', '.co.uk') as host,\r\n        gclid,\r\n        consentPurpose_cc4,\r\n        transaction_id,\r\n        transaction_value_eur as transaction_value,\r\n        'EUR' as transaction_currency\r\n    from {{ ref('int_consentless_transactions_eur') }}\r\n    where date > '2022-02-24' /*between {{ get_financial_year_to_yesterday_date_range() }} */\r\n    and host not like '%outdoorbroker%'\r\n),\r\n\r\naggr_consentless_data_ishop as (\r\n\r\n    select \r\n        date,\r\n        split(host,'.')[safe_offset(2)] as hostname,\r\n        transaction_currency,\r\n        round(sum(transaction_value),2) as sum_transaction_value\r\n    from consentless_data_ishop\r\n    group by 1,2,3\r\n\r\n)\r\n\r\nselect * from aggr_consentless_data_ishop", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_financial_year_to_yesterday_date_range"], "nodes": ["model.sql_repository_bz.int_consentless_transactions_eur"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "consentless", "int_consentless_transactions_aggr_by_day_country"], "unique_id": "model.sql_repository_bz.int_consentless_transactions_aggr_by_day_country", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/consentless/int_consentless_transactions_aggr_by_day_country.sql", "original_file_path": "models/02_intermediate/consentless/int_consentless_transactions_aggr_by_day_country.sql", "name": "int_consentless_transactions_aggr_by_day_country", "alias": "int_consentless_transactions_aggr_by_day_country", "checksum": {"name": "sha256", "checksum": "ebbfce2182d87008ca469f0ce46bde9371b1aa9a5f264f70d63d822aaec7c03a"}, "tags": [], "refs": [["int_consentless_transactions_eur"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/consentless/int_consentless_transactions_aggr_by_day_country.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.0588746, "compiled_sql": "with consentless_data_ishop as (\n    \n    select\n        date,\n        session_id,\n        replace(concat('https://', host), '.gb', '.co.uk') as host,\n        gclid,\n        consentPurpose_cc4,\n        transaction_id,\n        transaction_value_eur as transaction_value,\n        'EUR' as transaction_currency\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_consentless_transactions_eur`\n    where date > '2022-02-24' /*between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n */\n    and host not like '%outdoorbroker%'\n),\n\naggr_consentless_data_ishop as (\n\n    select \n        date,\n        split(host,'.')[safe_offset(2)] as hostname,\n        transaction_currency,\n        round(sum(transaction_value),2) as sum_transaction_value\n    from consentless_data_ishop\n    group by 1,2,3\n\n)\n\nselect * from aggr_consentless_data_ishop", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_consentless_transactions_aggr_by_day_country`"}, "model.sql_repository_bz.int_awin_transactions_pending": {"raw_sql": "with all_awin_transactions_pending as (\r\n\r\n    select {{ dbt_utils.star(ref('stg_awin_orders_all')) }}\r\n    from {{ ref('stg_awin_orders_all') }}\r\n    where commission_status = 'pending'\r\n\r\n)\r\n\r\nselect * from all_awin_transactions_pending", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.sql_repository_bz.stg_awin_orders_all", "model.sql_repository_bz.stg_awin_orders_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "awin", "int_awin_transactions_pending"], "unique_id": "model.sql_repository_bz.int_awin_transactions_pending", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/awin/int_awin_transactions_pending.sql", "original_file_path": "models/02_intermediate/awin/int_awin_transactions_pending.sql", "name": "int_awin_transactions_pending", "alias": "int_awin_transactions_pending", "checksum": {"name": "sha256", "checksum": "04a2ffe2a2567640fcadadd96a8d6c952dd1dfa8d953c774167bc4ae4ec63664"}, "tags": [], "refs": [["stg_awin_orders_all"], ["stg_awin_orders_all"]], "sources": [], "description": "the model lists all awin transactions fetched via the API and filters by status pending. For tests, see stg file.", "columns": {"order_id": {"name": "order_id", "description": "the order identifier provided via the sales tag, i.e. the ishop order id", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/awin/_models_int_awin.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/awin/int_awin_transactions_pending.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.4203875, "compiled_sql": "with all_awin_transactions_pending as (\n\n    select \n\n    `awin_date`,\n  `awin_timestamp`,\n  `advertiser_country`,\n  `advertiser_id`,\n  `commission_status`,\n  `order_id_awin`,\n  `order_id`,\n  `publisher_id`,\n  `site_name`,\n  `commission_amount`,\n  `commission_currency`,\n  `sale_amount_awin`,\n  `sale_amount_currency`,\n  `commission_group_code`\n    from `bergzeit`.`dbt_analytics_staging`.`stg_awin_orders_all`\n    where commission_status = 'pending'\n\n)\n\nselect * from all_awin_transactions_pending", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_awin_transactions_pending`"}, "model.sql_repository_bz.int_ga_cart_products_and_prod_attr": {"raw_sql": "with transaction_products as (\r\n    select\r\n\r\n        ga_date,\r\n        ga_hostname,\r\n        ga_account as g_country_domain,\r\n        ga_transaction_id,\r\n        ga_productid,\r\n        left(ga_productid, 7) as g_product_parent,\r\n        ga_brand,\r\n        ga_product_category,\r\n        ga_product_revenue,\r\n        ga_product_quantity,  \r\n        ga_transaction_revenue,\r\n        --ROUND(product.productPrice / 1000000,2) AS g_product_price\r\n    from\r\n        {{ ref('stg_ga_product_checkouts') }}\r\n    where\r\n        ga_date between {{get_last_n_days_date_range(30)}}\r\n),\r\n\r\n-- fetch product attributes\r\nproduct_attributes as (\r\n    select \r\n        date,\r\n        product_id,\r\n        category,\r\n        color,\r\n        size\r\n\r\n    from {{ ref('stg_gmc_product_attributes_daily') }}\r\n    where \r\n        date between {{get_last_n_days_date_range(30)}}\r\n),\r\n\r\n-- join transactions with product info\r\n\r\njoined_data as (\r\n    select * except (date, product_id)\r\n    from transaction_products \r\n    left join product_attributes\r\n        on ga_date = date \r\n        and ga_productid = product_id\r\n\r\n)\r\n\r\nselect * from joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_ga_product_checkouts", "model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "int_ga_cart_products_and_prod_attr"], "unique_id": "model.sql_repository_bz.int_ga_cart_products_and_prod_attr", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/int_ga_cart_products_and_prod_attr.sql", "original_file_path": "models/02_intermediate/google_analytics/int_ga_cart_products_and_prod_attr.sql", "name": "int_ga_cart_products_and_prod_attr", "alias": "int_ga_cart_products_and_prod_attr", "checksum": {"name": "sha256", "checksum": "07d66f1e5ae6a76e048c8ebdf5df682c93c8325f5e4ba63d7e61ede4ff2fdafe"}, "tags": [], "refs": [["stg_ga_product_checkouts"], ["stg_gmc_product_attributes_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/int_ga_cart_products_and_prod_attr.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.1361327, "compiled_sql": "with transaction_products as (\n    select\n\n        ga_date,\n        ga_hostname,\n        ga_account as g_country_domain,\n        ga_transaction_id,\n        ga_productid,\n        left(ga_productid, 7) as g_product_parent,\n        ga_brand,\n        ga_product_category,\n        ga_product_revenue,\n        ga_product_quantity,  \n        ga_transaction_revenue,\n        --ROUND(product.productPrice / 1000000,2) AS g_product_price\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_product_checkouts`\n    where\n        ga_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n),\n\n-- fetch product attributes\nproduct_attributes as (\n    select \n        date,\n        product_id,\n        category,\n        color,\n        size\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\n    where \n        date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n),\n\n-- join transactions with product info\n\njoined_data as (\n    select * except (date, product_id)\n    from transaction_products \n    left join product_attributes\n        on ga_date = date \n        and ga_productid = product_id\n\n)\n\nselect * from joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_cart_products_and_prod_attr`"}, "model.sql_repository_bz.int_ga_list_page_events": {"raw_sql": "/* strip the event type info from the event lable string*/\r\nwith all_events_with_event_type_info as( \r\n    select\r\n        * except(event_count_testbericht),\r\n        split(event_label,'_')[safe_offset(0)] as event_type\r\n    from {{ref('stg_ga_events_per_page')}}\r\n    where date between {{ get_last_n_days_date_range(60) }}\r\n    and hit_type = 'EVENT'\r\n    and event_category = 'listpage'\r\n\r\n)\r\n\r\nselect * from all_events_with_event_type_info", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_ga_events_per_page"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "int_ga_list_page_events"], "unique_id": "model.sql_repository_bz.int_ga_list_page_events", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/int_ga_list_page_events.sql", "original_file_path": "models/02_intermediate/google_analytics/int_ga_list_page_events.sql", "name": "int_ga_list_page_events", "alias": "int_ga_list_page_events", "checksum": {"name": "sha256", "checksum": "ca2efa45799f76d28429c1333ca547987bbbcddef5e4e3a596050032181cea60"}, "tags": [], "refs": [["stg_ga_events_per_page"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/int_ga_list_page_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.1470478, "compiled_sql": "/* strip the event type info from the event lable string*/\nwith all_events_with_event_type_info as( \n    select\n        * except(event_count_testbericht),\n        split(event_label,'_')[safe_offset(0)] as event_type\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_events_per_page`\n    where date between \n    date_sub(current_date(), interval 60 day)\n    and date_sub(current_date(), interval 1 day)\n\n    and hit_type = 'EVENT'\n    and event_category = 'listpage'\n\n)\n\nselect * from all_events_with_event_type_info", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_list_page_events`"}, "model.sql_repository_bz.int_ga_product_eecactions_by_day": {"raw_sql": "select\r\n    \r\n    c_date,\r\n    hostname,\r\n    account,\r\n    c_offer_id,\r\n    ga_brand,\r\n    ga_productname,\r\n    countif(ga_eec_action_type ='1') as list_impression,\r\n    countif(ga_eec_action_type ='2') as detail_views,\r\n    countif(ga_eec_action_type ='3') as add_to_carts,\r\n    sum(IF(ga_eec_action_type ='3', ga_product_quantity, 0)) as add_to_cart_product_quantity,\r\n    countif(ga_eec_action_type ='4') as remove_from_carts,\r\n    sum(IF(ga_eec_action_type ='4', ga_product_quantity, 0)) as remove_from_cart_product_quantity,\r\n\r\n  from {{ ref('stg_ga_ecommerce_actions') }}\r\n\r\n  where\r\n    ga_eec_action_type in ('1','2', '3', '4')\r\n    \r\n  group by 1,2,3,4,5,6", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga_ecommerce_actions"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "int_ga_product_eecactions_by_day"], "unique_id": "model.sql_repository_bz.int_ga_product_eecactions_by_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/int_ga_product_eecactions_by_day.sql", "original_file_path": "models/02_intermediate/google_analytics/int_ga_product_eecactions_by_day.sql", "name": "int_ga_product_eecactions_by_day", "alias": "int_ga_product_eecactions_by_day", "checksum": {"name": "sha256", "checksum": "e66b8d09366bd6954e30b0dd176b1cf7b0fa2dfcc1ae0597e762bf781d0391bb"}, "tags": [], "refs": [["stg_ga_ecommerce_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/int_ga_product_eecactions_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.1583993, "compiled_sql": "select\n    \n    c_date,\n    hostname,\n    account,\n    c_offer_id,\n    ga_brand,\n    ga_productname,\n    countif(ga_eec_action_type ='1') as list_impression,\n    countif(ga_eec_action_type ='2') as detail_views,\n    countif(ga_eec_action_type ='3') as add_to_carts,\n    sum(IF(ga_eec_action_type ='3', ga_product_quantity, 0)) as add_to_cart_product_quantity,\n    countif(ga_eec_action_type ='4') as remove_from_carts,\n    sum(IF(ga_eec_action_type ='4', ga_product_quantity, 0)) as remove_from_cart_product_quantity,\n\n  from `bergzeit`.`dbt_analytics_staging`.`stg_ga_ecommerce_actions`\n\n  where\n    ga_eec_action_type in ('1','2', '3', '4')\n    \n  group by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_product_eecactions_by_day`"}, "model.sql_repository_bz.int_ga_product_performance_with_ad_touchpoints": {"raw_sql": "with sku_perf as (\r\n\r\n  select \r\n    ga_date as date, \r\n    country_identifier, \r\n    ga_transaction_id as transactionId,\r\n    ga_brand as productBrand,\r\n    ga_productid as productSku,\r\n    AdAccountId,\r\n    ga_couponvalue as couponValue,\r\n    ga_product_revenue as productRevenue,\r\n    ga_transaction_revenue as totalRevenue,\r\n    ga_sum_product_revenue as sumProdRevenue,\r\n    {{ top_cat_translation_to_de('ga_product_category') }} as TopCategory,\r\n    coalesce(safe_divide(ga_couponvalue * ga_product_revenue,ga_sum_product_revenue),0) as coupon_cost_per_product\r\n    --(productRevenue - couponValue * productRevenue / sumProdRevenue) as share_of_order_revenue\r\n  from {{ ref('stg_ga_product_performance_profit_bidding') }}\r\n\r\n),\r\n\r\nadclick_inv as (\r\n\r\n  select \r\n    ad_adAccountId,\r\n    ad_transactionId\r\n  from {{ ref('stg_ga_transactions_with_adclick_involvement') }}\r\n  \r\n)\r\n\r\n\r\nselect\r\n  * except (ad_adAccountId, ad_transactionId) --, share_of_order_revenue\r\nfrom sku_perf as perf_input\r\ninner join adclick_inv as adclicks\r\non perf_input.transactionId = adclicks.ad_transactionId", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.top_cat_translation_to_de"], "nodes": ["model.sql_repository_bz.stg_ga_product_performance_profit_bidding", "model.sql_repository_bz.stg_ga_transactions_with_adclick_involvement"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "int_ga_product_performance_with_ad_touchpoints"], "unique_id": "model.sql_repository_bz.int_ga_product_performance_with_ad_touchpoints", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/int_ga_product_performance_with_ad_touchpoints.sql", "original_file_path": "models/02_intermediate/google_analytics/int_ga_product_performance_with_ad_touchpoints.sql", "name": "int_ga_product_performance_with_ad_touchpoints", "alias": "int_ga_product_performance_with_ad_touchpoints", "checksum": {"name": "sha256", "checksum": "267106bb898ea1ef697a2922089f1fa0b0b33eaede487f7883674d274a5cfe08"}, "tags": [], "refs": [["stg_ga_product_performance_profit_bidding"], ["stg_ga_transactions_with_adclick_involvement"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/int_ga_product_performance_with_ad_touchpoints.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.1621995, "compiled_sql": "with sku_perf as (\n\n  select \n    ga_date as date, \n    country_identifier, \n    ga_transaction_id as transactionId,\n    ga_brand as productBrand,\n    ga_productid as productSku,\n    AdAccountId,\n    ga_couponvalue as couponValue,\n    ga_product_revenue as productRevenue,\n    ga_transaction_revenue as totalRevenue,\n    ga_sum_product_revenue as sumProdRevenue,\n    \n\n(\n    replace(\n        replace(\n            replace(\n                replace(\n                    replace(\n                        replace(\n                            replace(\n                                replace(\n                                    replace(\n                                        replace( ga_product_category, \n                                        'Clothing', 'Bekleidung'),\n                                        'Footwear', 'Schuhe'),\n                                        'Equipment', 'Ausr\u00fcstung'),\n                                        'Uistrusting', 'Ausr\u00fcstung'),\n                                        'Schoenen', 'Schuhe'),\n                                        'Abbigliamento', 'Bekleidung'),\n                                        'Scarpe', 'Schuhe'),\n                                        'Accessori', 'Accessoires'),\n                                        'Attrezzatura', 'Ausr\u00fcstung'),\n                                        'Configurators', 'Konfiguratoren')\n)\n\n\n as TopCategory,\n    coalesce(safe_divide(ga_couponvalue * ga_product_revenue,ga_sum_product_revenue),0) as coupon_cost_per_product\n    --(productRevenue - couponValue * productRevenue / sumProdRevenue) as share_of_order_revenue\n  from `bergzeit`.`dbt_analytics_staging`.`stg_ga_product_performance_profit_bidding`\n\n),\n\nadclick_inv as (\n\n  select \n    ad_adAccountId,\n    ad_transactionId\n  from `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions_with_adclick_involvement`\n  \n)\n\n\nselect\n  * except (ad_adAccountId, ad_transactionId) --, share_of_order_revenue\nfrom sku_perf as perf_input\ninner join adclick_inv as adclicks\non perf_input.transactionId = adclicks.ad_transactionId", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_product_performance_with_ad_touchpoints`"}, "model.sql_repository_bz.int_ga_order_value_by_month_channel": {"raw_sql": "with ga_data as (\r\n\r\n    select     \r\n        extract(year from ga_date) ||'-'|| cast(ga_date as string format('MM')) AS ga_year_month, \r\n        {{extract_country_from_hostname('ga_hostname')}} as ga_country,\r\n        ga_acquisition_channel,\r\n        ga_transaction_revenue as ga_order_value    \r\n    from {{ ref('stg_ga_transactions') }}\r\n    where ga_date between {{ get_financial_year_to_yesterday_date_range() }} \r\n\r\n),\r\n\r\n/* all countries except for DACH and focus markets will be aggregated as 'int' */\r\n\r\ncountry_grouping as (\r\n\r\nselect \r\n    ga_year_month, \r\n    {{apply_country_grouping('ga_country')}} as ga_country_grouped,\r\n    ga_acquisition_channel,\r\n    ga_order_value\r\nfrom ga_data\r\n\r\n),\r\n\r\nnew_vars as (\r\n\r\n    select \r\n        ga_year_month, \r\n        ga_country_grouped,\r\n        ga_acquisition_channel,\r\n        sum(ga_order_value) as sum_order_value\r\n    from country_grouping\r\n    group by 1,2,3\r\n),\r\n\r\norder_value_total as (\r\n    select \r\n        *,\r\n        sum(sum_order_value) over (partition by ga_country_grouped, ga_year_month) as order_value_total_last_click\r\n    from new_vars\r\n)\r\n\r\nselect \r\n    *,\r\n    sum_order_value/order_value_total_last_click as channelanteil_last_click\r\nfrom order_value_total", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.extract_country_from_hostname", "macro.sql_repository_bz.get_financial_year_to_yesterday_date_range", "macro.sql_repository_bz.apply_country_grouping"], "nodes": ["model.sql_repository_bz.stg_ga_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "int_ga_order_value_by_month_channel"], "unique_id": "model.sql_repository_bz.int_ga_order_value_by_month_channel", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/int_ga_order_value_by_month_channel.sql", "original_file_path": "models/02_intermediate/google_analytics/int_ga_order_value_by_month_channel.sql", "name": "int_ga_order_value_by_month_channel", "alias": "int_ga_order_value_by_month_channel", "checksum": {"name": "sha256", "checksum": "0e105b8fd3ecfbd69d3806c383695d1869c2367bd4d8cda80ab929696bd361be"}, "tags": [], "refs": [["stg_ga_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/int_ga_order_value_by_month_channel.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.1739511, "compiled_sql": "with ga_data as (\n\n    select     \n        extract(year from ga_date) ||'-'|| cast(ga_date as string format('MM')) AS ga_year_month, \n        \n    case\n        when ga_hostname like '%co.uk%' then split(ga_hostname, '.')[ offset (3)] \n        else split(ga_hostname, '.')[offset(2)] \n    end\n\n as ga_country,\n        ga_acquisition_channel,\n        ga_transaction_revenue as ga_order_value    \n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions`\n    where ga_date between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n\n),\n\n/* all countries except for DACH and focus markets will be aggregated as 'int' */\n\ncountry_grouping as (\n\nselect \n    ga_year_month, \n    \n    case\n        when ga_country in ('de', 'at', 'ch', 'nl', 'uk', 'it') then ga_country\n        else 'int'\n    end\n\n as ga_country_grouped,\n    ga_acquisition_channel,\n    ga_order_value\nfrom ga_data\n\n),\n\nnew_vars as (\n\n    select \n        ga_year_month, \n        ga_country_grouped,\n        ga_acquisition_channel,\n        sum(ga_order_value) as sum_order_value\n    from country_grouping\n    group by 1,2,3\n),\n\norder_value_total as (\n    select \n        *,\n        sum(sum_order_value) over (partition by ga_country_grouped, ga_year_month) as order_value_total_last_click\n    from new_vars\n)\n\nselect \n    *,\n    sum_order_value/order_value_total_last_click as channelanteil_last_click\nfrom order_value_total", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_order_value_by_month_channel`"}, "model.sql_repository_bz.int_ga_eecactions_revenue": {"raw_sql": "with eecactions as (\r\n\r\n    select {{ dbt_utils.star(ref('int_ga_product_eecactions_by_day')) }} \r\n    from {{ ref('int_ga_product_eecactions_by_day') }}\r\n),\r\n\r\nproduct_order_value as (\r\n\r\n    select \r\n        ga_date,\r\n        ga_hostname,\r\n        ga_account,\r\n        ga_productid,\r\n        sum_product_revenue,\r\n        sum_product_quantity\r\n    from {{ ref('int_ga_product_checkouts_by_day') }}\r\n\r\n), \r\n\r\neecactions_with_product_order_value as (\r\n\r\n    select * except (ga_date, ga_hostname, ga_account, ga_productid)\r\n    from eecactions\r\n    left join product_order_value on \r\n        eecactions.c_date = product_order_value.ga_date\r\n        and eecactions.hostname = product_order_value.ga_hostname\r\n        and eecactions.c_offer_id = product_order_value.ga_productid\r\n\r\n)\r\n\r\nselect * from eecactions_with_product_order_value", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.sql_repository_bz.int_ga_product_eecactions_by_day", "model.sql_repository_bz.int_ga_product_eecactions_by_day", "model.sql_repository_bz.int_ga_product_checkouts_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "int_ga_eecactions_revenue"], "unique_id": "model.sql_repository_bz.int_ga_eecactions_revenue", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/int_ga_eecactions_revenue.sql", "original_file_path": "models/02_intermediate/google_analytics/int_ga_eecactions_revenue.sql", "name": "int_ga_eecactions_revenue", "alias": "int_ga_eecactions_revenue", "checksum": {"name": "sha256", "checksum": "de711e23de6347cf7716bac276a8bebe8faeca0b5d8bb91da9f1f6779f59d195"}, "tags": [], "refs": [["int_ga_product_eecactions_by_day"], ["int_ga_product_eecactions_by_day"], ["int_ga_product_checkouts_by_day"]], "sources": [], "description": "this models combines ga data by grouping detail views and order value by product detail page and hostname", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_analytics/_models_int_ga.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/int_ga_eecactions_revenue.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.4220738, "compiled_sql": "with eecactions as (\n\n    select \n\n    `c_date`,\n  `hostname`,\n  `account`,\n  `c_offer_id`,\n  `ga_brand`,\n  `ga_productname`,\n  `list_impression`,\n  `detail_views`,\n  `add_to_carts`,\n  `add_to_cart_product_quantity`,\n  `remove_from_carts`,\n  `remove_from_cart_product_quantity` \n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_product_eecactions_by_day`\n),\n\nproduct_order_value as (\n\n    select \n        ga_date,\n        ga_hostname,\n        ga_account,\n        ga_productid,\n        sum_product_revenue,\n        sum_product_quantity\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_product_checkouts_by_day`\n\n), \n\neecactions_with_product_order_value as (\n\n    select * except (ga_date, ga_hostname, ga_account, ga_productid)\n    from eecactions\n    left join product_order_value on \n        eecactions.c_date = product_order_value.ga_date\n        and eecactions.hostname = product_order_value.ga_hostname\n        and eecactions.c_offer_id = product_order_value.ga_productid\n\n)\n\nselect * from eecactions_with_product_order_value", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_eecactions_revenue`"}, "model.sql_repository_bz._int_page_views_and_events_plp": {"raw_sql": "with page_views_and_types as (\r\n\r\n    select {{ dbt_utils.star(ref('int_ga_page_views_and_types')) }}\r\n    from {{ ref('int_ga_page_views_and_types') }}\r\n\r\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.sql_repository_bz.int_ga_page_views_and_types", "model.sql_repository_bz.int_ga_page_views_and_types"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "_int_page_views_and_events_plp"], "unique_id": "model.sql_repository_bz._int_page_views_and_events_plp", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/_int_page_views_and_events_plp.sql", "original_file_path": "models/02_intermediate/google_analytics/_int_page_views_and_events_plp.sql", "name": "_int_page_views_and_events_plp", "alias": "_int_page_views_and_events_plp", "checksum": {"name": "sha256", "checksum": "b5ea628d493ea0f49da7df796efaee20095b1ba02e32f81ceb6c6a68c471b720"}, "tags": [], "refs": [["int_ga_page_views_and_types"], ["int_ga_page_views_and_types"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/_int_page_views_and_events_plp.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.2119033, "compiled_sql": "with page_views_and_types as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_page_views_and_types`\n\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`_int_page_views_and_events_plp`"}, "model.sql_repository_bz.int_ga_product_list": {"raw_sql": "with product_list_performance as(\r\nSELECT\r\n    date,\r\n    hostname,\r\n    page,\r\n    device,\r\n    productListName,\r\n    productListPosition,\r\n    session_id,\r\n    case when eventAction like ('eec.productImpression')\r\n        then eventAction \r\n        else null \r\n    end as list_impression,\r\n    case when eventAction like ('eec.productClick')\r\n        then eventAction \r\n        else null \r\n    end as list_click\r\n\r\nFROM {{ref('stg_ga_products')}}\r\n)\r\n\r\nselect * from product_list_performance", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga_products"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "int_ga_product_list"], "unique_id": "model.sql_repository_bz.int_ga_product_list", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/int_ga_product_list.sql", "original_file_path": "models/02_intermediate/google_analytics/int_ga_product_list.sql", "name": "int_ga_product_list", "alias": "int_ga_product_list", "checksum": {"name": "sha256", "checksum": "cd18b539f5b9b463b5aebf9308070e3d3a826e5a6fd298917fc334307614eb58"}, "tags": [], "refs": [["stg_ga_products"]], "sources": [], "description": "this models calculates the list impressions and clicks for each list type", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_analytics/_models_int_ga.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/int_ga_product_list.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.42603, "compiled_sql": "with product_list_performance as(\nSELECT\n    date,\n    hostname,\n    page,\n    device,\n    productListName,\n    productListPosition,\n    session_id,\n    case when eventAction like ('eec.productImpression')\n        then eventAction \n        else null \n    end as list_impression,\n    case when eventAction like ('eec.productClick')\n        then eventAction \n        else null \n    end as list_click\n\nFROM `bergzeit`.`dbt_analytics_staging`.`stg_ga_products`\n)\n\nselect * from product_list_performance", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_product_list`"}, "model.sql_repository_bz.int_ga_pdp_entrances_transactions": {"raw_sql": "with pdp_entrances as (\r\n    select \r\n        pv_date,\r\n        pv_session_id,\r\n        pv_acquisition_channel,\r\n        pv_page,\r\n        pv_hostname,\r\n        cd9_product_id\r\n    from {{ ref('stg_ga_product_detail_pages') }}\r\n    where pv_is_entrance = true\r\n     and pv_date between {{ get_last_n_days_date_range(30) }}\r\n),\r\n\r\nbrands as (\r\n    select distinct \r\n        substr(product_sku, 1,7) as parent_id,\r\n        product_brand as entry_brand\r\n    from {{ ref('int_gmc_most_recent_prod_attr') }}\r\n),\r\n\r\nproducts_transactions as (\r\n    select\r\n        ga_date,\r\n        ga_session_id,\r\n        ga_transaction_id,\r\n        ga_productid,\r\n        ga_brand,\r\n        ga_product_category,\r\n        round(ga_product_revenue,0) as ga_product_revenue\r\n\r\n    from {{ ref('stg_ga_product_checkouts') }}\r\n    where ga_date between {{ get_last_n_days_date_range(30) }}\r\n)\r\n\r\nselect \r\n    * except (ga_date, ga_session_id),\r\n    if(pv_acquisition_channel != 'Generic Paid Search Google' and pv_acquisition_channel != 'Generic Paid Shopping Google', 'Other', pv_acquisition_channel) as channel_grouping,\r\nfrom pdp_entrances as pdp\r\n\r\nleft join brands \r\non substr(pdp.cd9_product_id,1,7) = brands.parent_id\r\n\r\nleft join products_transactions as ta\r\non pdp.pv_session_id = ta.ga_session_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_ga_product_detail_pages", "model.sql_repository_bz.int_gmc_most_recent_prod_attr", "model.sql_repository_bz.stg_ga_product_checkouts"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "int_ga_pdp_entrances_transactions"], "unique_id": "model.sql_repository_bz.int_ga_pdp_entrances_transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/int_ga_pdp_entrances_transactions.sql", "original_file_path": "models/02_intermediate/google_analytics/int_ga_pdp_entrances_transactions.sql", "name": "int_ga_pdp_entrances_transactions", "alias": "int_ga_pdp_entrances_transactions", "checksum": {"name": "sha256", "checksum": "db2b483edf127b6e0fa2b0ea609d3e051bf5e23380265fee46f732f72fc8b11c"}, "tags": [], "refs": [["stg_ga_product_detail_pages"], ["int_gmc_most_recent_prod_attr"], ["stg_ga_product_checkouts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/int_ga_pdp_entrances_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.229473, "compiled_sql": "with pdp_entrances as (\n    select \n        pv_date,\n        pv_session_id,\n        pv_acquisition_channel,\n        pv_page,\n        pv_hostname,\n        cd9_product_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_product_detail_pages`\n    where pv_is_entrance = true\n     and pv_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n),\n\nbrands as (\n    select distinct \n        substr(product_sku, 1,7) as parent_id,\n        product_brand as entry_brand\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_most_recent_prod_attr`\n),\n\nproducts_transactions as (\n    select\n        ga_date,\n        ga_session_id,\n        ga_transaction_id,\n        ga_productid,\n        ga_brand,\n        ga_product_category,\n        round(ga_product_revenue,0) as ga_product_revenue\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_product_checkouts`\n    where ga_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n)\n\nselect \n    * except (ga_date, ga_session_id),\n    if(pv_acquisition_channel != 'Generic Paid Search Google' and pv_acquisition_channel != 'Generic Paid Shopping Google', 'Other', pv_acquisition_channel) as channel_grouping,\nfrom pdp_entrances as pdp\n\nleft join brands \non substr(pdp.cd9_product_id,1,7) = brands.parent_id\n\nleft join products_transactions as ta\non pdp.pv_session_id = ta.ga_session_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_pdp_entrances_transactions`"}, "model.sql_repository_bz.int_ga_product_attr_and_ga_data_by_day": {"raw_sql": "/* get all product data with attributes by day */\r\nwith product_data as (\r\n\r\n    select\r\n        date, \r\n        offer_id, \r\n        top_category, \r\n        category_l1_2, \r\n        category_l_2, \r\n        category_l_3, \r\n        last_category,\r\n        product_brand as brand,\r\n        product_season as season_flag,\r\n        is_only_foreign_stock,\r\n        avg_discount_rounded,\r\n        avg_discount_groups_custom, \r\n        avg_price_groups_custom,\r\n        avg_price_groups_custom_sort_index\r\n    from {{ ref('int_gmc_product_attr_and_stock_by_day') }}\r\n    where \r\n      (\r\n        date between {{ get_last_n_days_date_range(31) }}\r\n        or date = current_date()\r\n      )\r\n      and cp_country = 'de'\r\n    \r\n),\r\n\r\n    \r\n/* fetch ga data - last 30 days only, to limit volume usage */\r\nga_data as (\r\n\r\n  select\r\n    c_date,\r\n    c_offer_id,\r\n    hostname,\r\n    account,\r\n    detail_views ,\r\n    add_to_carts,\r\n    remove_from_carts,\r\n    sum_product_revenue as productrevenue,\r\n    sum_product_quantity as productquantity\r\n  from {{ ref('int_ga_eecactions_revenue') }}\r\n  where \r\n    c_date between {{ get_last_n_days_date_range(31) }}\r\n    and c_offer_id is not null\r\n\r\n), \r\n\r\n\r\n/* join product attribute and ga data */\r\nproducts_and_details as (\r\n\r\n  select\r\n    * except (c_date, c_offer_id),\r\n  from product_data\r\n\r\n  left join ga_data\r\n    on product_data.date = ga_data.c_date \r\n    and product_data.offer_id = ga_data.c_offer_id\r\n\r\n)\r\n\r\nselect * from products_and_details", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day", "model.sql_repository_bz.int_ga_eecactions_revenue"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "int_ga_product_attr_and_ga_data_by_day"], "unique_id": "model.sql_repository_bz.int_ga_product_attr_and_ga_data_by_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/int_ga_product_attr_and_ga_data_by_day.sql", "original_file_path": "models/02_intermediate/google_analytics/int_ga_product_attr_and_ga_data_by_day.sql", "name": "int_ga_product_attr_and_ga_data_by_day", "alias": "int_ga_product_attr_and_ga_data_by_day", "checksum": {"name": "sha256", "checksum": "b18f95b143dc0e68fa9dec094d45bfc69ebc092d05a73a6b6663ba37ca8c857a"}, "tags": [], "refs": [["int_gmc_product_attr_and_stock_by_day"], ["int_ga_eecactions_revenue"]], "sources": [], "description": "this models combines ga data and merchant center product data (de) by sku and date", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_analytics/_models_int_ga.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/int_ga_product_attr_and_ga_data_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.4228604, "compiled_sql": "/* get all product data with attributes by day */\nwith product_data as (\n\n    select\n        date, \n        offer_id, \n        top_category, \n        category_l1_2, \n        category_l_2, \n        category_l_3, \n        last_category,\n        product_brand as brand,\n        product_season as season_flag,\n        is_only_foreign_stock,\n        avg_discount_rounded,\n        avg_discount_groups_custom, \n        avg_price_groups_custom,\n        avg_price_groups_custom_sort_index\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_product_attr_and_stock_by_day`\n    where \n      (\n        date between \n    date_sub(current_date(), interval 31 day)\n    and date_sub(current_date(), interval 1 day)\n\n        or date = current_date()\n      )\n      and cp_country = 'de'\n    \n),\n\n    \n/* fetch ga data - last 30 days only, to limit volume usage */\nga_data as (\n\n  select\n    c_date,\n    c_offer_id,\n    hostname,\n    account,\n    detail_views ,\n    add_to_carts,\n    remove_from_carts,\n    sum_product_revenue as productrevenue,\n    sum_product_quantity as productquantity\n  from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_eecactions_revenue`\n  where \n    c_date between \n    date_sub(current_date(), interval 31 day)\n    and date_sub(current_date(), interval 1 day)\n\n    and c_offer_id is not null\n\n), \n\n\n/* join product attribute and ga data */\nproducts_and_details as (\n\n  select\n    * except (c_date, c_offer_id),\n  from product_data\n\n  left join ga_data\n    on product_data.date = ga_data.c_date \n    and product_data.offer_id = ga_data.c_offer_id\n\n)\n\nselect * from products_and_details", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_product_attr_and_ga_data_by_day`"}, "model.sql_repository_bz.int_ga_pdp_pageviews": {"raw_sql": "select\r\n\r\n    pv_date,\r\n    pv_page,\r\n    pv_hostname,\r\n    pv_device,\r\n    count(*) as url_page_views,\r\n    sum(if(pv_is_entrance = true, 1, 0)) as url_entrance_page_views\r\n    \r\n  from {{ ref('stg_ga_product_detail_pages') }}\r\n\r\n  group by 1,2,3,4", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga_product_detail_pages"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "int_ga_pdp_pageviews"], "unique_id": "model.sql_repository_bz.int_ga_pdp_pageviews", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/int_ga_pdp_pageviews.sql", "original_file_path": "models/02_intermediate/google_analytics/int_ga_pdp_pageviews.sql", "name": "int_ga_pdp_pageviews", "alias": "int_ga_pdp_pageviews", "checksum": {"name": "sha256", "checksum": "8e88d8dfe838e8fd0085b6372df36b97602abeb455f7814d3da0f151bd4d58ea"}, "tags": [], "refs": [["stg_ga_product_detail_pages"]], "sources": [], "description": "this model counts pageviews by product detail page", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_analytics/_models_int_ga.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/int_ga_pdp_pageviews.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.4214368, "compiled_sql": "select\n\n    pv_date,\n    pv_page,\n    pv_hostname,\n    pv_device,\n    count(*) as url_page_views,\n    sum(if(pv_is_entrance = true, 1, 0)) as url_entrance_page_views\n    \n  from `bergzeit`.`dbt_analytics_staging`.`stg_ga_product_detail_pages`\n\n  group by 1,2,3,4", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_pdp_pageviews`"}, "model.sql_repository_bz.int_ga_sessions_transactions": {"raw_sql": "with daily_session_data as(\r\n    select\r\n        date as ga_date,\r\n        device as ga_device_category,\r\n        channel_grouping as ga_acquisition_channel,\r\n        count(distinct ga_session_id) AS ga_sessions\r\n    from {{ref('stg_ga_session_totals')}}\r\n    where date between {{ get_last_n_days_date_range(30) }}\r\n        /*and ga_hostname = 'www.bergzeit.de' */\r\n    group by 1,2,3\r\n),\r\n\r\ndaily_transaction_data as(\r\n    select\r\n        ga_date,\r\n        ga_device_category,\r\n        ga_acquisition_channel,\r\n        count(ga_transaction_id) as ga_transactions,\r\n        sum(ga_transaction_revenue) as ga_order_value\r\n    from {{ref('stg_ga_transactions')}}\r\n    where ga_date between {{ get_last_n_days_date_range(30) }}\r\n        /* and ga_hostname = 'www.bergzeit.de' */\r\n    group by 1,2,3\r\n),\r\n\r\ncombined_sessions_and_transactions as(\r\n    select * from daily_session_data\r\n        left join daily_transaction_data using(ga_date,ga_device_category,ga_acquisition_channel)\r\n)\r\n\r\nselect * from combined_sessions_and_transactions", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_ga_session_totals", "model.sql_repository_bz.stg_ga_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "int_ga_sessions_transactions"], "unique_id": "model.sql_repository_bz.int_ga_sessions_transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/int_ga_sessions_transactions.sql", "original_file_path": "models/02_intermediate/google_analytics/int_ga_sessions_transactions.sql", "name": "int_ga_sessions_transactions", "alias": "int_ga_sessions_transactions", "checksum": {"name": "sha256", "checksum": "8dd90f56067f5a0500dd37e37acc643cfec8bf151e7aa6f03d048c52627476f9"}, "tags": [], "refs": [["stg_ga_session_totals"], ["stg_ga_transactions"]], "sources": [], "description": "this models combines daily session, transaction and revenue data from the ga session and transaction stg models", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_analytics/_models_int_ga.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/int_ga_sessions_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.4251463, "compiled_sql": "with daily_session_data as(\n    select\n        date as ga_date,\n        device as ga_device_category,\n        channel_grouping as ga_acquisition_channel,\n        count(distinct ga_session_id) AS ga_sessions\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_session_totals`\n    where date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n        /*and ga_hostname = 'www.bergzeit.de' */\n    group by 1,2,3\n),\n\ndaily_transaction_data as(\n    select\n        ga_date,\n        ga_device_category,\n        ga_acquisition_channel,\n        count(ga_transaction_id) as ga_transactions,\n        sum(ga_transaction_revenue) as ga_order_value\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions`\n    where ga_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n        /* and ga_hostname = 'www.bergzeit.de' */\n    group by 1,2,3\n),\n\ncombined_sessions_and_transactions as(\n    select * from daily_session_data\n        left join daily_transaction_data using(ga_date,ga_device_category,ga_acquisition_channel)\n)\n\nselect * from combined_sessions_and_transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_sessions_transactions`"}, "model.sql_repository_bz.int_ga_page_views_and_types": {"raw_sql": "with page_views as (\r\n\r\n    select \r\n        {{ dbt_utils.surrogate_key(['pv_date', 'pv_page']) }} as _date_page_path_id,\r\n        pv_date as date,\r\n        pv_page as page_path,\r\n        pv_hostname as page_hostname,\r\n        pv_device as user_device,\r\n        url_page_views as page_views\r\n    from {{ ref('stg_ga_pageviews') }}\r\n    where pv_date between {{ get_last_n_days_date_range(90) }}\r\n\r\n), \r\n\r\npages_and_types as (\r\n\r\n    select distinct\r\n        {{ dbt_utils.surrogate_key(['date', 'page_path']) }} as _date_page_path_id,\r\n        date,\r\n        split(pagepath,'?')[safe_offset(0)] as page_path,\r\n        page_type\r\n    from {{ ref('stg_ga_page_types') }}\r\n    where date between {{ get_last_n_days_date_range(90) }}\r\n\r\n), \r\n\r\npageviews_with_pagetypes as (\r\n    \r\n    select \r\n        date,\r\n        page_path,\r\n        page_hostname,\r\n        user_device,\r\n        page_type,\r\n        page_views\r\n    from page_views\r\n    left join pages_and_types using (_date_page_path_id)\r\n\r\n)\r\n\r\nselect * from pageviews_with_pagetypes", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_ga_pageviews", "model.sql_repository_bz.stg_ga_page_types"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "int_ga_page_views_and_types"], "unique_id": "model.sql_repository_bz.int_ga_page_views_and_types", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/int_ga_page_views_and_types.sql", "original_file_path": "models/02_intermediate/google_analytics/int_ga_page_views_and_types.sql", "name": "int_ga_page_views_and_types", "alias": "int_ga_page_views_and_types", "checksum": {"name": "sha256", "checksum": "ffba68a17bd91bbda793f726021dbde773d3effdd36f41d75ad3e09b8bcaa50f"}, "tags": [], "refs": [["stg_ga_pageviews"], ["stg_ga_page_types"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/int_ga_page_views_and_types.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.26788, "compiled_sql": "with page_views as (\n\n    select \n        to_hex(md5(cast(coalesce(cast(pv_date as \n    string\n), '') || '-' || coalesce(cast(pv_page as \n    string\n), '') as \n    string\n))) as _date_page_path_id,\n        pv_date as date,\n        pv_page as page_path,\n        pv_hostname as page_hostname,\n        pv_device as user_device,\n        url_page_views as page_views\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_pageviews`\n    where pv_date between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n), \n\npages_and_types as (\n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(page_path as \n    string\n), '') as \n    string\n))) as _date_page_path_id,\n        date,\n        split(pagepath,'?')[safe_offset(0)] as page_path,\n        page_type\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_page_types`\n    where date between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n), \n\npageviews_with_pagetypes as (\n    \n    select \n        date,\n        page_path,\n        page_hostname,\n        user_device,\n        page_type,\n        page_views\n    from page_views\n    left join pages_and_types using (_date_page_path_id)\n\n)\n\nselect * from pageviews_with_pagetypes", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_page_views_and_types`"}, "model.sql_repository_bz.int_ga_product_checkouts_by_day": {"raw_sql": "select\r\n\r\n    ga_date,\r\n    ga_hostname,\r\n    ga_account,\r\n    ga_brand,\r\n    ga_product_category,\r\n    ga_productid,\r\n    round(sum(ga_product_revenue),3) as sum_product_revenue,\r\n    sum(ga_product_quantity) as sum_product_quantity\r\n\r\n  from {{ ref('stg_ga_product_checkouts') }}\r\n\r\n  group by\r\n    1,2,3,4,5,6", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga_product_checkouts"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "int_ga_product_checkouts_by_day"], "unique_id": "model.sql_repository_bz.int_ga_product_checkouts_by_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/int_ga_product_checkouts_by_day.sql", "original_file_path": "models/02_intermediate/google_analytics/int_ga_product_checkouts_by_day.sql", "name": "int_ga_product_checkouts_by_day", "alias": "int_ga_product_checkouts_by_day", "checksum": {"name": "sha256", "checksum": "e629666549b55ac5a74ce652d0fffb5f3f6aecdd522c752eb6d1291be4f7b50a"}, "tags": [], "refs": [["stg_ga_product_checkouts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/int_ga_product_checkouts_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.3073945, "compiled_sql": "select\n\n    ga_date,\n    ga_hostname,\n    ga_account,\n    ga_brand,\n    ga_product_category,\n    ga_productid,\n    round(sum(ga_product_revenue),3) as sum_product_revenue,\n    sum(ga_product_quantity) as sum_product_quantity\n\n  from `bergzeit`.`dbt_analytics_staging`.`stg_ga_product_checkouts`\n\n  group by\n    1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_product_checkouts_by_day`"}, "model.sql_repository_bz.int_ga_performance_cost_monthly_by_channel": {"raw_sql": "with daily_perf_data as (\r\n    select * \r\n    from {{ ref('int_ga_performance_cost_daily_by_channel') }}\r\n),\r\n\r\nmonthly_aggregates as (\r\n    select \r\n        year_month,\r\n        country,\r\n        custom_channel_grouping,\r\n        sum(sum_impressions) as sum_impressions,\r\n        sum(sum_gads_clicks) as sum_gads_clicks,\r\n        sum(sum_gads_cost) as sum_gads_cost\r\n    from daily_perf_data\r\n    group by 1,2,3\r\n\r\n)\r\n\r\nselect * from monthly_aggregates", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_performance_cost_daily_by_channel"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "performance_cost", "int_ga_performance_cost_monthly_by_channel"], "unique_id": "model.sql_repository_bz.int_ga_performance_cost_monthly_by_channel", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/performance_cost/int_ga_performance_cost_monthly_by_channel.sql", "original_file_path": "models/02_intermediate/google_analytics/performance_cost/int_ga_performance_cost_monthly_by_channel.sql", "name": "int_ga_performance_cost_monthly_by_channel", "alias": "int_ga_performance_cost_monthly_by_channel", "checksum": {"name": "sha256", "checksum": "497066e40570665c5b9cbbd3f7f9f46733da2efb597a632950107be0ba87ac6e"}, "tags": [], "refs": [["int_ga_performance_cost_daily_by_channel"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/performance_cost/int_ga_performance_cost_monthly_by_channel.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.3109744, "compiled_sql": "with daily_perf_data as (\n    select * \n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_performance_cost_daily_by_channel`\n),\n\nmonthly_aggregates as (\n    select \n        year_month,\n        country,\n        custom_channel_grouping,\n        sum(sum_impressions) as sum_impressions,\n        sum(sum_gads_clicks) as sum_gads_clicks,\n        sum(sum_gads_cost) as sum_gads_cost\n    from daily_perf_data\n    group by 1,2,3\n\n)\n\nselect * from monthly_aggregates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_performance_cost_monthly_by_channel`"}, "model.sql_repository_bz.int_ga_performance_cost_daily_by_channel": {"raw_sql": "with cost_data as (\r\n\r\n    select * from {{ ref('stg_ga_performance_costs') }}\r\n),\r\n\r\naggregated_data as (\r\n\r\n    select \r\n        date,\r\n        format_datetime('%Y-%m', date) as year_month,\r\n        country,\r\n        custom_channel_grouping,\r\n        sum(impressions) as sum_impressions,\r\n        sum(adClicks) as sum_gads_clicks,\r\n        sum(adCost) as sum_gads_cost\r\n    from cost_data\r\n    group by 1,2,3,4\r\n)\r\n\r\nselect * from aggregated_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga_performance_costs"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "performance_cost", "int_ga_performance_cost_daily_by_channel"], "unique_id": "model.sql_repository_bz.int_ga_performance_cost_daily_by_channel", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/performance_cost/int_ga_performance_cost_daily_by_channel.sql", "original_file_path": "models/02_intermediate/google_analytics/performance_cost/int_ga_performance_cost_daily_by_channel.sql", "name": "int_ga_performance_cost_daily_by_channel", "alias": "int_ga_performance_cost_daily_by_channel", "checksum": {"name": "sha256", "checksum": "0143a85ffe09dfb6101ef3cc759ea10d6c1aa1d8075e17a562afd79caef167d8"}, "tags": [], "refs": [["stg_ga_performance_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/performance_cost/int_ga_performance_cost_daily_by_channel.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.3146033, "compiled_sql": "with cost_data as (\n\n    select * from `bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_costs`\n),\n\naggregated_data as (\n\n    select \n        date,\n        format_datetime('%Y-%m', date) as year_month,\n        country,\n        custom_channel_grouping,\n        sum(impressions) as sum_impressions,\n        sum(adClicks) as sum_gads_clicks,\n        sum(adCost) as sum_gads_cost\n    from cost_data\n    group by 1,2,3,4\n)\n\nselect * from aggregated_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_performance_cost_daily_by_channel`"}, "model.sql_repository_bz.int_ga_performance_cost_daily_validation": {"raw_sql": "with daily_cost_data_analytics as(\r\n\r\n    select\r\n        date,\r\n        country,\r\n        round(adCost_analytics,2) as adCost_analytics\r\n    from {{ref('stg_ga_performance_cost_validation')}}\r\n    where date > '2022-03-01'\r\n),\r\n\r\ndaily_cost_data_BQ_export as(\r\n\r\n    select\r\n        date,\r\n        country,\r\n        round(sum(adCost),2) as adCost_BQ\r\n    from {{ref('stg_ga_performance_costs')}}\r\n    where date > '2022-03-01'\r\n    group by 1,2\r\n\r\n),\r\n\r\ncombined_cost_data as(\r\n\r\n    select\r\n    *,\r\n    (adCost_analytics/adCost_BQ) as adCost_deviation\r\n    from daily_cost_data_analytics\r\n    left join daily_cost_data_BQ_export using(date,country)\r\n)\r\n\r\nselect * from combined_cost_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga_performance_cost_validation", "model.sql_repository_bz.stg_ga_performance_costs"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "performance_cost", "int_ga_performance_cost_daily_validation"], "unique_id": "model.sql_repository_bz.int_ga_performance_cost_daily_validation", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/performance_cost/int_ga_performance_cost_daily_validation.sql", "original_file_path": "models/02_intermediate/google_analytics/performance_cost/int_ga_performance_cost_daily_validation.sql", "name": "int_ga_performance_cost_daily_validation", "alias": "int_ga_performance_cost_daily_validation", "checksum": {"name": "sha256", "checksum": "90efc616bf9fc8f5bbc8eb694e3d5d5290f14b278e4d8a3ebc12f21066879e41"}, "tags": [], "refs": [["stg_ga_performance_cost_validation"], ["stg_ga_performance_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/performance_cost/int_ga_performance_cost_daily_validation.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.3186574, "compiled_sql": "with daily_cost_data_analytics as(\n\n    select\n        date,\n        country,\n        round(adCost_analytics,2) as adCost_analytics\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_cost_validation`\n    where date > '2022-03-01'\n),\n\ndaily_cost_data_BQ_export as(\n\n    select\n        date,\n        country,\n        round(sum(adCost),2) as adCost_BQ\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_costs`\n    where date > '2022-03-01'\n    group by 1,2\n\n),\n\ncombined_cost_data as(\n\n    select\n    *,\n    (adCost_analytics/adCost_BQ) as adCost_deviation\n    from daily_cost_data_analytics\n    left join daily_cost_data_BQ_export using(date,country)\n)\n\nselect * from combined_cost_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_performance_cost_daily_validation`"}, "model.sql_repository_bz.int_ga4_sessions_transactions": {"raw_sql": "with ga4_sessions_daily as(\r\n    select\r\n        event_date_dt,\r\n        page_device,\r\n        page_hostname,\r\n        sum(ga4_sessions) as ga4_sessions\r\n    from {{ref('int_ga4_aggr_sessions')}}\r\n    group by 1,2,3\r\n\r\n),\r\n\r\nga4_transactions_revenue_daily as(\r\n    select\r\n        event_date_dt,\r\n        page_device,\r\n        page_hostname,\r\n        sum(ga4_transactions) as ga4_transactions,\r\n        sum(ga4_order_value) as ga4_order_value\r\n    from {{ref('int_ga4_aggr_transactions')}}\r\n    group by 1,2,3\r\n\r\n),\r\n\r\njoined_sessions_transactions_revenue as(\r\n    select\r\n        *\r\n    from ga4_sessions_daily\r\n    left join ga4_transactions_revenue_daily using(event_date_dt, page_device, page_hostname)\r\n)\r\n\r\n\r\nselect * from joined_sessions_transactions_revenue", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga4_aggr_sessions", "model.sql_repository_bz.int_ga4_aggr_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "joined", "int_ga4_sessions_transactions"], "unique_id": "model.sql_repository_bz.int_ga4_sessions_transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/joined/int_ga4_sessions_transactions.sql", "original_file_path": "models/02_intermediate/google_analytics/joined/int_ga4_sessions_transactions.sql", "name": "int_ga4_sessions_transactions", "alias": "int_ga4_sessions_transactions", "checksum": {"name": "sha256", "checksum": "4539e395e2b14e04d2c6c2b8bbea0167eeace255cdefd01ec6b455bc957d1de9"}, "tags": [], "refs": [["int_ga4_aggr_sessions"], ["int_ga4_aggr_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/joined/int_ga4_sessions_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.3226388, "compiled_sql": "with ga4_sessions_daily as(\n    select\n        event_date_dt,\n        page_device,\n        page_hostname,\n        sum(ga4_sessions) as ga4_sessions\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga4_aggr_sessions`\n    group by 1,2,3\n\n),\n\nga4_transactions_revenue_daily as(\n    select\n        event_date_dt,\n        page_device,\n        page_hostname,\n        sum(ga4_transactions) as ga4_transactions,\n        sum(ga4_order_value) as ga4_order_value\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga4_aggr_transactions`\n    group by 1,2,3\n\n),\n\njoined_sessions_transactions_revenue as(\n    select\n        *\n    from ga4_sessions_daily\n    left join ga4_transactions_revenue_daily using(event_date_dt, page_device, page_hostname)\n)\n\n\nselect * from joined_sessions_transactions_revenue", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga4_sessions_transactions`"}, "model.sql_repository_bz.int_ga_duplicate_teaser_events": {"raw_sql": "with\u00a0teaser_event_data_with_duplicates\u00a0as\u00a0(\r\n\r\n\u00a0\u00a0\u00a0\u00a0select\r\n        *,\r\n        count(*) over (partition by teaser_event_id) as duplicate_teaser_event_count\r\n\u00a0\u00a0\u00a0\u00a0from {{ ref('stg_ga_events_promotion') }}\r\n\u00a0\u00a0\u00a0\u00a0where date\u00a0between {{ get_last_n_days_date_range(14) }}\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\r\n)\u00a0\r\n\r\n/* filter by rows with min two exactly same teaser events */\r\nselect\u00a0distinct *\r\nfrom\u00a0teaser_event_data_with_duplicates\r\nwhere duplicate_teaser_event_count\u00a0>\u00a01", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_ga_events_promotion"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "filtered_grouped", "int_ga_duplicate_teaser_events"], "unique_id": "model.sql_repository_bz.int_ga_duplicate_teaser_events", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/filtered_grouped/int_ga_duplicate_teaser_events.sql", "original_file_path": "models/02_intermediate/google_analytics/filtered_grouped/int_ga_duplicate_teaser_events.sql", "name": "int_ga_duplicate_teaser_events", "alias": "int_ga_duplicate_teaser_events", "checksum": {"name": "sha256", "checksum": "aea78fde3384528bfaedcf745a567dffeeb1dfbd5b85284eaf7af712344c283a"}, "tags": [], "refs": [["stg_ga_events_promotion"]], "sources": [], "description": "this model lists all teaser events with at least on duplicate, ie same timestamp event. For tests, see source and marts", "columns": {"teaser_event_id": {"name": "teaser_event_id", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_analytics/filtered_grouped/_models_int_ga_filter_grouped.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/filtered_grouped/int_ga_duplicate_teaser_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.4594007, "compiled_sql": "with\u00a0teaser_event_data_with_duplicates\u00a0as\u00a0(\n\n\u00a0\u00a0\u00a0\u00a0select\n        *,\n        count(*) over (partition by teaser_event_id) as duplicate_teaser_event_count\n\u00a0\u00a0\u00a0\u00a0from `bergzeit`.`dbt_analytics_staging`.`stg_ga_events_promotion`\n\u00a0\u00a0\u00a0\u00a0where date\u00a0between \n    date_sub(current_date(), interval 14 day)\n    and date_sub(current_date(), interval 1 day)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n)\u00a0\n\n/* filter by rows with min two exactly same teaser events */\nselect\u00a0distinct *\nfrom\u00a0teaser_event_data_with_duplicates\nwhere duplicate_teaser_event_count\u00a0>\u00a01", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_duplicate_teaser_events`"}, "model.sql_repository_bz.int_ga4_aggr_sessions": {"raw_sql": "with ga4_standard_events as (\r\n\r\n    select\r\n        event_date_dt,\r\n        page_device,\r\n        page_hostname,\r\n        event_name\r\n    from {{ ref('stg_ga4_events_standard') }}\r\n\r\n),\r\n\r\nga4_sessions_daily as (\r\n\r\n    select\r\n        event_date_dt,\r\n        page_device,\r\n        page_hostname,\r\n        count(if(event_name = 'session_start', event_name,null)) as ga4_sessions\r\n    from ga4_standard_events\r\n    group by 1,2,3\r\n    \r\n)\r\n\r\nselect * from ga4_sessions_daily", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga4_events_standard"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "filtered_grouped", "int_ga4_aggr_sessions"], "unique_id": "model.sql_repository_bz.int_ga4_aggr_sessions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/filtered_grouped/int_ga4_aggr_sessions.sql", "original_file_path": "models/02_intermediate/google_analytics/filtered_grouped/int_ga4_aggr_sessions.sql", "name": "int_ga4_aggr_sessions", "alias": "int_ga4_aggr_sessions", "checksum": {"name": "sha256", "checksum": "c66dca9825d8c99da6939da9969a29bee613de2490d8682418657ac86078d449"}, "tags": [], "refs": [["stg_ga4_events_standard"]], "sources": [], "description": "", "columns": {}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_analytics/filtered_grouped/_models_int_ga_filter_grouped.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/filtered_grouped/int_ga4_aggr_sessions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.462964, "compiled_sql": "with ga4_standard_events as (\n\n    select\n        event_date_dt,\n        page_device,\n        page_hostname,\n        event_name\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_standard`\n\n),\n\nga4_sessions_daily as (\n\n    select\n        event_date_dt,\n        page_device,\n        page_hostname,\n        count(if(event_name = 'session_start', event_name,null)) as ga4_sessions\n    from ga4_standard_events\n    group by 1,2,3\n    \n)\n\nselect * from ga4_sessions_daily", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga4_aggr_sessions`"}, "model.sql_repository_bz.int_ga4_aggr_transactions": {"raw_sql": "with ga4_checkout_events as(\r\n    select\r\n        event_date_dt,\r\n        page_device,\r\n        page_hostname,\r\n        event_name,\r\n        order_value\r\n    from {{ref('stg_ga4_events_checkout')}}\r\n\r\n),\r\n\r\nga4_transactions_revenue_daily as(\r\n    select\r\n        event_date_dt,\r\n        page_device,\r\n        page_hostname,\r\n        count(if(event_name = 'purchase', event_name, null)) as ga4_transactions,\r\n        sum(order_value) as ga4_order_value\r\n    from ga4_checkout_events\r\n    group by 1,2,3\r\n\r\n)\r\n\r\nselect * from ga4_transactions_revenue_daily", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga4_events_checkout"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "filtered_grouped", "int_ga4_aggr_transactions"], "unique_id": "model.sql_repository_bz.int_ga4_aggr_transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/filtered_grouped/int_ga4_aggr_transactions.sql", "original_file_path": "models/02_intermediate/google_analytics/filtered_grouped/int_ga4_aggr_transactions.sql", "name": "int_ga4_aggr_transactions", "alias": "int_ga4_aggr_transactions", "checksum": {"name": "sha256", "checksum": "688f46e468c29a74a12b4c8c9cf587cc7adf39c7ddc54942d5290953a9eeb2ca"}, "tags": [], "refs": [["stg_ga4_events_checkout"]], "sources": [], "description": "", "columns": {}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_analytics/filtered_grouped/_models_int_ga_filter_grouped.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/filtered_grouped/int_ga4_aggr_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.4662535, "compiled_sql": "with ga4_checkout_events as(\n    select\n        event_date_dt,\n        page_device,\n        page_hostname,\n        event_name,\n        order_value\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_checkout`\n\n),\n\nga4_transactions_revenue_daily as(\n    select\n        event_date_dt,\n        page_device,\n        page_hostname,\n        count(if(event_name = 'purchase', event_name, null)) as ga4_transactions,\n        sum(order_value) as ga4_order_value\n    from ga4_checkout_events\n    group by 1,2,3\n\n)\n\nselect * from ga4_transactions_revenue_daily", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga4_aggr_transactions`"}, "model.sql_repository_bz.int_ga4_pageviews": {"raw_sql": "with ga4_page_views as (\r\n\r\n  select\r\n    event_date_dt,\r\n    page_device,\r\n    page_hostname,\r\n    page_location,\r\n    event_name,    \r\n    count(event_name) as event_count\r\n  from\r\n    {{ ref('stg_ga4_events_standard') }}\r\n  where\r\n    event_name in ('page_view')  -- analog purchase etc\r\n  group by 1,2,3,4,5\r\n\r\n) \r\n\r\nselect * from ga4_page_views", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga4_events_standard"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "filtered_grouped", "int_ga4_pageviews"], "unique_id": "model.sql_repository_bz.int_ga4_pageviews", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/filtered_grouped/int_ga4_pageviews.sql", "original_file_path": "models/02_intermediate/google_analytics/filtered_grouped/int_ga4_pageviews.sql", "name": "int_ga4_pageviews", "alias": "int_ga4_pageviews", "checksum": {"name": "sha256", "checksum": "8c4d89bbe73c963bcfc82fb8fb6d4a75ee19aa9095bc3d69126c4a4bd72fbda0"}, "tags": [], "refs": [["stg_ga4_events_standard"]], "sources": [], "description": "daily count of pageviews per page", "columns": {}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_analytics/filtered_grouped/_models_int_ga_filter_grouped.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/filtered_grouped/int_ga4_pageviews.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.4694846, "compiled_sql": "with ga4_page_views as (\n\n  select\n    event_date_dt,\n    page_device,\n    page_hostname,\n    page_location,\n    event_name,    \n    count(event_name) as event_count\n  from\n    `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_standard`\n  where\n    event_name in ('page_view')  -- analog purchase etc\n  group by 1,2,3,4,5\n\n) \n\nselect * from ga4_page_views", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga4_pageviews`"}, "model.sql_repository_bz.int_ga_sessions_by_hit_count_bucket": {"raw_sql": "with sessions_by_hit_count_bucket as (\r\n\r\n    select\r\n        date,\r\n        /* bucket grouping logic to view session distribution, limit per session is 500 */\r\n        case\r\n            when hits = 1 then 'b1 (1 hit)'\r\n            when hits >= 2 and hits <= 5 then 'b2 (2-5 hits)'\r\n            when hits >= 6 and hits <= 10 then 'b3 (6-10 hits)'\r\n            when hits >= 11 and hits <= 30 then 'b4 (11-30 hits)'\r\n            when hits >= 31 and hits <= 100 then 'b5 (31-100 hits)'\r\n            when hits >= 101 and hits <= 499 then 'b6 (101-499 hits)'\r\n            when hits = 500 then 'b7_500 hits'\r\n        end as hit_count_bucket,\r\n        count(*) as sessions\r\n    from {{ref('stg_ga_session_totals')}}\r\n    where date between {{ get_last_n_days_date_range(30) }}\r\n    group by 1,2\r\n\r\n)\r\n\r\nselect * from sessions_by_hit_count_bucket", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_ga_session_totals"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "sessions", "int_ga_sessions_by_hit_count_bucket"], "unique_id": "model.sql_repository_bz.int_ga_sessions_by_hit_count_bucket", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/sessions/int_ga_sessions_by_hit_count_bucket.sql", "original_file_path": "models/02_intermediate/google_analytics/sessions/int_ga_sessions_by_hit_count_bucket.sql", "name": "int_ga_sessions_by_hit_count_bucket", "alias": "int_ga_sessions_by_hit_count_bucket", "checksum": {"name": "sha256", "checksum": "e85a29bfbd0b4de35048892125165eff9670b2a12e937ae5724940d79fa6da78"}, "tags": [], "refs": [["stg_ga_session_totals"]], "sources": [], "description": "all daily sessions categorized into hit count buckets, to see low high hit volume sessions", "columns": {"hit_count_bucket": {"name": "hit_count_bucket", "description": "breaks a hit count integer value into a finite number of buckets, starting with one and ending with 500", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_analytics/_models_int_ga.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/sessions/int_ga_sessions_by_hit_count_bucket.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.424312, "compiled_sql": "with sessions_by_hit_count_bucket as (\n\n    select\n        date,\n        /* bucket grouping logic to view session distribution, limit per session is 500 */\n        case\n            when hits = 1 then 'b1 (1 hit)'\n            when hits >= 2 and hits <= 5 then 'b2 (2-5 hits)'\n            when hits >= 6 and hits <= 10 then 'b3 (6-10 hits)'\n            when hits >= 11 and hits <= 30 then 'b4 (11-30 hits)'\n            when hits >= 31 and hits <= 100 then 'b5 (31-100 hits)'\n            when hits >= 101 and hits <= 499 then 'b6 (101-499 hits)'\n            when hits = 500 then 'b7_500 hits'\n        end as hit_count_bucket,\n        count(*) as sessions\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_session_totals`\n    where date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1,2\n\n)\n\nselect * from sessions_by_hit_count_bucket", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_sessions_by_hit_count_bucket`"}, "model.sql_repository_bz.int_ga_average_hits_per_day": {"raw_sql": "with average_hits_per_day as (\r\n\r\n    select\r\n        date,\r\n        avg(hits) as avg_daily_hits\r\n    from {{ ref('stg_ga_session_totals') }}\r\n    group by 1\r\n\r\n)\r\n\r\nselect * from average_hits_per_day", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga_session_totals"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "events", "int_ga_average_hits_per_day"], "unique_id": "model.sql_repository_bz.int_ga_average_hits_per_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/events/int_ga_average_hits_per_day.sql", "original_file_path": "models/02_intermediate/google_analytics/events/int_ga_average_hits_per_day.sql", "name": "int_ga_average_hits_per_day", "alias": "int_ga_average_hits_per_day", "checksum": {"name": "sha256", "checksum": "af7a35ca7fdfb187ed461fc2f5855c62cfbaa0c618231871d1490c804993d0a1"}, "tags": [], "refs": [["stg_ga_session_totals"]], "sources": [], "description": "this model shows average hits per day", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_analytics/events/_models_int_ga_events.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/events/int_ga_average_hits_per_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.4861252, "compiled_sql": "with average_hits_per_day as (\n\n    select\n        date,\n        avg(hits) as avg_daily_hits\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_session_totals`\n    group by 1\n\n)\n\nselect * from average_hits_per_day", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_average_hits_per_day`"}, "model.sql_repository_bz.int_ga_teaser_test": {"raw_sql": "with unique_teaser_data_last_7_days as(\r\n\r\n    select distinct promo_name\r\n    from {{ ref('stg_ga_events_promotion') }}\r\n    where date between {{get_last_n_days_date_range(7)}}\r\n),\r\n\r\nsplit_teaser_name_data as(\r\n\r\n    select\r\n        *,\r\n        char_length(promo_name) - char_length(replace(promo_name, '_', '')) as underscores_count,\r\n        split(promo_name,'_')[safe_offset(0)] as promo_name_date,\r\n        split(promo_name,'_')[safe_offset(1)] as promo_name_teasertype,\r\n        split(promo_name,'_')[safe_offset(2)] as promo_name_device,\r\n        split(promo_name,'_')[safe_offset(3)] as promo_name_pagetype,\r\n        split(promo_name,'_')[safe_offset(4)] as promo_name_place,\r\n        split(promo_name,'_')[safe_offset(5)] as promo_name_motivation,\r\n        split(promo_name,'_')[safe_offset(6)] as promo_name_brand,\r\n        split(promo_name,'_')[safe_offset(7)] as promo_name_gender,\r\n        split(promo_name,'_')[safe_offset(8)] as promo_name_cta,\r\n    from unique_teaser_data_last_7_days\r\n    group by 1,2,3,4,5,6\r\n\r\n)\r\n\r\nselect * from split_teaser_name_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_ga_events_promotion"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": ["analytics-alerts", "daily-alerts"], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "events", "int_ga_teaser_test"], "unique_id": "model.sql_repository_bz.int_ga_teaser_test", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/events/int_ga_teaser_test.sql", "original_file_path": "models/02_intermediate/google_analytics/events/int_ga_teaser_test.sql", "name": "int_ga_teaser_test", "alias": "int_ga_teaser_test", "checksum": {"name": "sha256", "checksum": "8a75ecc59d7154a6c0a048cc8398d261a74cc52fe9305f14b87d9f3a70306c7f"}, "tags": ["analytics-alerts", "daily-alerts"], "refs": [["stg_ga_events_promotion"]], "sources": [], "description": "this model test the incoming teaser event data for compliance with the new naming standard", "columns": {"underscores_count": {"name": "underscores_count", "description": "this variable counts the underscore separators in the teaser name, with the new schema it should always be 8", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promo_name_date": {"name": "promo_name_date", "description": "part 1 of the promo name, the publication date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promo_name_teasertype": {"name": "promo_name_teasertype", "description": "part 2 of the promo name, the teasertype", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promo_name_device": {"name": "promo_name_device", "description": "part 3 of the promo name, the device", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promo_name_pagetype": {"name": "promo_name_pagetype", "description": "part 4 of the promo name, the pagetype", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promo_name_place": {"name": "promo_name_place", "description": "part 5 of the promo name, the place on the page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promo_name_motivation": {"name": "promo_name_motivation", "description": "part 6 of the promo name, the motivation behind the teaser", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promo_name_brand": {"name": "promo_name_brand", "description": "part 7 of the promo name, the brand included in the teaser if any", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promo_name_gender": {"name": "promo_name_gender", "description": "part 8 of the promo name, the gender targeted in the teaser if any", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promo_name_cta": {"name": "promo_name_cta", "description": "part 9 of the promo name, the cta, the only open text field in the name", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_analytics/events/_models_int_ga_events.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/events/int_ga_teaser_test.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.482404, "compiled_sql": "with unique_teaser_data_last_7_days as(\n\n    select distinct promo_name\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_events_promotion`\n    where date between \n    date_sub(current_date(), interval 7 day)\n    and date_sub(current_date(), interval 1 day)\n\n),\n\nsplit_teaser_name_data as(\n\n    select\n        *,\n        char_length(promo_name) - char_length(replace(promo_name, '_', '')) as underscores_count,\n        split(promo_name,'_')[safe_offset(0)] as promo_name_date,\n        split(promo_name,'_')[safe_offset(1)] as promo_name_teasertype,\n        split(promo_name,'_')[safe_offset(2)] as promo_name_device,\n        split(promo_name,'_')[safe_offset(3)] as promo_name_pagetype,\n        split(promo_name,'_')[safe_offset(4)] as promo_name_place,\n        split(promo_name,'_')[safe_offset(5)] as promo_name_motivation,\n        split(promo_name,'_')[safe_offset(6)] as promo_name_brand,\n        split(promo_name,'_')[safe_offset(7)] as promo_name_gender,\n        split(promo_name,'_')[safe_offset(8)] as promo_name_cta,\n    from unique_teaser_data_last_7_days\n    group by 1,2,3,4,5,6\n\n)\n\nselect * from split_teaser_name_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_teaser_test`"}, "model.sql_repository_bz.int_ga4_aggr_event_count": {"raw_sql": "with checkout_events as (\r\n\r\n    select\r\n        event_date_dt,\r\n        page_hostname,\r\n        sk_id,\r\n        'checkout' as event_type\r\n    from {{ ref('stg_ga4_events_checkout') }}\r\n    where event_date_dt between {{ get_last_n_days_date_range(14) }}\r\n\r\n),\r\n\r\nstandard_events as (\r\n\r\n    select\r\n        event_date_dt,\r\n        page_hostname,\r\n        sk_id,\r\n        'standard' as event_type\r\n    from {{ ref('stg_ga4_events_standard') }}\r\n    where event_date_dt between {{ get_last_n_days_date_range(14) }}\r\n\r\n),\r\n\r\ncustom_events as (\r\n\r\n    select\r\n        event_date_dt,\r\n        page_hostname,\r\n        sk_id,\r\n        'custom' as event_type\r\n    from {{ ref('stg_ga4_events_custom') }}\r\n    where event_date_dt between {{ get_last_n_days_date_range(14) }}\r\n\r\n),\r\n\r\nunioned_data as (\r\n\r\n    select *\r\n    from checkout_events\r\n\r\n    union all\r\n\r\n    select * \r\n    from standard_events\r\n\r\n    union all\r\n\r\n    select *\r\n    from custom_events\r\n    \r\n),\r\n\r\naggregated_data as (\r\n\r\n    select\r\n        event_date_dt,\r\n        page_hostname,\r\n        countif(event_type = 'checkout') as event_count_checkout,\r\n        countif(event_type = 'standard') as event_count_standard,\r\n        countif(event_type = 'custom') as event_count_custom\r\n    from unioned_data\r\n    group by 1,2\r\n)\r\n\r\nselect * from aggregated_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_ga4_events_checkout", "model.sql_repository_bz.stg_ga4_events_standard", "model.sql_repository_bz.stg_ga4_events_custom"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "events", "int_ga4_aggr_event_count"], "unique_id": "model.sql_repository_bz.int_ga4_aggr_event_count", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/events/int_ga4_aggr_event_count.sql", "original_file_path": "models/02_intermediate/google_analytics/events/int_ga4_aggr_event_count.sql", "name": "int_ga4_aggr_event_count", "alias": "int_ga4_aggr_event_count", "checksum": {"name": "sha256", "checksum": "144db52e02918c9033a9dd525dbf9086c1a3853831ae10ba6f739eedc6b1eafb"}, "tags": [], "refs": [["stg_ga4_events_checkout"], ["stg_ga4_events_standard"], ["stg_ga4_events_custom"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/events/int_ga4_aggr_event_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.3768773, "compiled_sql": "with checkout_events as (\n\n    select\n        event_date_dt,\n        page_hostname,\n        sk_id,\n        'checkout' as event_type\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_checkout`\n    where event_date_dt between \n    date_sub(current_date(), interval 14 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\nstandard_events as (\n\n    select\n        event_date_dt,\n        page_hostname,\n        sk_id,\n        'standard' as event_type\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_standard`\n    where event_date_dt between \n    date_sub(current_date(), interval 14 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\ncustom_events as (\n\n    select\n        event_date_dt,\n        page_hostname,\n        sk_id,\n        'custom' as event_type\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_custom`\n    where event_date_dt between \n    date_sub(current_date(), interval 14 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\nunioned_data as (\n\n    select *\n    from checkout_events\n\n    union all\n\n    select * \n    from standard_events\n\n    union all\n\n    select *\n    from custom_events\n    \n),\n\naggregated_data as (\n\n    select\n        event_date_dt,\n        page_hostname,\n        countif(event_type = 'checkout') as event_count_checkout,\n        countif(event_type = 'standard') as event_count_standard,\n        countif(event_type = 'custom') as event_count_custom\n    from unioned_data\n    group by 1,2\n)\n\nselect * from aggregated_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga4_aggr_event_count`"}, "model.sql_repository_bz.int_ga_hits_by_property_and_day": {"raw_sql": "with hits_by_property_and_day as (\r\n\r\n    select\r\n        ga_property,\r\n        ga_date as date,\r\n        hit_type,\r\n        count(hit_type) as hits\r\n    from {{ ref('stg_ga_hits_all_properties') }}\r\n    group by 1,2,3\r\n\r\n)\r\n\r\nselect * from hits_by_property_and_day", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga_hits_all_properties"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "events", "int_ga_hits_by_property_and_day"], "unique_id": "model.sql_repository_bz.int_ga_hits_by_property_and_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_analytics/events/int_ga_hits_by_property_and_day.sql", "original_file_path": "models/02_intermediate/google_analytics/events/int_ga_hits_by_property_and_day.sql", "name": "int_ga_hits_by_property_and_day", "alias": "int_ga_hits_by_property_and_day", "checksum": {"name": "sha256", "checksum": "9310048e01608a398dfd177be3017ee4c7de36cabb68a29b27bde4b23d6d5a9d"}, "tags": [], "refs": [["stg_ga_hits_all_properties"]], "sources": [], "description": "this model shows all Analytics hits of all 360 properties per day, i.e. Overall and DE/AT/CH", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_analytics/events/_models_int_ga_events.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/events/int_ga_hits_by_property_and_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.4896798, "compiled_sql": "with hits_by_property_and_day as (\n\n    select\n        ga_property,\n        ga_date as date,\n        hit_type,\n        count(hit_type) as hits\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_hits_all_properties`\n    group by 1,2,3\n\n)\n\nselect * from hits_by_property_and_day", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_ga_hits_by_property_and_day`"}, "model.sql_repository_bz.int_gsc_query_by_brand": {"raw_sql": "with gsc_data as (\r\n\r\n    select\r\n        *\r\n    from {{ ref('stg_gsc_data') }}\r\n    where\r\n        gsc_date between {{ get_last_n_days_date_range(30) }}\r\n        and gsc_country = 'https://www.bergzeit.de/'\r\n        /* and query not like('%gr\u00f6\u00dfe%') -- exclude searches for size tables and size comparisons */\r\n\r\n),\r\n\r\ngrouped_gsc_data as (\r\n\r\n    select\r\n        gsc_date,\r\n        lower(device) as device,\r\n        query,\r\n        gsc_country,\r\n        sum(impressions) as total_impressions,\r\n        sum(if(page like '%magazin%', impressions, 0)) as magazin_impressions,\r\n        sum(if(page not like '%magazin%', impressions, 0)) as shop_impressions,\r\n        sum(clicks) as total_clicks,\r\n        sum(if(page like '%magazin%', clicks, 0)) as magazin_clicks,\r\n        sum(if(page not like '%magazin%', clicks, 0)) as shop_clicks,\r\n    from gsc_data\r\n    group by 1,2,3,4\r\n    order by 1,3\r\n\r\n),\r\n\r\n-- fetch unique brands from Merchant Center\r\nbrands as (\r\n\r\n    select *\r\n    from {{ ref('stg_gmc_product_brands') }}\r\n\r\n),\r\n\r\n-- classify gsc keywords by brand, comparing to merchant center brand list\r\nqueries_joined_with_brand as (\r\n\r\n    select distinct\r\n        query as seo_search_keyword,\r\n        brand\r\n    from grouped_gsc_data\r\n    join brands on\r\n        regexp_contains(grouped_gsc_data.query, concat(r'(?i)\\b', lower(brands.brand), r'\\b'))\r\n\r\n),\r\n\r\n\r\n-- fetch unique last product categories from merchant center\r\nproduct_categories as (\r\n\r\n    select distinct\r\n        last_category_short\r\n    from {{ref('int_gmc_product_categories')}}\r\n\r\n),\r\n\r\n-- classify gsc keywords by category, comparing to merchant center category list\r\nqueries_joined_with_product_categories as (\r\n\r\n    select distinct\r\n        replace(query,'-',' ') as search_keyword,\r\n        last_category_short\r\n    from grouped_gsc_data\r\n    join product_categories on\r\n        regexp_contains(grouped_gsc_data.query, product_categories.last_category_short) --concat(r'(?i)\\b', product_categories.last_category_short, r'\\b')\r\n\r\n),\r\n\r\n\r\nqueries_with_brand_and_category_classification as (\r\n\r\n    select\r\n        * except(seo_search_keyword, search_keyword)\r\n    from grouped_gsc_data\r\n    left join queries_joined_with_brand on query = seo_search_keyword\r\n    left join queries_joined_with_product_categories on query = search_keyword\r\n    order by gsc_date desc, brand desc\r\n    \r\n)\r\n\r\n\r\nselect * from queries_with_brand_and_category_classification", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_gsc_data", "model.sql_repository_bz.stg_gmc_product_brands", "model.sql_repository_bz.int_gmc_product_categories"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_organic", "int_gsc_query_by_brand"], "unique_id": "model.sql_repository_bz.int_gsc_query_by_brand", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_organic/int_gsc_query_by_brand.sql", "original_file_path": "models/02_intermediate/google_organic/int_gsc_query_by_brand.sql", "name": "int_gsc_query_by_brand", "alias": "int_gsc_query_by_brand", "checksum": {"name": "sha256", "checksum": "b259277a940b52f465241f2db0d14f852b4448fc0e3566e168dd6847de550e64"}, "tags": [], "refs": [["stg_gsc_data"], ["stg_gmc_product_brands"], ["int_gmc_product_categories"]], "sources": [], "description": "this models groups gsc queries by brand and product category", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_organic/_models_int_organic.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_organic/int_gsc_query_by_brand.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.6173203, "compiled_sql": "with gsc_data as (\n\n    select\n        *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\n    where\n        gsc_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n        and gsc_country = 'https://www.bergzeit.de/'\n        /* and query not like('%gr\u00f6\u00dfe%') -- exclude searches for size tables and size comparisons */\n\n),\n\ngrouped_gsc_data as (\n\n    select\n        gsc_date,\n        lower(device) as device,\n        query,\n        gsc_country,\n        sum(impressions) as total_impressions,\n        sum(if(page like '%magazin%', impressions, 0)) as magazin_impressions,\n        sum(if(page not like '%magazin%', impressions, 0)) as shop_impressions,\n        sum(clicks) as total_clicks,\n        sum(if(page like '%magazin%', clicks, 0)) as magazin_clicks,\n        sum(if(page not like '%magazin%', clicks, 0)) as shop_clicks,\n    from gsc_data\n    group by 1,2,3,4\n    order by 1,3\n\n),\n\n-- fetch unique brands from Merchant Center\nbrands as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_brands`\n\n),\n\n-- classify gsc keywords by brand, comparing to merchant center brand list\nqueries_joined_with_brand as (\n\n    select distinct\n        query as seo_search_keyword,\n        brand\n    from grouped_gsc_data\n    join brands on\n        regexp_contains(grouped_gsc_data.query, concat(r'(?i)\\b', lower(brands.brand), r'\\b'))\n\n),\n\n\n-- fetch unique last product categories from merchant center\nproduct_categories as (\n\n    select distinct\n        last_category_short\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_product_categories`\n\n),\n\n-- classify gsc keywords by category, comparing to merchant center category list\nqueries_joined_with_product_categories as (\n\n    select distinct\n        replace(query,'-',' ') as search_keyword,\n        last_category_short\n    from grouped_gsc_data\n    join product_categories on\n        regexp_contains(grouped_gsc_data.query, product_categories.last_category_short) --concat(r'(?i)\\b', product_categories.last_category_short, r'\\b')\n\n),\n\n\nqueries_with_brand_and_category_classification as (\n\n    select\n        * except(seo_search_keyword, search_keyword)\n    from grouped_gsc_data\n    left join queries_joined_with_brand on query = seo_search_keyword\n    left join queries_joined_with_product_categories on query = search_keyword\n    order by gsc_date desc, brand desc\n    \n)\n\n\nselect * from queries_with_brand_and_category_classification", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gsc_query_by_brand`"}, "model.sql_repository_bz.int_crawl_de_brg": {"raw_sql": "with crawled_brg_urls as (\r\n\r\n    select distinct\r\n        domain,\r\n        url_noutm,\r\n        status_code,\r\n        count(url) as crawl_count\r\n    from {{ ref('stg_crawl_gbot_logfiles')}}\r\n    where\r\n        gbot_date between \"2021-12-01\" and date_sub(current_date(), interval 1 day) and\r\n        url like ('%-brg%')\r\n    group by 1,2,3\r\n\r\n)\r\n\r\nselect * from crawled_brg_urls", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_crawl_gbot_logfiles"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_organic", "int_crawl_de_brg"], "unique_id": "model.sql_repository_bz.int_crawl_de_brg", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_organic/int_crawl_de_brg.sql", "original_file_path": "models/02_intermediate/google_organic/int_crawl_de_brg.sql", "name": "int_crawl_de_brg", "alias": "int_crawl_de_brg", "checksum": {"name": "sha256", "checksum": "7fef303adb58f98e1b03942088932fc99ba7055aa0e85c6edd0a68e54982988c"}, "tags": [], "refs": [["stg_crawl_gbot_logfiles"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_organic/int_crawl_de_brg.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.4469295, "compiled_sql": "with crawled_brg_urls as (\n\n    select distinct\n        domain,\n        url_noutm,\n        status_code,\n        count(url) as crawl_count\n    from `bergzeit`.`dbt_analytics_staging`.`stg_crawl_gbot_logfiles`\n    where\n        gbot_date between \"2021-12-01\" and date_sub(current_date(), interval 1 day) and\n        url like ('%-brg%')\n    group by 1,2,3\n\n)\n\nselect * from crawled_brg_urls", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_crawl_de_brg`"}, "model.sql_repository_bz.int_gsc_and_crawl_data": {"raw_sql": "with crawl_data as (\r\n\r\n  select\r\n    gbot_date,\r\n    url_noutm,\r\n    status_code,\r\n    count(url) as request_count\r\n  from {{ ref('stg_crawl_gbot_logfiles') }}\r\n  where\r\n    gbot_date between {{ get_last_n_days_date_range(30) }}\r\n  group by 1,2,3\r\n\r\n),\r\n\r\ngsc_data as (\r\n\r\n  select\r\n    gsc_date,\r\n    page,\r\n    sum(clicks) as clicks,\r\n    sum(impressions) as impressions,\r\n    round(sum(clicks) / sum(impressions), 4) as ctr,\r\n    avg(position) as position\r\n  from {{ ref('stg_gsc_data') }}\r\n  where gsc_date between {{ get_last_n_days_date_range(30) }}\r\n  group by 1,2\r\n\r\n),\r\n\r\ngsc_and_crawl_data as (\r\n\r\n  select *\r\n  from crawl_data as crawl\r\n  left join gsc_data as gsc on\r\n    crawl.gbot_date = gsc.gsc_date\r\n    and crawl.url_noutm = gsc.page\r\n\r\n)\r\n\r\nselect * from gsc_and_crawl_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_crawl_gbot_logfiles", "model.sql_repository_bz.stg_gsc_data"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_organic", "int_gsc_and_crawl_data"], "unique_id": "model.sql_repository_bz.int_gsc_and_crawl_data", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_organic/int_gsc_and_crawl_data.sql", "original_file_path": "models/02_intermediate/google_organic/int_gsc_and_crawl_data.sql", "name": "int_gsc_and_crawl_data", "alias": "int_gsc_and_crawl_data", "checksum": {"name": "sha256", "checksum": "95b3035156f253882c5b6463756ac6fe92884ffb56018e8512998cfaee0bbb27"}, "tags": [], "refs": [["stg_crawl_gbot_logfiles"], ["stg_gsc_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_organic/int_gsc_and_crawl_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.4510033, "compiled_sql": "with crawl_data as (\n\n  select\n    gbot_date,\n    url_noutm,\n    status_code,\n    count(url) as request_count\n  from `bergzeit`.`dbt_analytics_staging`.`stg_crawl_gbot_logfiles`\n  where\n    gbot_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n  group by 1,2,3\n\n),\n\ngsc_data as (\n\n  select\n    gsc_date,\n    page,\n    sum(clicks) as clicks,\n    sum(impressions) as impressions,\n    round(sum(clicks) / sum(impressions), 4) as ctr,\n    avg(position) as position\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\n  where gsc_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n  group by 1,2\n\n),\n\ngsc_and_crawl_data as (\n\n  select *\n  from crawl_data as crawl\n  left join gsc_data as gsc on\n    crawl.gbot_date = gsc.gsc_date\n    and crawl.url_noutm = gsc.page\n\n)\n\nselect * from gsc_and_crawl_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gsc_and_crawl_data`"}, "model.sql_repository_bz.int_crawl_nondach_recent": {"raw_sql": "with crawled_urls as (\r\n\r\n    select distinct\r\n        domain,\r\n        url_noutm,\r\n        status_code,\r\n        count(url) as crawl_count\r\n    from {{ ref('stg_crawl_gbot_logfiles')}}\r\n    where\r\n        gbot_date between \"2021-12-01\" and \"2022-02-13\" and\r\n        domain in ('www.bergzeit.it', 'www.bergzeit.co.uk', 'www.bergzeit.nl', 'www.bergzeit.dk') and\r\n        url not like ('%PUT /%') and\r\n        url not like ('%/lp/%') and\r\n        url not like ('%/out/%') and\r\n        url not like ('%/om/%') and\r\n        url not like ('%/np/%') and\r\n        url not like ('%/sp/%') and\r\n        url not like ('%/journal/%') and\r\n        url not like ('%/magazine/%')\r\n    group by 1,2,3\r\n    having crawl_count > 2\r\n\r\n)\r\n\r\nselect * from crawled_urls", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_crawl_gbot_logfiles"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_organic", "int_crawl_nondach_recent"], "unique_id": "model.sql_repository_bz.int_crawl_nondach_recent", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_organic/int_crawl_nondach_recent.sql", "original_file_path": "models/02_intermediate/google_organic/int_crawl_nondach_recent.sql", "name": "int_crawl_nondach_recent", "alias": "int_crawl_nondach_recent", "checksum": {"name": "sha256", "checksum": "3310e8d836e1ffb4bf8e181120f9e61ccd07a6c5c9af576d710c79107f6ba570"}, "tags": [], "refs": [["stg_crawl_gbot_logfiles"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_organic/int_crawl_nondach_recent.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.469831, "compiled_sql": "with crawled_urls as (\n\n    select distinct\n        domain,\n        url_noutm,\n        status_code,\n        count(url) as crawl_count\n    from `bergzeit`.`dbt_analytics_staging`.`stg_crawl_gbot_logfiles`\n    where\n        gbot_date between \"2021-12-01\" and \"2022-02-13\" and\n        domain in ('www.bergzeit.it', 'www.bergzeit.co.uk', 'www.bergzeit.nl', 'www.bergzeit.dk') and\n        url not like ('%PUT /%') and\n        url not like ('%/lp/%') and\n        url not like ('%/out/%') and\n        url not like ('%/om/%') and\n        url not like ('%/np/%') and\n        url not like ('%/sp/%') and\n        url not like ('%/journal/%') and\n        url not like ('%/magazine/%')\n    group by 1,2,3\n    having crawl_count > 2\n\n)\n\nselect * from crawled_urls", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_crawl_nondach_recent`"}, "model.sql_repository_bz.int_sitemap_and_crawl_and_gsc_data": {"raw_sql": "with sitemap_urls as (\r\n\r\n    select distinct\r\n        sitemap_name,\r\n        url\r\n    from {{ref('stg_crawl_sitemap_urls_all')}}\r\n    where\r\n        -- filter German sitemap\r\n        sitemap_country = 'de'\r\n        and crawl_date between {{get_last_n_days_date_range(30)}}\r\n\r\n), \r\n\r\ncrawled_urls as (\r\n\r\n    select\r\n        url_noutm as crawled_url,\r\n        count(url) as crawl_count\r\n    from {{ref('stg_crawl_gbot_logfiles')}}\r\n    where\r\n        gbot_date between {{get_last_n_days_date_range(30)}}\r\n        and domain like '%bergzeit.de%'\r\n    group by 1\r\n\r\n),\r\n\r\ngsc_urls_with_data as (\r\n\r\n    select\r\n        page as gsc_url,\r\n        sum(impressions) as impressions,\r\n        sum(clicks) as clicks\r\n    from {{ ref('stg_gsc_data') }}\r\n    where\r\n        gsc_date between {{get_last_n_days_date_range(30)}}\r\n        and gsc_country = 'https://www.bergzeit.de/'\r\n    group by 1\r\n\r\n),\r\n\r\nsitemap_urls_with_crawl_count_and_gsc_data as (\r\n\r\n    select\r\n      * except (crawled_url, gsc_url)\r\n    from sitemap_urls as sitemap\r\n    left join crawled_urls as crawled on\r\n        sitemap.url = crawled.crawled_url\r\n    left join gsc_urls_with_data as gsc on\r\n        sitemap.url = gsc.gsc_url\r\n\r\n)\r\n\r\nselect * from sitemap_urls_with_crawl_count_and_gsc_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all", "model.sql_repository_bz.stg_crawl_gbot_logfiles", "model.sql_repository_bz.stg_gsc_data"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_organic", "int_sitemap_and_crawl_and_gsc_data"], "unique_id": "model.sql_repository_bz.int_sitemap_and_crawl_and_gsc_data", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_organic/int_sitemap_and_crawl_and_gsc_data.sql", "original_file_path": "models/02_intermediate/google_organic/int_sitemap_and_crawl_and_gsc_data.sql", "name": "int_sitemap_and_crawl_and_gsc_data", "alias": "int_sitemap_and_crawl_and_gsc_data", "checksum": {"name": "sha256", "checksum": "28fb9e6d88e33317cb5852bcdf80316f3e4e90885d519b8c0210ef2f1fe296b5"}, "tags": [], "refs": [["stg_crawl_sitemap_urls_all"], ["stg_crawl_gbot_logfiles"], ["stg_gsc_data"]], "sources": [], "description": "this model lists urls by sitemap and crawldata, as well as clicks and impressions from search console", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_organic/_models_int_organic.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_organic/int_sitemap_and_crawl_and_gsc_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.6164088, "compiled_sql": "with sitemap_urls as (\n\n    select distinct\n        sitemap_name,\n        url\n    from `bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_all`\n    where\n        -- filter German sitemap\n        sitemap_country = 'de'\n        and crawl_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n), \n\ncrawled_urls as (\n\n    select\n        url_noutm as crawled_url,\n        count(url) as crawl_count\n    from `bergzeit`.`dbt_analytics_staging`.`stg_crawl_gbot_logfiles`\n    where\n        gbot_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n        and domain like '%bergzeit.de%'\n    group by 1\n\n),\n\ngsc_urls_with_data as (\n\n    select\n        page as gsc_url,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\n    where\n        gsc_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n        and gsc_country = 'https://www.bergzeit.de/'\n    group by 1\n\n),\n\nsitemap_urls_with_crawl_count_and_gsc_data as (\n\n    select\n      * except (crawled_url, gsc_url)\n    from sitemap_urls as sitemap\n    left join crawled_urls as crawled on\n        sitemap.url = crawled.crawled_url\n    left join gsc_urls_with_data as gsc on\n        sitemap.url = gsc.gsc_url\n\n)\n\nselect * from sitemap_urls_with_crawl_count_and_gsc_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_sitemap_and_crawl_and_gsc_data`"}, "model.sql_repository_bz.int_gsc_data_for_top_pages": {"raw_sql": "/* shop top pages and magazin contentperlen */\r\nwith top_pages as(\r\n\r\n    select\r\n        platform,\r\n        hub,\r\n        selected_keyword,\r\n        url_noutm\r\n    from {{ ref('stg_gsheets_seo_top_pages') }}\r\n\r\n),\r\n\r\n/* aggregate gsc data on page level (exclude the query dimension) */\r\ngsc_data as(\r\n    select\r\n        gsc_date,\r\n        lower(device) as device,\r\n        page,\r\n        replace(\r\n            case\r\n                when gsc_country like ('%co.uk%') then split(gsc_country, '.')[ offset (3)]\r\n                else split(gsc_country, '.')[offset(2)]\r\n            end,\r\n        '/','') as gsc_country,\r\n        sum(clicks) as clicks,\r\n        sum(impressions) as impressions,\r\n        round(avg(ctr),2) as ctr,\r\n        round(avg(position),2) as position\r\n    from {{ref('stg_gsc_data')}}\r\n    where gsc_country = 'https://www.bergzeit.de/'\r\n    group by 1,2,3,4\r\n    order by gsc_date asc\r\n),\r\n\r\n/*combine gsc data to the top pages and magazin reworked input list */\r\ngsc_data_joined_with_top_pages as(\r\n\r\n    select\r\n        * EXCEPT (page)\r\n    from gsc_data as gsc\r\n        left join top_pages as top on gsc.page = top.url_noutm\r\n    where top.url_noutm is not null\r\n\r\n)\r\n\r\nselect * from gsc_data_joined_with_top_pages", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gsheets_seo_top_pages", "model.sql_repository_bz.stg_gsc_data"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_organic", "int_gsc_data_for_top_pages"], "unique_id": "model.sql_repository_bz.int_gsc_data_for_top_pages", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_organic/int_gsc_data_for_top_pages.sql", "original_file_path": "models/02_intermediate/google_organic/int_gsc_data_for_top_pages.sql", "name": "int_gsc_data_for_top_pages", "alias": "int_gsc_data_for_top_pages", "checksum": {"name": "sha256", "checksum": "a4fe51550083c40bf83db62044562ef6d113f8ebec348bfdfb017aeccf365266"}, "tags": [], "refs": [["stg_gsheets_seo_top_pages"], ["stg_gsc_data"]], "sources": [], "description": "joins a list of top URLs with their daily gsc data", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_organic/_models_int_organic.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_organic/int_gsc_data_for_top_pages.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.618378, "compiled_sql": "/* shop top pages and magazin contentperlen */\nwith top_pages as(\n\n    select\n        platform,\n        hub,\n        selected_keyword,\n        url_noutm\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_seo_top_pages`\n\n),\n\n/* aggregate gsc data on page level (exclude the query dimension) */\ngsc_data as(\n    select\n        gsc_date,\n        lower(device) as device,\n        page,\n        replace(\n            case\n                when gsc_country like ('%co.uk%') then split(gsc_country, '.')[ offset (3)]\n                else split(gsc_country, '.')[offset(2)]\n            end,\n        '/','') as gsc_country,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        round(avg(ctr),2) as ctr,\n        round(avg(position),2) as position\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\n    where gsc_country = 'https://www.bergzeit.de/'\n    group by 1,2,3,4\n    order by gsc_date asc\n),\n\n/*combine gsc data to the top pages and magazin reworked input list */\ngsc_data_joined_with_top_pages as(\n\n    select\n        * EXCEPT (page)\n    from gsc_data as gsc\n        left join top_pages as top on gsc.page = top.url_noutm\n    where top.url_noutm is not null\n\n)\n\nselect * from gsc_data_joined_with_top_pages", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gsc_data_for_top_pages`"}, "model.sql_repository_bz.int_gsc_ga_urlage_def": {"raw_sql": "with gsc_sitemap_data as (\r\n\r\n    select {{ dbt_utils.star(ref('int_gsc_sitemap_urlage_def')) }}\r\n    from {{ref('int_gsc_sitemap_urlage_def')}}\r\n\r\n),\r\n\r\n/* page type naming was changed to english lowercase in March 2021 */\r\npage_types_old as (\r\n\r\n    select distinct\r\n        page_path,\r\n        page_type,\r\n        'old' as url_age\r\n    from {{ ref('stg_ga_page_types') }}\r\n    where date between '2021-01-01' and '2022-03-01'\r\n\r\n),\r\n\r\npage_types_new as (\r\n\r\n    select distinct\r\n        page_path,\r\n        page_type,\r\n        'new' as url_age\r\n    from {{ref('stg_ga_page_types')}}\r\n    where date between '2022-03-18' and DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\r\n\r\n),\r\n\r\nmerged_gsc_sitemap_and_pagetype_data as (\r\n\r\n    select distinct\r\n        gsc.gsc_date,\r\n        gsc.page,\r\n        gsc.country,\r\n        gsc.clicks,\r\n        gsc.impressions,\r\n        gsc.sitemap_name,\r\n        case\r\n            when ne.page_type is not null then ne.page_type\r\n            else old.page_type\r\n        end as pagetype,\r\n        case\r\n            when gsc.url_age is not null then gsc.url_age\r\n            else\r\n                case\r\n                    when ne.url_age is not null then ne.url_age\r\n                    else old.url_age\r\n                end\r\n        end as url_age\r\n    from gsc_sitemap_data as gsc\r\n    left join page_types_new as ne on ne.pagepath = gsc.page\r\n    left join page_types_old as old on old.pagepath = gsc.page\r\n\r\n)\r\n\r\nselect * from merged_gsc_sitemap_and_pagetype_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.sql_repository_bz.int_gsc_sitemap_urlage_def", "model.sql_repository_bz.int_gsc_sitemap_urlage_def", "model.sql_repository_bz.stg_ga_page_types", "model.sql_repository_bz.stg_ga_page_types"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_organic", "int_gsc_ga_urlage_def"], "unique_id": "model.sql_repository_bz.int_gsc_ga_urlage_def", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_organic/int_gsc_ga_urlage_def.sql", "original_file_path": "models/02_intermediate/google_organic/int_gsc_ga_urlage_def.sql", "name": "int_gsc_ga_urlage_def", "alias": "int_gsc_ga_urlage_def", "checksum": {"name": "sha256", "checksum": "33eac543749614e85b8ff7774adcc5e15f11c4466b5f66bb201579bd7408f37c"}, "tags": [], "refs": [["int_gsc_sitemap_urlage_def"], ["int_gsc_sitemap_urlage_def"], ["stg_ga_page_types"], ["stg_ga_page_types"]], "sources": [], "description": "second step after int_gsc_sitemap_urlage_def, uses ga data to classify the remaining GSC URLs as old or new and appends the pagetype to all URLs.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_organic/_models_int_organic.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_organic/int_gsc_ga_urlage_def.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.622058, "compiled_sql": "with gsc_sitemap_data as (\n\n    select \n\n    `gsc_date`,\n  `page`,\n  `sitemap_name`,\n  `country`,\n  `url_age`,\n  `clicks`,\n  `impressions`\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gsc_sitemap_urlage_def`\n\n),\n\n/* page type naming was changed to english lowercase in March 2021 */\npage_types_old as (\n\n    select distinct\n        page_path,\n        page_type,\n        'old' as url_age\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_page_types`\n    where date between '2021-01-01' and '2022-03-01'\n\n),\n\npage_types_new as (\n\n    select distinct\n        page_path,\n        page_type,\n        'new' as url_age\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_page_types`\n    where date between '2022-03-18' and DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\n\n),\n\nmerged_gsc_sitemap_and_pagetype_data as (\n\n    select distinct\n        gsc.gsc_date,\n        gsc.page,\n        gsc.country,\n        gsc.clicks,\n        gsc.impressions,\n        gsc.sitemap_name,\n        case\n            when ne.page_type is not null then ne.page_type\n            else old.page_type\n        end as pagetype,\n        case\n            when gsc.url_age is not null then gsc.url_age\n            else\n                case\n                    when ne.url_age is not null then ne.url_age\n                    else old.url_age\n                end\n        end as url_age\n    from gsc_sitemap_data as gsc\n    left join page_types_new as ne on ne.pagepath = gsc.page\n    left join page_types_old as old on old.pagepath = gsc.page\n\n)\n\nselect * from merged_gsc_sitemap_and_pagetype_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gsc_ga_urlage_def`"}, "model.sql_repository_bz.int_gsc_data_shop_mag_label": {"raw_sql": "with gsc_data as (\r\n\r\n    select *\r\n    from {{ ref ('stg_gsc_data') }}\r\n\r\n),\r\n\r\ngsc_data_aggr as (\r\n\r\n    select\r\n        gsc_date,\r\n        page,\r\n        gsc_country,\r\n        case\r\n            when page like '%magazin%' then 'magazin'\r\n            when page not like '%magazin%' then 'shop'\r\n        end as platform,\r\n        sum(clicks) as clicks,\r\n        sum(impressions) as impressions\r\n    from gsc_data\r\n    where\r\n        page not like '%outdoor-broker%'\r\n        and gsc_date between {{ get_last_n_days_date_range(30) }}\r\n    group by 1,2,3,4\r\n\r\n)\r\n\r\nselect * from gsc_data_aggr", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_gsc_data"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_organic", "int_gsc_data_shop_mag_label"], "unique_id": "model.sql_repository_bz.int_gsc_data_shop_mag_label", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_organic/int_gsc_data_shop_mag_label.sql", "original_file_path": "models/02_intermediate/google_organic/int_gsc_data_shop_mag_label.sql", "name": "int_gsc_data_shop_mag_label", "alias": "int_gsc_data_shop_mag_label", "checksum": {"name": "sha256", "checksum": "0483056a597bfb9ca8308630325a6fe8445ac24fee5728582f9b717f4ca60201"}, "tags": [], "refs": [["stg_gsc_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_organic/int_gsc_data_shop_mag_label.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.5510461, "compiled_sql": "with gsc_data as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\n\n),\n\ngsc_data_aggr as (\n\n    select\n        gsc_date,\n        page,\n        gsc_country,\n        case\n            when page like '%magazin%' then 'magazin'\n            when page not like '%magazin%' then 'shop'\n        end as platform,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n    from gsc_data\n    where\n        page not like '%outdoor-broker%'\n        and gsc_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1,2,3,4\n\n)\n\nselect * from gsc_data_aggr", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gsc_data_shop_mag_label`"}, "model.sql_repository_bz.int_gsc_data_mag_reworked": {"raw_sql": "/*reworked magazin posts that may or may not be contentperlen */\r\nwith magazin_posts_reworked as(\r\n\r\n    select\r\n        url_noutm,\r\n        status\r\n    from {{ ref('stg_gsheets_seo_magazin_reworked') }}\r\n\r\n),\r\n\r\n/* aggregate gsc data on page level (exclude the query dimension) */\r\ngsc_data as(\r\n\r\n    select\r\n        gsc_date,\r\n        lower(device) as device,\r\n        page,\r\n        replace(\r\n            case\r\n                when gsc_country like ('%co.uk%') then split(gsc_country, '.')[ offset (3)]\r\n                else split(gsc_country, '.')[offset(2)]\r\n            end,\r\n        '/','') as gsc_country,\r\n        sum(clicks) as clicks,\r\n        sum(impressions) as impressions,\r\n        round(avg(position),2) as position\r\n    from {{ref('stg_gsc_data')}}\r\n    where gsc_country = 'https://www.bergzeit.de/'\r\n    group by 1,2,3,4\r\n    order by gsc_date asc\r\n\r\n),\r\n\r\nga_data as(\r\n\r\n    select\r\n        concat(hostname,page) as page,\r\n        max_magPublicationDate\r\n    from {{ref('stg_ga_magazin_custom_dims')}}\r\n\r\n),\r\n\r\n/*combine gsc and ga data to the magazin reworked input list */\r\ngsc_ga_data_joined_with_mag_reworked as(\r\n\r\n    select\r\n        * EXCEPT (page)\r\n    from magazin_posts_reworked as mag\r\n        left join gsc_data as gsc on gsc.page = mag.url_noutm\r\n        left join ga_data as ga on ga.page = mag.url_noutm\r\n    where mag.url_noutm is not null\r\n\r\n)\r\n\r\nselect * from gsc_ga_data_joined_with_mag_reworked", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gsheets_seo_magazin_reworked", "model.sql_repository_bz.stg_gsc_data", "model.sql_repository_bz.stg_ga_magazin_custom_dims"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_organic", "int_gsc_data_mag_reworked"], "unique_id": "model.sql_repository_bz.int_gsc_data_mag_reworked", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_organic/int_gsc_data_mag_reworked.sql", "original_file_path": "models/02_intermediate/google_organic/int_gsc_data_mag_reworked.sql", "name": "int_gsc_data_mag_reworked", "alias": "int_gsc_data_mag_reworked", "checksum": {"name": "sha256", "checksum": "d5ec5bbc468a96a91917822a8054358c3a86b77c158682f2c2861f2fc962a585"}, "tags": [], "refs": [["stg_gsheets_seo_magazin_reworked"], ["stg_gsc_data"], ["stg_ga_magazin_custom_dims"]], "sources": [], "description": "joins a list of reworked magzine URLs with their daily gsc data", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_organic/_models_int_organic.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_organic/int_gsc_data_mag_reworked.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.6202981, "compiled_sql": "/*reworked magazin posts that may or may not be contentperlen */\nwith magazin_posts_reworked as(\n\n    select\n        url_noutm,\n        status\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_seo_magazin_reworked`\n\n),\n\n/* aggregate gsc data on page level (exclude the query dimension) */\ngsc_data as(\n\n    select\n        gsc_date,\n        lower(device) as device,\n        page,\n        replace(\n            case\n                when gsc_country like ('%co.uk%') then split(gsc_country, '.')[ offset (3)]\n                else split(gsc_country, '.')[offset(2)]\n            end,\n        '/','') as gsc_country,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions,\n        round(avg(position),2) as position\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\n    where gsc_country = 'https://www.bergzeit.de/'\n    group by 1,2,3,4\n    order by gsc_date asc\n\n),\n\nga_data as(\n\n    select\n        concat(hostname,page) as page,\n        max_magPublicationDate\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_magazin_custom_dims`\n\n),\n\n/*combine gsc and ga data to the magazin reworked input list */\ngsc_ga_data_joined_with_mag_reworked as(\n\n    select\n        * EXCEPT (page)\n    from magazin_posts_reworked as mag\n        left join gsc_data as gsc on gsc.page = mag.url_noutm\n        left join ga_data as ga on ga.page = mag.url_noutm\n    where mag.url_noutm is not null\n\n)\n\nselect * from gsc_ga_data_joined_with_mag_reworked", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gsc_data_mag_reworked`"}, "model.sql_repository_bz.int_gsc_sitemap_urlage_def": {"raw_sql": "with\r\n /*get GSC Data*/\r\n  gsc_data as(\r\n\r\n    select distinct\r\n        gsc_date,\r\n        split(page,'?')[safe_offset(0)] as page,\r\n        split(page,'/')[safe_offset(2)] as country,\r\n        sum(clicks) as clicks,\r\n        sum(impressions) as impressions\r\n    from\r\n        {{ref('stg_gsc_data')}}\r\n    where gsc_country in('https://www.bergzeit.de/')\r\n        and page not like('%/magazin%')\r\n        and page not like('%/journal/%')\r\n        and search_type = 'web'\r\n        and gsc_date between {{get_last_n_days_date_range(30)}}\r\n    group by 1,2,3\r\n\r\n  ),\r\n  \r\n  /*get old OXID URLs from sitemap*/\r\n  old_sitemap as(\r\n\r\n    select distinct\r\n        url,\r\n        sitemap_name,\r\n        'old' as url_age\r\n    from {{ref('stg_crawl_sitemap_urls_all')}}\r\n    where crawl_date between '2021-08-04' and '2022-02-24'\r\n    and sitemap_country ='de'\r\n\r\n  ),\r\n  \r\n  /*get new iShop URLs from sitemap*/   \r\n  new_sitemap as(\r\n\r\n    select distinct\r\n        url,\r\n        sitemap_name,\r\n        'new' as url_age\r\n    from {{ref('stg_crawl_sitemap_urls_all')}}\r\n    where crawl_date between '2022-03-18' and date_sub(current_date(), interval 1 day)\r\n    and sitemap_country ='de'\r\n\r\n  ),\r\n\r\n /*classify the GSC URLs as old and new and merge the sitemap name*/ \r\n  merged_gsc_and_sitemap_data as(\r\n\r\n    select\r\n        gsc.gsc_date,\r\n        gsc.page,\r\n        gsc.country,\r\n        gsc.clicks,\r\n        gsc.impressions,\r\n        case\r\n            when ne.sitemap_name is not null then ne.sitemap_name\r\n            else old.sitemap_name\r\n        end as sitemap_name,\r\n        case\r\n            when ne.url_age is not null then ne.url_age\r\n            else old.url_age\r\n        end as url_age\r\n    from gsc_data as gsc\r\n    Left Join new_sitemap as ne on ne.url = gsc.page\r\n    Left Join old_sitemap as old on old.url = gsc.page\r\n\r\n  ),\r\n\r\n  striped_page_path as(\r\n\r\n  select\r\n    gsc_date,\r\n    split(page,country)[safe_offset(1)] as page,\r\n    sitemap_name,\r\n    country,\r\n    url_age,\r\n    clicks,\r\n    impressions\r\n  from merged_gsc_and_sitemap_data\r\n\r\n  )\r\n\r\nselect * from striped_page_path", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_gsc_data", "model.sql_repository_bz.stg_crawl_sitemap_urls_all", "model.sql_repository_bz.stg_crawl_sitemap_urls_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_organic", "int_gsc_sitemap_urlage_def"], "unique_id": "model.sql_repository_bz.int_gsc_sitemap_urlage_def", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_organic/int_gsc_sitemap_urlage_def.sql", "original_file_path": "models/02_intermediate/google_organic/int_gsc_sitemap_urlage_def.sql", "name": "int_gsc_sitemap_urlage_def", "alias": "int_gsc_sitemap_urlage_def", "checksum": {"name": "sha256", "checksum": "70064b88cb3dedf0bbccde2320af8eb02a5ce43df9846efebe0ab29a2be16280"}, "tags": [], "refs": [["stg_gsc_data"], ["stg_crawl_sitemap_urls_all"], ["stg_crawl_sitemap_urls_all"]], "sources": [], "description": "uses the sitemap data to classify GSC URLs from the last 30 days as old (Oxid) or new (iShop)", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_organic/_models_int_organic.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_organic/int_gsc_sitemap_urlage_def.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.6211808, "compiled_sql": "with\n /*get GSC Data*/\n  gsc_data as(\n\n    select distinct\n        gsc_date,\n        split(page,'?')[safe_offset(0)] as page,\n        split(page,'/')[safe_offset(2)] as country,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\n    where gsc_country in('https://www.bergzeit.de/')\n        and page not like('%/magazin%')\n        and page not like('%/journal/%')\n        and search_type = 'web'\n        and gsc_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1,2,3\n\n  ),\n  \n  /*get old OXID URLs from sitemap*/\n  old_sitemap as(\n\n    select distinct\n        url,\n        sitemap_name,\n        'old' as url_age\n    from `bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_all`\n    where crawl_date between '2021-08-04' and '2022-02-24'\n    and sitemap_country ='de'\n\n  ),\n  \n  /*get new iShop URLs from sitemap*/   \n  new_sitemap as(\n\n    select distinct\n        url,\n        sitemap_name,\n        'new' as url_age\n    from `bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_all`\n    where crawl_date between '2022-03-18' and date_sub(current_date(), interval 1 day)\n    and sitemap_country ='de'\n\n  ),\n\n /*classify the GSC URLs as old and new and merge the sitemap name*/ \n  merged_gsc_and_sitemap_data as(\n\n    select\n        gsc.gsc_date,\n        gsc.page,\n        gsc.country,\n        gsc.clicks,\n        gsc.impressions,\n        case\n            when ne.sitemap_name is not null then ne.sitemap_name\n            else old.sitemap_name\n        end as sitemap_name,\n        case\n            when ne.url_age is not null then ne.url_age\n            else old.url_age\n        end as url_age\n    from gsc_data as gsc\n    Left Join new_sitemap as ne on ne.url = gsc.page\n    Left Join old_sitemap as old on old.url = gsc.page\n\n  ),\n\n  striped_page_path as(\n\n  select\n    gsc_date,\n    split(page,country)[safe_offset(1)] as page,\n    sitemap_name,\n    country,\n    url_age,\n    clicks,\n    impressions\n  from merged_gsc_and_sitemap_data\n\n  )\n\nselect * from striped_page_path", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_gsc_sitemap_urlage_def`"}, "model.sql_repository_bz.int_crawl_de_lp_in_sitemap": {"raw_sql": "with lp_count_in_sitemap as(\r\n\r\nselect\r\n    crawl_date,\r\n    count(distinct url) as url_count\r\nfrom {{ref('stg_crawl_sitemap_urls_de')}}\r\nwhere\r\n    crawl_date between {{ get_last_n_days_date_range(400) }}\r\n    and url like '%/lp/%'\r\ngroup by 1\r\norder by 1\r\n)\r\n\r\nselect * from lp_count_in_sitemap", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_crawl_sitemap_urls_de"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "google_organic", "int_crawl_de_lp_in_sitemap"], "unique_id": "model.sql_repository_bz.int_crawl_de_lp_in_sitemap", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/google_organic/int_crawl_de_lp_in_sitemap.sql", "original_file_path": "models/02_intermediate/google_organic/int_crawl_de_lp_in_sitemap.sql", "name": "int_crawl_de_lp_in_sitemap", "alias": "int_crawl_de_lp_in_sitemap", "checksum": {"name": "sha256", "checksum": "7bf8d17122c876cd7695c9515a91f0958577587ab01ee6a992149088ad67aa15"}, "tags": [], "refs": [["stg_crawl_sitemap_urls_de"]], "sources": [], "description": "counts the amount of landing pages per day", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/google_organic/_models_int_organic.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_organic/int_crawl_de_lp_in_sitemap.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.6194382, "compiled_sql": "with lp_count_in_sitemap as(\n\nselect\n    crawl_date,\n    count(distinct url) as url_count\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_de`\nwhere\n    crawl_date between \n    date_sub(current_date(), interval 400 day)\n    and date_sub(current_date(), interval 1 day)\n\n    and url like '%/lp/%'\ngroup by 1\norder by 1\n)\n\nselect * from lp_count_in_sitemap", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_crawl_de_lp_in_sitemap`"}, "model.sql_repository_bz.int_nav_invoice_crmemo_combined": {"raw_sql": "with invoice_data as (\r\n\r\n    select * \r\n    from {{ ref('int_nav_invoice_line_aggregated') }}\r\n\r\n),\r\n\r\ncredit_memo_data as (\r\n\r\n    select * \r\n    from {{ ref('int_nav_crmemo_line_aggregated') }}\r\n\r\n),\r\n\r\njoined_data as (\r\n\r\n    select * except (return_base_document_id)\r\n    from invoice_data as invoice\r\n    left join credit_memo_data as credit_memo\r\n        on invoice.inv_h_id = credit_memo.return_base_document_id\r\n\r\n)\r\n\r\nselect \r\n    *,\r\n    (sum_invoice_amount_excl_vat_euro - ifnull(sum_crmemo_amount_excl_vat_euro,0)) as umsatz_netto,\r\n    (sum_invoice_amount_excl_vat - ifnull(sum_crmemo_amount_excl_vat,0)) as umsatz_netto_local_currency,\r\n    case \r\n        when sum_crmemo_amount_excl_vat_euro is null then sum_invoice_amount_excl_vat_euro - ifnull(sum_invoice_cost_excl_vat,0)\r\n        when sum_crmemo_amount_excl_vat_euro is not null and round(sum_invoice_amount_excl_vat_euro,2) = round(sum_crmemo_amount_excl_vat_euro,2) then 0\r\n        else (sum_invoice_amount_excl_vat_euro - ifnull(sum_crmemo_amount_excl_vat_euro,0)) - (ifnull(sum_invoice_cost_excl_vat,0) - ifnull(sum_crmemo_cost_excl_vat,0)) \r\n    end as db_1        \r\nfrom joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_nav_invoice_line_aggregated", "model.sql_repository_bz.int_nav_crmemo_line_aggregated"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "navision", "int_nav_invoice_crmemo_combined"], "unique_id": "model.sql_repository_bz.int_nav_invoice_crmemo_combined", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/navision/int_nav_invoice_crmemo_combined.sql", "original_file_path": "models/02_intermediate/navision/int_nav_invoice_crmemo_combined.sql", "name": "int_nav_invoice_crmemo_combined", "alias": "int_nav_invoice_crmemo_combined", "checksum": {"name": "sha256", "checksum": "59da9bb7dc7b47834f3c417cbd2650c640cabaa55388c0a68ed204f75ed158e7"}, "tags": [], "refs": [["int_nav_invoice_line_aggregated"], ["int_nav_crmemo_line_aggregated"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/navision/int_nav_invoice_crmemo_combined.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.6569462, "compiled_sql": "with invoice_data as (\n\n    select * \n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_invoice_line_aggregated`\n\n),\n\ncredit_memo_data as (\n\n    select * \n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_crmemo_line_aggregated`\n\n),\n\njoined_data as (\n\n    select * except (return_base_document_id)\n    from invoice_data as invoice\n    left join credit_memo_data as credit_memo\n        on invoice.inv_h_id = credit_memo.return_base_document_id\n\n)\n\nselect \n    *,\n    (sum_invoice_amount_excl_vat_euro - ifnull(sum_crmemo_amount_excl_vat_euro,0)) as umsatz_netto,\n    (sum_invoice_amount_excl_vat - ifnull(sum_crmemo_amount_excl_vat,0)) as umsatz_netto_local_currency,\n    case \n        when sum_crmemo_amount_excl_vat_euro is null then sum_invoice_amount_excl_vat_euro - ifnull(sum_invoice_cost_excl_vat,0)\n        when sum_crmemo_amount_excl_vat_euro is not null and round(sum_invoice_amount_excl_vat_euro,2) = round(sum_crmemo_amount_excl_vat_euro,2) then 0\n        else (sum_invoice_amount_excl_vat_euro - ifnull(sum_crmemo_amount_excl_vat_euro,0)) - (ifnull(sum_invoice_cost_excl_vat,0) - ifnull(sum_crmemo_cost_excl_vat,0)) \n    end as db_1        \nfrom joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_nav_invoice_crmemo_combined`"}, "model.sql_repository_bz.int_nav_transactions_session_customer_attributes": {"raw_sql": "with item_level_transactions as (\r\n\r\n    select \r\n        order_date as T_order_date,\r\n        inv_h_id,\r\n        inv_h_order_id,\r\n        inv_h_shop_order_id as T_shop_order_id,\r\n        sales_channel_id,\r\n        sale_customer_id as T_nav_customer_id,\r\n        shipment_zip_code as T_ship_zip_code,\r\n        shipment_country_id as T_ship_country,\r\n        sum_invoice_amount_excl_vat_euro,\r\n        sum_invoice_cost_excl_vat,\r\n        transaktion_mit_voucher,\r\n        sum_crmemo_amount_excl_vat_euro,\r\n        sum_crmemo_cost_excl_vat,\r\n        umsatz_netto,\r\n        db_1,\r\n        transaction_no_per_shop_channel,\r\n        cust_first_order_date,\r\n        cust_last_order_date,\r\n\t    cust_previous_order_date,\r\n        neu_bestand_per_shop_channel,\r\n\r\n    from {{ ref('int_nav_invoice_crmemo_combined') }}\r\n\r\n    where order_date > '2020-10-31'\r\n    --and order_date < '2022-02-01'\r\n    and sales_channel_id = 'Webshop 102'\r\n\r\n),\r\n\r\ncustomers as (\r\n    \r\n    select\r\n        customer_id,\r\n        shop_customer_oxid_id,\r\n        shop_customer_source_id,\r\n        /* antavo logic: customer identifier in oxid: oxid_id, for ishop: source_id (starting with 111) */\r\n        if(shop_customer_oxid_id != '0', shop_customer_oxid_id, shop_customer_source_id) as shop_customer_id\r\n\r\n    from {{ref('stg_nav_customers')}}\r\n\r\n),\r\n\r\n\r\n\r\nantavo_optins as (\r\n\r\n    select * \r\n    from {{ ref('stg_antavo_club_optins') }}\r\n\r\n),\r\n\r\nsession_data as (\r\n\r\n    select \r\n        ga_date,\r\n        ga_hostname,\r\n        {{extract_country_from_hostname('ga_hostname')}} as ga_country,\r\n        ga_acquisition_channel,\r\n        ga_acquisition_channel_groups,\r\n        ga_transaction_id\r\n\r\n    from {{ ref('stg_ga_transactions') }}\r\n\r\n    where ga_date  > '2020-10-31'\r\n),\r\n\r\njoined_data as (\r\n\r\n    select \r\n        *  except (inv_h_order_id, customer_id, ga_transaction_id)\r\n    from item_level_transactions as it\r\n\r\n    left join customers as c\r\n        on it.T_nav_customer_id = c.customer_id\r\n\r\n    left join session_data as ga\r\n        on it.T_shop_order_id = ga.ga_transaction_id\r\n\r\n    where T_shop_order_id is not null\r\n        and  shop_customer_id <> '0'\r\n\r\n)\r\n\r\nselect \r\n    * except (antavo_customer_id) ,\r\n    if(event_date is null or event_date > T_order_date, 0, 1) as indikator_club_member,\r\n    if(event_date is null or event_date > T_order_date, 'nicht-club', 'club') as indikator_club_member_text\r\nfrom joined_data as jd\r\nleft join antavo_optins as ao\r\n    on jd.shop_customer_id = ao.antavo_customer_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.extract_country_from_hostname"], "nodes": ["model.sql_repository_bz.int_nav_invoice_crmemo_combined", "model.sql_repository_bz.stg_nav_customers", "model.sql_repository_bz.stg_antavo_club_optins", "model.sql_repository_bz.stg_ga_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "navision", "int_nav_transactions_session_customer_attributes"], "unique_id": "model.sql_repository_bz.int_nav_transactions_session_customer_attributes", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/navision/int_nav_transactions_session_customer_attributes.sql", "original_file_path": "models/02_intermediate/navision/int_nav_transactions_session_customer_attributes.sql", "name": "int_nav_transactions_session_customer_attributes", "alias": "int_nav_transactions_session_customer_attributes", "checksum": {"name": "sha256", "checksum": "1f219366a124bb0a48e3767f67267846f5318d89f978ebd60164d40be4977372"}, "tags": [], "refs": [["int_nav_invoice_crmemo_combined"], ["stg_nav_customers"], ["stg_antavo_club_optins"], ["stg_ga_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/navision/int_nav_transactions_session_customer_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.6788254, "compiled_sql": "with item_level_transactions as (\n\n    select \n        order_date as T_order_date,\n        inv_h_id,\n        inv_h_order_id,\n        inv_h_shop_order_id as T_shop_order_id,\n        sales_channel_id,\n        sale_customer_id as T_nav_customer_id,\n        shipment_zip_code as T_ship_zip_code,\n        shipment_country_id as T_ship_country,\n        sum_invoice_amount_excl_vat_euro,\n        sum_invoice_cost_excl_vat,\n        transaktion_mit_voucher,\n        sum_crmemo_amount_excl_vat_euro,\n        sum_crmemo_cost_excl_vat,\n        umsatz_netto,\n        db_1,\n        transaction_no_per_shop_channel,\n        cust_first_order_date,\n        cust_last_order_date,\n\t    cust_previous_order_date,\n        neu_bestand_per_shop_channel,\n\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_invoice_crmemo_combined`\n\n    where order_date > '2020-10-31'\n    --and order_date < '2022-02-01'\n    and sales_channel_id = 'Webshop 102'\n\n),\n\ncustomers as (\n    \n    select\n        customer_id,\n        shop_customer_oxid_id,\n        shop_customer_source_id,\n        /* antavo logic: customer identifier in oxid: oxid_id, for ishop: source_id (starting with 111) */\n        if(shop_customer_oxid_id != '0', shop_customer_oxid_id, shop_customer_source_id) as shop_customer_id\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_nav_customers`\n\n),\n\n\n\nantavo_optins as (\n\n    select * \n    from `bergzeit`.`dbt_analytics_staging`.`stg_antavo_club_optins`\n\n),\n\nsession_data as (\n\n    select \n        ga_date,\n        ga_hostname,\n        \n    case\n        when ga_hostname like '%co.uk%' then split(ga_hostname, '.')[ offset (3)] \n        else split(ga_hostname, '.')[offset(2)] \n    end\n\n as ga_country,\n        ga_acquisition_channel,\n        ga_acquisition_channel_groups,\n        ga_transaction_id\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions`\n\n    where ga_date  > '2020-10-31'\n),\n\njoined_data as (\n\n    select \n        *  except (inv_h_order_id, customer_id, ga_transaction_id)\n    from item_level_transactions as it\n\n    left join customers as c\n        on it.T_nav_customer_id = c.customer_id\n\n    left join session_data as ga\n        on it.T_shop_order_id = ga.ga_transaction_id\n\n    where T_shop_order_id is not null\n        and  shop_customer_id <> '0'\n\n)\n\nselect \n    * except (antavo_customer_id) ,\n    if(event_date is null or event_date > T_order_date, 0, 1) as indikator_club_member,\n    if(event_date is null or event_date > T_order_date, 'nicht-club', 'club') as indikator_club_member_text\nfrom joined_data as jd\nleft join antavo_optins as ao\n    on jd.shop_customer_id = ao.antavo_customer_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_nav_transactions_session_customer_attributes`"}, "model.sql_repository_bz.int_nav_crmemo_line_aggregated": {"raw_sql": "with credit_memo_data as (\r\n\r\n    select *\r\n    from {{ ref('stg_nav_credit_memo_header_and_lines') }}\r\n\r\n),\r\n\r\nagg_data as (\r\n\r\n    select\r\n        return_base_document_id, \r\n        --sum(cred_l_amount) as sum_cred_l_amount,\r\n        sum(crmemo_amount_excl_vat) as sum_crmemo_amount_excl_vat,\r\n        sum(crmemo_amount_excl_vat_euro) as sum_crmemo_amount_excl_vat_euro,\r\n        sum(crmemo_cost_excl_vat) as sum_crmemo_cost_excl_vat,\r\n    from credit_memo_data\r\n    group by 1\r\n \r\n)\r\n\r\nselect * from agg_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_nav_credit_memo_header_and_lines"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "navision", "int_nav_crmemo_line_aggregated"], "unique_id": "model.sql_repository_bz.int_nav_crmemo_line_aggregated", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/navision/int_nav_crmemo_line_aggregated.sql", "original_file_path": "models/02_intermediate/navision/int_nav_crmemo_line_aggregated.sql", "name": "int_nav_crmemo_line_aggregated", "alias": "int_nav_crmemo_line_aggregated", "checksum": {"name": "sha256", "checksum": "e318309c1fcf179ed943e6b7af6c5caf163eea445eb9b97bad3e3c7128ee0893"}, "tags": [], "refs": [["stg_nav_credit_memo_header_and_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/navision/int_nav_crmemo_line_aggregated.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.706563, "compiled_sql": "with credit_memo_data as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_nav_credit_memo_header_and_lines`\n\n),\n\nagg_data as (\n\n    select\n        return_base_document_id, \n        --sum(cred_l_amount) as sum_cred_l_amount,\n        sum(crmemo_amount_excl_vat) as sum_crmemo_amount_excl_vat,\n        sum(crmemo_amount_excl_vat_euro) as sum_crmemo_amount_excl_vat_euro,\n        sum(crmemo_cost_excl_vat) as sum_crmemo_cost_excl_vat,\n    from credit_memo_data\n    group by 1\n \n)\n\nselect * from agg_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_nav_crmemo_line_aggregated`"}, "model.sql_repository_bz.int_nav_products_and_attributes": {"raw_sql": "with nav_products as (\r\n\r\n    select *\r\n    from {{ref('int_nav_products')}}\r\n    where order_date between {{ get_last_n_days_date_range(400) }}\r\n),\r\n\r\n\r\n-- get all product data with attributes by day\r\nproduct_attributes as (\r\n\r\n    select *\r\n    from {{ ref('int_gmc_most_recent_prod_attr') }}\r\n\r\n),\r\n\r\njoined_data as (\r\n\r\n    select * except (product_sku) \r\n    from nav_products \r\n    left join product_attributes \r\n        on inv_l_product_sku = product_sku\r\n\r\n)\r\n\r\nselect * from joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.int_nav_products", "model.sql_repository_bz.int_gmc_most_recent_prod_attr"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "navision", "int_nav_products_and_attributes"], "unique_id": "model.sql_repository_bz.int_nav_products_and_attributes", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/navision/int_nav_products_and_attributes.sql", "original_file_path": "models/02_intermediate/navision/int_nav_products_and_attributes.sql", "name": "int_nav_products_and_attributes", "alias": "int_nav_products_and_attributes", "checksum": {"name": "sha256", "checksum": "c1b896f48a3968d1d4794b0264657a869b8e0b3523a5a1fd9f4184625178186b"}, "tags": [], "refs": [["int_nav_products"], ["int_gmc_most_recent_prod_attr"]], "sources": [], "description": "this model adds product attributes to the navision products", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/navision/_models_int_navision.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/navision/int_nav_products_and_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.6240923, "compiled_sql": "with nav_products as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_products`\n    where order_date between \n    date_sub(current_date(), interval 400 day)\n    and date_sub(current_date(), interval 1 day)\n\n),\n\n\n-- get all product data with attributes by day\nproduct_attributes as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_most_recent_prod_attr`\n\n),\n\njoined_data as (\n\n    select * except (product_sku) \n    from nav_products \n    left join product_attributes \n        on inv_l_product_sku = product_sku\n\n)\n\nselect * from joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_nav_products_and_attributes`"}, "model.sql_repository_bz.int_nav_transactions_and_customers": {"raw_sql": "-- join nav transaction data with customer info\r\n\r\n with transactions as (\r\n   select * from {{ref('stg_nav_transactions')}}\r\n ),\r\n\r\n customers as (\r\n   select \r\n        customer_id,\r\n        shop_customer_oxid_id as shop_customer_id,\r\n        shop_customer_source_id,\r\n        primary_business_relation,\r\n        customer_discount_group,\r\n        is_registered,\r\n        is_blocked,\r\n        is_newsletter_excluded,\r\n        is_segment_excluded,\r\n        is_marketing_rejected,\r\n        is_loyalty_member,\r\n        responsibility_center  \r\n   from {{ref('stg_nav_customers')}}\r\n ),\r\n\r\njoined_data as (\r\n\r\n  select * except (sales_channel_id, responsibility_center)\r\n  from transactions as t\r\n  left join customers  as c\r\n  on t.T_customer_id = c.customer_id \r\n    and t.T_responsiblity_center_id = c.responsibility_center\r\n  left join {{ref('stg_nav_sales_channel_description')}} as sc\r\n    on t.T_shop_channel_id = sc.sales_channel_id\r\n\r\n )\r\n\r\nselect *\r\n\r\n      , row_number() over (partition by T_customer_id, T_shop_channel_id order by T_order_date asc) as transaction_no_per_shop_channel\r\n      , min(T_order_date) over (partition by T_customer_id order by T_order_date /*, T_shop_order_id*/ asc) as cust_first_order_date\r\n      , max(T_order_date) over (partition by T_customer_id order by T_order_date /*, T_shop_order_id*/ asc) as cust_last_order_date\r\n\t    , lag(T_order_date) over (partition by T_customer_id order by T_order_date /*, T_shop_order_id*/ asc) as cust_previous_order_date\r\n      , case when row_number() over (partition by T_customer_id, T_shop_channel_id order by T_order_date asc) = 1 then 'Neu' else 'Bestand' end as neu_bestand_per_shop_channel\r\n      , if(T_currency_factor = 0, T_invoice_amount_excl_vat, T_invoice_amount_excl_vat * T_currency_factor) as invoice_amount_excl_vat_euro\r\n      , if(T_currency_factor = 0, T_crmemo_amount_excl_vat, T_crmemo_amount_excl_vat * T_currency_factor) as crmemo_amount_excl_vat_euro\r\n      , T_invoice_amount_excl_vat - T_crmemo_amount_excl_vat as revenue_after_return_excl_vat\r\n      , case when T_currency_factor = 0 then T_invoice_amount_excl_vat - T_crmemo_amount_excl_vat\r\n             else (T_invoice_amount_excl_vat - T_crmemo_amount_excl_vat) * T_currency_factor end as revenue_after_return_excl_vat_euro\r\n\r\nfrom joined_data\r\n\r\nwhere T_nav_invoice_id <> 'N/A' and \r\n      T_nav_invoice_id is not null and \r\n      T_customer_id <> '' and\r\n      T_shop_order_id <> 'N/A' and\r\n      T_shop_order_id is not null and \r\n      T_shop_channel_id not in ('CS_BZ', 'Webshop 101',  'CS_OB', 'CS_OA', 'Kasse 1 GHP', 'Kasse 1 GMUND') and\r\n      T_responsiblity_center_id != 'OA' and\r\n      primary_business_relation = 'DEBITOR' and \r\n      customer_discount_group is null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_nav_transactions", "model.sql_repository_bz.stg_nav_customers", "model.sql_repository_bz.stg_nav_sales_channel_description"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "navision", "int_nav_transactions_and_customers"], "unique_id": "model.sql_repository_bz.int_nav_transactions_and_customers", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/navision/int_nav_transactions_and_customers.sql", "original_file_path": "models/02_intermediate/navision/int_nav_transactions_and_customers.sql", "name": "int_nav_transactions_and_customers", "alias": "int_nav_transactions_and_customers", "checksum": {"name": "sha256", "checksum": "78e45018a06f43116206db6c6fe658bbcf62fc9d3129c1637b55faa4c3d87114"}, "tags": [], "refs": [["stg_nav_transactions"], ["stg_nav_customers"], ["stg_nav_sales_channel_description"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/navision/int_nav_transactions_and_customers.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.7331293, "compiled_sql": "-- join nav transaction data with customer info\n\n with transactions as (\n   select * from `bergzeit`.`dbt_analytics_staging`.`stg_nav_transactions`\n ),\n\n customers as (\n   select \n        customer_id,\n        shop_customer_oxid_id as shop_customer_id,\n        shop_customer_source_id,\n        primary_business_relation,\n        customer_discount_group,\n        is_registered,\n        is_blocked,\n        is_newsletter_excluded,\n        is_segment_excluded,\n        is_marketing_rejected,\n        is_loyalty_member,\n        responsibility_center  \n   from `bergzeit`.`dbt_analytics_staging`.`stg_nav_customers`\n ),\n\njoined_data as (\n\n  select * except (sales_channel_id, responsibility_center)\n  from transactions as t\n  left join customers  as c\n  on t.T_customer_id = c.customer_id \n    and t.T_responsiblity_center_id = c.responsibility_center\n  left join `bergzeit`.`dbt_analytics_staging`.`stg_nav_sales_channel_description` as sc\n    on t.T_shop_channel_id = sc.sales_channel_id\n\n )\n\nselect *\n\n      , row_number() over (partition by T_customer_id, T_shop_channel_id order by T_order_date asc) as transaction_no_per_shop_channel\n      , min(T_order_date) over (partition by T_customer_id order by T_order_date /*, T_shop_order_id*/ asc) as cust_first_order_date\n      , max(T_order_date) over (partition by T_customer_id order by T_order_date /*, T_shop_order_id*/ asc) as cust_last_order_date\n\t    , lag(T_order_date) over (partition by T_customer_id order by T_order_date /*, T_shop_order_id*/ asc) as cust_previous_order_date\n      , case when row_number() over (partition by T_customer_id, T_shop_channel_id order by T_order_date asc) = 1 then 'Neu' else 'Bestand' end as neu_bestand_per_shop_channel\n      , if(T_currency_factor = 0, T_invoice_amount_excl_vat, T_invoice_amount_excl_vat * T_currency_factor) as invoice_amount_excl_vat_euro\n      , if(T_currency_factor = 0, T_crmemo_amount_excl_vat, T_crmemo_amount_excl_vat * T_currency_factor) as crmemo_amount_excl_vat_euro\n      , T_invoice_amount_excl_vat - T_crmemo_amount_excl_vat as revenue_after_return_excl_vat\n      , case when T_currency_factor = 0 then T_invoice_amount_excl_vat - T_crmemo_amount_excl_vat\n             else (T_invoice_amount_excl_vat - T_crmemo_amount_excl_vat) * T_currency_factor end as revenue_after_return_excl_vat_euro\n\nfrom joined_data\n\nwhere T_nav_invoice_id <> 'N/A' and \n      T_nav_invoice_id is not null and \n      T_customer_id <> '' and\n      T_shop_order_id <> 'N/A' and\n      T_shop_order_id is not null and \n      T_shop_channel_id not in ('CS_BZ', 'Webshop 101',  'CS_OB', 'CS_OA', 'Kasse 1 GHP', 'Kasse 1 GMUND') and\n      T_responsiblity_center_id != 'OA' and\n      primary_business_relation = 'DEBITOR' and \n      customer_discount_group is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_nav_transactions_and_customers`"}, "model.sql_repository_bz.int_nav_invoice_line_aggregated": {"raw_sql": "with invoice_header_and_lines as (\r\n\r\n    select *\r\n    from {{ ref('stg_nav_invoice_header_and_lines') }}\r\n\r\n),\r\n\r\nsales_channel_description as (\r\n\r\n    select \r\n        sales_channel_id as d_sales_channel_id,\r\n        sales_channel_description\r\n    from  {{ref('stg_nav_sales_channel_description')}}\r\n),\r\n\r\nagg_data as (\r\n\r\n    select\r\n\r\n        order_date,\r\n        inv_h_id,\r\n        inv_h_order_id ,\r\n        inv_h_shop_order_id ,\r\n        sales_channel_id,\r\n        sale_customer_id,\r\n        shipment_zip_code ,\r\n        shipment_country_id,\r\n        responsibility_center_id,\r\n        transaction_no_per_shop_channel,\r\n        cust_first_order_date,\r\n        cust_last_order_date,\r\n\t    cust_previous_order_date,\r\n        neu_bestand_per_shop_channel,\r\n\r\n        sum(invoice_amount_excl_vat) as sum_invoice_amount_excl_vat,\r\n        sum(invoice_amount_excl_vat_euro) as sum_invoice_amount_excl_vat_euro,\r\n        sum(invoice_cost_excl_vat) as sum_invoice_cost_excl_vat,\r\n \r\n        if(sum(indikator_voucher) > 0 , 1, 0) as transaktion_mit_voucher,\r\n        --string_agg(distinct voucher_type, ', ' order by voucher_type) as voucher_type,\r\n        if(sum(indikator_versand) > 0 , 1,0) as ind_versand,\r\n        --string_agg(distinct Kategorie, ', ' order by Kategorie) as category_type,\r\n        sum(indikator_product) as anzahl_produkte\r\n\r\n    from invoice_header_and_lines\r\n\r\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,13,14\r\n\r\n),\r\n\r\njoined_data as (\r\n\r\n    select * except(d_sales_channel_id)\r\n    from agg_data as ad\r\n    left join sales_channel_description as sc\r\n    on ad.sales_channel_id = sc.d_sales_channel_id\r\n)\r\n\r\nselect * from joined_data\r\nwhere order_date >= '2020-11-01'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_nav_invoice_header_and_lines", "model.sql_repository_bz.stg_nav_sales_channel_description"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "navision", "int_nav_invoice_line_aggregated"], "unique_id": "model.sql_repository_bz.int_nav_invoice_line_aggregated", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/navision/int_nav_invoice_line_aggregated.sql", "original_file_path": "models/02_intermediate/navision/int_nav_invoice_line_aggregated.sql", "name": "int_nav_invoice_line_aggregated", "alias": "int_nav_invoice_line_aggregated", "checksum": {"name": "sha256", "checksum": "dd059c3e5dbd43018053a203f9966891926fb876835348c1a7f6d7c8ccfb2d23"}, "tags": [], "refs": [["stg_nav_invoice_header_and_lines"], ["stg_nav_sales_channel_description"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/navision/int_nav_invoice_line_aggregated.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.74267, "compiled_sql": "with invoice_header_and_lines as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_nav_invoice_header_and_lines`\n\n),\n\nsales_channel_description as (\n\n    select \n        sales_channel_id as d_sales_channel_id,\n        sales_channel_description\n    from  `bergzeit`.`dbt_analytics_staging`.`stg_nav_sales_channel_description`\n),\n\nagg_data as (\n\n    select\n\n        order_date,\n        inv_h_id,\n        inv_h_order_id ,\n        inv_h_shop_order_id ,\n        sales_channel_id,\n        sale_customer_id,\n        shipment_zip_code ,\n        shipment_country_id,\n        responsibility_center_id,\n        transaction_no_per_shop_channel,\n        cust_first_order_date,\n        cust_last_order_date,\n\t    cust_previous_order_date,\n        neu_bestand_per_shop_channel,\n\n        sum(invoice_amount_excl_vat) as sum_invoice_amount_excl_vat,\n        sum(invoice_amount_excl_vat_euro) as sum_invoice_amount_excl_vat_euro,\n        sum(invoice_cost_excl_vat) as sum_invoice_cost_excl_vat,\n \n        if(sum(indikator_voucher) > 0 , 1, 0) as transaktion_mit_voucher,\n        --string_agg(distinct voucher_type, ', ' order by voucher_type) as voucher_type,\n        if(sum(indikator_versand) > 0 , 1,0) as ind_versand,\n        --string_agg(distinct Kategorie, ', ' order by Kategorie) as category_type,\n        sum(indikator_product) as anzahl_produkte\n\n    from invoice_header_and_lines\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,13,14\n\n),\n\njoined_data as (\n\n    select * except(d_sales_channel_id)\n    from agg_data as ad\n    left join sales_channel_description as sc\n    on ad.sales_channel_id = sc.d_sales_channel_id\n)\n\nselect * from joined_data\nwhere order_date >= '2020-11-01'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_nav_invoice_line_aggregated`"}, "model.sql_repository_bz.int_nav_invoice_crmemo_customer": {"raw_sql": "-- join nav transaction data with customer info\r\n\r\nwith transaction_data as (\r\n    select * from {{ ref('int_nav_invoice_crmemo_combined') }}\r\n),\r\n\r\ncustomer_data as (\r\n\r\n    select \r\n        customer_id,\r\n        responsibility_center,\r\n        shop_customer_oxid_id,\r\n        customer_discount_group\r\n    from  {{ ref('stg_nav_customers') }}\r\n)--,\r\n\r\n--joined_data as (\r\n\r\nselect * except (responsibility_center)\r\nfrom transaction_data as t\r\nleft join customer_data as c\r\non t.sale_customer_id = c.customer_id \r\n  and t.responsibility_center_id = c.responsibility_center", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_nav_invoice_crmemo_combined", "model.sql_repository_bz.stg_nav_customers"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "navision", "int_nav_invoice_crmemo_customer"], "unique_id": "model.sql_repository_bz.int_nav_invoice_crmemo_customer", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/navision/int_nav_invoice_crmemo_customer.sql", "original_file_path": "models/02_intermediate/navision/int_nav_invoice_crmemo_customer.sql", "name": "int_nav_invoice_crmemo_customer", "alias": "int_nav_invoice_crmemo_customer", "checksum": {"name": "sha256", "checksum": "4cd6d4b5bc1e79a8c05cb4fbc73c9f6b5494f4829e3626f706b42219e8b4044f"}, "tags": [], "refs": [["int_nav_invoice_crmemo_combined"], ["stg_nav_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/navision/int_nav_invoice_crmemo_customer.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750846.7508564, "compiled_sql": "-- join nav transaction data with customer info\n\nwith transaction_data as (\n    select * from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_invoice_crmemo_combined`\n),\n\ncustomer_data as (\n\n    select \n        customer_id,\n        responsibility_center,\n        shop_customer_oxid_id,\n        customer_discount_group\n    from  `bergzeit`.`dbt_analytics_staging`.`stg_nav_customers`\n)--,\n\n--joined_data as (\n\nselect * except (responsibility_center)\nfrom transaction_data as t\nleft join customer_data as c\non t.sale_customer_id = c.customer_id \n  and t.responsibility_center_id = c.responsibility_center", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_nav_invoice_crmemo_customer`"}, "model.sql_repository_bz.int_nav_products": {"raw_sql": "--fetch transaction data\r\n\r\nwith invoice as (\r\n\r\n    select \r\n        order_date ,\r\n        inv_h_id,\r\n        inv_h_order_id ,\r\n        inv_h_shop_order_id ,\r\n        sales_channel_id ,\r\n        shipment_zip_code ,\r\n        shipment_country_id ,\r\n        sale_customer_id ,\r\n        inv_l_line_id,\r\n        inv_l_product_sku ,\r\n        inv_l_product_description,\r\n        inv_l_line_asset_type,\r\n        inv_l_voucher_transaction_type,\r\n        inv_l_voucher_id,\r\n        inv_l_quantity,\r\n        invoice_amount_excl_vat,\r\n        invoice_amount_excl_vat_euro\r\n    from {{ref('stg_nav_invoice_header_and_lines')}}\r\n    where inv_l_line_asset_type = '2'\r\n        and order_date between {{get_financial_year_to_yesterday_date_range()}}\r\n\r\n),\r\n\r\ncr_memo as (\r\n\r\n    select \r\n        cred_h_id,\r\n        invoice_assigned_id ,\r\n        return_base_line_id,\r\n        cred_l_line_asset_type,\r\n        cred_l_quantity,\r\n        quantity_announced_return , \r\n        crmemo_amount_excl_vat,\r\n        crmemo_amount_excl_vat_euro\r\n    from {{ref('stg_nav_credit_memo_header_and_lines')}}\r\n    where cred_l_line_asset_type = '2'\r\n\r\n),\r\n\r\nsales_channel_description as (\r\n\r\n    select \r\n        sales_channel_id,\r\n        sales_channel_description\r\n    from  {{ref('stg_nav_sales_channel_description')}}\r\n),\r\n\r\njoined_data as (\r\n    select * except (inv_l_line_asset_type, cred_l_line_asset_type)\r\n    from invoice i\r\n    left join cr_memo c \r\n        on i.inv_h_id = c.invoice_assigned_id\r\n        and i.inv_l_line_id = c.return_base_line_id\r\n    left join sales_channel_description\r\n        using (sales_channel_id)\r\n\r\n)\r\n\r\nselect \r\n    *,\r\n    (invoice_amount_excl_vat_euro - ifnull(crmemo_amount_excl_vat_euro,0)) as revenue_after_return\r\nfrom joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_financial_year_to_yesterday_date_range"], "nodes": ["model.sql_repository_bz.stg_nav_invoice_header_and_lines", "model.sql_repository_bz.stg_nav_credit_memo_header_and_lines", "model.sql_repository_bz.stg_nav_sales_channel_description"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_intermediate", "fqn": ["sql_repository_bz", "02_intermediate", "navision", "int_nav_products"], "unique_id": "model.sql_repository_bz.int_nav_products", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "02_intermediate/navision/int_nav_products.sql", "original_file_path": "models/02_intermediate/navision/int_nav_products.sql", "name": "int_nav_products", "alias": "int_nav_products", "checksum": {"name": "sha256", "checksum": "21e0a62c5b6b73ba77c1166f9bcf3ea7cfad0887acda9b14a281e2b6302ef9ad"}, "tags": [], "refs": [["stg_nav_invoice_header_and_lines"], ["stg_nav_credit_memo_header_and_lines"], ["stg_nav_sales_channel_description"]], "sources": [], "description": "this model takes only product lines (line asset type 2) from line item tables", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/02_intermediate/navision/_models_int_navision.yml", "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/navision/int_nav_products.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_intermediate", "materialized": "view"}, "created_at": 1663750850.6231933, "compiled_sql": "--fetch transaction data\n\nwith invoice as (\n\n    select \n        order_date ,\n        inv_h_id,\n        inv_h_order_id ,\n        inv_h_shop_order_id ,\n        sales_channel_id ,\n        shipment_zip_code ,\n        shipment_country_id ,\n        sale_customer_id ,\n        inv_l_line_id,\n        inv_l_product_sku ,\n        inv_l_product_description,\n        inv_l_line_asset_type,\n        inv_l_voucher_transaction_type,\n        inv_l_voucher_id,\n        inv_l_quantity,\n        invoice_amount_excl_vat,\n        invoice_amount_excl_vat_euro\n    from `bergzeit`.`dbt_analytics_staging`.`stg_nav_invoice_header_and_lines`\n    where inv_l_line_asset_type = '2'\n        and order_date between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n\n\n),\n\ncr_memo as (\n\n    select \n        cred_h_id,\n        invoice_assigned_id ,\n        return_base_line_id,\n        cred_l_line_asset_type,\n        cred_l_quantity,\n        quantity_announced_return , \n        crmemo_amount_excl_vat,\n        crmemo_amount_excl_vat_euro\n    from `bergzeit`.`dbt_analytics_staging`.`stg_nav_credit_memo_header_and_lines`\n    where cred_l_line_asset_type = '2'\n\n),\n\nsales_channel_description as (\n\n    select \n        sales_channel_id,\n        sales_channel_description\n    from  `bergzeit`.`dbt_analytics_staging`.`stg_nav_sales_channel_description`\n),\n\njoined_data as (\n    select * except (inv_l_line_asset_type, cred_l_line_asset_type)\n    from invoice i\n    left join cr_memo c \n        on i.inv_h_id = c.invoice_assigned_id\n        and i.inv_l_line_id = c.return_base_line_id\n    left join sales_channel_description\n        using (sales_channel_id)\n\n)\n\nselect \n    *,\n    (invoice_amount_excl_vat_euro - ifnull(crmemo_amount_excl_vat_euro,0)) as revenue_after_return\nfrom joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_intermediate`.`int_nav_products`"}, "model.sql_repository_bz.stg_channelattribution_channel_level": {"raw_sql": "with channel_level_attribution as (\r\n    select \r\n        *,\r\n        {{ dbt_utils.surrogate_key(['date', 'country_grouping', 'channel_name']) }} as sk_id\r\n    from {{ source('channel_attribution', 'markov_attribution_channel_level') }}\r\n    where date >= date_sub(parse_date('%Y-%m-%d', '{{ var(\"start_date_fy\") }}'), interval 1 month)\r\n)\r\n\r\nselect * from channel_level_attribution", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.channel_attribution.markov_attribution_channel_level"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "channel_attribution", "stg_channelattribution_channel_level"], "unique_id": "model.sql_repository_bz.stg_channelattribution_channel_level", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/channel_attribution/stg_channelattribution_channel_level.sql", "original_file_path": "models/01_staging/channel_attribution/stg_channelattribution_channel_level.sql", "name": "stg_channelattribution_channel_level", "alias": "stg_channelattribution_channel_level", "checksum": {"name": "sha256", "checksum": "a4b43dae2083d6358f4f4a10cb5655de5eeeb4fc49e0208dbfbf7cb8ffbc85d9"}, "tags": [], "refs": [], "sources": [["channel_attribution", "markov_attribution_channel_level"]], "description": "this model lists daily attributed channel values", "columns": {"sk_id": {"name": "sk_id", "description": "the unique identifier for this model", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/channel_attribution/_models_attribution.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channel_attribution/stg_channelattribution_channel_level.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.649244, "compiled_sql": "with channel_level_attribution as (\n    select \n        *,\n        to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(country_grouping as \n    string\n), '') || '-' || coalesce(cast(channel_name as \n    string\n), '') as \n    string\n))) as sk_id\n    from `bergzeit`.`channel_attribution`.`markov_attribution_daily_updates`\n    where date >= date_sub(parse_date('%Y-%m-%d', '2022-03-01'), interval 1 month)\n)\n\nselect * from channel_level_attribution", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_channelattribution_channel_level`"}, "model.sql_repository_bz.stg_channelattribution_path_level": {"raw_sql": "/* I manually run path level attribution once a week, taking into account all the transactions from the last 30 days\r\n therefore a transaction is included multiple times in the output data set;\r\n for every transaction, I use the value of the first calculation (min date)\r\n\r\n this staging model only collects those first transaction values*/\r\n\r\nwith all_data as (\r\n    select\r\n        country_grouping,\r\n        path,\r\n        fullVisitorId,\r\n        path_no,\r\n        conversion,\r\n        total_conversion_value,\r\n        path_length,\r\n        transaction_id,\r\n        transaction_date,\r\n        idpath,\r\n        channel,\r\n        total_conversion_value_weight,\r\n        total_conversion_value_attribution,\r\n        total_conversions_weight,\r\n        total_conversions_attribution,\r\n        insert_date,\r\n        total_conversion_value_attribution_korr,\r\n        min(insert_date) over (partition by transaction_id order by insert_date asc) as min_date,\r\n        /* making sure that every transaction is only once used per insert date (some irregularities in the past) */\r\n        row_number() over (partition by insert_date, transaction_id, channel order by idpath asc) as rn,\r\n        {{ dbt_utils.surrogate_key(['insert_date', 'country_grouping', 'channel', 'transaction_id']) }} as sk_id\r\n    from {{ source('channel_attribution', 'markov_attribution_path_level') }}\r\n    where transaction_date >= date_sub(parse_date('%Y-%m-%d', '{{ var(\"start_date_fy\") }}'), interval 1 month)\r\n)\r\n\r\nselect * except (min_date, rn)\r\nfrom all_data\r\nwhere min_date = insert_date\r\n    and rn = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.channel_attribution.markov_attribution_path_level"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "channel_attribution", "stg_channelattribution_path_level"], "unique_id": "model.sql_repository_bz.stg_channelattribution_path_level", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/channel_attribution/stg_channelattribution_path_level.sql", "original_file_path": "models/01_staging/channel_attribution/stg_channelattribution_path_level.sql", "name": "stg_channelattribution_path_level", "alias": "stg_channelattribution_path_level", "checksum": {"name": "sha256", "checksum": "7effe05bbd49a01c155cbdff80dc5f97caf7d4eb94ae28cb33a27200c222540c"}, "tags": [], "refs": [], "sources": [["channel_attribution", "markov_attribution_path_level"]], "description": "this model lists attributed values on transaction level", "columns": {"sk_id": {"name": "sk_id", "description": "the unique identifier for this model", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/channel_attribution/_models_attribution.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channel_attribution/stg_channelattribution_path_level.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.6543546, "compiled_sql": "/* I manually run path level attribution once a week, taking into account all the transactions from the last 30 days\n therefore a transaction is included multiple times in the output data set;\n for every transaction, I use the value of the first calculation (min date)\n\n this staging model only collects those first transaction values*/\n\nwith all_data as (\n    select\n        country_grouping,\n        path,\n        fullVisitorId,\n        path_no,\n        conversion,\n        total_conversion_value,\n        path_length,\n        transaction_id,\n        transaction_date,\n        idpath,\n        channel,\n        total_conversion_value_weight,\n        total_conversion_value_attribution,\n        total_conversions_weight,\n        total_conversions_attribution,\n        insert_date,\n        total_conversion_value_attribution_korr,\n        min(insert_date) over (partition by transaction_id order by insert_date asc) as min_date,\n        /* making sure that every transaction is only once used per insert date (some irregularities in the past) */\n        row_number() over (partition by insert_date, transaction_id, channel order by idpath asc) as rn,\n        to_hex(md5(cast(coalesce(cast(insert_date as \n    string\n), '') || '-' || coalesce(cast(country_grouping as \n    string\n), '') || '-' || coalesce(cast(channel as \n    string\n), '') || '-' || coalesce(cast(transaction_id as \n    string\n), '') as \n    string\n))) as sk_id\n    from `bergzeit`.`channel_attribution`.`markov_attribution_path_level_daily`\n    where transaction_date >= date_sub(parse_date('%Y-%m-%d', '2022-03-01'), interval 1 month)\n)\n\nselect * except (min_date, rn)\nfrom all_data\nwhere min_date = insert_date\n    and rn = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_channelattribution_path_level`"}, "model.sql_repository_bz.stg_weather_dach_daily": {"raw_sql": "with weather_dach_daily as (\r\n\r\n    select \r\n        {{ dbt_utils.surrogate_key(['town_id', 'currentTime']) }} as town_datetime_id,\r\n        date,\r\n        country,\r\n        concat(\r\n            extract(year from date), '_', \r\n            extract(month from date)\r\n        ) as year_month,\r\n        town_name,\r\n        town_id,\r\n        currentTime as current_time,\r\n        timeZone as time_zone,\r\n        timeOfDay as time_of_day,\r\n        weekday_Index as weekday_index,\r\n        weekday_Name as weekday_name,\r\n        case \r\n            when weekday_Index in ('6','7') then 1\r\n            else 0\r\n        end as is_weekend,\r\n        temperature,\r\n        overallWeather as overall_weather,\r\n        overallWeather_code as overall_weather_code,\r\n        rained,\r\n        rainAmount_3hrs_mm as rain_amount_3hrs_mm,\r\n        humidity,\r\n        rainAmount_1h_mm as rain_amount_1h_mm\r\n    from {{ source('weather_data', 'weather_dach_daily') }}\r\n    where \r\n        date between {{ get_last_n_days_date_range(90) }} or\r\n        date between {{ get_last_n_days_prev_year(90) }}\r\n\r\n)\r\n\r\nselect * from weather_dach_daily", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_last_n_days_date_range", "macro.sql_repository_bz.get_last_n_days_prev_year"], "nodes": ["source.sql_repository_bz.weather_data.weather_dach_daily"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "weather_data", "stg_weather_dach_daily"], "unique_id": "model.sql_repository_bz.stg_weather_dach_daily", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/weather_data/stg_weather_dach_daily.sql", "original_file_path": "models/01_staging/weather_data/stg_weather_dach_daily.sql", "name": "stg_weather_dach_daily", "alias": "stg_weather_dach_daily", "checksum": {"name": "sha256", "checksum": "6e5aa6f8d53fff634ad4b4092297de69ea00f8dca7aa9fb635cb86dc061519ae"}, "tags": [], "refs": [], "sources": [["weather_data", "weather_dach_daily"]], "description": "see source description", "columns": {"town_datetime_id": {"name": "town_datetime_id", "description": "the unique id of the single town measurement", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "the YYYY-MM-DD formatted date of the weather data collection", "meta": {}, "data_type": null, "quote": null, "tags": []}, "town_name": {"name": "town_name", "description": "the full English name of the town or city", "meta": {}, "data_type": null, "quote": null, "tags": []}, "town_id": {"name": "town_id", "description": "the OpenWeatherMaps townid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_time": {"name": "current_time", "description": "the timestamp of the API call", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_of_day": {"name": "time_of_day", "description": "the hour of day in the five different states 'night', 'morning', 'noon', 'afternoon', 'evening'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "temperature": {"name": "temperature", "description": "the current temperature measured in Celsius", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overall_weather": {"name": "overall_weather", "description": "the overall weather description such as rain, clouds, sun etc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rain_amount_3hrs_mm": {"name": "rain_amount_3hrs_mm", "description": "the overall rain amount in mm the last 3 hours (deprecated, empty value)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "humidity": {"name": "humidity", "description": "the", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rain_amount_1h_mm": {"name": "rain_amount_1h_mm", "description": "the overall rain amount in mm in the last 1 hour", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/weather_data/_models_stg_weather.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/weather_data/stg_weather_dach_daily.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.6773622, "compiled_sql": "with weather_dach_daily as (\n\n    select \n        to_hex(md5(cast(coalesce(cast(town_id as \n    string\n), '') || '-' || coalesce(cast(currentTime as \n    string\n), '') as \n    string\n))) as town_datetime_id,\n        date,\n        country,\n        concat(\n            extract(year from date), '_', \n            extract(month from date)\n        ) as year_month,\n        town_name,\n        town_id,\n        currentTime as current_time,\n        timeZone as time_zone,\n        timeOfDay as time_of_day,\n        weekday_Index as weekday_index,\n        weekday_Name as weekday_name,\n        case \n            when weekday_Index in ('6','7') then 1\n            else 0\n        end as is_weekend,\n        temperature,\n        overallWeather as overall_weather,\n        overallWeather_code as overall_weather_code,\n        rained,\n        rainAmount_3hrs_mm as rain_amount_3hrs_mm,\n        humidity,\n        rainAmount_1h_mm as rain_amount_1h_mm\n    from `bergzeit`.`weatherData`.`weatherData_Current`\n    where \n        date between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n or\n        date between \n    -- get date n days ago of last year\n    date_sub(date_sub(current_date(), interval 1 year), interval 90 day)\n    -- get yesterday last year\n    and date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n\n)\n\nselect * from weather_dach_daily", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_weather_dach_daily`"}, "model.sql_repository_bz.stg_weather_dach_7d_forecast": {"raw_sql": "with weather_dach_7d_forecast as (\r\n\r\n    select\r\n        {{ dbt_utils.surrogate_key(['dt', 'country', 'city']) }} as town_datetime_id,\r\n        country_iso,\r\n        country,\r\n        city,\r\n        dt as datetime,\r\n        pressure,\r\n        humidity,\t\r\n        wind_speed,\t\r\n        clouds,\r\n        pop,\r\n        rain,\r\n        uvi,\r\n        snow,\r\n        temp_avg,\r\n        feels_like as temp_feels_like,\t\r\n        weather_desc\r\n    from {{ source('weather_data', 'weather_dach_7d_forecast') }}\r\n    \r\n)\r\n\r\nselect * from weather_dach_7d_forecast", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.weather_data.weather_dach_7d_forecast"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "weather_data", "stg_weather_dach_7d_forecast"], "unique_id": "model.sql_repository_bz.stg_weather_dach_7d_forecast", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/weather_data/stg_weather_dach_7d_forecast.sql", "original_file_path": "models/01_staging/weather_data/stg_weather_dach_7d_forecast.sql", "name": "stg_weather_dach_7d_forecast", "alias": "stg_weather_dach_7d_forecast", "checksum": {"name": "sha256", "checksum": "511f26479fff55115929ae2835bd356bd1c4331e00cfc16a1b854376f2e04880"}, "tags": [], "refs": [], "sources": [["weather_data", "weather_dach_7d_forecast"]], "description": "see source description", "columns": {"town_datetime_id": {"name": "town_datetime_id", "description": "the unique id of the single town measurement", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/weather_data/_models_stg_weather.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/weather_data/stg_weather_dach_7d_forecast.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.6651876, "compiled_sql": "with weather_dach_7d_forecast as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(dt as \n    string\n), '') || '-' || coalesce(cast(country as \n    string\n), '') || '-' || coalesce(cast(city as \n    string\n), '') as \n    string\n))) as town_datetime_id,\n        country_iso,\n        country,\n        city,\n        dt as datetime,\n        pressure,\n        humidity,\t\n        wind_speed,\t\n        clouds,\n        pop,\n        rain,\n        uvi,\n        snow,\n        temp_avg,\n        feels_like as temp_feels_like,\t\n        weather_desc\n    from `bergzeit`.`weatherData`.`weather_forecast`\n    \n)\n\nselect * from weather_dach_7d_forecast", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_weather_dach_7d_forecast`"}, "model.sql_repository_bz.stg_gads_all_campaign_names": {"raw_sql": "/* collect campaign names stats from all countries */\r\n\r\nwith all_campaign_names as (\r\n\r\n    {% for country in var('gads_countries') %}\r\n    {% set source_country = 'google_ads_transfer_' + country %}\r\n\r\n    select distinct\r\n        CampaignId as campaign_id,\r\n        CampaignName as campaign_name,\r\n\r\n        /* extract brand name from campaign name */\r\n        case\r\n            when (\r\n                CampaignName like '%_2_%' and\r\n                CampaignName not like '%zzz%' and\r\n                CampaignName not like '%[out of stock]%'\r\n            )\r\n            then lower(\r\n                /* get last part of string after '_' */\r\n                split(\r\n                    /* remove suffix starting with '()' */\r\n                    split(CampaignName,'_')[safe_offset(4)], ' ('\r\n                )[safe_offset(0)]\r\n            )\r\n            else null\r\n        end as brand\r\n    from {{ source(source_country, 'gads_campaigns') }}\r\n    where\r\n        /* only fetch the current campaign names */\r\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\r\n         \r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n)\r\n\r\nselect * from all_campaign_names", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.google_ads_transfer_de.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_at.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_ch.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_nl.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_be.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_it.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_uk.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_dk.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_se.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_fr.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_cz.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_fi.gads_campaigns"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "stg_gads_all_campaign_names"], "unique_id": "model.sql_repository_bz.stg_gads_all_campaign_names", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_ads/stg_gads_all_campaign_names.sql", "original_file_path": "models/01_staging/google_ads/stg_gads_all_campaign_names.sql", "name": "stg_gads_all_campaign_names", "alias": "stg_gads_all_campaign_names", "checksum": {"name": "sha256", "checksum": "766a317afee78945698bd1bc44cfdcfa0668cca9c0d35cd4567259c801a14daa"}, "tags": [], "refs": [], "sources": [["google_ads_transfer_de", "gads_campaigns"], ["google_ads_transfer_at", "gads_campaigns"], ["google_ads_transfer_ch", "gads_campaigns"], ["google_ads_transfer_nl", "gads_campaigns"], ["google_ads_transfer_be", "gads_campaigns"], ["google_ads_transfer_it", "gads_campaigns"], ["google_ads_transfer_uk", "gads_campaigns"], ["google_ads_transfer_dk", "gads_campaigns"], ["google_ads_transfer_se", "gads_campaigns"], ["google_ads_transfer_fr", "gads_campaigns"], ["google_ads_transfer_cz", "gads_campaigns"], ["google_ads_transfer_fi", "gads_campaigns"]], "description": "this model lists all campaign names, acts as a dimension table for campaign IDs", "columns": {"campaign_id": {"name": "campaign_id", "description": "the unique Google Ads campaign ID", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_ads/_models_stg_gads.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/stg_gads_all_campaign_names.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.925866, "compiled_sql": "/* collect campaign names stats from all countries */\n\nwith all_campaign_names as (\n\n    \n    \n\n    select distinct\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n\n        /* extract brand name from campaign name */\n        case\n            when (\n                CampaignName like '%_2_%' and\n                CampaignName not like '%zzz%' and\n                CampaignName not like '%[out of stock]%'\n            )\n            then lower(\n                /* get last part of string after '_' */\n                split(\n                    /* remove suffix starting with '()' */\n                    split(CampaignName,'_')[safe_offset(4)], ' ('\n                )[safe_offset(0)]\n            )\n            else null\n        end as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_DE`.`p_Campaign_7844181130`\n    where\n        /* only fetch the current campaign names */\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n         \n    union all\n    \n    \n\n    select distinct\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n\n        /* extract brand name from campaign name */\n        case\n            when (\n                CampaignName like '%_2_%' and\n                CampaignName not like '%zzz%' and\n                CampaignName not like '%[out of stock]%'\n            )\n            then lower(\n                /* get last part of string after '_' */\n                split(\n                    /* remove suffix starting with '()' */\n                    split(CampaignName,'_')[safe_offset(4)], ' ('\n                )[safe_offset(0)]\n            )\n            else null\n        end as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_AT`.`p_Campaign_5575738585`\n    where\n        /* only fetch the current campaign names */\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n         \n    union all\n    \n    \n\n    select distinct\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n\n        /* extract brand name from campaign name */\n        case\n            when (\n                CampaignName like '%_2_%' and\n                CampaignName not like '%zzz%' and\n                CampaignName not like '%[out of stock]%'\n            )\n            then lower(\n                /* get last part of string after '_' */\n                split(\n                    /* remove suffix starting with '()' */\n                    split(CampaignName,'_')[safe_offset(4)], ' ('\n                )[safe_offset(0)]\n            )\n            else null\n        end as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_CH`.`p_Campaign_1845331214`\n    where\n        /* only fetch the current campaign names */\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n         \n    union all\n    \n    \n\n    select distinct\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n\n        /* extract brand name from campaign name */\n        case\n            when (\n                CampaignName like '%_2_%' and\n                CampaignName not like '%zzz%' and\n                CampaignName not like '%[out of stock]%'\n            )\n            then lower(\n                /* get last part of string after '_' */\n                split(\n                    /* remove suffix starting with '()' */\n                    split(CampaignName,'_')[safe_offset(4)], ' ('\n                )[safe_offset(0)]\n            )\n            else null\n        end as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_NL`.`p_Campaign_1631966904`\n    where\n        /* only fetch the current campaign names */\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n         \n    union all\n    \n    \n\n    select distinct\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n\n        /* extract brand name from campaign name */\n        case\n            when (\n                CampaignName like '%_2_%' and\n                CampaignName not like '%zzz%' and\n                CampaignName not like '%[out of stock]%'\n            )\n            then lower(\n                /* get last part of string after '_' */\n                split(\n                    /* remove suffix starting with '()' */\n                    split(CampaignName,'_')[safe_offset(4)], ' ('\n                )[safe_offset(0)]\n            )\n            else null\n        end as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_BE`.`p_Campaign_1473786185`\n    where\n        /* only fetch the current campaign names */\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n         \n    union all\n    \n    \n\n    select distinct\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n\n        /* extract brand name from campaign name */\n        case\n            when (\n                CampaignName like '%_2_%' and\n                CampaignName not like '%zzz%' and\n                CampaignName not like '%[out of stock]%'\n            )\n            then lower(\n                /* get last part of string after '_' */\n                split(\n                    /* remove suffix starting with '()' */\n                    split(CampaignName,'_')[safe_offset(4)], ' ('\n                )[safe_offset(0)]\n            )\n            else null\n        end as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_IT`.`p_Campaign_9156948459`\n    where\n        /* only fetch the current campaign names */\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n         \n    union all\n    \n    \n\n    select distinct\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n\n        /* extract brand name from campaign name */\n        case\n            when (\n                CampaignName like '%_2_%' and\n                CampaignName not like '%zzz%' and\n                CampaignName not like '%[out of stock]%'\n            )\n            then lower(\n                /* get last part of string after '_' */\n                split(\n                    /* remove suffix starting with '()' */\n                    split(CampaignName,'_')[safe_offset(4)], ' ('\n                )[safe_offset(0)]\n            )\n            else null\n        end as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_UK`.`p_Campaign_7806554469`\n    where\n        /* only fetch the current campaign names */\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n         \n    union all\n    \n    \n\n    select distinct\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n\n        /* extract brand name from campaign name */\n        case\n            when (\n                CampaignName like '%_2_%' and\n                CampaignName not like '%zzz%' and\n                CampaignName not like '%[out of stock]%'\n            )\n            then lower(\n                /* get last part of string after '_' */\n                split(\n                    /* remove suffix starting with '()' */\n                    split(CampaignName,'_')[safe_offset(4)], ' ('\n                )[safe_offset(0)]\n            )\n            else null\n        end as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_DK`.`p_Campaign_4459699103`\n    where\n        /* only fetch the current campaign names */\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n         \n    union all\n    \n    \n\n    select distinct\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n\n        /* extract brand name from campaign name */\n        case\n            when (\n                CampaignName like '%_2_%' and\n                CampaignName not like '%zzz%' and\n                CampaignName not like '%[out of stock]%'\n            )\n            then lower(\n                /* get last part of string after '_' */\n                split(\n                    /* remove suffix starting with '()' */\n                    split(CampaignName,'_')[safe_offset(4)], ' ('\n                )[safe_offset(0)]\n            )\n            else null\n        end as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_SE`.`p_Campaign_4013522683`\n    where\n        /* only fetch the current campaign names */\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n         \n    union all\n    \n    \n\n    select distinct\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n\n        /* extract brand name from campaign name */\n        case\n            when (\n                CampaignName like '%_2_%' and\n                CampaignName not like '%zzz%' and\n                CampaignName not like '%[out of stock]%'\n            )\n            then lower(\n                /* get last part of string after '_' */\n                split(\n                    /* remove suffix starting with '()' */\n                    split(CampaignName,'_')[safe_offset(4)], ' ('\n                )[safe_offset(0)]\n            )\n            else null\n        end as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_FR`.`p_Campaign_6704103474`\n    where\n        /* only fetch the current campaign names */\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n         \n    union all\n    \n    \n\n    select distinct\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n\n        /* extract brand name from campaign name */\n        case\n            when (\n                CampaignName like '%_2_%' and\n                CampaignName not like '%zzz%' and\n                CampaignName not like '%[out of stock]%'\n            )\n            then lower(\n                /* get last part of string after '_' */\n                split(\n                    /* remove suffix starting with '()' */\n                    split(CampaignName,'_')[safe_offset(4)], ' ('\n                )[safe_offset(0)]\n            )\n            else null\n        end as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_Campaign_4105561535`\n    where\n        /* only fetch the current campaign names */\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n         \n    union all\n    \n    \n\n    select distinct\n        CampaignId as campaign_id,\n        CampaignName as campaign_name,\n\n        /* extract brand name from campaign name */\n        case\n            when (\n                CampaignName like '%_2_%' and\n                CampaignName not like '%zzz%' and\n                CampaignName not like '%[out of stock]%'\n            )\n            then lower(\n                /* get last part of string after '_' */\n                split(\n                    /* remove suffix starting with '()' */\n                    split(CampaignName,'_')[safe_offset(4)], ' ('\n                )[safe_offset(0)]\n            )\n            else null\n        end as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_FI`.`p_Campaign_9125109148`\n    where\n        /* only fetch the current campaign names */\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n         \n    \n    \n\n)\n\nselect * from all_campaign_names", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaign_names`"}, "model.sql_repository_bz.stg_gads_all_crawled_ads_urls": {"raw_sql": "with crawled_ads_urls as (\r\n\r\n    select distinct\r\n        {{ dbt_utils.surrogate_key(['url', 'redirect_urls', 'status']) }} as sk_id,\r\n        url,\r\n        title,\r\n        h1,\r\n        status,\r\n        canonical,\r\n        redirect_urls,\r\n        h4\r\n    from {{ source('crawled_ad_urls', 'crawled_ad_urls') }}\r\n\r\n)\r\n\r\nselect * from crawled_ads_urls", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.crawled_ad_urls.crawled_ad_urls"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "stg_gads_all_crawled_ads_urls"], "unique_id": "model.sql_repository_bz.stg_gads_all_crawled_ads_urls", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_ads/stg_gads_all_crawled_ads_urls.sql", "original_file_path": "models/01_staging/google_ads/stg_gads_all_crawled_ads_urls.sql", "name": "stg_gads_all_crawled_ads_urls", "alias": "stg_gads_all_crawled_ads_urls", "checksum": {"name": "sha256", "checksum": "56bfd13b437d56989142519f7336124c2be7d1f3a94bf509cf37994a70a172a1"}, "tags": [], "refs": [], "sources": [["crawled_ad_urls", "crawled_ad_urls"]], "description": "this model lists custom crawled urls, based on a custom Python crawl to check links", "columns": {"sk_id": {"name": "sk_id", "description": "the unique url and status combination in the list crawl", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "the HTTP status of the server reponse", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_ads/_models_stg_gads.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/stg_gads_all_crawled_ads_urls.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.9533055, "compiled_sql": "with crawled_ads_urls as (\n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(url as \n    string\n), '') || '-' || coalesce(cast(redirect_urls as \n    string\n), '') || '-' || coalesce(cast(status as \n    string\n), '') as \n    string\n))) as sk_id,\n        url,\n        title,\n        h1,\n        status,\n        canonical,\n        redirect_urls,\n        h4\n    from `adsdataprediction`.`ads_analytics`.`ads_urls_crawled`\n\n)\n\nselect * from crawled_ads_urls", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gads_all_crawled_ads_urls`"}, "model.sql_repository_bz.stg_gads_all_product_stats": {"raw_sql": "/* Collect product stats from all countries */\r\n\r\nwith all_product_stats as (\r\n\r\n    {% for country in var('gads_countries') %}\r\n    {% set source_country = 'google_ads_transfer_' + country %}\r\n\r\n    select\r\n        {{ dbt_utils.surrogate_key(['date(_PARTITIONTIME)', 'externalCustomerId', 'OfferId', 'device']) }} as sk_id,\r\n        '{{ country }}' as account,\r\n        externalCustomerId as account_id,\r\n        date(_PARTITIONTIME) as date,\r\n        OfferId as sku,\r\n        brand,\r\n        case\r\n            when device = 'HIGH_END_MOBILE' then 'mobile'\r\n            when device = 'CONNECTED_TV' then 'desktop'\r\n            else lower(device)\r\n        end as device,\r\n        impressions,\r\n        clicks,\r\n        (cost/1000000) as cost,\r\n        conversions,\r\n        conversionValue as conversion_value\r\n    from {{ source(source_country, 'gads_shopping_product_stats') }}\r\n    where\r\n        (\r\n            /* this financial year to date */\r\n            date(_PARTITIONTIME) between {{ get_financial_year_to_yesterday_date_range() }} \r\n            /* last financial year to date */\r\n            or date(_PARTITIONTIME) between {{ get_prev_financial_year_to_yest_layr_date_range() }}\r\n        )\r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n)\r\n\r\nselect * from all_product_stats", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_financial_year_to_yesterday_date_range", "macro.sql_repository_bz.get_prev_financial_year_to_yest_layr_date_range"], "nodes": ["source.sql_repository_bz.google_ads_transfer_de.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_at.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_ch.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_nl.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_be.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_it.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_uk.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_dk.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_se.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_fr.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_cz.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_fi.gads_shopping_product_stats"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "stg_gads_all_product_stats"], "unique_id": "model.sql_repository_bz.stg_gads_all_product_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_ads/stg_gads_all_product_stats.sql", "original_file_path": "models/01_staging/google_ads/stg_gads_all_product_stats.sql", "name": "stg_gads_all_product_stats", "alias": "stg_gads_all_product_stats", "checksum": {"name": "sha256", "checksum": "398d4c1f08831d8f0f352ae928007ab5382fdf22edef56db21284d106b74825f"}, "tags": [], "refs": [], "sources": [["google_ads_transfer_de", "gads_shopping_product_stats"], ["google_ads_transfer_at", "gads_shopping_product_stats"], ["google_ads_transfer_ch", "gads_shopping_product_stats"], ["google_ads_transfer_nl", "gads_shopping_product_stats"], ["google_ads_transfer_be", "gads_shopping_product_stats"], ["google_ads_transfer_it", "gads_shopping_product_stats"], ["google_ads_transfer_uk", "gads_shopping_product_stats"], ["google_ads_transfer_dk", "gads_shopping_product_stats"], ["google_ads_transfer_se", "gads_shopping_product_stats"], ["google_ads_transfer_fr", "gads_shopping_product_stats"], ["google_ads_transfer_cz", "gads_shopping_product_stats"], ["google_ads_transfer_fi", "gads_shopping_product_stats"]], "description": "this model lists all shopping performance statistics by country account and day", "columns": {"sk_id": {"name": "sk_id", "description": "the unique surrogate key for the sku performance of that day", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_ads/_models_stg_gads.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/stg_gads_all_product_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.965019, "compiled_sql": "/* Collect product stats from all countries */\n\nwith all_product_stats as (\n\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(OfferId as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'de' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        OfferId as sku,\n        brand,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions,\n        conversionValue as conversion_value\n    from `adsdataprediction`.`GoogleAdsTransfer_DE`.`p_ShoppingProductStats_7844181130`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(OfferId as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'at' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        OfferId as sku,\n        brand,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions,\n        conversionValue as conversion_value\n    from `adsdataprediction`.`GoogleAdsTransfer_AT`.`p_ShoppingProductStats_5575738585`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(OfferId as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'ch' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        OfferId as sku,\n        brand,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions,\n        conversionValue as conversion_value\n    from `adsdataprediction`.`GoogleAdsTransfer_CH`.`p_ShoppingProductStats_1845331214`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(OfferId as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'nl' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        OfferId as sku,\n        brand,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions,\n        conversionValue as conversion_value\n    from `adsdataprediction`.`GoogleAdsTransfer_NL`.`p_ShoppingProductStats_1631966904`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(OfferId as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'be' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        OfferId as sku,\n        brand,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions,\n        conversionValue as conversion_value\n    from `adsdataprediction`.`GoogleAdsTransfer_BE`.`p_ShoppingProductStats_1473786185`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(OfferId as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'it' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        OfferId as sku,\n        brand,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions,\n        conversionValue as conversion_value\n    from `adsdataprediction`.`GoogleAdsTransfer_IT`.`p_ShoppingProductStats_9156948459`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(OfferId as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'uk' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        OfferId as sku,\n        brand,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions,\n        conversionValue as conversion_value\n    from `adsdataprediction`.`GoogleAdsTransfer_UK`.`p_ShoppingProductStats_7806554469`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(OfferId as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'dk' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        OfferId as sku,\n        brand,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions,\n        conversionValue as conversion_value\n    from `adsdataprediction`.`GoogleAdsTransfer_DK`.`p_ShoppingProductStats_4459699103`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(OfferId as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'se' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        OfferId as sku,\n        brand,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions,\n        conversionValue as conversion_value\n    from `adsdataprediction`.`GoogleAdsTransfer_SE`.`p_ShoppingProductStats_4013522683`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(OfferId as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'fr' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        OfferId as sku,\n        brand,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions,\n        conversionValue as conversion_value\n    from `adsdataprediction`.`GoogleAdsTransfer_FR`.`p_ShoppingProductStats_6704103474`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(OfferId as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'cz' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        OfferId as sku,\n        brand,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions,\n        conversionValue as conversion_value\n    from `adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_ShoppingProductStats_4105561535`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(OfferId as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'fi' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        OfferId as sku,\n        brand,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions,\n        conversionValue as conversion_value\n    from `adsdataprediction`.`GoogleAdsTransfer_FI`.`p_ShoppingProductStats_9125109148`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    \n    \n\n)\n\nselect * from all_product_stats", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gads_all_product_stats`"}, "model.sql_repository_bz.stg_gads_all_ads_stats": {"raw_sql": "/* Collect ads stats from all countries */\r\n/* for start date, see .yml file */\r\n\r\nwith all_ads_stats as (\r\n\r\n    {% for country in var('gads_countries') %}\r\n    {% set source_country = 'google_ads_transfer_' + country %}\r\n\r\n    select\r\n        {{ dbt_utils.surrogate_key(['date(_PARTITIONTIME)', 'externalCustomerId', 'CampaignId', 'AdGroupId', 'CreativeId' ,'CriterionId', 'Device']) }} as sk_id,\r\n        '{{ country }}' as account,\r\n        externalCustomerId as account_id,\r\n        *\r\n    from {{ source(source_country, 'gads_ads_stats') }}\r\n    where date(_PARTITIONTIME) between {{ get_last_n_days_date_range(90) }} \r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n)\r\n\r\nselect * from all_ads_stats", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.google_ads_transfer_de.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_at.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_ch.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_nl.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_be.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_it.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_uk.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_dk.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_se.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_fr.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_cz.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_fi.gads_ads_stats"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "stg_gads_all_ads_stats"], "unique_id": "model.sql_repository_bz.stg_gads_all_ads_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_ads/stg_gads_all_ads_stats.sql", "original_file_path": "models/01_staging/google_ads/stg_gads_all_ads_stats.sql", "name": "stg_gads_all_ads_stats", "alias": "stg_gads_all_ads_stats", "checksum": {"name": "sha256", "checksum": "36a56aea1f42625541b2a0ffc8300cdcb7326b0e373698a19cc1ebf413409691"}, "tags": [], "refs": [], "sources": [["google_ads_transfer_de", "gads_ads_stats"], ["google_ads_transfer_at", "gads_ads_stats"], ["google_ads_transfer_ch", "gads_ads_stats"], ["google_ads_transfer_nl", "gads_ads_stats"], ["google_ads_transfer_be", "gads_ads_stats"], ["google_ads_transfer_it", "gads_ads_stats"], ["google_ads_transfer_uk", "gads_ads_stats"], ["google_ads_transfer_dk", "gads_ads_stats"], ["google_ads_transfer_se", "gads_ads_stats"], ["google_ads_transfer_fr", "gads_ads_stats"], ["google_ads_transfer_cz", "gads_ads_stats"], ["google_ads_transfer_fi", "gads_ads_stats"]], "description": "this model lists all ad performance statistics by country account and day", "columns": {"sk_id": {"name": "sk_id", "description": "the unique surrogate key for the ad performance of that day", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_ads/_models_stg_gads.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/stg_gads_all_ads_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.9216297, "compiled_sql": "/* Collect ads stats from all countries */\n/* for start date, see .yml file */\n\nwith all_ads_stats as (\n\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') || '-' || coalesce(cast(Device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'de' as account,\n        externalCustomerId as account_id,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_DE`.`p_AdStats_7844181130`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n \n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') || '-' || coalesce(cast(Device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'at' as account,\n        externalCustomerId as account_id,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_AT`.`p_AdStats_5575738585`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n \n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') || '-' || coalesce(cast(Device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'ch' as account,\n        externalCustomerId as account_id,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_CH`.`p_AdStats_1845331214`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n \n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') || '-' || coalesce(cast(Device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'nl' as account,\n        externalCustomerId as account_id,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_NL`.`p_AdStats_1631966904`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n \n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') || '-' || coalesce(cast(Device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'be' as account,\n        externalCustomerId as account_id,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_BE`.`p_AdStats_1473786185`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n \n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') || '-' || coalesce(cast(Device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'it' as account,\n        externalCustomerId as account_id,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_IT`.`p_AdStats_9156948459`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n \n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') || '-' || coalesce(cast(Device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'uk' as account,\n        externalCustomerId as account_id,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_UK`.`p_AdStats_7806554469`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n \n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') || '-' || coalesce(cast(Device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'dk' as account,\n        externalCustomerId as account_id,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_DK`.`p_AdStats_4459699103`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n \n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') || '-' || coalesce(cast(Device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'se' as account,\n        externalCustomerId as account_id,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_SE`.`p_AdStats_4013522683`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n \n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') || '-' || coalesce(cast(Device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'fr' as account,\n        externalCustomerId as account_id,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_FR`.`p_AdStats_6704103474`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n \n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') || '-' || coalesce(cast(Device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'cz' as account,\n        externalCustomerId as account_id,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_AdStats_4105561535`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n \n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') || '-' || coalesce(cast(Device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'fi' as account,\n        externalCustomerId as account_id,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_FI`.`p_AdStats_9125109148`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n \n\n    \n    \n\n)\n\nselect * from all_ads_stats", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gads_all_ads_stats`"}, "model.sql_repository_bz.stg_gads_all_campaign_stats": {"raw_sql": "-- collect product stats from all countries\r\n\r\nwith all_campaign_stats as (\r\n\r\n    {% for country in var('gads_countries') %}\r\n    {% set source_country = 'google_ads_transfer_' + country %}\r\n    \r\n    select\r\n        '{{ country }}' as account,\r\n        externalCustomerId as account_id,\r\n        date(_PARTITIONTIME) as date,\r\n        campaignId as campaign_id,\r\n        case \r\n            when device = \"HIGH_END_MOBILE\" then \"mobile\"\r\n            when device = \"CONNECTED_TV\" then \"desktop\"\r\n            else lower(device)\r\n        end as device,\r\n        sum(impressions) as impressions,\r\n        sum(clicks) as clicks,\r\n        sum((cost/1000000)) as cost,\r\n        sum(conversions) as conversions\r\n    from {{ source(source_country, 'gads_campaign_stats') }}\r\n    where\r\n        (\r\n            -- this financial year to date\r\n            date(_PARTITIONTIME) between {{ get_financial_year_to_yesterday_date_range() }} \r\n            or\r\n            -- last financial year to date\r\n            date(_PARTITIONTIME) between {{ get_prev_financial_year_to_yest_layr_date_range() }}\r\n        )\r\n    /* even though grouping is not a best practice in staging, the extra dimensions (networktype, clicktype) are irrelevant */\r\n    group by 1,2,3,4,5\r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n)\r\n\r\nselect \r\n    {{ dbt_utils.surrogate_key(['date', 'account_id', 'campaign_id', 'device']) }} as sk_id,\r\n    * \r\nfrom all_campaign_stats", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_financial_year_to_yesterday_date_range", "macro.sql_repository_bz.get_prev_financial_year_to_yest_layr_date_range", "macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.google_ads_transfer_de.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_at.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_ch.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_nl.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_be.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_it.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_uk.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_dk.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_se.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_fr.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_cz.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_fi.gads_campaign_stats"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "stg_gads_all_campaign_stats"], "unique_id": "model.sql_repository_bz.stg_gads_all_campaign_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_ads/stg_gads_all_campaign_stats.sql", "original_file_path": "models/01_staging/google_ads/stg_gads_all_campaign_stats.sql", "name": "stg_gads_all_campaign_stats", "alias": "stg_gads_all_campaign_stats", "checksum": {"name": "sha256", "checksum": "9a8f1f511321a7f7a9d0ecf9b389bb950b9a7b059939ba81be13617b9e1faec9"}, "tags": [], "refs": [], "sources": [["google_ads_transfer_de", "gads_campaign_stats"], ["google_ads_transfer_at", "gads_campaign_stats"], ["google_ads_transfer_ch", "gads_campaign_stats"], ["google_ads_transfer_nl", "gads_campaign_stats"], ["google_ads_transfer_be", "gads_campaign_stats"], ["google_ads_transfer_it", "gads_campaign_stats"], ["google_ads_transfer_uk", "gads_campaign_stats"], ["google_ads_transfer_dk", "gads_campaign_stats"], ["google_ads_transfer_se", "gads_campaign_stats"], ["google_ads_transfer_fr", "gads_campaign_stats"], ["google_ads_transfer_cz", "gads_campaign_stats"], ["google_ads_transfer_fi", "gads_campaign_stats"]], "description": "this model lists all campaign performance statistics by country account and day", "columns": {"sk_id": {"name": "sk_id", "description": "the unique surrogate key for the ad performance of that day", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_ads/_models_stg_gads.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/stg_gads_all_campaign_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.938479, "compiled_sql": "-- collect product stats from all countries\n\nwith all_campaign_stats as (\n\n    \n    \n    \n    select\n        'de' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        campaignId as campaign_id,\n        case \n            when device = \"HIGH_END_MOBILE\" then \"mobile\"\n            when device = \"CONNECTED_TV\" then \"desktop\"\n            else lower(device)\n        end as device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum((cost/1000000)) as cost,\n        sum(conversions) as conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_DE`.`p_CampaignStats_7844181130`\n    where\n        (\n            -- this financial year to date\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            or\n            -- last financial year to date\n            date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n    /* even though grouping is not a best practice in staging, the extra dimensions (networktype, clicktype) are irrelevant */\n    group by 1,2,3,4,5\n\n    union all\n    \n    \n    \n    select\n        'at' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        campaignId as campaign_id,\n        case \n            when device = \"HIGH_END_MOBILE\" then \"mobile\"\n            when device = \"CONNECTED_TV\" then \"desktop\"\n            else lower(device)\n        end as device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum((cost/1000000)) as cost,\n        sum(conversions) as conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_AT`.`p_CampaignStats_5575738585`\n    where\n        (\n            -- this financial year to date\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            or\n            -- last financial year to date\n            date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n    /* even though grouping is not a best practice in staging, the extra dimensions (networktype, clicktype) are irrelevant */\n    group by 1,2,3,4,5\n\n    union all\n    \n    \n    \n    select\n        'ch' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        campaignId as campaign_id,\n        case \n            when device = \"HIGH_END_MOBILE\" then \"mobile\"\n            when device = \"CONNECTED_TV\" then \"desktop\"\n            else lower(device)\n        end as device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum((cost/1000000)) as cost,\n        sum(conversions) as conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_CH`.`p_CampaignStats_1845331214`\n    where\n        (\n            -- this financial year to date\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            or\n            -- last financial year to date\n            date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n    /* even though grouping is not a best practice in staging, the extra dimensions (networktype, clicktype) are irrelevant */\n    group by 1,2,3,4,5\n\n    union all\n    \n    \n    \n    select\n        'nl' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        campaignId as campaign_id,\n        case \n            when device = \"HIGH_END_MOBILE\" then \"mobile\"\n            when device = \"CONNECTED_TV\" then \"desktop\"\n            else lower(device)\n        end as device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum((cost/1000000)) as cost,\n        sum(conversions) as conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_NL`.`p_CampaignStats_1631966904`\n    where\n        (\n            -- this financial year to date\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            or\n            -- last financial year to date\n            date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n    /* even though grouping is not a best practice in staging, the extra dimensions (networktype, clicktype) are irrelevant */\n    group by 1,2,3,4,5\n\n    union all\n    \n    \n    \n    select\n        'be' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        campaignId as campaign_id,\n        case \n            when device = \"HIGH_END_MOBILE\" then \"mobile\"\n            when device = \"CONNECTED_TV\" then \"desktop\"\n            else lower(device)\n        end as device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum((cost/1000000)) as cost,\n        sum(conversions) as conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_BE`.`p_CampaignStats_1473786185`\n    where\n        (\n            -- this financial year to date\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            or\n            -- last financial year to date\n            date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n    /* even though grouping is not a best practice in staging, the extra dimensions (networktype, clicktype) are irrelevant */\n    group by 1,2,3,4,5\n\n    union all\n    \n    \n    \n    select\n        'it' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        campaignId as campaign_id,\n        case \n            when device = \"HIGH_END_MOBILE\" then \"mobile\"\n            when device = \"CONNECTED_TV\" then \"desktop\"\n            else lower(device)\n        end as device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum((cost/1000000)) as cost,\n        sum(conversions) as conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_IT`.`p_CampaignStats_9156948459`\n    where\n        (\n            -- this financial year to date\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            or\n            -- last financial year to date\n            date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n    /* even though grouping is not a best practice in staging, the extra dimensions (networktype, clicktype) are irrelevant */\n    group by 1,2,3,4,5\n\n    union all\n    \n    \n    \n    select\n        'uk' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        campaignId as campaign_id,\n        case \n            when device = \"HIGH_END_MOBILE\" then \"mobile\"\n            when device = \"CONNECTED_TV\" then \"desktop\"\n            else lower(device)\n        end as device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum((cost/1000000)) as cost,\n        sum(conversions) as conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_UK`.`p_CampaignStats_7806554469`\n    where\n        (\n            -- this financial year to date\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            or\n            -- last financial year to date\n            date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n    /* even though grouping is not a best practice in staging, the extra dimensions (networktype, clicktype) are irrelevant */\n    group by 1,2,3,4,5\n\n    union all\n    \n    \n    \n    select\n        'dk' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        campaignId as campaign_id,\n        case \n            when device = \"HIGH_END_MOBILE\" then \"mobile\"\n            when device = \"CONNECTED_TV\" then \"desktop\"\n            else lower(device)\n        end as device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum((cost/1000000)) as cost,\n        sum(conversions) as conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_DK`.`p_CampaignStats_4459699103`\n    where\n        (\n            -- this financial year to date\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            or\n            -- last financial year to date\n            date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n    /* even though grouping is not a best practice in staging, the extra dimensions (networktype, clicktype) are irrelevant */\n    group by 1,2,3,4,5\n\n    union all\n    \n    \n    \n    select\n        'se' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        campaignId as campaign_id,\n        case \n            when device = \"HIGH_END_MOBILE\" then \"mobile\"\n            when device = \"CONNECTED_TV\" then \"desktop\"\n            else lower(device)\n        end as device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum((cost/1000000)) as cost,\n        sum(conversions) as conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_SE`.`p_CampaignStats_4013522683`\n    where\n        (\n            -- this financial year to date\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            or\n            -- last financial year to date\n            date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n    /* even though grouping is not a best practice in staging, the extra dimensions (networktype, clicktype) are irrelevant */\n    group by 1,2,3,4,5\n\n    union all\n    \n    \n    \n    select\n        'fr' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        campaignId as campaign_id,\n        case \n            when device = \"HIGH_END_MOBILE\" then \"mobile\"\n            when device = \"CONNECTED_TV\" then \"desktop\"\n            else lower(device)\n        end as device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum((cost/1000000)) as cost,\n        sum(conversions) as conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_FR`.`p_CampaignStats_6704103474`\n    where\n        (\n            -- this financial year to date\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            or\n            -- last financial year to date\n            date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n    /* even though grouping is not a best practice in staging, the extra dimensions (networktype, clicktype) are irrelevant */\n    group by 1,2,3,4,5\n\n    union all\n    \n    \n    \n    select\n        'cz' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        campaignId as campaign_id,\n        case \n            when device = \"HIGH_END_MOBILE\" then \"mobile\"\n            when device = \"CONNECTED_TV\" then \"desktop\"\n            else lower(device)\n        end as device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum((cost/1000000)) as cost,\n        sum(conversions) as conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_CampaignStats_4105561535`\n    where\n        (\n            -- this financial year to date\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            or\n            -- last financial year to date\n            date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n    /* even though grouping is not a best practice in staging, the extra dimensions (networktype, clicktype) are irrelevant */\n    group by 1,2,3,4,5\n\n    union all\n    \n    \n    \n    select\n        'fi' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        campaignId as campaign_id,\n        case \n            when device = \"HIGH_END_MOBILE\" then \"mobile\"\n            when device = \"CONNECTED_TV\" then \"desktop\"\n            else lower(device)\n        end as device,\n        sum(impressions) as impressions,\n        sum(clicks) as clicks,\n        sum((cost/1000000)) as cost,\n        sum(conversions) as conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_FI`.`p_CampaignStats_9125109148`\n    where\n        (\n            -- this financial year to date\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            or\n            -- last financial year to date\n            date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n    /* even though grouping is not a best practice in staging, the extra dimensions (networktype, clicktype) are irrelevant */\n    group by 1,2,3,4,5\n\n    \n    \n\n)\n\nselect \n    to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(account_id as \n    string\n), '') || '-' || coalesce(cast(campaign_id as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n    * \nfrom all_campaign_stats", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaign_stats`"}, "model.sql_repository_bz.stg_gads_all_ads_info_current": {"raw_sql": "/* collect campaign names stats from all countries */\r\n\r\nwith ad_info_current as (\r\n\r\n    {% for country in var('gads_countries') %}\r\n    {% set source_country = 'google_ads_transfer_' + country %}\r\n\r\n    select distinct\r\n        {{ dbt_utils.surrogate_key(['date(_PARTITIONTIME)', 'CampaignId', 'AdGroupId', 'CreativeId', 'Status']) }} as sk_id,\r\n        '{{ country }}' as country,\r\n        externalCustomerId as account_id,\r\n        CreativeId as creative_id,\r\n        AdType as ad_type,\r\n        Status as ad_status,\r\n        /* fetch the first entry from the list */\r\n        split(split(creativefinalurls,'\"')[safe_offset(1)],'\"')[safe_offset(0)] as final_url\r\n    from {{ source(source_country, 'gads_ads') }}\r\n    where\r\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day) \r\n        /* to speed up materialization of stg model */\r\n        and AdType in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n)\r\n\r\nselect * from ad_info_current", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.google_ads_transfer_de.gads_ads", "source.sql_repository_bz.google_ads_transfer_at.gads_ads", "source.sql_repository_bz.google_ads_transfer_ch.gads_ads", "source.sql_repository_bz.google_ads_transfer_nl.gads_ads", "source.sql_repository_bz.google_ads_transfer_be.gads_ads", "source.sql_repository_bz.google_ads_transfer_it.gads_ads", "source.sql_repository_bz.google_ads_transfer_uk.gads_ads", "source.sql_repository_bz.google_ads_transfer_dk.gads_ads", "source.sql_repository_bz.google_ads_transfer_se.gads_ads", "source.sql_repository_bz.google_ads_transfer_fr.gads_ads", "source.sql_repository_bz.google_ads_transfer_cz.gads_ads", "source.sql_repository_bz.google_ads_transfer_fi.gads_ads"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "stg_gads_all_ads_info_current"], "unique_id": "model.sql_repository_bz.stg_gads_all_ads_info_current", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_ads/stg_gads_all_ads_info_current.sql", "original_file_path": "models/01_staging/google_ads/stg_gads_all_ads_info_current.sql", "name": "stg_gads_all_ads_info_current", "alias": "stg_gads_all_ads_info_current", "checksum": {"name": "sha256", "checksum": "d2cb96d194d90be1c42d17febb936c814ed4d08e64c2e179e7500ebc48ffba67"}, "tags": [], "refs": [], "sources": [["google_ads_transfer_de", "gads_ads"], ["google_ads_transfer_at", "gads_ads"], ["google_ads_transfer_ch", "gads_ads"], ["google_ads_transfer_nl", "gads_ads"], ["google_ads_transfer_be", "gads_ads"], ["google_ads_transfer_it", "gads_ads"], ["google_ads_transfer_uk", "gads_ads"], ["google_ads_transfer_dk", "gads_ads"], ["google_ads_transfer_se", "gads_ads"], ["google_ads_transfer_fr", "gads_ads"], ["google_ads_transfer_cz", "gads_ads"], ["google_ads_transfer_fi", "gads_ads"]], "description": "this model lists all current ads in all accounts, with metadata", "columns": {"sk_id": {"name": "sk_id", "description": "a unique key based on enity ids and status", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_ads/_models_stg_gads.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/stg_gads_all_ads_info_current.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.9132528, "compiled_sql": "/* collect campaign names stats from all countries */\n\nwith ad_info_current as (\n\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(Status as \n    string\n), '') as \n    string\n))) as sk_id,\n        'de' as country,\n        externalCustomerId as account_id,\n        CreativeId as creative_id,\n        AdType as ad_type,\n        Status as ad_status,\n        /* fetch the first entry from the list */\n        split(split(creativefinalurls,'\"')[safe_offset(1)],'\"')[safe_offset(0)] as final_url\n    from `adsdataprediction`.`GoogleAdsTransfer_DE`.`p_Ad_7844181130`\n    where\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day) \n        /* to speed up materialization of stg model */\n        and AdType in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(Status as \n    string\n), '') as \n    string\n))) as sk_id,\n        'at' as country,\n        externalCustomerId as account_id,\n        CreativeId as creative_id,\n        AdType as ad_type,\n        Status as ad_status,\n        /* fetch the first entry from the list */\n        split(split(creativefinalurls,'\"')[safe_offset(1)],'\"')[safe_offset(0)] as final_url\n    from `adsdataprediction`.`GoogleAdsTransfer_AT`.`p_Ad_5575738585`\n    where\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day) \n        /* to speed up materialization of stg model */\n        and AdType in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(Status as \n    string\n), '') as \n    string\n))) as sk_id,\n        'ch' as country,\n        externalCustomerId as account_id,\n        CreativeId as creative_id,\n        AdType as ad_type,\n        Status as ad_status,\n        /* fetch the first entry from the list */\n        split(split(creativefinalurls,'\"')[safe_offset(1)],'\"')[safe_offset(0)] as final_url\n    from `adsdataprediction`.`GoogleAdsTransfer_CH`.`p_Ad_1845331214`\n    where\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day) \n        /* to speed up materialization of stg model */\n        and AdType in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(Status as \n    string\n), '') as \n    string\n))) as sk_id,\n        'nl' as country,\n        externalCustomerId as account_id,\n        CreativeId as creative_id,\n        AdType as ad_type,\n        Status as ad_status,\n        /* fetch the first entry from the list */\n        split(split(creativefinalurls,'\"')[safe_offset(1)],'\"')[safe_offset(0)] as final_url\n    from `adsdataprediction`.`GoogleAdsTransfer_NL`.`p_Ad_1631966904`\n    where\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day) \n        /* to speed up materialization of stg model */\n        and AdType in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(Status as \n    string\n), '') as \n    string\n))) as sk_id,\n        'be' as country,\n        externalCustomerId as account_id,\n        CreativeId as creative_id,\n        AdType as ad_type,\n        Status as ad_status,\n        /* fetch the first entry from the list */\n        split(split(creativefinalurls,'\"')[safe_offset(1)],'\"')[safe_offset(0)] as final_url\n    from `adsdataprediction`.`GoogleAdsTransfer_BE`.`p_Ad_1473786185`\n    where\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day) \n        /* to speed up materialization of stg model */\n        and AdType in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(Status as \n    string\n), '') as \n    string\n))) as sk_id,\n        'it' as country,\n        externalCustomerId as account_id,\n        CreativeId as creative_id,\n        AdType as ad_type,\n        Status as ad_status,\n        /* fetch the first entry from the list */\n        split(split(creativefinalurls,'\"')[safe_offset(1)],'\"')[safe_offset(0)] as final_url\n    from `adsdataprediction`.`GoogleAdsTransfer_IT`.`p_Ad_9156948459`\n    where\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day) \n        /* to speed up materialization of stg model */\n        and AdType in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(Status as \n    string\n), '') as \n    string\n))) as sk_id,\n        'uk' as country,\n        externalCustomerId as account_id,\n        CreativeId as creative_id,\n        AdType as ad_type,\n        Status as ad_status,\n        /* fetch the first entry from the list */\n        split(split(creativefinalurls,'\"')[safe_offset(1)],'\"')[safe_offset(0)] as final_url\n    from `adsdataprediction`.`GoogleAdsTransfer_UK`.`p_Ad_7806554469`\n    where\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day) \n        /* to speed up materialization of stg model */\n        and AdType in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(Status as \n    string\n), '') as \n    string\n))) as sk_id,\n        'dk' as country,\n        externalCustomerId as account_id,\n        CreativeId as creative_id,\n        AdType as ad_type,\n        Status as ad_status,\n        /* fetch the first entry from the list */\n        split(split(creativefinalurls,'\"')[safe_offset(1)],'\"')[safe_offset(0)] as final_url\n    from `adsdataprediction`.`GoogleAdsTransfer_DK`.`p_Ad_4459699103`\n    where\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day) \n        /* to speed up materialization of stg model */\n        and AdType in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(Status as \n    string\n), '') as \n    string\n))) as sk_id,\n        'se' as country,\n        externalCustomerId as account_id,\n        CreativeId as creative_id,\n        AdType as ad_type,\n        Status as ad_status,\n        /* fetch the first entry from the list */\n        split(split(creativefinalurls,'\"')[safe_offset(1)],'\"')[safe_offset(0)] as final_url\n    from `adsdataprediction`.`GoogleAdsTransfer_SE`.`p_Ad_4013522683`\n    where\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day) \n        /* to speed up materialization of stg model */\n        and AdType in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(Status as \n    string\n), '') as \n    string\n))) as sk_id,\n        'fr' as country,\n        externalCustomerId as account_id,\n        CreativeId as creative_id,\n        AdType as ad_type,\n        Status as ad_status,\n        /* fetch the first entry from the list */\n        split(split(creativefinalurls,'\"')[safe_offset(1)],'\"')[safe_offset(0)] as final_url\n    from `adsdataprediction`.`GoogleAdsTransfer_FR`.`p_Ad_6704103474`\n    where\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day) \n        /* to speed up materialization of stg model */\n        and AdType in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(Status as \n    string\n), '') as \n    string\n))) as sk_id,\n        'cz' as country,\n        externalCustomerId as account_id,\n        CreativeId as creative_id,\n        AdType as ad_type,\n        Status as ad_status,\n        /* fetch the first entry from the list */\n        split(split(creativefinalurls,'\"')[safe_offset(1)],'\"')[safe_offset(0)] as final_url\n    from `adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_Ad_4105561535`\n    where\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day) \n        /* to speed up materialization of stg model */\n        and AdType in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CreativeId as \n    string\n), '') || '-' || coalesce(cast(Status as \n    string\n), '') as \n    string\n))) as sk_id,\n        'fi' as country,\n        externalCustomerId as account_id,\n        CreativeId as creative_id,\n        AdType as ad_type,\n        Status as ad_status,\n        /* fetch the first entry from the list */\n        split(split(creativefinalurls,'\"')[safe_offset(1)],'\"')[safe_offset(0)] as final_url\n    from `adsdataprediction`.`GoogleAdsTransfer_FI`.`p_Ad_9125109148`\n    where\n        date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day) \n        /* to speed up materialization of stg model */\n        and AdType in ('EXPANDED_TEXT_AD', 'RESPONSIVE_SEARCH_AD')\n\n    \n    \n\n)\n\nselect * from ad_info_current", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gads_all_ads_info_current`"}, "model.sql_repository_bz.stg_gads_all_adgroups_info_current": {"raw_sql": "/* collect campaign names stats from all countries */\r\n\r\nwith all_adgroups_info_current as (\r\n\r\n    {% for country in var('gads_countries') %}\r\n    {% set source_country = 'google_ads_transfer_' + country %}\r\n\r\n    select\r\n        '{{ country }}' as account,\r\n        *\r\n    from {{ source(source_country, 'gads_adgroups') }}\r\n    where date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n)\r\n\r\nselect * from all_adgroups_info_current", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.google_ads_transfer_de.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_at.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_ch.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_nl.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_be.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_it.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_uk.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_dk.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_se.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_fr.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_cz.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_fi.gads_adgroups"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "stg_gads_all_adgroups_info_current"], "unique_id": "model.sql_repository_bz.stg_gads_all_adgroups_info_current", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_ads/stg_gads_all_adgroups_info_current.sql", "original_file_path": "models/01_staging/google_ads/stg_gads_all_adgroups_info_current.sql", "name": "stg_gads_all_adgroups_info_current", "alias": "stg_gads_all_adgroups_info_current", "checksum": {"name": "sha256", "checksum": "552e507803abc45d4e57efe2b67b944451371765c99e3d3b1755f2fab5641b97"}, "tags": [], "refs": [], "sources": [["google_ads_transfer_de", "gads_adgroups"], ["google_ads_transfer_at", "gads_adgroups"], ["google_ads_transfer_ch", "gads_adgroups"], ["google_ads_transfer_nl", "gads_adgroups"], ["google_ads_transfer_be", "gads_adgroups"], ["google_ads_transfer_it", "gads_adgroups"], ["google_ads_transfer_uk", "gads_adgroups"], ["google_ads_transfer_dk", "gads_adgroups"], ["google_ads_transfer_se", "gads_adgroups"], ["google_ads_transfer_fr", "gads_adgroups"], ["google_ads_transfer_cz", "gads_adgroups"], ["google_ads_transfer_fi", "gads_adgroups"]], "description": "this model lists all current adgroups in all accounts, with metadata", "columns": {"AdGroupId": {"name": "AdGroupId", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_ads/_models_stg_gads.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/stg_gads_all_adgroups_info_current.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.908581, "compiled_sql": "/* collect campaign names stats from all countries */\n\nwith all_adgroups_info_current as (\n\n    \n    \n\n    select\n        'de' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_DE`.`p_AdGroup_7844181130`\n    where date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        'at' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_AT`.`p_AdGroup_5575738585`\n    where date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        'ch' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_CH`.`p_AdGroup_1845331214`\n    where date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        'nl' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_NL`.`p_AdGroup_1631966904`\n    where date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        'be' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_BE`.`p_AdGroup_1473786185`\n    where date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        'it' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_IT`.`p_AdGroup_9156948459`\n    where date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        'uk' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_UK`.`p_AdGroup_7806554469`\n    where date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        'dk' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_DK`.`p_AdGroup_4459699103`\n    where date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        'se' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_SE`.`p_AdGroup_4013522683`\n    where date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        'fr' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_FR`.`p_AdGroup_6704103474`\n    where date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        'cz' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_AdGroup_4105561535`\n    where date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        'fi' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_FI`.`p_AdGroup_9125109148`\n    where date(_PARTITIONTIME) = date_sub(current_date(), interval 2 day)\n\n    \n    \n\n)\n\nselect * from all_adgroups_info_current", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gads_all_adgroups_info_current`"}, "model.sql_repository_bz.stg_gads_all_query_stats": {"raw_sql": "/* collect query stats from all countries */\r\n\r\nwith all_query_stats as (\r\n\r\n    {% for country in var('gads_countries') %}\r\n    {% set source_country = 'google_ads_transfer_' + country %}\r\n\r\n    select\r\n        {{ dbt_utils.surrogate_key(['date(_PARTITIONTIME)', 'externalCustomerId', 'CampaignId', 'query', 'device']) }} as sk_id,\r\n        '{{ country }}' as account,\r\n        externalCustomerId as account_id,\r\n        date(_PARTITIONTIME) as date,\r\n        lower(query) as query,\r\n        CampaignId as campaign_id,\r\n        case\r\n            when device = 'HIGH_END_MOBILE' then 'mobile'\r\n            when device = 'CONNECTED_TV' then 'desktop'\r\n            else lower(device)\r\n        end as device,\r\n        impressions,\r\n        clicks,\r\n        (cost/1000000) as cost,\r\n        conversions\r\n    from {{ source(source_country, 'gads_search_query_stats') }}\r\n    where\r\n        (\r\n            /* this financial year to date */\r\n            date(_PARTITIONTIME) between {{ get_financial_year_to_yesterday_date_range() }} \r\n            /* last financial year to date */\r\n            or date(_PARTITIONTIME) between {{ get_prev_financial_year_to_yest_layr_date_range() }}\r\n        )\r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n)\r\n\r\nselect * from all_query_stats", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_financial_year_to_yesterday_date_range", "macro.sql_repository_bz.get_prev_financial_year_to_yest_layr_date_range"], "nodes": ["source.sql_repository_bz.google_ads_transfer_de.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_at.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_ch.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_nl.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_be.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_it.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_uk.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_dk.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_se.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_fr.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_cz.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_fi.gads_search_query_stats"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "stg_gads_all_query_stats"], "unique_id": "model.sql_repository_bz.stg_gads_all_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_ads/stg_gads_all_query_stats.sql", "original_file_path": "models/01_staging/google_ads/stg_gads_all_query_stats.sql", "name": "stg_gads_all_query_stats", "alias": "stg_gads_all_query_stats", "checksum": {"name": "sha256", "checksum": "34483d320d851065b8dca0b6e962b576f580a20b43248e8e357101ac47920b3b"}, "tags": [], "refs": [], "sources": [["google_ads_transfer_de", "gads_search_query_stats"], ["google_ads_transfer_at", "gads_search_query_stats"], ["google_ads_transfer_ch", "gads_search_query_stats"], ["google_ads_transfer_nl", "gads_search_query_stats"], ["google_ads_transfer_be", "gads_search_query_stats"], ["google_ads_transfer_it", "gads_search_query_stats"], ["google_ads_transfer_uk", "gads_search_query_stats"], ["google_ads_transfer_dk", "gads_search_query_stats"], ["google_ads_transfer_se", "gads_search_query_stats"], ["google_ads_transfer_fr", "gads_search_query_stats"], ["google_ads_transfer_cz", "gads_search_query_stats"], ["google_ads_transfer_fi", "gads_search_query_stats"]], "description": "this model lists all query performance statistics by country account and day", "columns": {"sk_id": {"name": "sk_id", "description": "the unique surrogate key for the sku performance of that day", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_ads/_models_stg_gads.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/stg_gads_all_query_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.9697378, "compiled_sql": "/* collect query stats from all countries */\n\nwith all_query_stats as (\n\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'de' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        lower(query) as query,\n        CampaignId as campaign_id,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_DE`.`p_SearchQueryStats_7844181130`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'at' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        lower(query) as query,\n        CampaignId as campaign_id,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_AT`.`p_SearchQueryStats_5575738585`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'ch' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        lower(query) as query,\n        CampaignId as campaign_id,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_CH`.`p_SearchQueryStats_1845331214`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'nl' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        lower(query) as query,\n        CampaignId as campaign_id,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_NL`.`p_SearchQueryStats_1631966904`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'be' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        lower(query) as query,\n        CampaignId as campaign_id,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_BE`.`p_SearchQueryStats_1473786185`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'it' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        lower(query) as query,\n        CampaignId as campaign_id,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_IT`.`p_SearchQueryStats_9156948459`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'uk' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        lower(query) as query,\n        CampaignId as campaign_id,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_UK`.`p_SearchQueryStats_7806554469`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'dk' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        lower(query) as query,\n        CampaignId as campaign_id,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_DK`.`p_SearchQueryStats_4459699103`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'se' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        lower(query) as query,\n        CampaignId as campaign_id,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_SE`.`p_SearchQueryStats_4013522683`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'fr' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        lower(query) as query,\n        CampaignId as campaign_id,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_FR`.`p_SearchQueryStats_6704103474`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'cz' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        lower(query) as query,\n        CampaignId as campaign_id,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_SearchQueryStats_4105561535`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(externalCustomerId as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') as \n    string\n))) as sk_id,\n        'fi' as account,\n        externalCustomerId as account_id,\n        date(_PARTITIONTIME) as date,\n        lower(query) as query,\n        CampaignId as campaign_id,\n        case\n            when device = 'HIGH_END_MOBILE' then 'mobile'\n            when device = 'CONNECTED_TV' then 'desktop'\n            else lower(device)\n        end as device,\n        impressions,\n        clicks,\n        (cost/1000000) as cost,\n        conversions\n    from `adsdataprediction`.`GoogleAdsTransfer_FI`.`p_SearchQueryStats_9125109148`\n    where\n        (\n            /* this financial year to date */\n            date(_PARTITIONTIME) between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            /* last financial year to date */\n            or date(_PARTITIONTIME) between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    \n    \n\n)\n\nselect * from all_query_stats", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gads_all_query_stats`"}, "model.sql_repository_bz.stg_gads_all_campaigns_info_current": {"raw_sql": "-- collect campaign names stats from all countries\r\n\r\nwith all_campaign_info_current as (\r\n\r\n    {% for country in var('gads_countries') %}\r\n    {% set source_country = 'google_ads_transfer_' + country %}\r\n\r\n    select\r\n        {{ dbt_utils.surrogate_key(['date(_PARTITIONTIME)', 'CampaignId', 'CampaignName', 'CampaignStatus', 'Amount']) }} as sk_id,\r\n        '{{ country }}' as account,\r\n        *\r\n    from {{ source(source_country, 'gads_campaigns') }}\r\n    where\r\n        date(_PARTITIONTIME) between '{{ var(\"start_date_fy\") }}'\r\n        and date_sub(current_date(), interval 2 day)\r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n)\r\n\r\nselect * from all_campaign_info_current", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.google_ads_transfer_de.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_at.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_ch.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_nl.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_be.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_it.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_uk.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_dk.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_se.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_fr.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_cz.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_fi.gads_campaigns"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "stg_gads_all_campaigns_info_current"], "unique_id": "model.sql_repository_bz.stg_gads_all_campaigns_info_current", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_ads/stg_gads_all_campaigns_info_current.sql", "original_file_path": "models/01_staging/google_ads/stg_gads_all_campaigns_info_current.sql", "name": "stg_gads_all_campaigns_info_current", "alias": "stg_gads_all_campaigns_info_current", "checksum": {"name": "sha256", "checksum": "6287af86ee99f20bc018ea165ac9fe6fc90de52d1d25e9ed8bda42324bd779e6"}, "tags": [], "refs": [], "sources": [["google_ads_transfer_de", "gads_campaigns"], ["google_ads_transfer_at", "gads_campaigns"], ["google_ads_transfer_ch", "gads_campaigns"], ["google_ads_transfer_nl", "gads_campaigns"], ["google_ads_transfer_be", "gads_campaigns"], ["google_ads_transfer_it", "gads_campaigns"], ["google_ads_transfer_uk", "gads_campaigns"], ["google_ads_transfer_dk", "gads_campaigns"], ["google_ads_transfer_se", "gads_campaigns"], ["google_ads_transfer_fr", "gads_campaigns"], ["google_ads_transfer_cz", "gads_campaigns"], ["google_ads_transfer_fi", "gads_campaigns"]], "description": "this model lists all current campaign in all accounts, with metadata", "columns": {"sk_id": {"name": "sk_id", "description": "the unique row id, based on attribute changes", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_ads/_models_stg_gads.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/stg_gads_all_campaigns_info_current.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.9473789, "compiled_sql": "-- collect campaign names stats from all countries\n\nwith all_campaign_info_current as (\n\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(CampaignName as \n    string\n), '') || '-' || coalesce(cast(CampaignStatus as \n    string\n), '') || '-' || coalesce(cast(Amount as \n    string\n), '') as \n    string\n))) as sk_id,\n        'de' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_DE`.`p_Campaign_7844181130`\n    where\n        date(_PARTITIONTIME) between '2022-03-01'\n        and date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(CampaignName as \n    string\n), '') || '-' || coalesce(cast(CampaignStatus as \n    string\n), '') || '-' || coalesce(cast(Amount as \n    string\n), '') as \n    string\n))) as sk_id,\n        'at' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_AT`.`p_Campaign_5575738585`\n    where\n        date(_PARTITIONTIME) between '2022-03-01'\n        and date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(CampaignName as \n    string\n), '') || '-' || coalesce(cast(CampaignStatus as \n    string\n), '') || '-' || coalesce(cast(Amount as \n    string\n), '') as \n    string\n))) as sk_id,\n        'ch' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_CH`.`p_Campaign_1845331214`\n    where\n        date(_PARTITIONTIME) between '2022-03-01'\n        and date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(CampaignName as \n    string\n), '') || '-' || coalesce(cast(CampaignStatus as \n    string\n), '') || '-' || coalesce(cast(Amount as \n    string\n), '') as \n    string\n))) as sk_id,\n        'nl' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_NL`.`p_Campaign_1631966904`\n    where\n        date(_PARTITIONTIME) between '2022-03-01'\n        and date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(CampaignName as \n    string\n), '') || '-' || coalesce(cast(CampaignStatus as \n    string\n), '') || '-' || coalesce(cast(Amount as \n    string\n), '') as \n    string\n))) as sk_id,\n        'be' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_BE`.`p_Campaign_1473786185`\n    where\n        date(_PARTITIONTIME) between '2022-03-01'\n        and date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(CampaignName as \n    string\n), '') || '-' || coalesce(cast(CampaignStatus as \n    string\n), '') || '-' || coalesce(cast(Amount as \n    string\n), '') as \n    string\n))) as sk_id,\n        'it' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_IT`.`p_Campaign_9156948459`\n    where\n        date(_PARTITIONTIME) between '2022-03-01'\n        and date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(CampaignName as \n    string\n), '') || '-' || coalesce(cast(CampaignStatus as \n    string\n), '') || '-' || coalesce(cast(Amount as \n    string\n), '') as \n    string\n))) as sk_id,\n        'uk' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_UK`.`p_Campaign_7806554469`\n    where\n        date(_PARTITIONTIME) between '2022-03-01'\n        and date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(CampaignName as \n    string\n), '') || '-' || coalesce(cast(CampaignStatus as \n    string\n), '') || '-' || coalesce(cast(Amount as \n    string\n), '') as \n    string\n))) as sk_id,\n        'dk' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_DK`.`p_Campaign_4459699103`\n    where\n        date(_PARTITIONTIME) between '2022-03-01'\n        and date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(CampaignName as \n    string\n), '') || '-' || coalesce(cast(CampaignStatus as \n    string\n), '') || '-' || coalesce(cast(Amount as \n    string\n), '') as \n    string\n))) as sk_id,\n        'se' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_SE`.`p_Campaign_4013522683`\n    where\n        date(_PARTITIONTIME) between '2022-03-01'\n        and date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(CampaignName as \n    string\n), '') || '-' || coalesce(cast(CampaignStatus as \n    string\n), '') || '-' || coalesce(cast(Amount as \n    string\n), '') as \n    string\n))) as sk_id,\n        'fr' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_FR`.`p_Campaign_6704103474`\n    where\n        date(_PARTITIONTIME) between '2022-03-01'\n        and date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(CampaignName as \n    string\n), '') || '-' || coalesce(cast(CampaignStatus as \n    string\n), '') || '-' || coalesce(cast(Amount as \n    string\n), '') as \n    string\n))) as sk_id,\n        'cz' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_Campaign_4105561535`\n    where\n        date(_PARTITIONTIME) between '2022-03-01'\n        and date_sub(current_date(), interval 2 day)\n\n    union all\n    \n    \n\n    select\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(CampaignName as \n    string\n), '') || '-' || coalesce(cast(CampaignStatus as \n    string\n), '') || '-' || coalesce(cast(Amount as \n    string\n), '') as \n    string\n))) as sk_id,\n        'fi' as account,\n        *\n    from `adsdataprediction`.`GoogleAdsTransfer_FI`.`p_Campaign_9125109148`\n    where\n        date(_PARTITIONTIME) between '2022-03-01'\n        and date_sub(current_date(), interval 2 day)\n\n    \n    \n\n)\n\nselect * from all_campaign_info_current", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaigns_info_current`"}, "model.sql_repository_bz.stg_gads_all_criteria_info_current": {"raw_sql": "/* collect campaign names stats from all countries */\r\n\r\nwith all_criteria as (\r\n\r\n    {% for country in var('gads_countries') %}\r\n    {% set source_country = 'google_ads_transfer_' + country %}\r\n\r\n    select distinct\r\n        {{ dbt_utils.surrogate_key(['date(_PARTITIONTIME)', 'CampaignId', 'AdGroupId', 'CriterionId']) }} as sk_id,\r\n        '{{ country }}' as country,\r\n        *,\r\n        split(split(Criteria, 'brand==')[safe_offset(1)],'&+category')[safe_offset(0)] as brand\r\n    from {{ source(source_country, 'gads_criteria') }}\r\n    where date(_PARTITIONTIME) between {{ get_last_n_days_date_range(90) }}\r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n)\r\n\r\nselect * from all_criteria", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.google_ads_transfer_de.gads_criteria", "source.sql_repository_bz.google_ads_transfer_at.gads_criteria", "source.sql_repository_bz.google_ads_transfer_ch.gads_criteria", "source.sql_repository_bz.google_ads_transfer_nl.gads_criteria", "source.sql_repository_bz.google_ads_transfer_be.gads_criteria", "source.sql_repository_bz.google_ads_transfer_it.gads_criteria", "source.sql_repository_bz.google_ads_transfer_uk.gads_criteria", "source.sql_repository_bz.google_ads_transfer_dk.gads_criteria", "source.sql_repository_bz.google_ads_transfer_se.gads_criteria", "source.sql_repository_bz.google_ads_transfer_fr.gads_criteria", "source.sql_repository_bz.google_ads_transfer_cz.gads_criteria", "source.sql_repository_bz.google_ads_transfer_fi.gads_criteria"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "stg_gads_all_criteria_info_current"], "unique_id": "model.sql_repository_bz.stg_gads_all_criteria_info_current", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_ads/stg_gads_all_criteria_info_current.sql", "original_file_path": "models/01_staging/google_ads/stg_gads_all_criteria_info_current.sql", "name": "stg_gads_all_criteria_info_current", "alias": "stg_gads_all_criteria_info_current", "checksum": {"name": "sha256", "checksum": "1c64174b25d8036f86ab00d415b1b78f9c4af7f203eba509827f29ffbccd76df"}, "tags": [], "refs": [], "sources": [["google_ads_transfer_de", "gads_criteria"], ["google_ads_transfer_at", "gads_criteria"], ["google_ads_transfer_ch", "gads_criteria"], ["google_ads_transfer_nl", "gads_criteria"], ["google_ads_transfer_be", "gads_criteria"], ["google_ads_transfer_it", "gads_criteria"], ["google_ads_transfer_uk", "gads_criteria"], ["google_ads_transfer_dk", "gads_criteria"], ["google_ads_transfer_se", "gads_criteria"], ["google_ads_transfer_fr", "gads_criteria"], ["google_ads_transfer_cz", "gads_criteria"], ["google_ads_transfer_fi", "gads_criteria"]], "description": "this model lists all current critera, eg keywords, shopping partitions, in all accounts, with metadata", "columns": {"CriterionId": {"name": "CriterionId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sk_id": {"name": "sk_id", "description": "the unique identifier, as some criterions like gender are reused in multiple adgroups", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_ads/_models_stg_gads.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/stg_gads_all_criteria_info_current.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750850.960681, "compiled_sql": "/* collect campaign names stats from all countries */\n\nwith all_criteria as (\n\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') as \n    string\n))) as sk_id,\n        'de' as country,\n        *,\n        split(split(Criteria, 'brand==')[safe_offset(1)],'&+category')[safe_offset(0)] as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_DE`.`p_Criteria_7844181130`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') as \n    string\n))) as sk_id,\n        'at' as country,\n        *,\n        split(split(Criteria, 'brand==')[safe_offset(1)],'&+category')[safe_offset(0)] as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_AT`.`p_Criteria_5575738585`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') as \n    string\n))) as sk_id,\n        'ch' as country,\n        *,\n        split(split(Criteria, 'brand==')[safe_offset(1)],'&+category')[safe_offset(0)] as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_CH`.`p_Criteria_1845331214`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') as \n    string\n))) as sk_id,\n        'nl' as country,\n        *,\n        split(split(Criteria, 'brand==')[safe_offset(1)],'&+category')[safe_offset(0)] as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_NL`.`p_Criteria_1631966904`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') as \n    string\n))) as sk_id,\n        'be' as country,\n        *,\n        split(split(Criteria, 'brand==')[safe_offset(1)],'&+category')[safe_offset(0)] as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_BE`.`p_Criteria_1473786185`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') as \n    string\n))) as sk_id,\n        'it' as country,\n        *,\n        split(split(Criteria, 'brand==')[safe_offset(1)],'&+category')[safe_offset(0)] as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_IT`.`p_Criteria_9156948459`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') as \n    string\n))) as sk_id,\n        'uk' as country,\n        *,\n        split(split(Criteria, 'brand==')[safe_offset(1)],'&+category')[safe_offset(0)] as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_UK`.`p_Criteria_7806554469`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') as \n    string\n))) as sk_id,\n        'dk' as country,\n        *,\n        split(split(Criteria, 'brand==')[safe_offset(1)],'&+category')[safe_offset(0)] as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_DK`.`p_Criteria_4459699103`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') as \n    string\n))) as sk_id,\n        'se' as country,\n        *,\n        split(split(Criteria, 'brand==')[safe_offset(1)],'&+category')[safe_offset(0)] as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_SE`.`p_Criteria_4013522683`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') as \n    string\n))) as sk_id,\n        'fr' as country,\n        *,\n        split(split(Criteria, 'brand==')[safe_offset(1)],'&+category')[safe_offset(0)] as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_FR`.`p_Criteria_6704103474`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') as \n    string\n))) as sk_id,\n        'cz' as country,\n        *,\n        split(split(Criteria, 'brand==')[safe_offset(1)],'&+category')[safe_offset(0)] as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_Criteria_4105561535`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(date(_PARTITIONTIME) as \n    string\n), '') || '-' || coalesce(cast(CampaignId as \n    string\n), '') || '-' || coalesce(cast(AdGroupId as \n    string\n), '') || '-' || coalesce(cast(CriterionId as \n    string\n), '') as \n    string\n))) as sk_id,\n        'fi' as country,\n        *,\n        split(split(Criteria, 'brand==')[safe_offset(1)],'&+category')[safe_offset(0)] as brand\n    from `adsdataprediction`.`GoogleAdsTransfer_FI`.`p_Criteria_9125109148`\n    where date(_PARTITIONTIME) between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    \n    \n\n)\n\nselect * from all_criteria", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gads_all_criteria_info_current`"}, "model.sql_repository_bz.stg_test_results_last_run": {"raw_sql": "with test_results_last_run as (\r\n\r\n    select\r\n        /* unique key for the individual test run */\r\n        {{ dbt_utils.surrogate_key(\r\n            ['test_timestamp_utc', 'audit_run_id', 'test_name', 'test_result', 'execution_time_seconds']\r\n        ) }} as test_run_id, \r\n        *\r\n    from {{ source('dbt_test_results', 'test_results_central') }}\r\n\r\n)\r\n\r\nselect * from test_results_last_run", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.dbt_test_results.test_results_central"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "dbt_metadata", "stg_test_results_last_run"], "unique_id": "model.sql_repository_bz.stg_test_results_last_run", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/dbt_metadata/stg_test_results_last_run.sql", "original_file_path": "models/01_staging/dbt_metadata/stg_test_results_last_run.sql", "name": "stg_test_results_last_run", "alias": "stg_test_results_last_run", "checksum": {"name": "sha256", "checksum": "729c48e9ad6e815d6db39c809ccf6ea8f8e86ae948ea02a56d6ee03a783ac351"}, "tags": [], "refs": [], "sources": [["dbt_test_results", "test_results_central"]], "description": "copy of test results central table", "columns": {"test_run_id": {"name": "test_run_id", "description": "the unique id of the run", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/dbt_metadata/_models_dbt_metadata.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/dbt_metadata/stg_test_results_last_run.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.1041055, "compiled_sql": "with test_results_last_run as (\n\n    select\n        /* unique key for the individual test run */\n        to_hex(md5(cast(coalesce(cast(test_timestamp_utc as \n    string\n), '') || '-' || coalesce(cast(audit_run_id as \n    string\n), '') || '-' || coalesce(cast(test_name as \n    string\n), '') || '-' || coalesce(cast(test_result as \n    string\n), '') || '-' || coalesce(cast(execution_time_seconds as \n    string\n), '') as \n    string\n))) as test_run_id, \n        *\n    from `bergzeit`.`dbt_test_results`.`test_results_central`\n\n)\n\nselect * from test_results_last_run", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_test_results_last_run`"}, "model.sql_repository_bz.stg_test_results_historic": {"raw_sql": "with test_results_historic as (\r\n\r\n    select\r\n        /* unique key for the individual test run */\r\n        {{ dbt_utils.surrogate_key(\r\n            ['test_timestamp_utc', 'audit_run_id', 'test_name', 'test_result', 'execution_time_seconds']\r\n        ) }} as test_run_id,\r\n        *\r\n    from {{ source('dbt_test_results', 'test_results_history') }}\r\n    where\r\n        test_date = current_date()\r\n        or test_date between {{ get_last_n_days_date_range(30) }}\r\n\r\n) \r\n\r\nselect * from test_results_historic", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.dbt_test_results.test_results_history"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "dbt_metadata", "stg_test_results_historic"], "unique_id": "model.sql_repository_bz.stg_test_results_historic", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/dbt_metadata/stg_test_results_historic.sql", "original_file_path": "models/01_staging/dbt_metadata/stg_test_results_historic.sql", "name": "stg_test_results_historic", "alias": "stg_test_results_historic", "checksum": {"name": "sha256", "checksum": "5bce05582a3e548fe1a1937778f461906a2623fd99bdda55228f2ec932f0a5d5"}, "tags": [], "refs": [], "sources": [["dbt_test_results", "test_results_history"]], "description": "copy of test results historic table which appends all new tests results to get full results history", "columns": {"test_run_id": {"name": "test_run_id", "description": "the unique id of the run", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/dbt_metadata/_models_dbt_metadata.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/dbt_metadata/stg_test_results_historic.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.1093843, "compiled_sql": "with test_results_historic as (\n\n    select\n        /* unique key for the individual test run */\n        to_hex(md5(cast(coalesce(cast(test_timestamp_utc as \n    string\n), '') || '-' || coalesce(cast(audit_run_id as \n    string\n), '') || '-' || coalesce(cast(test_name as \n    string\n), '') || '-' || coalesce(cast(test_result as \n    string\n), '') || '-' || coalesce(cast(execution_time_seconds as \n    string\n), '') as \n    string\n))) as test_run_id,\n        *\n    from `bergzeit`.`dbt_test_results`.`test_results_history`\n    where\n        test_date = current_date()\n        or test_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n) \n\nselect * from test_results_historic", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_test_results_historic`"}, "model.sql_repository_bz.stg_gsc_data": {"raw_sql": "{{ \r\n  config(\r\n    partition_by={\r\n          \"field\": \"gsc_date\",\r\n          \"data_type\": \"date\",\r\n          \"granularity\": \"day\"\r\n    }\r\n  ) \r\n}}\r\n\r\n\r\nwith gsc_data_daily as (\r\n  \r\n  /* added distinct to avoid duplicate rows and test failure */\r\n  select distinct\r\n    {{dbt_utils.surrogate_key(['date', 'device', 'page','search_type','query'])}}  as sk_id,\r\n    date as gsc_date,\r\n    device,\r\n    page,\r\n    search_type,\r\n    query,\r\n    time_stamp,\r\n    site as gsc_country,\r\n    /*Sum up or average the metrics as in some limited cases there are two metric values for the same dimensions.\r\n    This is also the case in the search console UI which is why the metric calculation does not falsify the data.\r\n    See WEBA-915 for a detailed explanation.*/\r\n    sum(clicks) as clicks,\r\n    sum(impressions) as impressions,\r\n    avg(ctr) as ctr,\r\n    avg(position) as position\r\n  from {{ source('google_search_console', 'gsc_data') }}\r\n  where \r\n    (\r\n      /*needed to compare the last 30 days to previous period*/\r\n      date between {{ get_last_n_days_date_range(60) }} \r\n      or\r\n      /*needed to compare the last 30 days to previous year*/\r\n      date between {{ get_last_n_days_prev_year(60) }}\r\n      /*  this financial year to date > STOPPED, because too expensive \r\n          or last financial year \r\n          date between {{ get_prev_financial_year_to_yest_layr_date_range() }} */\r\n    )\r\n  group by 1,2,3,4,5,6,7,8\r\n)\r\n\r\nselect * from gsc_data_daily", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_last_n_days_date_range", "macro.sql_repository_bz.get_last_n_days_prev_year", "macro.sql_repository_bz.get_prev_financial_year_to_yest_layr_date_range"], "nodes": ["source.sql_repository_bz.google_search_console.gsc_data"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"field": "gsc_date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_search_console", "stg_gsc_data"], "unique_id": "model.sql_repository_bz.stg_gsc_data", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_search_console/stg_gsc_data.sql", "original_file_path": "models/01_staging/google_search_console/stg_gsc_data.sql", "name": "stg_gsc_data", "alias": "stg_gsc_data", "checksum": {"name": "sha256", "checksum": "678d5c7d30155183e1030bcee1d53d8023dd660ad52c608064c3d0e9d62bc240"}, "tags": [], "refs": [], "sources": [["google_search_console", "gsc_data"]], "description": "this model represents a cleaned version of the Google Search Console source table", "columns": {"page": {"name": "page", "description": "the url of the search impression, in the format \"https://www.bergzeit.de/url-slug/\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "search_type": {"name": "search_type", "description": "the appearance in the Google SERP, either web or image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impressions": {"name": "impressions", "description": "the amount of SERP impressions per query and page", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_stamp": {"name": "time_stamp", "description": "the timestamp of the load process via the cloud function", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sk_id": {"name": "sk_id", "description": "the unique primary key created as hashed value including date, device, page, searchtype and query", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_search_console/_models_gsc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_search_console/stg_gsc_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table", "partition_by": {"field": "gsc_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750851.1337028, "compiled_sql": "\n\n\nwith gsc_data_daily as (\n  \n  /* added distinct to avoid duplicate rows and test failure */\n  select distinct\n    to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') || '-' || coalesce(cast(page as \n    string\n), '') || '-' || coalesce(cast(search_type as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') as \n    string\n)))  as sk_id,\n    date as gsc_date,\n    device,\n    page,\n    search_type,\n    query,\n    time_stamp,\n    site as gsc_country,\n    /*Sum up or average the metrics as in some limited cases there are two metric values for the same dimensions.\n    This is also the case in the search console UI which is why the metric calculation does not falsify the data.\n    See WEBA-915 for a detailed explanation.*/\n    sum(clicks) as clicks,\n    sum(impressions) as impressions,\n    avg(ctr) as ctr,\n    avg(position) as position\n  from `bergzeit`.`google_search_console`.`query_site_report_by_page`\n  where \n    (\n      /*needed to compare the last 30 days to previous period*/\n      date between \n    date_sub(current_date(), interval 60 day)\n    and date_sub(current_date(), interval 1 day)\n \n      or\n      /*needed to compare the last 30 days to previous year*/\n      date between \n    -- get date n days ago of last year\n    date_sub(date_sub(current_date(), interval 1 year), interval 60 day)\n    -- get yesterday last year\n    and date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n      /*  this financial year to date > STOPPED, because too expensive \n          or last financial year \n          date between \n    '2021-03-01' and \n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n */\n    )\n  group by 1,2,3,4,5,6,7,8\n)\n\nselect * from gsc_data_daily", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`"}, "model.sql_repository_bz.stg_gmc_product_brands": {"raw_sql": "-- fetch merchant center brands\r\n{% set countries =  ['de'] %}\r\n\r\nwith all_brands as (\r\n\r\n  {% for country in countries %}\r\n  {% set source_country = 'mc_products_' + country %}\r\n\r\n    select distinct lower(brand) as brand\r\n    from {{source('merchant_center_transfer_de', source_country)}}\r\n    where\r\n      channel = 'online'\r\n      and price.value > 0\r\n      and date(_partitiontime) between {{ get_last_n_days_date_range(365) }}\r\n\r\n  {% if not loop.last -%} union all {%- endif %}\r\n  {% endfor %}\r\n\r\n)\r\n\r\nselect * from all_brands", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.merchant_center_transfer_de.mc_products_de"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "stg_gmc_product_brands"], "unique_id": "model.sql_repository_bz.stg_gmc_product_brands", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_merchant_center/stg_gmc_product_brands.sql", "original_file_path": "models/01_staging/google_merchant_center/stg_gmc_product_brands.sql", "name": "stg_gmc_product_brands", "alias": "stg_gmc_product_brands", "checksum": {"name": "sha256", "checksum": "768fd493c795712fa9e7da456c8d05c4aa63e3264e1143fcd9b49dec7ad76155"}, "tags": [], "refs": [], "sources": [["merchant_center_transfer_de", "mc_products_de"]], "description": "this model lists distinct brands of last 365 days", "columns": {"brand": {"name": "brand", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_merchant_center/_models_stg_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/stg_gmc_product_brands.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.2762456, "compiled_sql": "-- fetch merchant center brands\n\n\nwith all_brands as (\n\n  \n  \n\n    select distinct lower(brand) as brand\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_4410479`\n    where\n      channel = 'online'\n      and price.value > 0\n      and date(_partitiontime) between \n    date_sub(current_date(), interval 365 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n  \n  \n\n)\n\nselect * from all_brands", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_brands`"}, "model.sql_repository_bz.stg_gmc_product_attributes_daily": {"raw_sql": "{{ config( partition_by = { \"field\": \"date\", \"data_type\": \"date\", \"granularity\": \"day\" } ) }}\r\n\r\nwith channelpilot_product_attributes as (\r\n\r\n  select \r\n    date,\t\r\n    product_id,\t\t\t\r\n    category,\t\t\t\r\n    brand,\t\t\t\r\n    description,\t\t\t\r\n    season,\t\t\t\r\n    color_manufacturer,\t\t\t\r\n    color,\t\t\t\r\n    gender,\t\t\t\r\n    price_net,\t\t\t\r\n    price_purchase,\t\t\t\r\n    is_foreign_stock,\t\t\t\r\n    stock_total,\t\t\t\r\n    stock_lvs,\t\t\t\r\n    stock_ghp,\t\t\t\r\n    stock_gmund,\t\t\t\r\n    stock_supplier,\t\t\t\r\n    is_special_item,\t\t\t\r\n    parent_id,\t\t\t\r\n    parent_title,\t\t\t\r\n    size,\t\t\t\r\n    uvp,\t\t\r\n    vat,\t\t\t\r\n    price_gross,\t\t\t\r\n    sportart,\t\t\t\r\n    mut,\t\t\t\r\n    manufacturer_size,\t\t\t\r\n    stock_fc_deg,\t\t\t\r\n    if(is_foreign_stock = true and stock_lvs <= 0 and stock_supplier > 0, 1, 0) as foreign_stock_flag,\r\n    round((1- ( safe_divide(price_gross,uvp))) * 20, 0) / 20 as avg_discount_rounded,\r\n    /* counts number of sku entries per day*/\r\n    row_number() over(partition by date, product_id order by date desc) as rn,\r\n    {{ dbt_utils.surrogate_key(['date', 'product_id']) }} as sk_id\r\n\r\n  from {{ source('product_inventory', 'cp_product_attributes_daily') }}\r\n  where \r\n    (\r\n      date = date_sub(current_date(), interval 0 day)\r\n      -- this financial year to date\r\n      or date between {{ get_year_to_yesterday_date_range() }} \r\n      -- last financial year to date\r\n      or date between {{ get_complete_prev_year_date_range() }}\r\n    )\r\n    and brand is not null\r\n    /* exclude products that are only locally available and not online (these are currently not shown online) */ \r\n    and (stock_total - stock_ghp - stock_gmund) > 0\r\n),\r\n\r\nnew_vars as (\r\n  select \r\n    *,\r\n    case\r\n      when avg_discount_rounded is null then null\r\n      when avg_discount_rounded < 0.1 then \"0-9 %\"\r\n      when avg_discount_rounded >= 0.1 and avg_discount_rounded < 0.2 then \"10-19 %\"\r\n      when avg_discount_rounded >= 0.2 and avg_discount_rounded < 0.3 then \"20-29 %\"\r\n      when avg_discount_rounded >= 0.3 and avg_discount_rounded < 0.4 then \"30-39 %\"\r\n      when avg_discount_rounded >= 0.4 and avg_discount_rounded < 0.5 then \"40-49 %\"\r\n      when avg_discount_rounded >= 0.5 and avg_discount_rounded < 0.6 then \"50-59 %\"\r\n      else \"\u00fcber 60%\"\r\n    end as avg_discount_groups_custom,\r\n      case\r\n      when price_gross is null then null\r\n      when price_gross < 25 then \"0-24 \u20ac\"\r\n      when price_gross >= 25 and price_gross < 50 then \"25-49 \u20ac\"\r\n      when price_gross >= 50 and price_gross < 75 then \"50-74 \u20ac\"\r\n      when price_gross >= 75 and price_gross < 100 then \"75-99 \u20ac\"\r\n      when price_gross >= 100 and price_gross < 125 then \"100-124 \u20ac\"\r\n      when price_gross >= 125 and price_gross < 150 then \"125-149 \u20ac\"\r\n      when price_gross >= 150 and price_gross < 200 then \"150-199 \u20ac\"\r\n      when price_gross >= 200 and price_gross < 300 then \"200-299 \u20ac\"\r\n      when price_gross >= 300 and price_gross < 500 then \"300-499 \u20ac\"\r\n      else '\u00fcber 500 \u20ac'\r\n    end as avg_price_groups_custom,\r\n  /* sort helper for datastudio display*/\r\n    case\r\n      when price_gross is null then null\r\n      when price_gross < 25 then 1\r\n      when price_gross >= 25 and price_gross < 50 then 2\r\n      when price_gross >= 50 and price_gross < 75 then 3\r\n      when price_gross >= 75 and price_gross < 100 then 4\r\n      when price_gross >= 100 and price_gross < 125 then 5\r\n      when price_gross >= 125 and price_gross < 150 then 6\r\n      when price_gross >= 150 and price_gross < 200 then 7\r\n      when price_gross >= 200 and price_gross < 300 then 8\r\n      when price_gross >= 300 and price_gross < 500 then 9\r\n      else 10\r\n    end as avg_price_groups_custom_sort_index\r\n  from channelpilot_product_attributes\r\n)\r\n\r\nselect * except (rn)\r\nfrom new_vars\r\n/* ensures that we only use one entry per date and sku in the following data transformations*/\r\nwhere rn = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_year_to_yesterday_date_range", "macro.sql_repository_bz.get_complete_prev_year_date_range"], "nodes": ["source.sql_repository_bz.product_inventory.cp_product_attributes_daily"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "stg_gmc_product_attributes_daily"], "unique_id": "model.sql_repository_bz.stg_gmc_product_attributes_daily", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_merchant_center/stg_gmc_product_attributes_daily.sql", "original_file_path": "models/01_staging/google_merchant_center/stg_gmc_product_attributes_daily.sql", "name": "stg_gmc_product_attributes_daily", "alias": "stg_gmc_product_attributes_daily", "checksum": {"name": "sha256", "checksum": "4aac4def1d59b09ff97c4bffc02c56a92024f5eb939120cc5337dda02c5a3536"}, "tags": [], "refs": [], "sources": [["product_inventory", "cp_product_attributes_daily"]], "description": "this model contains all custom attributes per sku, updated daily", "columns": {"product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sk_id": {"name": "sk_id", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_merchant_center/_models_stg_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/stg_gmc_product_attributes_daily.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750851.25065, "compiled_sql": "\n\nwith channelpilot_product_attributes as (\n\n  select \n    date,\t\n    product_id,\t\t\t\n    category,\t\t\t\n    brand,\t\t\t\n    description,\t\t\t\n    season,\t\t\t\n    color_manufacturer,\t\t\t\n    color,\t\t\t\n    gender,\t\t\t\n    price_net,\t\t\t\n    price_purchase,\t\t\t\n    is_foreign_stock,\t\t\t\n    stock_total,\t\t\t\n    stock_lvs,\t\t\t\n    stock_ghp,\t\t\t\n    stock_gmund,\t\t\t\n    stock_supplier,\t\t\t\n    is_special_item,\t\t\t\n    parent_id,\t\t\t\n    parent_title,\t\t\t\n    size,\t\t\t\n    uvp,\t\t\n    vat,\t\t\t\n    price_gross,\t\t\t\n    sportart,\t\t\t\n    mut,\t\t\t\n    manufacturer_size,\t\t\t\n    stock_fc_deg,\t\t\t\n    if(is_foreign_stock = true and stock_lvs <= 0 and stock_supplier > 0, 1, 0) as foreign_stock_flag,\n    round((1- ( safe_divide(price_gross,uvp))) * 20, 0) / 20 as avg_discount_rounded,\n    /* counts number of sku entries per day*/\n    row_number() over(partition by date, product_id order by date desc) as rn,\n    to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(product_id as \n    string\n), '') as \n    string\n))) as sk_id\n\n  from `bergzeit`.`product_inventory`.`product_attributes_daily`\n  where \n    (\n      date = date_sub(current_date(), interval 0 day)\n      -- this financial year to date\n      or date between \n    '2022-01-01' and date_sub(current_date(), interval 1 day)\n \n      -- last financial year to date\n      or date between \n    '2021-01-01' and \n    date_sub('2022-01-01', interval 1 day)\n\n    )\n    and brand is not null\n    /* exclude products that are only locally available and not online (these are currently not shown online) */ \n    and (stock_total - stock_ghp - stock_gmund) > 0\n),\n\nnew_vars as (\n  select \n    *,\n    case\n      when avg_discount_rounded is null then null\n      when avg_discount_rounded < 0.1 then \"0-9 %\"\n      when avg_discount_rounded >= 0.1 and avg_discount_rounded < 0.2 then \"10-19 %\"\n      when avg_discount_rounded >= 0.2 and avg_discount_rounded < 0.3 then \"20-29 %\"\n      when avg_discount_rounded >= 0.3 and avg_discount_rounded < 0.4 then \"30-39 %\"\n      when avg_discount_rounded >= 0.4 and avg_discount_rounded < 0.5 then \"40-49 %\"\n      when avg_discount_rounded >= 0.5 and avg_discount_rounded < 0.6 then \"50-59 %\"\n      else \"\u00fcber 60%\"\n    end as avg_discount_groups_custom,\n      case\n      when price_gross is null then null\n      when price_gross < 25 then \"0-24 \u20ac\"\n      when price_gross >= 25 and price_gross < 50 then \"25-49 \u20ac\"\n      when price_gross >= 50 and price_gross < 75 then \"50-74 \u20ac\"\n      when price_gross >= 75 and price_gross < 100 then \"75-99 \u20ac\"\n      when price_gross >= 100 and price_gross < 125 then \"100-124 \u20ac\"\n      when price_gross >= 125 and price_gross < 150 then \"125-149 \u20ac\"\n      when price_gross >= 150 and price_gross < 200 then \"150-199 \u20ac\"\n      when price_gross >= 200 and price_gross < 300 then \"200-299 \u20ac\"\n      when price_gross >= 300 and price_gross < 500 then \"300-499 \u20ac\"\n      else '\u00fcber 500 \u20ac'\n    end as avg_price_groups_custom,\n  /* sort helper for datastudio display*/\n    case\n      when price_gross is null then null\n      when price_gross < 25 then 1\n      when price_gross >= 25 and price_gross < 50 then 2\n      when price_gross >= 50 and price_gross < 75 then 3\n      when price_gross >= 75 and price_gross < 100 then 4\n      when price_gross >= 100 and price_gross < 125 then 5\n      when price_gross >= 125 and price_gross < 150 then 6\n      when price_gross >= 150 and price_gross < 200 then 7\n      when price_gross >= 200 and price_gross < 300 then 8\n      when price_gross >= 300 and price_gross < 500 then 9\n      else 10\n    end as avg_price_groups_custom_sort_index\n  from channelpilot_product_attributes\n)\n\nselect * except (rn)\nfrom new_vars\n/* ensures that we only use one entry per date and sku in the following data transformations*/\nwhere rn = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`"}, "model.sql_repository_bz.zz_stg_gmc_price_benchmarks": {"raw_sql": "{{ config(\r\npartition_by={\r\n      \"field\": \"benchm_date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    }\r\n    ) \r\n}}\r\n\r\n\r\nselect\r\n    extract(date from price_benchmark_timestamp) as benchm_date,\r\n    product_id as benchm_product_id_long,\r\n    split(product_id,'de:DE:')[safe_offset(1)] as benchm_offer_id,\r\n    merchant_id as benchm_merchant_id,\r\n    round(price_benchmark_value,2) as price_benchmark_value,\r\n    price_benchmark_currency as benchm_currency,\r\n    country_of_sale as benchm_country\r\n\r\n  from\r\n    {{ source('merchant_center_transfer_de', 'mc_product_price_benchmark_de') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.merchant_center_transfer_de.mc_product_price_benchmark_de"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"data_type": "date", "granularity": "day", "field": "benchm_date"}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "zz_stg_gmc_price_benchmarks"], "unique_id": "model.sql_repository_bz.zz_stg_gmc_price_benchmarks", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_merchant_center/zz_stg_gmc_price_benchmarks.sql", "original_file_path": "models/01_staging/google_merchant_center/zz_stg_gmc_price_benchmarks.sql", "name": "zz_stg_gmc_price_benchmarks", "alias": "zz_stg_gmc_price_benchmarks", "checksum": {"name": "sha256", "checksum": "f9fef5caf6c32442fb3f37d7136c347f305900c21e2e436a12958832bc754059"}, "tags": [], "refs": [], "sources": [["merchant_center_transfer_de", "mc_product_price_benchmark_de"]], "description": "this model lists price benchmark data from merchant center (currently not used)", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_merchant_center/_models_stg_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/zz_stg_gmc_price_benchmarks.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table", "partition_by": {"data_type": "date", "granularity": "day", "field": "benchm_date"}}, "created_at": 1663750851.2812803, "compiled_sql": "\n\n\nselect\n    extract(date from price_benchmark_timestamp) as benchm_date,\n    product_id as benchm_product_id_long,\n    split(product_id,'de:DE:')[safe_offset(1)] as benchm_offer_id,\n    merchant_id as benchm_merchant_id,\n    round(price_benchmark_value,2) as price_benchmark_value,\n    price_benchmark_currency as benchm_currency,\n    country_of_sale as benchm_country\n\n  from\n    `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_PriceBenchmarks_4410479`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`zz_stg_gmc_price_benchmarks`"}, "model.sql_repository_bz.stg_gmc_product_stock": {"raw_sql": "{{ config(\r\npartition_by={\r\n      \"field\": \"stock_date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    }\r\n    ) \r\n}}\r\n\r\nwith stock_data as (\r\n    select\r\n        date as stock_date,\r\n        product_id as stock_product_id,\r\n        stock,\r\n        stock_lvs,\r\n        stock_ghp,\r\n        stock_gmund,\r\n        (stock - stock_lvs - stock_ghp - stock_gmund) as stock_fl,\r\n        stock_foreign as indikator_fremdlager,\r\n        season_flag\r\n    from {{source('merchant_center_transfer_de', 'mc_product_stock_de')}}\r\n\r\n    -- ab 31.01.2021 gibt es dem B&M product attributes table, der ab diesem Zeitpunkt verwendet wird\r\n    where date between '2020-03-01' and '2021-01-30'\r\n)\r\n\r\nselect * from stock_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.merchant_center_transfer_de.mc_product_stock_de"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"granularity": "day", "data_type": "date", "field": "stock_date"}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "stg_gmc_product_stock"], "unique_id": "model.sql_repository_bz.stg_gmc_product_stock", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_merchant_center/stg_gmc_product_stock.sql", "original_file_path": "models/01_staging/google_merchant_center/stg_gmc_product_stock.sql", "name": "stg_gmc_product_stock", "alias": "stg_gmc_product_stock", "checksum": {"name": "sha256", "checksum": "5277d132436b20f2b5fcc88534a80ed37c5ca976f5dd92c8c7918d4a64b6cd2b"}, "tags": [], "refs": [], "sources": [["merchant_center_transfer_de", "mc_product_stock_de"]], "description": "this model consolidates stock data (stock feed before b&m product attributes feed existed)", "columns": {"stock_product_id": {"name": "stock_product_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_merchant_center/_models_stg_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/stg_gmc_product_stock.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table", "partition_by": {"granularity": "day", "data_type": "date", "field": "stock_date"}}, "created_at": 1663750851.2740228, "compiled_sql": "\n\nwith stock_data as (\n    select\n        date as stock_date,\n        product_id as stock_product_id,\n        stock,\n        stock_lvs,\n        stock_ghp,\n        stock_gmund,\n        (stock - stock_lvs - stock_ghp - stock_gmund) as stock_fl,\n        stock_foreign as indikator_fremdlager,\n        season_flag\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`product_stock_DE`\n\n    -- ab 31.01.2021 gibt es dem B&M product attributes table, der ab diesem Zeitpunkt verwendet wird\n    where date between '2020-03-01' and '2021-01-30'\n)\n\nselect * from stock_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_stock`"}, "model.sql_repository_bz.stg_qlik_return_rates": {"raw_sql": "with average_return_rates as ( \r\n\r\n    select\r\n        brand,\r\n        country,\r\n        Top_Category,\r\n        return_rate,\r\n        {{ dbt_utils.surrogate_key(['brand', 'country', 'Top_Category']) }} as sk_id\r\n  from {{ source('merchant_center_transfer_de', 'mc_return_rates') }}\r\n  \r\n  /* remove rows from list that don't have returns and thus 0% return rate */\r\n  where return_rate > 0\r\n  \r\n) \r\n\r\nselect * from average_return_rates", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.merchant_center_transfer_de.mc_return_rates"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "stg_qlik_return_rates"], "unique_id": "model.sql_repository_bz.stg_qlik_return_rates", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_merchant_center/stg_qlik_return_rates.sql", "original_file_path": "models/01_staging/google_merchant_center/stg_qlik_return_rates.sql", "name": "stg_qlik_return_rates", "alias": "stg_qlik_return_rates", "checksum": {"name": "sha256", "checksum": "a098005e420729ed72b2dfffe19c7b0923c8053411bccc5aae8a1ee2db4df2ee"}, "tags": [], "refs": [], "sources": [["merchant_center_transfer_de", "mc_return_rates"]], "description": "this model lists return rates per brand, country and top_cat used for profit bidding", "columns": {"sk_id": {"name": "sk_id", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_merchant_center/_models_stg_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/stg_qlik_return_rates.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.2722614, "compiled_sql": "with average_return_rates as ( \n\n    select\n        brand,\n        country,\n        Top_Category,\n        return_rate,\n        to_hex(md5(cast(coalesce(cast(brand as \n    string\n), '') || '-' || coalesce(cast(country as \n    string\n), '') || '-' || coalesce(cast(Top_Category as \n    string\n), '') as \n    string\n))) as sk_id\n  from `adsdataprediction`.`MerchantCenterTransfer_DE`.`return_rate_all`\n  \n  /* remove rows from list that don't have returns and thus 0% return rate */\n  where return_rate > 0\n  \n) \n\nselect * from average_return_rates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_qlik_return_rates`"}, "model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d": {"raw_sql": "with cp_product_attributes_daily as (\r\n  \r\n    select \r\n        date,\r\n        product_id,\r\n        price_net,\r\n        price_purchase,\r\n        {{ dbt_utils.surrogate_key(['date', 'product_id']) }} as sk_id,\r\n        row_number() over(partition by date, product_id order by date desc) as rn\r\n    from {{ source('product_inventory', 'cp_product_attributes_daily') }}\r\n    where date between {{ get_last_n_days_date_range(90) }}\r\n\r\n)\r\n\r\nselect * except (rn)\r\nfrom cp_product_attributes_daily\r\nwhere rn = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.product_inventory.cp_product_attributes_daily"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "stg_channel_pilot_profit_bidding_90d"], "unique_id": "model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_merchant_center/stg_channel_pilot_profit_bidding_90d.sql", "original_file_path": "models/01_staging/google_merchant_center/stg_channel_pilot_profit_bidding_90d.sql", "name": "stg_channel_pilot_profit_bidding_90d", "alias": "stg_channel_pilot_profit_bidding_90d", "checksum": {"name": "sha256", "checksum": "b097e6c51a253576625b13040e8506780aa3520f92706f5f10a33aecb6165410"}, "tags": [], "refs": [], "sources": [["product_inventory", "cp_product_attributes_daily"]], "description": "this model is a base model for the profit bidding dag (and no other models!)", "columns": {"product_id": {"name": "product_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sk_id": {"name": "sk_id", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_merchant_center/_models_stg_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/stg_channel_pilot_profit_bidding_90d.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.255907, "compiled_sql": "with cp_product_attributes_daily as (\n  \n    select \n        date,\n        product_id,\n        price_net,\n        price_purchase,\n        to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(product_id as \n    string\n), '') as \n    string\n))) as sk_id,\n        row_number() over(partition by date, product_id order by date desc) as rn\n    from `bergzeit`.`product_inventory`.`product_attributes_daily`\n    where date between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n)\n\nselect * except (rn)\nfrom cp_product_attributes_daily\nwhere rn = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_profit_bidding_90d`"}, "model.sql_repository_bz.stg_gmc_all_products": {"raw_sql": "{{ config(\r\n    partition_by={\"field\": \"p_date\", \"data_type\": \"date\",  \"granularity\": \"day\" }\r\n) \r\n}}\r\n\r\n\r\n-- fetch merchant center data\r\n{% set countries =  ['de', 'ch'] %}\r\n\r\nwith all_products as (\r\n\r\n  {% for country in countries %}\r\n\r\n  {% set source_country = 'mc_products_' + country %}\r\n\r\n  select\r\n    '{{ country }}' as products_country,\r\n    /* date of transfer insert */\r\n    date(_partitiontime) as p_date,\r\n    /* last available product timestamp */\r\n    /* extract(date from product_data_timestamp) as p_date,*/\r\n    offer_id,\r\n    substr(offer_id, 1, 7) as parent_id,\r\n    split(link,'?utm')[safe_offset(0)] as url_noutm,\r\n    concat(substr(offer_id, 1, 7), '_', lower(color)) as parent_and_color,\r\n    gtin as product_gtin,\r\n    split(split(title,' (')[safe_offset(0)],'|')[safe_offset(0)] as title_short,\r\n    split(product_type,'>')[safe_offset(0)] as top_category,\r\n    CONCAT(\r\n        SPLIT(product_type,' > ')[SAFE_OFFSET(0)],\r\n        '_',\r\n        SPLIT(product_type,' > ')[SAFE_OFFSET(1)]\r\n    ) as category_l1_2,\r\n    split(product_type,' > ')[safe_offset(1)] as category_l_2,\r\n    split(product_type,' > ')[safe_offset(2)] as category_l_3,\r\n    age_group,\r\n    lower(brand) as brand,\r\n    color,\r\n    split(split(split(title, '(')[safe_offset(1)],')')[safe_offset(0)], ',')[safe_offset(0)] as size,\r\n    gender,\r\n    availability as gmc_availability,\r\n    price.value as price_uvp,\r\n    price.currency as currency_price_uvp,\r\n    sale_price.value as price,\r\n    sale_price.currency as currency_price,\r\n    1- ( sale_price.value / price.value) as price_discount,\r\n    round((1- ( sale_price.value / price.value)) * 20, 0) / 20 as avg_discount_rounded,\r\n    row_number() over(partition by substr(offer_id, 1, 7) order by date(_partitiontime) desc) as rn\r\n  from\r\n    {{ source('merchant_center_transfer_de', source_country)}}\r\n    \r\n  where\r\n    channel = \"online\"\r\n    and price.value > 0 \r\n    and \r\n        ( date(_partitiontime) = current_date()\r\n          or date(_partitiontime) between {{ get_last_n_days_date_range(180) }}\r\n          or date(_partitiontime) between {{ get_last_n_days_prev_year(31) }}\r\n        )\r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n),\r\n\r\nnew_vars as (\r\n  select *,\r\n    {{ dbt_utils.surrogate_key(['products_country', 'p_date', 'offer_id']) }} as sk_id,\r\n    /* counts the number of sku entries per day and labels them in descending order by product timestamp*/\r\n    row_number() over(partition by products_country, p_date, offer_id order by p_date desc) as entry_number,\r\n    if(category_l_3 is null, category_l_2, category_l_3) as last_category,\r\n    \r\n    case\r\n      when avg_discount_rounded < 0.1 then \"0-9 %\"\r\n      when avg_discount_rounded >= 0.1 and avg_discount_rounded < 0.2 then \"10-19 %\"\r\n      when avg_discount_rounded >= 0.2 and avg_discount_rounded < 0.3 then \"20-29 %\"\r\n      when avg_discount_rounded >= 0.3 and avg_discount_rounded < 0.4 then \"30-39 %\"\r\n      when avg_discount_rounded >= 0.4 and avg_discount_rounded < 0.5 then \"40-49 %\"\r\n      when avg_discount_rounded >= 0.5 and avg_discount_rounded < 0.6 then \"50-59 %\"\r\n      else \"\u00fcber 60%\"\r\n    end as avg_discount_groups_custom,\r\n    case\r\n      when price < 25 then concat(currency_price, ' ',\"0-24\")\r\n      when price >= 25 and price < 50 then concat(currency_price, ' ',\"25-49\")\r\n      when price >= 50 and price < 100 then concat(currency_price, ' ',\"50-99\")\r\n      when price >= 100 and price < 200 then concat(currency_price, ' ',\"100-199\")\r\n      when price >= 200 and price < 300 then concat(currency_price, ' ',\"200-299\")\r\n      when price >= 300 and price < 500 then concat(currency_price, ' ',\"300-499\")\r\n      else concat('\u00fcber ', currency_price, ' ',\"500\")\r\n    end as avg_price_groups_custom\r\n\r\n from all_products\r\n)\r\n\r\nselect * except (entry_number)\r\nfrom new_vars\r\n/* we always use the last sku entry per day = the most current information we have for that sku and date combination */ \r\n where entry_number = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range", "macro.sql_repository_bz.get_last_n_days_prev_year", "macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.merchant_center_transfer_de.mc_products_de", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_ch"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"field": "p_date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "stg_gmc_all_products"], "unique_id": "model.sql_repository_bz.stg_gmc_all_products", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_merchant_center/stg_gmc_all_products.sql", "original_file_path": "models/01_staging/google_merchant_center/stg_gmc_all_products.sql", "name": "stg_gmc_all_products", "alias": "stg_gmc_all_products", "checksum": {"name": "sha256", "checksum": "de2c2f8535055cd137bf584f52b820895b64a1eb5d883ea195d780adc7125d89"}, "tags": [], "refs": [], "sources": [["merchant_center_transfer_de", "mc_products_de"], ["merchant_center_transfer_de", "mc_products_ch"]], "description": "this model lists all products per day for all countries and accounts with Merchant Center data transfers", "columns": {"sk_id": {"name": "sk_id", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "p_date": {"name": "p_date", "description": "date of transfer insert", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offer_id": {"name": "offer_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "top_category": {"name": "top_category", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_merchant_center/_models_stg_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/stg_gmc_all_products.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table", "partition_by": {"field": "p_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750851.2631536, "compiled_sql": "\n\n\n-- fetch merchant center data\n\n\nwith all_products as (\n\n  \n\n  \n\n  select\n    'de' as products_country,\n    /* date of transfer insert */\n    date(_partitiontime) as p_date,\n    /* last available product timestamp */\n    /* extract(date from product_data_timestamp) as p_date,*/\n    offer_id,\n    substr(offer_id, 1, 7) as parent_id,\n    split(link,'?utm')[safe_offset(0)] as url_noutm,\n    concat(substr(offer_id, 1, 7), '_', lower(color)) as parent_and_color,\n    gtin as product_gtin,\n    split(split(title,' (')[safe_offset(0)],'|')[safe_offset(0)] as title_short,\n    split(product_type,'>')[safe_offset(0)] as top_category,\n    CONCAT(\n        SPLIT(product_type,' > ')[SAFE_OFFSET(0)],\n        '_',\n        SPLIT(product_type,' > ')[SAFE_OFFSET(1)]\n    ) as category_l1_2,\n    split(product_type,' > ')[safe_offset(1)] as category_l_2,\n    split(product_type,' > ')[safe_offset(2)] as category_l_3,\n    age_group,\n    lower(brand) as brand,\n    color,\n    split(split(split(title, '(')[safe_offset(1)],')')[safe_offset(0)], ',')[safe_offset(0)] as size,\n    gender,\n    availability as gmc_availability,\n    price.value as price_uvp,\n    price.currency as currency_price_uvp,\n    sale_price.value as price,\n    sale_price.currency as currency_price,\n    1- ( sale_price.value / price.value) as price_discount,\n    round((1- ( sale_price.value / price.value)) * 20, 0) / 20 as avg_discount_rounded,\n    row_number() over(partition by substr(offer_id, 1, 7) order by date(_partitiontime) desc) as rn\n  from\n    `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_4410479`\n    \n  where\n    channel = \"online\"\n    and price.value > 0 \n    and \n        ( date(_partitiontime) = current_date()\n          or date(_partitiontime) between \n    date_sub(current_date(), interval 180 day)\n    and date_sub(current_date(), interval 1 day)\n\n          or date(_partitiontime) between \n    -- get date n days ago of last year\n    date_sub(date_sub(current_date(), interval 1 year), interval 31 day)\n    -- get yesterday last year\n    and date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    union all\n    \n\n  \n\n  select\n    'ch' as products_country,\n    /* date of transfer insert */\n    date(_partitiontime) as p_date,\n    /* last available product timestamp */\n    /* extract(date from product_data_timestamp) as p_date,*/\n    offer_id,\n    substr(offer_id, 1, 7) as parent_id,\n    split(link,'?utm')[safe_offset(0)] as url_noutm,\n    concat(substr(offer_id, 1, 7), '_', lower(color)) as parent_and_color,\n    gtin as product_gtin,\n    split(split(title,' (')[safe_offset(0)],'|')[safe_offset(0)] as title_short,\n    split(product_type,'>')[safe_offset(0)] as top_category,\n    CONCAT(\n        SPLIT(product_type,' > ')[SAFE_OFFSET(0)],\n        '_',\n        SPLIT(product_type,' > ')[SAFE_OFFSET(1)]\n    ) as category_l1_2,\n    split(product_type,' > ')[safe_offset(1)] as category_l_2,\n    split(product_type,' > ')[safe_offset(2)] as category_l_3,\n    age_group,\n    lower(brand) as brand,\n    color,\n    split(split(split(title, '(')[safe_offset(1)],')')[safe_offset(0)], ',')[safe_offset(0)] as size,\n    gender,\n    availability as gmc_availability,\n    price.value as price_uvp,\n    price.currency as currency_price_uvp,\n    sale_price.value as price,\n    sale_price.currency as currency_price,\n    1- ( sale_price.value / price.value) as price_discount,\n    round((1- ( sale_price.value / price.value)) * 20, 0) / 20 as avg_discount_rounded,\n    row_number() over(partition by substr(offer_id, 1, 7) order by date(_partitiontime) desc) as rn\n  from\n    `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_100453093`\n    \n  where\n    channel = \"online\"\n    and price.value > 0 \n    and \n        ( date(_partitiontime) = current_date()\n          or date(_partitiontime) between \n    date_sub(current_date(), interval 180 day)\n    and date_sub(current_date(), interval 1 day)\n\n          or date(_partitiontime) between \n    -- get date n days ago of last year\n    date_sub(date_sub(current_date(), interval 1 year), interval 31 day)\n    -- get yesterday last year\n    and date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\n\n        )\n\n    \n    \n\n),\n\nnew_vars as (\n  select *,\n    to_hex(md5(cast(coalesce(cast(products_country as \n    string\n), '') || '-' || coalesce(cast(p_date as \n    string\n), '') || '-' || coalesce(cast(offer_id as \n    string\n), '') as \n    string\n))) as sk_id,\n    /* counts the number of sku entries per day and labels them in descending order by product timestamp*/\n    row_number() over(partition by products_country, p_date, offer_id order by p_date desc) as entry_number,\n    if(category_l_3 is null, category_l_2, category_l_3) as last_category,\n    \n    case\n      when avg_discount_rounded < 0.1 then \"0-9 %\"\n      when avg_discount_rounded >= 0.1 and avg_discount_rounded < 0.2 then \"10-19 %\"\n      when avg_discount_rounded >= 0.2 and avg_discount_rounded < 0.3 then \"20-29 %\"\n      when avg_discount_rounded >= 0.3 and avg_discount_rounded < 0.4 then \"30-39 %\"\n      when avg_discount_rounded >= 0.4 and avg_discount_rounded < 0.5 then \"40-49 %\"\n      when avg_discount_rounded >= 0.5 and avg_discount_rounded < 0.6 then \"50-59 %\"\n      else \"\u00fcber 60%\"\n    end as avg_discount_groups_custom,\n    case\n      when price < 25 then concat(currency_price, ' ',\"0-24\")\n      when price >= 25 and price < 50 then concat(currency_price, ' ',\"25-49\")\n      when price >= 50 and price < 100 then concat(currency_price, ' ',\"50-99\")\n      when price >= 100 and price < 200 then concat(currency_price, ' ',\"100-199\")\n      when price >= 200 and price < 300 then concat(currency_price, ' ',\"200-299\")\n      when price >= 300 and price < 500 then concat(currency_price, ' ',\"300-499\")\n      else concat('\u00fcber ', currency_price, ' ',\"500\")\n    end as avg_price_groups_custom\n\n from all_products\n)\n\nselect * except (entry_number)\nfrom new_vars\n/* we always use the last sku entry per day = the most current information we have for that sku and date combination */ \n where entry_number = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`"}, "model.sql_repository_bz.stg_gmc_margins_all": {"raw_sql": "-- fetch merchant center margin data\r\n{% set countries =  ['de', 'ch', 'it', 'uk', 'int'] %}\r\n\r\nwith all_margins as (\r\n\r\n    {% for country in countries %}\r\n    {% set source_country = 'mc_product_margins_' + country %}\r\n\r\n    select\r\n        '{{ country }}' as country,\r\n        date,\r\n        product_id,\r\n        marge_absolut,\r\n        einstandspreis,\r\n        preis,\r\n        marge_relativ\r\n    from {{ source('merchant_center_transfer_de', source_country) }}\r\n    where date between {{ get_last_n_days_date_range(1) }}\r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n)\r\n\r\nselect \r\n    *,\r\n    {{ dbt_utils.surrogate_key(['country', 'date', 'product_id']) }} as sk_id\r\nfrom all_margins", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range", "macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_de", "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_ch", "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_it", "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_uk", "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_int"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "stg_gmc_margins_all"], "unique_id": "model.sql_repository_bz.stg_gmc_margins_all", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_merchant_center/stg_gmc_margins_all.sql", "original_file_path": "models/01_staging/google_merchant_center/stg_gmc_margins_all.sql", "name": "stg_gmc_margins_all", "alias": "stg_gmc_margins_all", "checksum": {"name": "sha256", "checksum": "694cabb67d17b07b2850e023baa67cae372000cf294cb0adc7791db8d1b0a489"}, "tags": [], "refs": [], "sources": [["merchant_center_transfer_de", "mc_product_margins_de"], ["merchant_center_transfer_de", "mc_product_margins_ch"], ["merchant_center_transfer_de", "mc_product_margins_it"], ["merchant_center_transfer_de", "mc_product_margins_uk"], ["merchant_center_transfer_de", "mc_product_margins_int"]], "description": "this model unions country specific margin tables", "columns": {"sk_id": {"name": "sk_id", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_merchant_center/_models_stg_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/stg_gmc_margins_all.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.2779396, "compiled_sql": "-- fetch merchant center margin data\n\n\nwith all_margins as (\n\n    \n    \n\n    select\n        'de' as country,\n        date,\n        product_id,\n        marge_absolut,\n        einstandspreis,\n        preis,\n        marge_relativ\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`margins_DE`\n    where date between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select\n        'ch' as country,\n        date,\n        product_id,\n        marge_absolut,\n        einstandspreis,\n        preis,\n        marge_relativ\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`margins_CH`\n    where date between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select\n        'it' as country,\n        date,\n        product_id,\n        marge_absolut,\n        einstandspreis,\n        preis,\n        marge_relativ\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`margins_IT`\n    where date between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select\n        'uk' as country,\n        date,\n        product_id,\n        marge_absolut,\n        einstandspreis,\n        preis,\n        marge_relativ\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`margins_UK`\n    where date between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    union all\n    \n    \n\n    select\n        'int' as country,\n        date,\n        product_id,\n        marge_absolut,\n        einstandspreis,\n        preis,\n        marge_relativ\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`margins_INT`\n    where date between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    \n    \n\n)\n\nselect \n    *,\n    to_hex(md5(cast(coalesce(cast(country as \n    string\n), '') || '-' || coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(product_id as \n    string\n), '') as \n    string\n))) as sk_id\nfrom all_margins", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gmc_margins_all`"}, "model.sql_repository_bz.zz_stg_gmc_product_margins": {"raw_sql": "{{ config(\r\n  partition_by={\r\n        \"field\": \"marge_date\",\r\n        \"data_type\": \"date\",\r\n        \"granularity\": \"day\"\r\n      }\r\n  ) \r\n}}\r\n\r\n\r\nwith all_margins as (\r\n\r\n    select\r\n        country, \r\n        date as marge_date,\r\n        product_id as marge_product_id,\r\n        marge_absolut,\r\n        einstandspreis,\r\n        preis,\r\n        round(marge_relativ,2) as bestands_marge\r\n    from {{ source('merchant_center_transfer_de', 'mc_product_margins') }}\r\n      \r\n    where\r\n        marge_relativ > 0\r\n        and country != 'ob'\r\n        and (\r\n            -- this financial year to date\r\n            date between {{ get_financial_year_to_yesterday_date_range() }} \r\n            -- last financial year \r\n            or date between {{ get_complete_prev_financial_year_date_range() }}\r\n        )\r\n\r\n)\r\n\r\nselect * from all_margins", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_financial_year_to_yesterday_date_range", "macro.sql_repository_bz.get_complete_prev_financial_year_date_range"], "nodes": ["source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"field": "marge_date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "zz_stg_gmc_product_margins"], "unique_id": "model.sql_repository_bz.zz_stg_gmc_product_margins", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_merchant_center/zz_stg_gmc_product_margins.sql", "original_file_path": "models/01_staging/google_merchant_center/zz_stg_gmc_product_margins.sql", "name": "zz_stg_gmc_product_margins", "alias": "zz_stg_gmc_product_margins", "checksum": {"name": "sha256", "checksum": "9d482a09d8770e7dd0675ec4a54fa12e97092841b67e099d46807efa5a3f1bf2"}, "tags": [], "refs": [], "sources": [["merchant_center_transfer_de", "mc_product_margins"]], "description": "this model lists product margins by sku and date", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_merchant_center/_models_stg_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/zz_stg_gmc_product_margins.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table", "partition_by": {"field": "marge_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750851.282163, "compiled_sql": "\n\n\nwith all_margins as (\n\n    select\n        country, \n        date as marge_date,\n        product_id as marge_product_id,\n        marge_absolut,\n        einstandspreis,\n        preis,\n        round(marge_relativ,2) as bestands_marge\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`margins_ALL`\n      \n    where\n        marge_relativ > 0\n        and country != 'ob'\n        and (\n            -- this financial year to date\n            date between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n            -- last financial year \n            or date between \n    '2021-03-01' and \n    date_sub('2022-03-01', interval 1 day)\n\n        )\n\n)\n\nselect * from all_margins", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`zz_stg_gmc_product_margins`"}, "model.sql_repository_bz.stg_gmc_product_issues": {"raw_sql": "{{ config(\r\npartition_by={\r\n      \"field\": \"p_date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    }\r\n    ) \r\n}}\r\n\r\n-- fetch mc data\r\n{% set countries =  ['de', 'at', 'ch', 'it', 'nl', 'uk'] %}\r\n\r\nwith all_issues as (\r\n\r\n  {% for country in countries %}\r\n  {% set source_country = 'mc_products_' + country %}\r\n\r\n    select distinct\r\n      '{{ country }}' as i_account,\r\n      date(_partitiontime) as i_date,\r\n      offer_id as i_offer_id,\r\n      issues.servability as issues_servability\r\n    from\r\n      {{ source('merchant_center_transfer_de', source_country) }},\r\n      unnest(issues) as issues\r\n    where date(_partitiontime) = current_date()\r\n      and issues.servability = 'disapproved'\r\n      and lower(destinations[offset(0)].name) = 'shopping'\r\n      and channel = 'online'\r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n),\r\n\r\nall_products as (\r\n\r\n  {% for country in countries %}\r\n  {% set source_country = 'mc_products_' + country %}\r\n\r\n    select distinct\r\n      '{{ country }}' as account,\r\n      date(_partitiontime) as p_date,\r\n      offer_id\r\n    from {{ source('merchant_center_transfer_de', source_country) }}\r\n    where date(_partitiontime) = current_date()\r\n      and lower(destinations[offset(0)].name) = 'shopping'\r\n      and channel = 'online'\r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n)\r\n\r\nselect * except(i_account, i_date, i_offer_id)\r\nfrom all_products as p\r\nleft join all_issues as i\r\n  on p.account = i.i_account\r\n  and p.p_date = i.i_date\r\n  and p.offer_id = i.i_offer_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.merchant_center_transfer_de.mc_products_de", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_at", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_ch", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_it", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_nl", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_uk", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_de", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_at", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_ch", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_it", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_nl", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_uk"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"field": "p_date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "stg_gmc_product_issues"], "unique_id": "model.sql_repository_bz.stg_gmc_product_issues", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_merchant_center/stg_gmc_product_issues.sql", "original_file_path": "models/01_staging/google_merchant_center/stg_gmc_product_issues.sql", "name": "stg_gmc_product_issues", "alias": "stg_gmc_product_issues", "checksum": {"name": "sha256", "checksum": "6d9e056050b1ad82ecd8015b44d81b123523df411cce80c7dd32f25c158bda2f"}, "tags": [], "refs": [], "sources": [["merchant_center_transfer_de", "mc_products_de"], ["merchant_center_transfer_de", "mc_products_at"], ["merchant_center_transfer_de", "mc_products_ch"], ["merchant_center_transfer_de", "mc_products_it"], ["merchant_center_transfer_de", "mc_products_nl"], ["merchant_center_transfer_de", "mc_products_uk"], ["merchant_center_transfer_de", "mc_products_de"], ["merchant_center_transfer_de", "mc_products_at"], ["merchant_center_transfer_de", "mc_products_ch"], ["merchant_center_transfer_de", "mc_products_it"], ["merchant_center_transfer_de", "mc_products_nl"], ["merchant_center_transfer_de", "mc_products_uk"]], "description": "this model lists all quality issues per country after uploading skus to Merchant Center", "columns": {"offer_id": {"name": "offer_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_merchant_center/_models_stg_gmc.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/stg_gmc_product_issues.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table", "partition_by": {"field": "p_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750851.2673392, "compiled_sql": "\n\n-- fetch mc data\n\n\nwith all_issues as (\n\n  \n  \n\n    select distinct\n      'de' as i_account,\n      date(_partitiontime) as i_date,\n      offer_id as i_offer_id,\n      issues.servability as issues_servability\n    from\n      `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_4410479`,\n      unnest(issues) as issues\n    where date(_partitiontime) = current_date()\n      and issues.servability = 'disapproved'\n      and lower(destinations[offset(0)].name) = 'shopping'\n      and channel = 'online'\n\n    union all\n    \n  \n\n    select distinct\n      'at' as i_account,\n      date(_partitiontime) as i_date,\n      offer_id as i_offer_id,\n      issues.servability as issues_servability\n    from\n      `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_10150175`,\n      unnest(issues) as issues\n    where date(_partitiontime) = current_date()\n      and issues.servability = 'disapproved'\n      and lower(destinations[offset(0)].name) = 'shopping'\n      and channel = 'online'\n\n    union all\n    \n  \n\n    select distinct\n      'ch' as i_account,\n      date(_partitiontime) as i_date,\n      offer_id as i_offer_id,\n      issues.servability as issues_servability\n    from\n      `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_100453093`,\n      unnest(issues) as issues\n    where date(_partitiontime) = current_date()\n      and issues.servability = 'disapproved'\n      and lower(destinations[offset(0)].name) = 'shopping'\n      and channel = 'online'\n\n    union all\n    \n  \n\n    select distinct\n      'it' as i_account,\n      date(_partitiontime) as i_date,\n      offer_id as i_offer_id,\n      issues.servability as issues_servability\n    from\n      `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_135253248`,\n      unnest(issues) as issues\n    where date(_partitiontime) = current_date()\n      and issues.servability = 'disapproved'\n      and lower(destinations[offset(0)].name) = 'shopping'\n      and channel = 'online'\n\n    union all\n    \n  \n\n    select distinct\n      'nl' as i_account,\n      date(_partitiontime) as i_date,\n      offer_id as i_offer_id,\n      issues.servability as issues_servability\n    from\n      `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_103272233`,\n      unnest(issues) as issues\n    where date(_partitiontime) = current_date()\n      and issues.servability = 'disapproved'\n      and lower(destinations[offset(0)].name) = 'shopping'\n      and channel = 'online'\n\n    union all\n    \n  \n\n    select distinct\n      'uk' as i_account,\n      date(_partitiontime) as i_date,\n      offer_id as i_offer_id,\n      issues.servability as issues_servability\n    from\n      `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_100198987`,\n      unnest(issues) as issues\n    where date(_partitiontime) = current_date()\n      and issues.servability = 'disapproved'\n      and lower(destinations[offset(0)].name) = 'shopping'\n      and channel = 'online'\n\n    \n    \n\n),\n\nall_products as (\n\n  \n  \n\n    select distinct\n      'de' as account,\n      date(_partitiontime) as p_date,\n      offer_id\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_4410479`\n    where date(_partitiontime) = current_date()\n      and lower(destinations[offset(0)].name) = 'shopping'\n      and channel = 'online'\n\n    union all\n    \n  \n\n    select distinct\n      'at' as account,\n      date(_partitiontime) as p_date,\n      offer_id\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_10150175`\n    where date(_partitiontime) = current_date()\n      and lower(destinations[offset(0)].name) = 'shopping'\n      and channel = 'online'\n\n    union all\n    \n  \n\n    select distinct\n      'ch' as account,\n      date(_partitiontime) as p_date,\n      offer_id\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_100453093`\n    where date(_partitiontime) = current_date()\n      and lower(destinations[offset(0)].name) = 'shopping'\n      and channel = 'online'\n\n    union all\n    \n  \n\n    select distinct\n      'it' as account,\n      date(_partitiontime) as p_date,\n      offer_id\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_135253248`\n    where date(_partitiontime) = current_date()\n      and lower(destinations[offset(0)].name) = 'shopping'\n      and channel = 'online'\n\n    union all\n    \n  \n\n    select distinct\n      'nl' as account,\n      date(_partitiontime) as p_date,\n      offer_id\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_103272233`\n    where date(_partitiontime) = current_date()\n      and lower(destinations[offset(0)].name) = 'shopping'\n      and channel = 'online'\n\n    union all\n    \n  \n\n    select distinct\n      'uk' as account,\n      date(_partitiontime) as p_date,\n      offer_id\n    from `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_100198987`\n    where date(_partitiontime) = current_date()\n      and lower(destinations[offset(0)].name) = 'shopping'\n      and channel = 'online'\n\n    \n    \n\n)\n\nselect * except(i_account, i_date, i_offer_id)\nfrom all_products as p\nleft join all_issues as i\n  on p.account = i.i_account\n  and p.p_date = i.i_date\n  and p.offer_id = i.i_offer_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_issues`"}, "model.sql_repository_bz.stg_jira_finished_seo_tickets": {"raw_sql": "with all_finished_SEO_tickets_input_data as(\r\n\r\n    select\r\n        Key as ticket_number, --primary key\r\n        Summary as ticket_summary,\r\n        Reporter as ticket_reporter,\r\n        parse_date('%Y-%m-%d', substring(Created,1,10)) as ticket_creation_date,\r\n        cast(load_timestamp as datetime) as load_timestamp\r\n    from {{ source('seo_analytics', 'finished_seo_jira_tickets') }}\r\n\r\n)\r\n\r\nselect * from all_finished_SEO_tickets_input_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.seo_analytics.finished_seo_jira_tickets"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "jira", "stg_jira_finished_seo_tickets"], "unique_id": "model.sql_repository_bz.stg_jira_finished_seo_tickets", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/jira/stg_jira_finished_seo_tickets.sql", "original_file_path": "models/01_staging/jira/stg_jira_finished_seo_tickets.sql", "name": "stg_jira_finished_seo_tickets", "alias": "stg_jira_finished_seo_tickets", "checksum": {"name": "sha256", "checksum": "7cce6636165b5537483bee5a6fd46b9e513f12fca171830c3149dab81efa3805"}, "tags": [], "refs": [], "sources": [["seo_analytics", "finished_seo_jira_tickets"]], "description": "this model collects all seo jira ticket data and parses the creation timestamp to date", "columns": {"ticket_number": {"name": "ticket_number", "description": "the unique ticket number", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/jira/_models_stg_jira.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/jira/stg_jira_finished_seo_tickets.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.546242, "compiled_sql": "with all_finished_SEO_tickets_input_data as(\n\n    select\n        Key as ticket_number, --primary key\n        Summary as ticket_summary,\n        Reporter as ticket_reporter,\n        parse_date('%Y-%m-%d', substring(Created,1,10)) as ticket_creation_date,\n        cast(load_timestamp as datetime) as load_timestamp\n    from `bergzeit`.`seo_analytics`.`finished_seo_jira_tickets`\n\n)\n\nselect * from all_finished_SEO_tickets_input_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_jira_finished_seo_tickets`"}, "model.sql_repository_bz.stg_minubo_ga_kpis_daily": {"raw_sql": "with minubo_ga_kpis_daily as (\r\n\r\n    select \r\n        date(minubo_ga_date) as minubo_ga_date,\r\n        sessions as minubo_ga_sessions,\r\n        page_views as minubo_ga_page_views,\r\n        detail_views as minubo_ga_detail_views,\r\n        add_to_carts as minubo_ga_add_to_carts\r\n    from {{ source('analytics_datamart', 'minubo_ga_export') }}\r\n    order by 1 desc\r\n\r\n)\r\n\r\nselect * from minubo_ga_kpis_daily", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.analytics_datamart.minubo_ga_export"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "minubo", "stg_minubo_ga_kpis_daily"], "unique_id": "model.sql_repository_bz.stg_minubo_ga_kpis_daily", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/minubo/stg_minubo_ga_kpis_daily.sql", "original_file_path": "models/01_staging/minubo/stg_minubo_ga_kpis_daily.sql", "name": "stg_minubo_ga_kpis_daily", "alias": "stg_minubo_ga_kpis_daily", "checksum": {"name": "sha256", "checksum": "fad2a4dfa47be0d6ae6a46bb7d214d1cf081ba4c773205c837cfbac5df56569f"}, "tags": [], "refs": [], "sources": [["analytics_datamart", "minubo_ga_export"]], "description": "this model lists ga kpis extracted from minubo feed via cloud function", "columns": {"minubo_ga_date": {"name": "minubo_ga_date", "description": "the date of the GA data copy fetched from Minubo via GA API", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "minubo_ga_sessions": {"name": "minubo_ga_sessions", "description": "total sessions per day across all country properties", "meta": {}, "data_type": null, "quote": null, "tags": []}, "minubo_ga_page_views": {"name": "minubo_ga_page_views", "description": "total page views per day across all country properties", "meta": {}, "data_type": null, "quote": null, "tags": []}, "minubo_ga_detail_views": {"name": "minubo_ga_detail_views", "description": "total product detail views per day across all country properties", "meta": {}, "data_type": null, "quote": null, "tags": []}, "minubo_ga_add_to_carts": {"name": "minubo_ga_add_to_carts", "description": "total add to cart events per day across all country properties", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/minubo/_models_minubo.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/minubo/stg_minubo_ga_kpis_daily.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.586642, "compiled_sql": "with minubo_ga_kpis_daily as (\n\n    select \n        date(minubo_ga_date) as minubo_ga_date,\n        sessions as minubo_ga_sessions,\n        page_views as minubo_ga_page_views,\n        detail_views as minubo_ga_detail_views,\n        add_to_carts as minubo_ga_add_to_carts\n    from `bergzeit`.`analytics_datamart`.`minubo_ga_export`\n    order by 1 desc\n\n)\n\nselect * from minubo_ga_kpis_daily", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_minubo_ga_kpis_daily`"}, "model.sql_repository_bz.stg_antavo_club_optins": {"raw_sql": "with club_optins as (\r\n\r\n    select\r\n        _id as antavo_customer_id,\r\n        cast(substring(event_date,1,10) as date) as event_date,\r\n        row_number() over ( partition by _id order by event_date asc) as rn\r\n    from {{ source('customer_analytics', 'antavo_optins') }}\r\n    where \r\n        _id is not null\r\n        and starts_with(_id, 'opted_out') = false\r\n)\r\n\r\nselect * except(rn)\r\nfrom club_optins\r\nwhere rn = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.customer_analytics.antavo_optins"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "antavo", "stg_antavo_club_optins"], "unique_id": "model.sql_repository_bz.stg_antavo_club_optins", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/antavo/stg_antavo_club_optins.sql", "original_file_path": "models/01_staging/antavo/stg_antavo_club_optins.sql", "name": "stg_antavo_club_optins", "alias": "stg_antavo_club_optins", "checksum": {"name": "sha256", "checksum": "8d725decb50b9d291058466218d5c5f7f9d05640f5c170c238c05223c9f1211d"}, "tags": [], "refs": [], "sources": [["customer_analytics", "antavo_optins"]], "description": "This model lists antavo optins", "columns": {"antavo_customer_id": {"name": "antavo_customer_id", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/antavo/_models_antavo.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/antavo/stg_antavo_club_optins.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.6629326, "compiled_sql": "with club_optins as (\n\n    select\n        _id as antavo_customer_id,\n        cast(substring(event_date,1,10) as date) as event_date,\n        row_number() over ( partition by _id order by event_date asc) as rn\n    from `bergzeit`.`customer_analytics`.`antavo_optins`\n    where \n        _id is not null\n        and starts_with(_id, 'opted_out') = false\n)\n\nselect * except(rn)\nfrom club_optins\nwhere rn = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_antavo_club_optins`"}, "model.sql_repository_bz.stg_consentless_transactions_live": {"raw_sql": "with consentless_live_transactions_ishop as (\r\n\r\n    select distinct\r\n        date,\r\n        hitType as hit_type,\r\n        host,\r\n        dateTime as date_time,\r\n        cast(transaction_id as string) as transaction_id,\r\n        transaction_value,\r\n        transaction_currency\r\n    from {{ source('consentless_tracking', 'ishop_consentless_prod') }}\r\n    where\r\n        hittype = 'transaction'\r\n        and date between date_sub(current_date(), interval 1 day) and date_sub(current_date(), interval 0 day)\r\n\r\n)\r\n\r\nselect * from consentless_live_transactions_ishop", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.consentless_tracking.ishop_consentless_prod"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "consentless", "stg_consentless_transactions_live"], "unique_id": "model.sql_repository_bz.stg_consentless_transactions_live", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/consentless/stg_consentless_transactions_live.sql", "original_file_path": "models/01_staging/consentless/stg_consentless_transactions_live.sql", "name": "stg_consentless_transactions_live", "alias": "stg_consentless_transactions_live", "checksum": {"name": "sha256", "checksum": "6d62ee26c023720093802aea135eea36ab6482aef9824a06d36e6b2116b3224b"}, "tags": [], "refs": [], "sources": [["consentless_tracking", "ishop_consentless_prod"]], "description": "this model lists all live ishop consentless transactions for yesterday and today", "columns": {"transaction_id": {"name": "transaction_id", "description": "the unique ishop transaction id, starting with 'bz-...'", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/consentless/_models_stg_consentless.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/stg_consentless_transactions_live.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.6769245, "compiled_sql": "with consentless_live_transactions_ishop as (\n\n    select distinct\n        date,\n        hitType as hit_type,\n        host,\n        dateTime as date_time,\n        cast(transaction_id as string) as transaction_id,\n        transaction_value,\n        transaction_currency\n    from `bergzeit`.`consentless_tracking`.`hits_prod`\n    where\n        hittype = 'transaction'\n        and date between date_sub(current_date(), interval 1 day) and date_sub(current_date(), interval 0 day)\n\n)\n\nselect * from consentless_live_transactions_ishop", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions_live`"}, "model.sql_repository_bz.stg_consentless_page_views_live": {"raw_sql": "with consentless_pageviews_live as (\r\n\r\n    select\r\n        {{ dbt_utils.surrogate_key(['datetime', 'hitType', 'pagePath', 'gclid', 'browser']) }} as pageview_event_id,\r\n        hittype,\r\n        date,\r\n        datetime,\r\n        pagepath,\r\n        host,\r\n        browser,\r\n        current_timestamp() as current_timestamp_utc,\r\n        timestamp(datetime, \"Europe/Berlin\") as hit_timestamp_utc\r\n\r\n    from {{ source('consentless_tracking', 'ishop_consentless_prod') }}\r\n    where\r\n        hittype = 'page_view'\r\n        and date between date_sub(current_date(), interval 1 day) and date_sub(current_date(), interval 0 day)\r\n\r\n)\r\n\r\nselect distinct * from consentless_pageviews_live", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.consentless_tracking.ishop_consentless_prod"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "consentless", "stg_consentless_page_views_live"], "unique_id": "model.sql_repository_bz.stg_consentless_page_views_live", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/consentless/stg_consentless_page_views_live.sql", "original_file_path": "models/01_staging/consentless/stg_consentless_page_views_live.sql", "name": "stg_consentless_page_views_live", "alias": "stg_consentless_page_views_live", "checksum": {"name": "sha256", "checksum": "0ca3f88bb2ff5e93f4e1c733d2b0d6a3660648dfa8138edcb2f62e34c1158b3b"}, "tags": [], "refs": [], "sources": [["consentless_tracking", "ishop_consentless_prod"]], "description": "this model lists all ishop consentless page views for yesterday and today", "columns": {"pageview_event_id": {"name": "pageview_event_id", "description": "the unique surrogate key of the pageview event", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/consentless/_models_stg_consentless.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/stg_consentless_page_views_live.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.692588, "compiled_sql": "with consentless_pageviews_live as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(datetime as \n    string\n), '') || '-' || coalesce(cast(hitType as \n    string\n), '') || '-' || coalesce(cast(pagePath as \n    string\n), '') || '-' || coalesce(cast(gclid as \n    string\n), '') || '-' || coalesce(cast(browser as \n    string\n), '') as \n    string\n))) as pageview_event_id,\n        hittype,\n        date,\n        datetime,\n        pagepath,\n        host,\n        browser,\n        current_timestamp() as current_timestamp_utc,\n        timestamp(datetime, \"Europe/Berlin\") as hit_timestamp_utc\n\n    from `bergzeit`.`consentless_tracking`.`hits_prod`\n    where\n        hittype = 'page_view'\n        and date between date_sub(current_date(), interval 1 day) and date_sub(current_date(), interval 0 day)\n\n)\n\nselect distinct * from consentless_pageviews_live", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_consentless_page_views_live`"}, "model.sql_repository_bz.stg_consentless_consent_interaction": {"raw_sql": "with consentless_events_consent_interaction as (\r\n\r\n    select\r\n        {{ dbt_utils.surrogate_key(['datetime', 'hitType', 'pagePath', 'sessionId']) }} as consent_event_id,\r\n        date,\r\n        datetime as date_time,\r\n        hitType as hit_type,\r\n        cast(sessionId as string) as session_id,\r\n        host,\r\n        event_category,\r\n        event_value,\r\n        consentPurpose_cc4\r\n    from {{ source('consentless_tracking', 'ishop_consentless_prod') }}\r\n    where\r\n        event_category = 'consent_interaction'\r\n        /* get the last 30 days and today, to get freshest data */\r\n        and (\r\n            date between {{ get_last_n_days_date_range(30) }}\r\n            or date = date_sub(current_date(), interval 0 day)\r\n        )\r\n\r\n)\r\n\r\nselect * from consentless_events_consent_interaction", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.consentless_tracking.ishop_consentless_prod"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "consentless", "stg_consentless_consent_interaction"], "unique_id": "model.sql_repository_bz.stg_consentless_consent_interaction", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/consentless/stg_consentless_consent_interaction.sql", "original_file_path": "models/01_staging/consentless/stg_consentless_consent_interaction.sql", "name": "stg_consentless_consent_interaction", "alias": "stg_consentless_consent_interaction", "checksum": {"name": "sha256", "checksum": "7f14c00a60400c1a9f82c97776eb0d73f69e311686eb9d284a73db0f87f3f8f5"}, "tags": [], "refs": [], "sources": [["consentless_tracking", "ishop_consentless_prod"]], "description": "this model lists all ishop consentless events of type consent interaction", "columns": {"consent_event_id": {"name": "consent_event_id", "description": "the unique surrogate key of the consent event", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/consentless/_models_stg_consentless.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/stg_consentless_consent_interaction.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.6883972, "compiled_sql": "with consentless_events_consent_interaction as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(datetime as \n    string\n), '') || '-' || coalesce(cast(hitType as \n    string\n), '') || '-' || coalesce(cast(pagePath as \n    string\n), '') || '-' || coalesce(cast(sessionId as \n    string\n), '') as \n    string\n))) as consent_event_id,\n        date,\n        datetime as date_time,\n        hitType as hit_type,\n        cast(sessionId as string) as session_id,\n        host,\n        event_category,\n        event_value,\n        consentPurpose_cc4\n    from `bergzeit`.`consentless_tracking`.`hits_prod`\n    where\n        event_category = 'consent_interaction'\n        /* get the last 30 days and today, to get freshest data */\n        and (\n            date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n            or date = date_sub(current_date(), interval 0 day)\n        )\n\n)\n\nselect * from consentless_events_consent_interaction", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_consentless_consent_interaction`"}, "model.sql_repository_bz.stg_consentless_transactions": {"raw_sql": "with consentless_transactions_ishop as (\r\n\r\n    select distinct\r\n        date,\r\n        hitType as hit_type,\r\n        cast(sessionId as string) as session_id,\r\n        -- normalized to get full domain: https://www.bergzeit.co.uk\r\n        replace(host, '.gb', '.co.uk') as host,\r\n        dateTime as date_time,\r\n        pagePath as page_path,\r\n        gclid,\r\n        event_value as consent_type,\r\n        cast(transaction_id as string) as transaction_id,\r\n        transaction_value,\r\n        transaction_currency,\r\n        consentPurpose_cc1,\r\n        consentPurpose_cc2,\r\n        consentPurpose_cc3,\r\n        consentPurpose_cc4,\r\n        consentPurpose_cc5,\r\n        consentPurpose_layerVersion\r\n    from {{ source('consentless_tracking', 'ishop_consentless_prod') }}\r\n    where\r\n        hittype = 'transaction'\r\n        and date between {{ get_financial_year_to_yesterday_date_range() }} \r\n        /* removed Outdoor Broker, as store was shut down */\r\n        and host not like '%outdoorbroker%'\r\n        /* removed events with faulty hostname */\r\n        and host like '%www%'\r\n\r\n)\r\n\r\nselect * from consentless_transactions_ishop", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_financial_year_to_yesterday_date_range"], "nodes": ["source.sql_repository_bz.consentless_tracking.ishop_consentless_prod"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "consentless", "stg_consentless_transactions"], "unique_id": "model.sql_repository_bz.stg_consentless_transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/consentless/stg_consentless_transactions.sql", "original_file_path": "models/01_staging/consentless/stg_consentless_transactions.sql", "name": "stg_consentless_transactions", "alias": "stg_consentless_transactions", "checksum": {"name": "sha256", "checksum": "310830022ebae0227f4a5b5185363d06d5828556066f4995483279089873ccf3"}, "tags": [], "refs": [], "sources": [["consentless_tracking", "ishop_consentless_prod"]], "description": "this model lists all ishop consentless transactions for the defined date range", "columns": {"transaction_id": {"name": "transaction_id", "description": "the unique ishop transaction id, starting with 'bz-...'", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "transaction_value": {"name": "transaction_value", "description": "the net transaction vale of the sale, before returns", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "the ishop session_id to link different events such as initial page view, consent and transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gclid": {"name": "gclid", "description": "the google Ads click id, stored from the landing page URL and passed on to the transaction event", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/consentless/_models_stg_consentless.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/stg_consentless_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.684192, "compiled_sql": "with consentless_transactions_ishop as (\n\n    select distinct\n        date,\n        hitType as hit_type,\n        cast(sessionId as string) as session_id,\n        -- normalized to get full domain: https://www.bergzeit.co.uk\n        replace(host, '.gb', '.co.uk') as host,\n        dateTime as date_time,\n        pagePath as page_path,\n        gclid,\n        event_value as consent_type,\n        cast(transaction_id as string) as transaction_id,\n        transaction_value,\n        transaction_currency,\n        consentPurpose_cc1,\n        consentPurpose_cc2,\n        consentPurpose_cc3,\n        consentPurpose_cc4,\n        consentPurpose_cc5,\n        consentPurpose_layerVersion\n    from `bergzeit`.`consentless_tracking`.`hits_prod`\n    where\n        hittype = 'transaction'\n        and date between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n        /* removed Outdoor Broker, as store was shut down */\n        and host not like '%outdoorbroker%'\n        /* removed events with faulty hostname */\n        and host like '%www%'\n\n)\n\nselect * from consentless_transactions_ishop", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions`"}, "model.sql_repository_bz.stg_gcp_cost_export": {"raw_sql": "with gcp_service_costs_log as (\r\n\r\n    select\r\n        {{ dbt_utils.surrogate_key(['billing_account_id', 'usage_start_time', 'usage_end_time', 'cost']) }} as cost_entry_id,\r\n        *\r\n    from {{ source('gcp_cost', 'gcp_cost_data') }}\r\n\r\n    union all\r\n\r\n    /* old cost export was created in US region, thus copied and unioned */\r\n    select\r\n        {{ dbt_utils.surrogate_key(['billing_account_id', 'usage_start_time', 'usage_end_time', 'cost']) }} as cost_entry_id,\r\n        *\r\n    from {{ source('gcp_cost', 'gcp_cost_data_legacy') }}\r\n\r\n)\r\n\r\nselect * from gcp_service_costs_log", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.gcp_cost.gcp_cost_data", "source.sql_repository_bz.gcp_cost.gcp_cost_data_legacy"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "stg_gcp_cost_export"], "unique_id": "model.sql_repository_bz.stg_gcp_cost_export", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_cloud_platform_metadata/stg_gcp_cost_export.sql", "original_file_path": "models/01_staging/google_cloud_platform_metadata/stg_gcp_cost_export.sql", "name": "stg_gcp_cost_export", "alias": "stg_gcp_cost_export", "checksum": {"name": "sha256", "checksum": "2603c591ad2ae5b78cada327ae2c2b574c89405bc33a3a128fe482544ab27587"}, "tags": [], "refs": [], "sources": [["gcp_cost", "gcp_cost_data"], ["gcp_cost", "gcp_cost_data_legacy"]], "description": "this model lists all costs of all GCP services", "columns": {"cost_entry_id": {"name": "cost_entry_id", "description": "the unique id of the service cost entry", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_cloud_platform_metadata/stg_gcp_cost_export.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.830577, "compiled_sql": "with gcp_service_costs_log as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(billing_account_id as \n    string\n), '') || '-' || coalesce(cast(usage_start_time as \n    string\n), '') || '-' || coalesce(cast(usage_end_time as \n    string\n), '') || '-' || coalesce(cast(cost as \n    string\n), '') as \n    string\n))) as cost_entry_id,\n        *\n    from `bergzeit`.`gcp_cost_export`.`gcp_billing_export_v1_0195FF_CDEB4D_2A5AD3`\n\n    union all\n\n    /* old cost export was created in US region, thus copied and unioned */\n    select\n        to_hex(md5(cast(coalesce(cast(billing_account_id as \n    string\n), '') || '-' || coalesce(cast(usage_start_time as \n    string\n), '') || '-' || coalesce(cast(usage_end_time as \n    string\n), '') || '-' || coalesce(cast(cost as \n    string\n), '') as \n    string\n))) as cost_entry_id,\n        *\n    from `bergzeit`.`gcp_cost_export`.`gcp_billing_export_v1_0195FF_CDEB4D_2A5AD3_backup`\n\n)\n\nselect * from gcp_service_costs_log", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gcp_cost_export`"}, "model.sql_repository_bz.stg_gcp_bigquery_table_storage": {"raw_sql": "with table_storage_metadata as (\r\n\r\n    select\r\n        {{ dbt_utils.surrogate_key(['project_number', 'table_schema', 'table_name', 'creation_time', 'total_rows']) }} as table_creation_id,\r\n        *,\r\n        parse_date('%Y%m%d',substr(table_name, -8,8)) as date_shard\r\n    /* table specification seems to be case-sensitive */\r\n    from {{ source('bz_information_schema', 'TABLE_STORAGE') }}\r\n    where\r\n        date(creation_time) between date_sub(current_date(), interval 30 day) and current_date()\r\n        and (starts_with(table_name, 'ga_sessions_') or starts_with(table_name, 'events_'))\r\n        and table_schema in  ('79472326', 'analytics_317045356')\r\n        and table_name not like '%intraday%'\r\n\r\n)\r\n\r\nselect * from table_storage_metadata", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.bz_information_schema.TABLE_STORAGE"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "stg_gcp_bigquery_table_storage"], "unique_id": "model.sql_repository_bz.stg_gcp_bigquery_table_storage", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_cloud_platform_metadata/stg_gcp_bigquery_table_storage.sql", "original_file_path": "models/01_staging/google_cloud_platform_metadata/stg_gcp_bigquery_table_storage.sql", "name": "stg_gcp_bigquery_table_storage", "alias": "stg_gcp_bigquery_table_storage", "checksum": {"name": "sha256", "checksum": "3deb8f2b8b53f31a537509d24a8b0896686e7d23054b54ea4a7b00a48950d103"}, "tags": [], "refs": [], "sources": [["bz_information_schema", "TABLE_STORAGE"]], "description": "this model extracts daily table creation times for GA3 and GA4 Overall Properties from table_storage metadata", "columns": {"table_creation_id": {"name": "table_creation_id", "description": "the unique id of the individual table creation", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "total_rows": {"name": "total_rows", "description": "the number of rows ingested into the table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_cloud_platform_metadata/stg_gcp_bigquery_table_storage.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.8359652, "compiled_sql": "with table_storage_metadata as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(project_number as \n    string\n), '') || '-' || coalesce(cast(table_schema as \n    string\n), '') || '-' || coalesce(cast(table_name as \n    string\n), '') || '-' || coalesce(cast(creation_time as \n    string\n), '') || '-' || coalesce(cast(total_rows as \n    string\n), '') as \n    string\n))) as table_creation_id,\n        *,\n        parse_date('%Y%m%d',substr(table_name, -8,8)) as date_shard\n    /* table specification seems to be case-sensitive */\n    from `bergzeit`.`region-eu.INFORMATION_SCHEMA`.`TABLE_STORAGE`\n    where\n        date(creation_time) between date_sub(current_date(), interval 30 day) and current_date()\n        and (starts_with(table_name, 'ga_sessions_') or starts_with(table_name, 'events_'))\n        and table_schema in  ('79472326', 'analytics_317045356')\n        and table_name not like '%intraday%'\n\n)\n\nselect * from table_storage_metadata", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gcp_bigquery_table_storage`"}, "model.sql_repository_bz.stg_gcp_bigquery_job_cost": {"raw_sql": "with bigquery_jobs_with_gb_and_cost as (\r\n\r\n    select\r\n        {{ dbt_utils.surrogate_key(['creation_time', 'job_id', 'job_type', 'query', 'total_bytes_processed']) }} as sk_id,\r\n        creation_time,\r\n        job_id,\r\n        /* project_id = ambiguous, thus commented out */\r\n        user_email,\r\n        job_type,\r\n        statement_type,\r\n        cache_hit,\r\n        destination_table.project_id as destination_project_id,\r\n        ref_tab.project_id as ref_tab_project_id,\r\n        ref_tab.dataset_id,\r\n        ref_tab.table_id,\r\n        query,\r\n\r\n        /* custom query classification based on main usage patterns */\r\n        case \r\n            when query like '%create or replace table%' or statement_type = 'MERGE' then 'dbt_table_update'\r\n            when query like '%create or replace view%' then 'dbt_view_update'\r\n            when query like '%test%' then 'dbt_test'\r\n            when user_email = 'bergzeit@appspot.gserviceaccount.com' then 'cloud_functions'\r\n            when starts_with(query, 'SELECT * FROM (') then 'datastudio'\r\n            when query not like '%dbt%' then 'non-dbt'\r\n            else '_other'\r\n        end as query_type,\r\n        round(total_bytes_processed / 1000000000,2) as bytes_processed_in_gb\r\n    from \r\n        {{ source ('bz_information_schema', 'bigquery_jobs') }},\r\n        unnest(referenced_tables) as ref_tab\r\n    where creation_time between timestamp_sub(current_timestamp(), interval 90 day) and current_timestamp()\r\n\r\n)\r\n\r\nselect * from bigquery_jobs_with_gb_and_cost", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.bz_information_schema.bigquery_jobs"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "stg_gcp_bigquery_job_cost"], "unique_id": "model.sql_repository_bz.stg_gcp_bigquery_job_cost", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_cloud_platform_metadata/stg_gcp_bigquery_job_cost.sql", "original_file_path": "models/01_staging/google_cloud_platform_metadata/stg_gcp_bigquery_job_cost.sql", "name": "stg_gcp_bigquery_job_cost", "alias": "stg_gcp_bigquery_job_cost", "checksum": {"name": "sha256", "checksum": "e03928d4e295d7fd6270070def8d1b9221030f7723f0df927d5c15f8ca5a89ce"}, "tags": [], "refs": [], "sources": [["bz_information_schema", "bigquery_jobs"]], "description": "this model lists all Big Query jobs with bytes processed and cost", "columns": {"sk_id": {"name": "sk_id", "description": "the unique key of the BigQuery job cost entry", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_cloud_platform_metadata/stg_gcp_bigquery_job_cost.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.826408, "compiled_sql": "with bigquery_jobs_with_gb_and_cost as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(creation_time as \n    string\n), '') || '-' || coalesce(cast(job_id as \n    string\n), '') || '-' || coalesce(cast(job_type as \n    string\n), '') || '-' || coalesce(cast(query as \n    string\n), '') || '-' || coalesce(cast(total_bytes_processed as \n    string\n), '') as \n    string\n))) as sk_id,\n        creation_time,\n        job_id,\n        /* project_id = ambiguous, thus commented out */\n        user_email,\n        job_type,\n        statement_type,\n        cache_hit,\n        destination_table.project_id as destination_project_id,\n        ref_tab.project_id as ref_tab_project_id,\n        ref_tab.dataset_id,\n        ref_tab.table_id,\n        query,\n\n        /* custom query classification based on main usage patterns */\n        case \n            when query like '%create or replace table%' or statement_type = 'MERGE' then 'dbt_table_update'\n            when query like '%create or replace view%' then 'dbt_view_update'\n            when query like '%test%' then 'dbt_test'\n            when user_email = 'bergzeit@appspot.gserviceaccount.com' then 'cloud_functions'\n            when starts_with(query, 'SELECT * FROM (') then 'datastudio'\n            when query not like '%dbt%' then 'non-dbt'\n            else '_other'\n        end as query_type,\n        round(total_bytes_processed / 1000000000,2) as bytes_processed_in_gb\n    from \n        `bergzeit`.`region-eu.INFORMATION_SCHEMA`.`JOBS_BY_PROJECT`,\n        unnest(referenced_tables) as ref_tab\n    where creation_time between timestamp_sub(current_timestamp(), interval 90 day) and current_timestamp()\n\n)\n\nselect * from bigquery_jobs_with_gb_and_cost", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gcp_bigquery_job_cost`"}, "model.sql_repository_bz.stg_trusted_shops_reviews": {"raw_sql": "with trusted_shops_reviews as (\r\n\r\n    select\r\n        date,\r\n        lower(country) as country,\r\n        review_id, \r\n        rating,\r\n        title,\r\n        comment,\r\n        createdAt,\r\n        updatedAt,\r\n        feedbackType,\r\n        state,\r\n        verificationType,\r\n        hasAttachments,\r\n        event_type,\r\n        transaction_date,\r\n        transaction_reference,\r\n        lower(questionnaire_locale) as questionnaire_locale,\r\n        q1_star_rating,\r\n        q1_description,\r\n        q2_review_comment,\r\n        q2_description,\r\n        q2_title,\r\n        q3_rating_delivery,\r\n        q3_rating_goods,\r\n        q3_rating_service\r\n    from {{ source('trusted_shops', 'ts_reviews_all') }}\r\n\r\n)\r\n\r\nselect * from trusted_shops_reviews", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.trusted_shops.ts_reviews_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "trusted_shops", "stg_trusted_shops_reviews"], "unique_id": "model.sql_repository_bz.stg_trusted_shops_reviews", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/trusted_shops/stg_trusted_shops_reviews.sql", "original_file_path": "models/01_staging/trusted_shops/stg_trusted_shops_reviews.sql", "name": "stg_trusted_shops_reviews", "alias": "stg_trusted_shops_reviews", "checksum": {"name": "sha256", "checksum": "b2ad70948efdff51de6eca2c9dec979814c3f101cbcf57d13717362af9fcb4bf"}, "tags": [], "refs": [], "sources": [["trusted_shops", "ts_reviews_all"]], "description": "this model lists trusted shops reviews fetched from API via cloud function", "columns": {"review_id": {"name": "review_id", "description": "the unique review id", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "the date of the review entry", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/trusted_shops/_models_trusted_shops.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/trusted_shops/stg_trusted_shops_reviews.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.8821528, "compiled_sql": "with trusted_shops_reviews as (\n\n    select\n        date,\n        lower(country) as country,\n        review_id, \n        rating,\n        title,\n        comment,\n        createdAt,\n        updatedAt,\n        feedbackType,\n        state,\n        verificationType,\n        hasAttachments,\n        event_type,\n        transaction_date,\n        transaction_reference,\n        lower(questionnaire_locale) as questionnaire_locale,\n        q1_star_rating,\n        q1_description,\n        q2_review_comment,\n        q2_description,\n        q2_title,\n        q3_rating_delivery,\n        q3_rating_goods,\n        q3_rating_service\n    from `bergzeit`.`trusted_shops`.`ts_reviews_all`\n\n)\n\nselect * from trusted_shops_reviews", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_trusted_shops_reviews`"}, "model.sql_repository_bz.stg_gsheets_currency_factor_all_countries": {"raw_sql": "with ch_data as (\r\n\r\n    select\r\n        *\r\n    from {{ ref('stg_gsheets_currency_factor_ch') }}\r\n\r\n),\r\n\r\ngb_data as (\r\n\r\n    select\r\n        *\r\n    from {{ ref('stg_gsheets_currency_factor_gb') }}\r\n\r\n),\r\n\r\nunioned_data as (\r\n\r\n    select *\r\n    from ch_data\r\n    union all\r\n    select *\r\n    from gb_data\r\n\r\n),\r\n\r\ncreate_primary_key as (\r\n\r\n    select\r\n        {{dbt_utils.surrogate_key(['currency_date', 'currency_code'])}}  as sk_id,\r\n        *\r\n    from unioned_data\r\n    \r\n)\r\n\r\nselect * from create_primary_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.sql_repository_bz.stg_gsheets_currency_factor_ch", "model.sql_repository_bz.stg_gsheets_currency_factor_gb"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "stg_gsheets_currency_factor_all_countries"], "unique_id": "model.sql_repository_bz.stg_gsheets_currency_factor_all_countries", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_sheets/stg_gsheets_currency_factor_all_countries.sql", "original_file_path": "models/01_staging/google_sheets/stg_gsheets_currency_factor_all_countries.sql", "name": "stg_gsheets_currency_factor_all_countries", "alias": "stg_gsheets_currency_factor_all_countries", "checksum": {"name": "sha256", "checksum": "868f665ff797a2e563d9b8e41fcbd5df8cdca2b12bde0a68b74625d12cb93e14"}, "tags": [], "refs": [["stg_gsheets_currency_factor_ch"], ["stg_gsheets_currency_factor_gb"]], "sources": [], "description": "UK and CH currency factors combined", "columns": {"sk_id": {"name": "sk_id", "description": "the surrogate key used as unique identifier", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_sheets/_models_stg_gsheets.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/stg_gsheets_currency_factor_all_countries.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.9485002, "compiled_sql": "with ch_data as (\n\n    select\n        *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_ch`\n\n),\n\ngb_data as (\n\n    select\n        *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_gb`\n\n),\n\nunioned_data as (\n\n    select *\n    from ch_data\n    union all\n    select *\n    from gb_data\n\n),\n\ncreate_primary_key as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(currency_date as \n    string\n), '') || '-' || coalesce(cast(currency_code as \n    string\n), '') as \n    string\n)))  as sk_id,\n        *\n    from unioned_data\n    \n)\n\nselect * from create_primary_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_all_countries`"}, "model.sql_repository_bz.stg_gsheets_currency_factor_ch": {"raw_sql": "select \r\n    date(currency_date) as currency_date, --primary key\r\n    factor_chf as currency_factor,\r\n    'CHF' as currency_code\r\nfrom {{ source('price_intelligence', 'currency_factor_chf') }}\r\nwhere currency_date is not null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.price_intelligence.currency_factor_chf"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "stg_gsheets_currency_factor_ch"], "unique_id": "model.sql_repository_bz.stg_gsheets_currency_factor_ch", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_sheets/stg_gsheets_currency_factor_ch.sql", "original_file_path": "models/01_staging/google_sheets/stg_gsheets_currency_factor_ch.sql", "name": "stg_gsheets_currency_factor_ch", "alias": "stg_gsheets_currency_factor_ch", "checksum": {"name": "sha256", "checksum": "141b47654092bb8f45e593b28b5e14e17b00c7102c27298af6100cdf96d8d99f"}, "tags": [], "refs": [], "sources": [["price_intelligence", "currency_factor_chf"]], "description": "currency factor per day for CH via google finance function in google sheets", "columns": {"currency_date": {"name": "currency_date", "description": "the date for which the currency factor applies, it is also the unique identifier in this table", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_sheets/_models_stg_gsheets.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/stg_gsheets_currency_factor_ch.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.9389899, "compiled_sql": "select \n    date(currency_date) as currency_date, --primary key\n    factor_chf as currency_factor,\n    'CHF' as currency_code\nfrom `bergzeit`.`price_intelligence`.`currency_factor_chf`\nwhere currency_date is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_ch`"}, "model.sql_repository_bz.stg_gsheets_seo_magazin_reworked": {"raw_sql": "select \r\n    url_noutm, --primary key\r\n    status\r\nfrom {{ source('seo_analytics', 'magazin_posts_reworked_input_list') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.seo_analytics.magazin_posts_reworked_input_list"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "stg_gsheets_seo_magazin_reworked"], "unique_id": "model.sql_repository_bz.stg_gsheets_seo_magazin_reworked", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_sheets/stg_gsheets_seo_magazin_reworked.sql", "original_file_path": "models/01_staging/google_sheets/stg_gsheets_seo_magazin_reworked.sql", "name": "stg_gsheets_seo_magazin_reworked", "alias": "stg_gsheets_seo_magazin_reworked", "checksum": {"name": "sha256", "checksum": "2bb9b2cd69c0ed5bddbc8393a043cc180aa65dea3a031daba4f0a4afc87b87c0"}, "tags": [], "refs": [], "sources": [["seo_analytics", "magazin_posts_reworked_input_list"]], "description": "manually curated list of reworked magazine articles", "columns": {"url_noutm": {"name": "url_noutm", "description": "the url stripped from utm parameters which is also the unique identifier in this table", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_sheets/_models_stg_gsheets.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/stg_gsheets_seo_magazin_reworked.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.9687538, "compiled_sql": "select \n    url_noutm, --primary key\n    status\nfrom `bergzeit`.`seo_analytics`.`magazin_posts_reworked_input_list`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gsheets_seo_magazin_reworked`"}, "model.sql_repository_bz.stg_gsheets_currency_factor_gb": {"raw_sql": "select \r\n    date(currency_date) as currency_date, --primary key\r\n    factor_gbp as currency_factor,\r\n    'GBP' as currency_code\r\nfrom {{ source('price_intelligence', 'currency_factor_gbp') }}\r\nwhere currency_date is not null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.price_intelligence.currency_factor_gbp"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "stg_gsheets_currency_factor_gb"], "unique_id": "model.sql_repository_bz.stg_gsheets_currency_factor_gb", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_sheets/stg_gsheets_currency_factor_gb.sql", "original_file_path": "models/01_staging/google_sheets/stg_gsheets_currency_factor_gb.sql", "name": "stg_gsheets_currency_factor_gb", "alias": "stg_gsheets_currency_factor_gb", "checksum": {"name": "sha256", "checksum": "99d1c6782a0ccd65c18947a5c0efd0c16e9fd6a2f427e748c99fab17ae4945c1"}, "tags": [], "refs": [], "sources": [["price_intelligence", "currency_factor_gbp"]], "description": "currency factor per day for GB via google finance function in google sheets", "columns": {"currency_date": {"name": "currency_date", "description": "the date for which the currency factor applies, it is also the unique identifier in this table", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_sheets/_models_stg_gsheets.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/stg_gsheets_currency_factor_gb.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.9438133, "compiled_sql": "select \n    date(currency_date) as currency_date, --primary key\n    factor_gbp as currency_factor,\n    'GBP' as currency_code\nfrom `bergzeit`.`price_intelligence`.`currency_factor_gbp`\nwhere currency_date is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_gb`"}, "model.sql_repository_bz.stg_gsheets_order_value_planned": {"raw_sql": "with country_order_value_expectations as(\r\n\r\nselect \r\n    Land as country_soll,\r\n    Monat as month_soll,\r\n    Wert as order_value_soll_overall\r\nfrom {{ source('price_intelligence', 'budgetplan_soll') }}\r\n\r\n),\r\n\r\ncreate_primary_key as (\r\n\r\n    select\r\n        {{dbt_utils.surrogate_key(['country_soll', 'month_soll'])}}  as sk_id,\r\n        *\r\n    from country_order_value_expectations\r\n    \r\n)\r\n\r\nselect * from create_primary_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.price_intelligence.budgetplan_soll"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "stg_gsheets_order_value_planned"], "unique_id": "model.sql_repository_bz.stg_gsheets_order_value_planned", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_sheets/stg_gsheets_order_value_planned.sql", "original_file_path": "models/01_staging/google_sheets/stg_gsheets_order_value_planned.sql", "name": "stg_gsheets_order_value_planned", "alias": "stg_gsheets_order_value_planned", "checksum": {"name": "sha256", "checksum": "abcb464a3a04a62ffe90da89f5a3de9027347fdf9efd9c6211055f6f051d0571"}, "tags": [], "refs": [], "sources": [["price_intelligence", "budgetplan_soll"]], "description": "planned order values (extracted manually by Eric from adaptive planning) in google sheets", "columns": {"country_soll": {"name": "country_soll", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_soll": {"name": "month_soll", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_value_soll_overall": {"name": "order_value_soll_overall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sk_id": {"name": "sk_id", "description": "the surrogate key used as unique identifier", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_sheets/_models_stg_gsheets.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/stg_gsheets_order_value_planned.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.9553187, "compiled_sql": "with country_order_value_expectations as(\n\nselect \n    Land as country_soll,\n    Monat as month_soll,\n    Wert as order_value_soll_overall\nfrom `bergzeit`.`price_intelligence`.`budgetplan_soll`\n\n),\n\ncreate_primary_key as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(country_soll as \n    string\n), '') || '-' || coalesce(cast(month_soll as \n    string\n), '') as \n    string\n)))  as sk_id,\n        *\n    from country_order_value_expectations\n    \n)\n\nselect * from create_primary_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gsheets_order_value_planned`"}, "model.sql_repository_bz.stg_gsheets_seo_top_pages": {"raw_sql": "select \r\n    platform,\r\n    hub,\r\n    selected_keyword,\r\n    url_noutm --primary key\r\nfrom {{ source('seo_analytics', 'top_pages_input_list') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.seo_analytics.top_pages_input_list"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "stg_gsheets_seo_top_pages"], "unique_id": "model.sql_repository_bz.stg_gsheets_seo_top_pages", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_sheets/stg_gsheets_seo_top_pages.sql", "original_file_path": "models/01_staging/google_sheets/stg_gsheets_seo_top_pages.sql", "name": "stg_gsheets_seo_top_pages", "alias": "stg_gsheets_seo_top_pages", "checksum": {"name": "sha256", "checksum": "324d631b5be91d51625535bef96f4a84f9cabba50c9d9e7556e294253b04d77e"}, "tags": [], "refs": [], "sources": [["seo_analytics", "top_pages_input_list"]], "description": "manually curated list of top magazine and shop pages", "columns": {"url_noutm": {"name": "url_noutm", "description": "the url stripped from utm parameters which is also the unique identifier in this table", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_sheets/_models_stg_gsheets.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/stg_gsheets_seo_top_pages.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.964496, "compiled_sql": "select \n    platform,\n    hub,\n    selected_keyword,\n    url_noutm --primary key\nfrom `bergzeit`.`seo_analytics`.`top_pages_input_list`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gsheets_seo_top_pages`"}, "model.sql_repository_bz.stg_gsheets_channel_shares_planned": {"raw_sql": "with channel_share_expectations as(\r\n\r\nselect \r\n    Land as country_sollc,\r\n    Channel as channel_soll,\r\n    Anteil as order_value_channel_share_soll,\r\n    KUR as kur_soll\r\nfrom {{ source('price_intelligence', 'budgetplan_soll_channels') }}\r\nwhere Land is not null\r\n),\r\n\r\ncreate_primary_key as (\r\n\r\n    select\r\n        {{dbt_utils.surrogate_key(['country_sollc', 'channel_soll'])}}  as sk_id,\r\n        *\r\n    from channel_share_expectations\r\n    \r\n)\r\n\r\nselect * from create_primary_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.price_intelligence.budgetplan_soll_channels"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "stg_gsheets_channel_shares_planned"], "unique_id": "model.sql_repository_bz.stg_gsheets_channel_shares_planned", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_sheets/stg_gsheets_channel_shares_planned.sql", "original_file_path": "models/01_staging/google_sheets/stg_gsheets_channel_shares_planned.sql", "name": "stg_gsheets_channel_shares_planned", "alias": "stg_gsheets_channel_shares_planned", "checksum": {"name": "sha256", "checksum": "430c48ae02c8d70057632a39a2a8982d6bbe5cf408ce24739656fde650df7e10"}, "tags": [], "refs": [], "sources": [["price_intelligence", "budgetplan_soll_channels"]], "description": "planned order values and KUR by channel and country from google sheets", "columns": {"sk_id": {"name": "sk_id", "description": "the surrogate key used as unique identifier", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_sheets/_models_stg_gsheets.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/stg_gsheets_channel_shares_planned.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750851.9598033, "compiled_sql": "with channel_share_expectations as(\n\nselect \n    Land as country_sollc,\n    Channel as channel_soll,\n    Anteil as order_value_channel_share_soll,\n    KUR as kur_soll\nfrom `bergzeit`.`price_intelligence`.`budgetplan_soll_channels`\nwhere Land is not null\n),\n\ncreate_primary_key as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(country_sollc as \n    string\n), '') || '-' || coalesce(cast(channel_soll as \n    string\n), '') as \n    string\n)))  as sk_id,\n        *\n    from channel_share_expectations\n    \n)\n\nselect * from create_primary_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_gsheets_channel_shares_planned`"}, "model.sql_repository_bz.stg_awin_orders_all": {"raw_sql": "{{\r\n    config(\r\n      re_data_monitored=true,\r\n      re_data_time_filter='awin_date',\r\n      re_data_anomaly_detector={'name': 'z_score', 'threshold': 3}\r\n    )\r\n}}\r\n\r\nwith awin_orders_all as (\r\n\r\n    {% for country in var('awin_countries') %}\r\n    {%- set source_country = 'awin_orders_all_' + country -%}\r\n    \r\n    select\r\n        parse_date('%Y-%m-%d',left(safe_cast(transactionDate as string),10)) as awin_date,\r\n        transactionDate as awin_timestamp,\r\n        advertiserCountry as advertiser_country,\r\n        advertiserId as advertiser_id,\r\n        commissionStatus as commission_status,\r\n        awin_order_id as order_id_awin,\r\n        safe_cast(orderRef as string) as order_id,\r\n        publisherId as publisher_id,\r\n        siteName as site_name,\r\n        commissionAmount_amount as commission_amount,\r\n        commissionAmount_currency as commission_currency,\r\n        saleAmount_amount as sale_amount_awin,\r\n        saleAmount_currency as sale_amount_currency,\r\n        commission_group_code\r\n    from {{ source('awin', source_country) }}\r\n    where transactionDate is not null\r\n\r\n    {% if not loop.last %}union all {% endif %}\r\n    {% endfor %}\r\n\r\n)\r\n\r\nselect * \r\nfrom awin_orders_all\r\n/* remove fauly date values */\r\nwhere awin_date is not null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.awin.awin_orders_all_deat", "source.sql_repository_bz.awin.awin_orders_all_ch", "source.sql_repository_bz.awin.awin_orders_all_it", "source.sql_repository_bz.awin.awin_orders_all_nl", "source.sql_repository_bz.awin.awin_orders_all_uk"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": ["analytics-alerts"], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "re_data_monitored": true, "re_data_time_filter": "awin_date", "re_data_anomaly_detector": {"name": "z_score", "threshold": 3}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "stg_awin_orders_all"], "unique_id": "model.sql_repository_bz.stg_awin_orders_all", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/affiliate_awin/stg_awin_orders_all.sql", "original_file_path": "models/01_staging/affiliate_awin/stg_awin_orders_all.sql", "name": "stg_awin_orders_all", "alias": "stg_awin_orders_all", "checksum": {"name": "sha256", "checksum": "f53ec10355ac62e189a79f0fca180f0ecf54840925c5c279be75b24530c41f48"}, "tags": ["analytics-alerts"], "refs": [], "sources": [["awin", "awin_orders_all_deat"], ["awin", "awin_orders_all_ch"], ["awin", "awin_orders_all_it"], ["awin", "awin_orders_all_nl"], ["awin", "awin_orders_all_uk"]], "description": "### Description\r\n\r\nA cloud function that fetches all Awin orders of the last 120 days via the API across all countries. \r\n\r\n### When does the job run and how?\r\n\r\n* The [daily cloud scheduler job in the \"adsdataprediction\" project](https://console.cloud.google.com/cloudscheduler/jobs/edit/europe-west1/get_awin_orders?project=adsdataprediction) triggers [a cloud function](https://console.cloud.google.com/functions/details/europe-west3/get_awin_orders?env=gen1&project=adsdataprediction) to store all Awin orders to Cloud Storage in one csv file per country.\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* The output dataframes are [directly written to BigQuery](https://console.cloud.google.com/bigquery?project=bergzeit&ws=!1m9!1m4!4m3!1sbergzeit!2sdbt_sea_analytics!3sgads_ads_for_url_check!1m3!3m2!1sadsdataprediction!2sawin&d=awin&p=adsdataprediction&page=dataset) via the to_gbq method.\r\n\r\n### What type of table is it?\r\n\r\nNative table, overwritten on every run.\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. A regular check is performed in the [cloud function overview page](https://console.cloud.google.com/functions/list?project=adsdataprediction) and on the [Analytics Admin dashboard](https://datastudio.google.com/s/iUprJbY3B2Y)\r\n\r\n### Who is the business stakeholder? \r\n\r\nEric Estel\r\n\r\n### Which ticket does the feature refer to?\r\n\r\n[WEBA-261](https://bergzeit.atlassian.net/browse/WEBA-261)\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\ndbt test coverage (see model yml) and Cloud function failure alerts", "columns": {"awin_date": {"name": "awin_date", "description": "date of the Awin sale", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id_awin": {"name": "order_id_awin", "description": "the order id generated by Awin, not the ishop identifier. Used to directly amend the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "the order identifier provided via the sales tag, i.e. the ishop order id", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "sale_amount_awin": {"name": "sale_amount_awin", "description": "the net amount after return adjustments or cancellations", "meta": {}, "data_type": null, "quote": null, "tags": []}, "commission_group_code": {"name": "commission_group_code", "description": "the commission type, depending if a coupon code was involved - not_null", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/affiliate_awin/_models_stg_awin.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/stg_awin_orders_all.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table", "re_data_monitored": true, "re_data_time_filter": "awin_date", "re_data_anomaly_detector": {"name": "z_score", "threshold": 3}}, "created_at": 1663750852.0601208, "compiled_sql": "\n\nwith awin_orders_all as (\n\n    select\n        parse_date('%Y-%m-%d',left(safe_cast(transactionDate as string),10)) as awin_date,\n        transactionDate as awin_timestamp,\n        advertiserCountry as advertiser_country,\n        advertiserId as advertiser_id,\n        commissionStatus as commission_status,\n        awin_order_id as order_id_awin,\n        safe_cast(orderRef as string) as order_id,\n        publisherId as publisher_id,\n        siteName as site_name,\n        commissionAmount_amount as commission_amount,\n        commissionAmount_currency as commission_currency,\n        saleAmount_amount as sale_amount_awin,\n        saleAmount_currency as sale_amount_currency,\n        commission_group_code\n    from `adsdataprediction`.`awin`.`awin_orders_all_deat`\n    where transactionDate is not null\n\n    union all \n    select\n        parse_date('%Y-%m-%d',left(safe_cast(transactionDate as string),10)) as awin_date,\n        transactionDate as awin_timestamp,\n        advertiserCountry as advertiser_country,\n        advertiserId as advertiser_id,\n        commissionStatus as commission_status,\n        awin_order_id as order_id_awin,\n        safe_cast(orderRef as string) as order_id,\n        publisherId as publisher_id,\n        siteName as site_name,\n        commissionAmount_amount as commission_amount,\n        commissionAmount_currency as commission_currency,\n        saleAmount_amount as sale_amount_awin,\n        saleAmount_currency as sale_amount_currency,\n        commission_group_code\n    from `adsdataprediction`.`awin`.`awin_orders_all_ch`\n    where transactionDate is not null\n\n    union all \n    select\n        parse_date('%Y-%m-%d',left(safe_cast(transactionDate as string),10)) as awin_date,\n        transactionDate as awin_timestamp,\n        advertiserCountry as advertiser_country,\n        advertiserId as advertiser_id,\n        commissionStatus as commission_status,\n        awin_order_id as order_id_awin,\n        safe_cast(orderRef as string) as order_id,\n        publisherId as publisher_id,\n        siteName as site_name,\n        commissionAmount_amount as commission_amount,\n        commissionAmount_currency as commission_currency,\n        saleAmount_amount as sale_amount_awin,\n        saleAmount_currency as sale_amount_currency,\n        commission_group_code\n    from `adsdataprediction`.`awin`.`awin_orders_all_it`\n    where transactionDate is not null\n\n    union all \n    select\n        parse_date('%Y-%m-%d',left(safe_cast(transactionDate as string),10)) as awin_date,\n        transactionDate as awin_timestamp,\n        advertiserCountry as advertiser_country,\n        advertiserId as advertiser_id,\n        commissionStatus as commission_status,\n        awin_order_id as order_id_awin,\n        safe_cast(orderRef as string) as order_id,\n        publisherId as publisher_id,\n        siteName as site_name,\n        commissionAmount_amount as commission_amount,\n        commissionAmount_currency as commission_currency,\n        saleAmount_amount as sale_amount_awin,\n        saleAmount_currency as sale_amount_currency,\n        commission_group_code\n    from `adsdataprediction`.`awin`.`awin_orders_all_nl`\n    where transactionDate is not null\n\n    union all \n    select\n        parse_date('%Y-%m-%d',left(safe_cast(transactionDate as string),10)) as awin_date,\n        transactionDate as awin_timestamp,\n        advertiserCountry as advertiser_country,\n        advertiserId as advertiser_id,\n        commissionStatus as commission_status,\n        awin_order_id as order_id_awin,\n        safe_cast(orderRef as string) as order_id,\n        publisherId as publisher_id,\n        siteName as site_name,\n        commissionAmount_amount as commission_amount,\n        commissionAmount_currency as commission_currency,\n        saleAmount_amount as sale_amount_awin,\n        saleAmount_currency as sale_amount_currency,\n        commission_group_code\n    from `adsdataprediction`.`awin`.`awin_orders_all_uk`\n    where transactionDate is not null\n\n    \n    \n\n)\n\nselect * \nfrom awin_orders_all\n/* remove fauly date values */\nwhere awin_date is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_awin_orders_all`"}, "model.sql_repository_bz.stg_awin_return_adjustment_errors": {"raw_sql": "with awin_return_adjustment_errors as (\r\n\r\n    select *\r\n    from {{ source('awin', 'awin_return_adjustment_errors') }}\r\n\r\n)\r\n\r\nselect * from awin_return_adjustment_errors", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.awin.awin_return_adjustment_errors"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": ["analytics-alerts"], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "stg_awin_return_adjustment_errors"], "unique_id": "model.sql_repository_bz.stg_awin_return_adjustment_errors", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/affiliate_awin/stg_awin_return_adjustment_errors.sql", "original_file_path": "models/01_staging/affiliate_awin/stg_awin_return_adjustment_errors.sql", "name": "stg_awin_return_adjustment_errors", "alias": "stg_awin_return_adjustment_errors", "checksum": {"name": "sha256", "checksum": "3c050bb7b8314262af08034d1b04a845b7892fea35f97496a61a54f645e57e30"}, "tags": ["analytics-alerts"], "refs": [], "sources": [["awin", "awin_return_adjustment_errors"]], "description": "this model lists upload errors of the automated return adjustment process, see doc(\"description_awin_orders\")", "columns": {"order_id_awin": {"name": "order_id_awin", "description": "the order identifier provided via the sales tag, i.e. the ishop order id", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "inv_h_shop_order_id": {"name": "inv_h_shop_order_id", "description": "the navision order id", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/affiliate_awin/_models_stg_awin.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/stg_awin_return_adjustment_errors.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750852.051126, "compiled_sql": "with awin_return_adjustment_errors as (\n\n    select *\n    from `adsdataprediction`.`awin`.`awin_return_adjustment_errors`\n\n)\n\nselect * from awin_return_adjustment_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_awin_return_adjustment_errors`"}, "model.sql_repository_bz.stg_emarsys_ids": {"raw_sql": "/* DEPRECATED, due to missing business case and usage */\r\nwith emarsys_ids as (\r\n\r\n    select\r\n        date,\r\n        id,\r\n        oxid_customer_id,\r\n        antavo_opt_in,\r\n        ape_locale,\r\n        optin,\r\n        subscription_date,\r\n        unsubscription_date,\r\n        last_date_modified,\r\n        shop_doi_status,\r\n        bergzeit_club_optin,\r\n        row_number() over (partition by oxid_customer_id) as rn\r\n    from {{ source('customer_analytics', 'emarsys_ids') }}\r\n    /* we use yesterdays data load = full load of all ids */\r\n    where \r\n        date = date_sub(current_date(), interval 1 day)\r\n        and oxid_customer_id not in ('None', 'reg_email_test', 'referral_test')\r\n        and character_length(oxid_customer_id) < 10\r\n),\r\n\r\nemarsys_ids_unduplicated as (\r\n\r\n    select * except (rn)\r\n    from emarsys_ids\r\n    where rn = 1\r\n    \r\n)\r\n\r\nselect * from emarsys_ids_unduplicated", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.customer_analytics.emarsys_ids"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "zz_emarsys", "stg_emarsys_ids"], "unique_id": "model.sql_repository_bz.stg_emarsys_ids", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/zz_emarsys/stg_emarsys_ids.sql", "original_file_path": "models/01_staging/zz_emarsys/stg_emarsys_ids.sql", "name": "stg_emarsys_ids", "alias": "stg_emarsys_ids", "checksum": {"name": "sha256", "checksum": "4f5a686d3b93dcfaf84976ad149e3e3eb295f6e62d4efb00229e0faf8e3835c7"}, "tags": [], "refs": [], "sources": [["customer_analytics", "emarsys_ids"]], "description": "DEPRECATED. this model lists user ids with statuses and dates fetched from the emarsys API via a Python notebook", "columns": {"id": {"name": "id", "description": "the unique user id as provided by the commerce system (OXID, then ishop)", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/zz_emarsys/_models_stg_emarsys.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/zz_emarsys/stg_emarsys_ids.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750852.1617022, "compiled_sql": "/* DEPRECATED, due to missing business case and usage */\nwith emarsys_ids as (\n\n    select\n        date,\n        id,\n        oxid_customer_id,\n        antavo_opt_in,\n        ape_locale,\n        optin,\n        subscription_date,\n        unsubscription_date,\n        last_date_modified,\n        shop_doi_status,\n        bergzeit_club_optin,\n        row_number() over (partition by oxid_customer_id) as rn\n    from `bergzeit`.`customer_analytics`.`emarsys_contacts_daily`\n    /* we use yesterdays data load = full load of all ids */\n    where \n        date = date_sub(current_date(), interval 1 day)\n        and oxid_customer_id not in ('None', 'reg_email_test', 'referral_test')\n        and character_length(oxid_customer_id) < 10\n),\n\nemarsys_ids_unduplicated as (\n\n    select * except (rn)\n    from emarsys_ids\n    where rn = 1\n    \n)\n\nselect * from emarsys_ids_unduplicated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_emarsys_ids`"}, "model.sql_repository_bz.stg_pagespeed_url_data": {"raw_sql": "with pagespeed_url_data as (\r\n\r\n    select \r\n        {{ dbt_utils.surrogate_key(['date', 'url']) }} as date_url_id,\r\n    \tdate, \r\n        country,\r\n        /* transforming strange null values from API call and cloud function */\r\n        case\r\n            when domain is null and url = 'https://www.decathlon.de/' then 'https://www.decathlon.de'\r\n            when domain is null and url like '%www.bergzeit.de%'then 'https://www.bergzeit.de'\r\n            else domain\r\n        end as domain,\r\n        case\r\n            when url_type is null and url = 'https://www.decathlon.de/' then 'start'\r\n            when url_type is null and url like '%www.bergzeit.de/p/%'then 'produktdetail'\r\n            else lower(url_type)\r\n        end as url_type,\r\n        url,\r\n        lower(overall_category) as overall_category,\r\n        largest_contentful_paint_s,\r\n        first_meaningful_paint_s,\r\n        first_input_delay as first_input_delay_s,\r\n        cumulative_layout_shift_s,\t\r\n        first_contentful_paint_s,\t\r\n        time_to_interactive_s,\r\n        total_blocking_time_s,\t\r\n        speed_index_s,\r\n        observed_dom_content_loaded_s,\r\n        observed_first_visual_change_s,\r\n        observed_last_visual_change_s,\r\n        interaction_to_next_paint,\r\n        time_to_first_byte\r\n    from {{ source('pagespeed_measurement','pagespeed_api_metrics') }}\r\n    where date between {{ get_last_n_days_date_range(180) }}\r\n\r\n    /* tbd: union with old pagespeed measurement */\r\n)\r\n\r\nselect * from pagespeed_url_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.pagespeed_measurement.pagespeed_api_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_pagespeed", "stg_pagespeed_url_data"], "unique_id": "model.sql_repository_bz.stg_pagespeed_url_data", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_pagespeed/stg_pagespeed_url_data.sql", "original_file_path": "models/01_staging/google_pagespeed/stg_pagespeed_url_data.sql", "name": "stg_pagespeed_url_data", "alias": "stg_pagespeed_url_data", "checksum": {"name": "sha256", "checksum": "ab801c60abef101cd2180cff0e10d9a1688dc8b6c5925c4aa90a584c7be5aa0c"}, "tags": [], "refs": [], "sources": [["pagespeed_measurement", "pagespeed_api_metrics"]], "description": "", "columns": {"date_url_id": {"name": "date_url_id", "description": "a unique id of date and url combined", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "domain": {"name": "domain", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cumulative_layout_shift_s": {"name": "cumulative_layout_shift_s", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_pagespeed/_models_pagespeed.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_pagespeed/stg_pagespeed_url_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750852.1777442, "compiled_sql": "with pagespeed_url_data as (\n\n    select \n        to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(url as \n    string\n), '') as \n    string\n))) as date_url_id,\n    \tdate, \n        country,\n        /* transforming strange null values from API call and cloud function */\n        case\n            when domain is null and url = 'https://www.decathlon.de/' then 'https://www.decathlon.de'\n            when domain is null and url like '%www.bergzeit.de%'then 'https://www.bergzeit.de'\n            else domain\n        end as domain,\n        case\n            when url_type is null and url = 'https://www.decathlon.de/' then 'start'\n            when url_type is null and url like '%www.bergzeit.de/p/%'then 'produktdetail'\n            else lower(url_type)\n        end as url_type,\n        url,\n        lower(overall_category) as overall_category,\n        largest_contentful_paint_s,\n        first_meaningful_paint_s,\n        first_input_delay as first_input_delay_s,\n        cumulative_layout_shift_s,\t\n        first_contentful_paint_s,\t\n        time_to_interactive_s,\n        total_blocking_time_s,\t\n        speed_index_s,\n        observed_dom_content_loaded_s,\n        observed_first_visual_change_s,\n        observed_last_visual_change_s,\n        interaction_to_next_paint,\n        time_to_first_byte\n    from `bergzeit`.`seo_analytics`.`pagespeed_api_metrics`\n    where date between \n    date_sub(current_date(), interval 180 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    /* tbd: union with old pagespeed measurement */\n)\n\nselect * from pagespeed_url_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_pagespeed_url_data`"}, "model.sql_repository_bz.stg_ga_performance_costs_CH": {"raw_sql": "with performance_costs_CH_in_CHF as(\r\n\r\n    select\r\n        parse_date('%Y%m%d', date) as date,\r\n        sourceMedium,\r\n        campaign,\r\n        impressions,\r\n        adClicks,\r\n        round(adCost,2) as adCost,\r\n        'ch' as country\r\n    from {{ source('performance_cost', 'performance_cost_CH') }}\r\n\r\n),\r\n\r\ncurrency_factor_chf as(\r\n\r\n    select * from {{ ref('stg_gsheets_currency_factor_ch') }}\r\n\r\n),\r\n\r\n\r\njoined_cost_data_with_cf as(\r\n\r\n    select * from performance_costs_CH_in_CHF\r\n    left join currency_factor_chf on date=currency_date\r\n\r\n),\r\n\r\nad_costs_in_EUR as(\r\n\r\n    select \r\n        * except(adCost),\r\n        adCost as adCost_CHF,\r\n        round(adCost*currency_factor,2) as adCost_EUR\r\n    from joined_cost_data_with_cf\r\n\r\n)\r\n\r\nselect * from ad_costs_in_EUR", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.performance_cost.performance_cost_CH", "model.sql_repository_bz.stg_gsheets_currency_factor_ch"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "stg_ga_performance_costs_CH"], "unique_id": "model.sql_repository_bz.stg_ga_performance_costs_CH", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/performance_cost/stg_ga_performance_costs_CH.sql", "original_file_path": "models/01_staging/google_analytics/performance_cost/stg_ga_performance_costs_CH.sql", "name": "stg_ga_performance_costs_CH", "alias": "stg_ga_performance_costs_CH", "checksum": {"name": "sha256", "checksum": "fbfd44ac6e1b3e245dbc64bf3e4045b9bcfb3c684ca31c7d40a415a3c59cb9e3"}, "tags": [], "refs": [["stg_gsheets_currency_factor_ch"]], "sources": [["performance_cost", "performance_cost_CH"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/performance_cost/stg_ga_performance_costs_CH.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750847.6239703, "compiled_sql": "with performance_costs_CH_in_CHF as(\n\n    select\n        parse_date('%Y%m%d', date) as date,\n        sourceMedium,\n        campaign,\n        impressions,\n        adClicks,\n        round(adCost,2) as adCost,\n        'ch' as country\n    from `bergzeit`.`analytics_datamart`.`performance_costs_79472121`\n\n),\n\ncurrency_factor_chf as(\n\n    select * from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_ch`\n\n),\n\n\njoined_cost_data_with_cf as(\n\n    select * from performance_costs_CH_in_CHF\n    left join currency_factor_chf on date=currency_date\n\n),\n\nad_costs_in_EUR as(\n\n    select \n        * except(adCost),\n        adCost as adCost_CHF,\n        round(adCost*currency_factor,2) as adCost_EUR\n    from joined_cost_data_with_cf\n\n)\n\nselect * from ad_costs_in_EUR", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_costs_CH`"}, "model.sql_repository_bz.stg_ga_performance_cost_validation": {"raw_sql": "with daily_performance_costs_all_views as(\r\n\r\n    select\r\n        parse_date('%Y%m%d', date) as date,\r\n        round(adCost_analytics,2) as adCost_analytics,\r\n        view_id,\r\n        {{ map_country_to_analytics_viewid('view_id') }} as country\r\n    from {{ source('performance_cost', 'performance_cost_validation_all_views') }}\r\n    \r\n),\r\n\r\ncreate_primary_key as (\r\n\r\n    select\r\n        {{ dbt_utils.surrogate_key(['date', 'view_id']) }}  as sk_id,\r\n        *\r\n    from daily_performance_costs_all_views\r\n\r\n)\r\n\r\nselect * from create_primary_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.map_country_to_analytics_viewid", "macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.performance_cost.performance_cost_validation_all_views"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "stg_ga_performance_cost_validation"], "unique_id": "model.sql_repository_bz.stg_ga_performance_cost_validation", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/performance_cost/stg_ga_performance_cost_validation.sql", "original_file_path": "models/01_staging/google_analytics/performance_cost/stg_ga_performance_cost_validation.sql", "name": "stg_ga_performance_cost_validation", "alias": "stg_ga_performance_cost_validation", "checksum": {"name": "sha256", "checksum": "0b3f895120d5472c7896a64f1b621d990b533908fce18bdde7bfe66700baa203"}, "tags": [], "refs": [], "sources": [["performance_cost", "performance_cost_validation_all_views"]], "description": "this model pulls the adCosts for each google analytics view on a daily basis to compare the daily fresh api data to the historical data stored in BQ", "columns": {"sk_id": {"name": "sk_id", "description": "the unique primary key created as hashed value including date and view_id", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/performance_cost/_models_ga_performance_costs.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/performance_cost/stg_ga_performance_cost_validation.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750852.2612977, "compiled_sql": "with daily_performance_costs_all_views as(\n\n    select\n        parse_date('%Y%m%d', date) as date,\n        round(adCost_analytics,2) as adCost_analytics,\n        view_id,\n        \n    case\n        when view_id = '79471425' then 'at'\n        when view_id = '79462285' then 'de'\n        when view_id = '79472121' then 'ch'\n        when view_id = '88288948' then 'be'\n        when view_id = '79469635' then 'uk'\n        when view_id = '79468944' then 'cz'\n        when view_id = '79473924' then 'dk'\n        when view_id = '79470138' then 'fi'\n        when view_id = '83921387' then 'fr'\n        when view_id = '79470139' then 'it'\n        when view_id = '84553507' then 'nl'\n        when view_id = '79471426' then 'no'\n        when view_id = '79470434' then 'pl'\n        when view_id = '79469636' then 'se'\n    end\n\n as country\n    from `bergzeit`.`analytics_datamart`.`performance_costs_daily_validation_all_views`\n    \n),\n\ncreate_primary_key as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(view_id as \n    string\n), '') as \n    string\n)))  as sk_id,\n        *\n    from daily_performance_costs_all_views\n\n)\n\nselect * from create_primary_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_cost_validation`"}, "model.sql_repository_bz.stg_ga_performance_costs_UK": {"raw_sql": "with performance_costs_UK_in_GBP as(\r\n\r\n    select\r\n        parse_date('%Y%m%d', date) as date,\r\n        sourceMedium,\r\n        campaign,\r\n        impressions,\r\n        adClicks,\r\n        round(adCost,2) as adCost,\r\n        'uk' as country\r\n    from {{ source('performance_cost', 'performance_cost_UK') }}\r\n\r\n),\r\n\r\ncurrency_factor_gb as(\r\n\r\n    select * from {{ ref('stg_gsheets_currency_factor_gb') }}\r\n\r\n),\r\n\r\n\r\njoined_cost_data_with_cf as(\r\n\r\n    select * from performance_costs_UK_in_GBP\r\n    left join currency_factor_gb on date=currency_date\r\n\r\n),\r\n\r\nad_costs_in_EUR as(\r\n\r\n    select \r\n        * except(adCost),\r\n        adCost as adCost_GBP,\r\n        round(adCost*currency_factor,2) as adCost_EUR\r\n    from joined_cost_data_with_cf\r\n\r\n)\r\n\r\nselect * from ad_costs_in_EUR", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.performance_cost.performance_cost_UK", "model.sql_repository_bz.stg_gsheets_currency_factor_gb"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "stg_ga_performance_costs_UK"], "unique_id": "model.sql_repository_bz.stg_ga_performance_costs_UK", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/performance_cost/stg_ga_performance_costs_UK.sql", "original_file_path": "models/01_staging/google_analytics/performance_cost/stg_ga_performance_costs_UK.sql", "name": "stg_ga_performance_costs_UK", "alias": "stg_ga_performance_costs_UK", "checksum": {"name": "sha256", "checksum": "e401bb1bfeefe2de2ec2bda2ef4eabaab2a827d087ddeb73bfde7b11a724c4a1"}, "tags": [], "refs": [["stg_gsheets_currency_factor_gb"]], "sources": [["performance_cost", "performance_cost_UK"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/performance_cost/stg_ga_performance_costs_UK.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750847.6589696, "compiled_sql": "with performance_costs_UK_in_GBP as(\n\n    select\n        parse_date('%Y%m%d', date) as date,\n        sourceMedium,\n        campaign,\n        impressions,\n        adClicks,\n        round(adCost,2) as adCost,\n        'uk' as country\n    from `bergzeit`.`analytics_datamart`.`performance_costs_79469635`\n\n),\n\ncurrency_factor_gb as(\n\n    select * from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_gb`\n\n),\n\n\njoined_cost_data_with_cf as(\n\n    select * from performance_costs_UK_in_GBP\n    left join currency_factor_gb on date=currency_date\n\n),\n\nad_costs_in_EUR as(\n\n    select \n        * except(adCost),\n        adCost as adCost_GBP,\n        round(adCost*currency_factor,2) as adCost_EUR\n    from joined_cost_data_with_cf\n\n)\n\nselect * from ad_costs_in_EUR", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_costs_UK`"}, "model.sql_repository_bz.stg_ga_performance_costs": {"raw_sql": "with performance_costs_EUR as (\r\n\r\n    {% for country in var('ga_ad_costs_country') %}\r\n        {% set cost_table = 'performance_cost_' + country %}\r\n            select\r\n                parse_date('%Y%m%d', date) as date,\r\n                sourceMedium,\r\n                campaign,\r\n                impressions,\r\n                adClicks,\r\n                round(adCost,2) as adCost,\r\n                lower('{{country}}') as country\r\n            from {{ source('performance_cost', cost_table) }}\r\n        where date >= '20210101'\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n),\r\n\r\nperformance_costs_CH as(\r\n\r\n    select\r\n        date,\r\n        sourceMedium,\r\n        campaign,\r\n        impressions,\r\n        adClicks,\r\n        adCost_EUR as adCost,\r\n        country\r\n    from {{ ref('stg_ga_performance_costs_CH') }}\r\n\r\n),\r\n\r\nperformance_costs_UK as(\r\n\r\n    select\r\n        date,\r\n        sourceMedium,\r\n        campaign,\r\n        impressions,\r\n        adClicks,\r\n        adCost_EUR as adCost,\r\n        country\r\n    from {{ ref('stg_ga_performance_costs_UK') }}\r\n\r\n),\r\n\r\n\r\nperformance_costs_all_in_EUR as(\r\n\r\n    select * from performance_costs_EUR\r\n    union all\r\n    select * from performance_costs_CH\r\n    union all\r\n    select * from performance_costs_UK\r\n),\r\n\r\ninclude_channel_grouping as (\r\n\r\n    select\r\n        *,\r\n        {{custom_channel_grouping('sourceMedium', 'campaign')}} as custom_channel_grouping\r\n    from performance_costs_all_in_EUR\r\n\r\n),\r\n\r\ncreate_primary_key as (\r\n\r\n    select\r\n        {{dbt_utils.surrogate_key(['date', 'sourceMedium', 'campaign','country'])}}  as sk_id,\r\n        *\r\n    from include_channel_grouping\r\n\r\n)\r\n\r\nselect * from create_primary_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.custom_channel_grouping", "macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.performance_cost.performance_cost_DE", "source.sql_repository_bz.performance_cost.performance_cost_AT", "source.sql_repository_bz.performance_cost.performance_cost_BE", "source.sql_repository_bz.performance_cost.performance_cost_CZ", "source.sql_repository_bz.performance_cost.performance_cost_DK", "source.sql_repository_bz.performance_cost.performance_cost_FI", "source.sql_repository_bz.performance_cost.performance_cost_FR", "source.sql_repository_bz.performance_cost.performance_cost_IT", "source.sql_repository_bz.performance_cost.performance_cost_NL", "source.sql_repository_bz.performance_cost.performance_cost_NO", "source.sql_repository_bz.performance_cost.performance_cost_PL", "source.sql_repository_bz.performance_cost.performance_cost_SE", "model.sql_repository_bz.stg_ga_performance_costs_CH", "model.sql_repository_bz.stg_ga_performance_costs_UK"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "stg_ga_performance_costs"], "unique_id": "model.sql_repository_bz.stg_ga_performance_costs", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/performance_cost/stg_ga_performance_costs.sql", "original_file_path": "models/01_staging/google_analytics/performance_cost/stg_ga_performance_costs.sql", "name": "stg_ga_performance_costs", "alias": "stg_ga_performance_costs", "checksum": {"name": "sha256", "checksum": "8dfb10b97d53593e4aaa51a84418c73989428b5a7f4611ff24c6ad667cba98ec"}, "tags": [], "refs": [["stg_ga_performance_costs_CH"], ["stg_ga_performance_costs_UK"]], "sources": [["performance_cost", "performance_cost_DE"], ["performance_cost", "performance_cost_AT"], ["performance_cost", "performance_cost_BE"], ["performance_cost", "performance_cost_CZ"], ["performance_cost", "performance_cost_DK"], ["performance_cost", "performance_cost_FI"], ["performance_cost", "performance_cost_FR"], ["performance_cost", "performance_cost_IT"], ["performance_cost", "performance_cost_NL"], ["performance_cost", "performance_cost_NO"], ["performance_cost", "performance_cost_PL"], ["performance_cost", "performance_cost_SE"]], "description": "this model combines the adCosts, clicks and impressions data per source/medium and campaign for all available countries and adds country and channel grouping as variables", "columns": {"sk_id": {"name": "sk_id", "description": "the unique primary key created as hashed value including date, country, sourceMedium and campaign", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/performance_cost/_models_ga_performance_costs.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/performance_cost/stg_ga_performance_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750852.257031, "compiled_sql": "with performance_costs_EUR as (\n\n    \n        \n            select\n                parse_date('%Y%m%d', date) as date,\n                sourceMedium,\n                campaign,\n                impressions,\n                adClicks,\n                round(adCost,2) as adCost,\n                lower('DE') as country\n            from `bergzeit`.`analytics_datamart`.`performance_costs_79462285`\n        where date >= '20210101'\n    union all\n    \n        \n            select\n                parse_date('%Y%m%d', date) as date,\n                sourceMedium,\n                campaign,\n                impressions,\n                adClicks,\n                round(adCost,2) as adCost,\n                lower('AT') as country\n            from `bergzeit`.`analytics_datamart`.`performance_costs_79471425`\n        where date >= '20210101'\n    union all\n    \n        \n            select\n                parse_date('%Y%m%d', date) as date,\n                sourceMedium,\n                campaign,\n                impressions,\n                adClicks,\n                round(adCost,2) as adCost,\n                lower('BE') as country\n            from `bergzeit`.`analytics_datamart`.`performance_costs_88288948`\n        where date >= '20210101'\n    union all\n    \n        \n            select\n                parse_date('%Y%m%d', date) as date,\n                sourceMedium,\n                campaign,\n                impressions,\n                adClicks,\n                round(adCost,2) as adCost,\n                lower('CZ') as country\n            from `bergzeit`.`analytics_datamart`.`performance_costs_79468944`\n        where date >= '20210101'\n    union all\n    \n        \n            select\n                parse_date('%Y%m%d', date) as date,\n                sourceMedium,\n                campaign,\n                impressions,\n                adClicks,\n                round(adCost,2) as adCost,\n                lower('DK') as country\n            from `bergzeit`.`analytics_datamart`.`performance_costs_79473924`\n        where date >= '20210101'\n    union all\n    \n        \n            select\n                parse_date('%Y%m%d', date) as date,\n                sourceMedium,\n                campaign,\n                impressions,\n                adClicks,\n                round(adCost,2) as adCost,\n                lower('FI') as country\n            from `bergzeit`.`analytics_datamart`.`performance_costs_79470138`\n        where date >= '20210101'\n    union all\n    \n        \n            select\n                parse_date('%Y%m%d', date) as date,\n                sourceMedium,\n                campaign,\n                impressions,\n                adClicks,\n                round(adCost,2) as adCost,\n                lower('FR') as country\n            from `bergzeit`.`analytics_datamart`.`performance_costs_83921387`\n        where date >= '20210101'\n    union all\n    \n        \n            select\n                parse_date('%Y%m%d', date) as date,\n                sourceMedium,\n                campaign,\n                impressions,\n                adClicks,\n                round(adCost,2) as adCost,\n                lower('IT') as country\n            from `bergzeit`.`analytics_datamart`.`performance_costs_79470139`\n        where date >= '20210101'\n    union all\n    \n        \n            select\n                parse_date('%Y%m%d', date) as date,\n                sourceMedium,\n                campaign,\n                impressions,\n                adClicks,\n                round(adCost,2) as adCost,\n                lower('NL') as country\n            from `bergzeit`.`analytics_datamart`.`performance_costs_84553507`\n        where date >= '20210101'\n    union all\n    \n        \n            select\n                parse_date('%Y%m%d', date) as date,\n                sourceMedium,\n                campaign,\n                impressions,\n                adClicks,\n                round(adCost,2) as adCost,\n                lower('NO') as country\n            from `bergzeit`.`analytics_datamart`.`performance_costs_79471426`\n        where date >= '20210101'\n    union all\n    \n        \n            select\n                parse_date('%Y%m%d', date) as date,\n                sourceMedium,\n                campaign,\n                impressions,\n                adClicks,\n                round(adCost,2) as adCost,\n                lower('PL') as country\n            from `bergzeit`.`analytics_datamart`.`performance_costs_79470434`\n        where date >= '20210101'\n    union all\n    \n        \n            select\n                parse_date('%Y%m%d', date) as date,\n                sourceMedium,\n                campaign,\n                impressions,\n                adClicks,\n                round(adCost,2) as adCost,\n                lower('SE') as country\n            from `bergzeit`.`analytics_datamart`.`performance_costs_79469636`\n        where date >= '20210101'\n    \n    \n\n),\n\nperformance_costs_CH as(\n\n    select\n        date,\n        sourceMedium,\n        campaign,\n        impressions,\n        adClicks,\n        adCost_EUR as adCost,\n        country\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_costs_CH`\n\n),\n\nperformance_costs_UK as(\n\n    select\n        date,\n        sourceMedium,\n        campaign,\n        impressions,\n        adClicks,\n        adCost_EUR as adCost,\n        country\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_costs_UK`\n\n),\n\n\nperformance_costs_all_in_EUR as(\n\n    select * from performance_costs_EUR\n    union all\n    select * from performance_costs_CH\n    union all\n    select * from performance_costs_UK\n),\n\ninclude_channel_grouping as (\n\n    select\n        *,\n        \n\ncase \n    when sourceMedium = 'google / cpc' and regexp_contains(campaign,  '_1_|_4_|_5_|_6_') = false \n        then 'Generic Paid Search Google'\n    when sourceMedium = 'google / cpc' and regexp_contains(campaign,  '_4_|_6_')  \n        then 'Generic Paid Shopping Google'\n    when sourceMedium = 'bing / cpc' and regexp_contains(campaign,  'de_5_display retargeting|_1_') = false \n        then 'Generic Paid Search Bing'\n    when sourceMedium in ('google / cpc', 'bing / cpc') and regexp_contains(campaign,  '_1_') \n        then 'Brand Paid Search'\n    when regexp_contains(sourceMedium, 'facebook|instagram|pinterest|youtube') and regexp_contains(sourceMedium,  '/ cpc') \n        then 'Social Paid'\n    when sourceMedium = 'psm / cpc' or regexp_contains(sourceMedium,  'mydealz|beslist|trovaprezzi|shoptail|kelkoo') or campaign = 'ps_outdoordeals'\n        then 'PSM'\n    when regexp_contains(sourceMedium,  'affiliate|awin|redbrain|ulligunde|bike-magazin|outdoor-professionell')\n        then 'Affiliate'\n    when sourceMedium in ('bsmart / cpc', 'bsd / cpc') or regexp_contains(sourceMedium,  'criteo') or regexp_contains(campaign, '_5_display')\n        then 'Display'\n    when sourceMedium in ('taboola / cpc', 'outbrain / cpc') or campaign = '_branding_'\n        then 'Branding'\n\nelse 'nicht zugeordnet' end\n\n as custom_channel_grouping\n    from performance_costs_all_in_EUR\n\n),\n\ncreate_primary_key as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(sourceMedium as \n    string\n), '') || '-' || coalesce(cast(campaign as \n    string\n), '') || '-' || coalesce(cast(country as \n    string\n), '') as \n    string\n)))  as sk_id,\n        *\n    from include_channel_grouping\n\n)\n\nselect * from create_primary_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_costs`"}, "model.sql_repository_bz.stg_ga_product_detail_pages": {"raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy = 'insert_overwrite',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'pv_date', 'data_type': 'date', 'granularity': 'day' }\r\n    )\r\n}}\r\n\r\nselect\r\n    parse_date('%Y%m%d', date) AS pv_date,\r\n    visitid || '_' || fullvisitorid as pv_session_id,\r\n    channelgrouping as pv_acquisition_channel,\r\n    split(hits.page.pagepath,'?')[safe_offset(0)] as pv_page,\r\n    hits.page.hostname as pv_hostname,\r\n    device.devicecategory as pv_device,\r\n    cd.value as cd9_product_id,\r\n    hits.isentrance as pv_is_entrance  \r\nfrom\r\n  {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n  unnest(hits) as hits,\r\n  unnest(hits.customdimensions) as cd\r\nwhere \r\n  _TABLE_SUFFIX not like '%intraday%'\r\n  and hits.type = 'PAGE'\r\n  and hits.page.pagepath like '%/p/%'\r\n  and cd.index = 9\r\n\r\n/* SH: removed jinja filter with {# ... #} due to work in progress */\r\n{#{% if target.name != 'deployment' %}\r\n\r\n  and PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(3) }}\r\n\r\n{% else %} #}\r\n\r\n{% if is_incremental() %}\r\n\r\n  and \r\n    _TABLE_SUFFIX between FORMAT_DATE('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n\r\n    {% else %}\r\n\r\n  and \r\n    PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between {{ get_financial_year_to_yesterday_date_range()}}\r\n\r\n{% endif %}\r\n{#{% endif %} #}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.sql_repository_bz.get_financial_year_to_yesterday_date_range"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "pv_date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "stg_ga_product_detail_pages"], "unique_id": "model.sql_repository_bz.stg_ga_product_detail_pages", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/pages/stg_ga_product_detail_pages.sql", "original_file_path": "models/01_staging/google_analytics/pages/stg_ga_product_detail_pages.sql", "name": "stg_ga_product_detail_pages", "alias": "stg_ga_product_detail_pages", "checksum": {"name": "sha256", "checksum": "e735545e03594e729ec99c7ed90f6109801223b7516e9fa8a44be9ad2c720c19"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model extracts custom dim 9 (product sku) for every page", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/pages/_models_ga_pages.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/stg_ga_product_detail_pages.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "pv_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.3026547, "compiled_sql": "\n\nselect\n    parse_date('%Y%m%d', date) AS pv_date,\n    visitid || '_' || fullvisitorid as pv_session_id,\n    channelgrouping as pv_acquisition_channel,\n    split(hits.page.pagepath,'?')[safe_offset(0)] as pv_page,\n    hits.page.hostname as pv_hostname,\n    device.devicecategory as pv_device,\n    cd.value as cd9_product_id,\n    hits.isentrance as pv_is_entrance  \nfrom\n  `bergzeit`.`79472326`.`ga_sessions_*`,\n  unnest(hits) as hits,\n  unnest(hits.customdimensions) as cd\nwhere \n  _TABLE_SUFFIX not like '%intraday%'\n  and hits.type = 'PAGE'\n  and hits.page.pagepath like '%/p/%'\n  and cd.index = 9\n\n/* SH: removed jinja filter with  due to work in progress */\n\n\n\n\n  and \n    _TABLE_SUFFIX between FORMAT_DATE('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_product_detail_pages`"}, "model.sql_repository_bz.stg_ga_internal_search": {"raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy = 'insert_overwrite',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'ga_date', 'data_type': 'date', 'granularity': 'day' }\r\n    )\r\n}}\r\n\r\nselect distinct\r\n    parse_date('%Y%m%d', date) as ga_date,\r\n    fullvisitorid || '_' || visitid as ga_session_id,\r\n    hits.page.hostname as ga_hostname,\r\n    hits.page.searchkeyword as internal_search_keyword\r\nfrom\r\n    {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n    unnest(hits) as hits\r\nwhere\r\n    _TABLE_SUFFIX not like '%intraday%'\r\n    and hits.page.searchkeyword is not null\r\n\r\n    {% if is_incremental() %}\r\n    and _TABLE_SUFFIX between FORMAT_DATE('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n    {% else %}\r\n    and PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(30) }}\r\n    {% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "ga_date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "stg_ga_internal_search"], "unique_id": "model.sql_repository_bz.stg_ga_internal_search", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/pages/stg_ga_internal_search.sql", "original_file_path": "models/01_staging/google_analytics/pages/stg_ga_internal_search.sql", "name": "stg_ga_internal_search", "alias": "stg_ga_internal_search", "checksum": {"name": "sha256", "checksum": "b004e926a7b5f80ac536985ce5eed11772e61d2475b6d3e93b88125a6d939e0a"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model extracts the daily internal search keywords by hostname", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/pages/_models_ga_pages.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/stg_ga_internal_search.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "ga_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.3062952, "compiled_sql": "\n\nselect distinct\n    parse_date('%Y%m%d', date) as ga_date,\n    fullvisitorid || '_' || visitid as ga_session_id,\n    hits.page.hostname as ga_hostname,\n    hits.page.searchkeyword as internal_search_keyword\nfrom\n    `bergzeit`.`79472326`.`ga_sessions_*`,\n    unnest(hits) as hits\nwhere\n    _TABLE_SUFFIX not like '%intraday%'\n    and hits.page.searchkeyword is not null\n\n    \n    and _TABLE_SUFFIX between FORMAT_DATE('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\n    ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_internal_search`"}, "model.sql_repository_bz.stg_ga_page_types": {"raw_sql": "{{ \r\n    config(\r\n        materialized='incremental',\r\n        incremental_strategy = 'insert_overwrite',\r\n        on_schema_change='fail',\r\n        partition_by={ 'field': 'date', 'data_type': 'date', 'granularity': 'day' }\r\n    )\r\n}}\r\n\r\nwith page_paths_and_types as (\r\n\r\n    select distinct\r\n        parse_date('%Y%m%d', date) as date,\r\n        split(hits.page.pagepath,'?')[safe_offset(0)] as page_path,\r\n        custom_dimensions.value as page_type\r\n    from\r\n        {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n        unnest(hits) as hits,\r\n        unnest(hits.customDimensions) as custom_dimensions\r\n    where\r\n        _TABLE_SUFFIX not like '%intraday%'\r\n        and hits.type = 'PAGE' \r\n        and custom_dimensions.index = 4\r\n\r\n        {% if is_incremental() %}\r\n        and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\r\n        {% else %}\r\n        and _TABLE_SUFFIX between '20220101' and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\r\n        {% endif %}\r\n\r\n)\r\n\r\nselect * from page_paths_and_types", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "stg_ga_page_types"], "unique_id": "model.sql_repository_bz.stg_ga_page_types", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/pages/stg_ga_page_types.sql", "original_file_path": "models/01_staging/google_analytics/pages/stg_ga_page_types.sql", "name": "stg_ga_page_types", "alias": "stg_ga_page_types", "checksum": {"name": "sha256", "checksum": "29b819950ba61e58c7856afaaaee7b60200e63ff1cc4aea3c52ef8cf53cdadca"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model contains the daily requested pagepaths and their pagetype", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/pages/_models_ga_pages.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/stg_ga_page_types.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.2941105, "compiled_sql": "\n\nwith page_paths_and_types as (\n\n    select distinct\n        parse_date('%Y%m%d', date) as date,\n        split(hits.page.pagepath,'?')[safe_offset(0)] as page_path,\n        custom_dimensions.value as page_type\n    from\n        `bergzeit`.`79472326`.`ga_sessions_*`,\n        unnest(hits) as hits,\n        unnest(hits.customDimensions) as custom_dimensions\n    where\n        _TABLE_SUFFIX not like '%intraday%'\n        and hits.type = 'PAGE' \n        and custom_dimensions.index = 4\n\n        \n        and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\n        \n\n)\n\nselect * from page_paths_and_types", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_page_types`"}, "model.sql_repository_bz.stg_ga_pageviews": {"raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy = 'insert_overwrite',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'pv_date', 'data_type': 'date', 'granularity': 'day' }\r\n    )\r\n}}\r\n\r\n/* page views grouped by day, hostname and device */\r\nwith page_views as (\r\n\r\n    select\r\n        parse_date('%Y%m%d', date) as pv_date,\r\n        split(hits.page.pagepath,'?')[safe_offset(0)] as pv_page,\r\n        hits.page.hostname as pv_hostname,\r\n        device.devicecategory as pv_device,\r\n        --hits.page.searchkeyword as page_search_keyword,\r\n        count(*) as url_page_views  \r\n    from\r\n        {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n        unnest(hits) as hits\r\n    where\r\n        _TABLE_SUFFIX not like '%intraday%'\r\n        and hits.type = 'PAGE' \r\n      \r\n        {% if is_incremental() %}\r\n          and _TABLE_SUFFIX between FORMAT_DATE('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n        {% else %}\r\n          and PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(90) }}\r\n        {% endif %}\r\n    group by 1,2,3,4\r\n\r\n)\r\n\r\nselect * from page_views", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "pv_date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "stg_ga_pageviews"], "unique_id": "model.sql_repository_bz.stg_ga_pageviews", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/pages/stg_ga_pageviews.sql", "original_file_path": "models/01_staging/google_analytics/pages/stg_ga_pageviews.sql", "name": "stg_ga_pageviews", "alias": "stg_ga_pageviews", "checksum": {"name": "sha256", "checksum": "9086c155fb6c73f411085fea7676e1b0d3170c6ae87bae5bc07f4743e135c0b8"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model contains the daily pageviews per pagepath and a classification of each pagepath by gender", "columns": {"pv_page": {"name": "pv_page", "description": "strips the pagepath from utm parameters", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pv_page_gender": {"name": "pv_page_gender", "description": "searches for gender information in the pagepath and then classifies it as the respective gender", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/pages/_models_ga_pages.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/stg_ga_pageviews.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "pv_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.2989366, "compiled_sql": "\n\n/* page views grouped by day, hostname and device */\nwith page_views as (\n\n    select\n        parse_date('%Y%m%d', date) as pv_date,\n        split(hits.page.pagepath,'?')[safe_offset(0)] as pv_page,\n        hits.page.hostname as pv_hostname,\n        device.devicecategory as pv_device,\n        --hits.page.searchkeyword as page_search_keyword,\n        count(*) as url_page_views  \n    from\n        `bergzeit`.`79472326`.`ga_sessions_*`,\n        unnest(hits) as hits\n    where\n        _TABLE_SUFFIX not like '%intraday%'\n        and hits.type = 'PAGE' \n      \n        \n          and _TABLE_SUFFIX between FORMAT_DATE('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\n        \n    group by 1,2,3,4\n\n)\n\nselect * from page_views", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_pageviews`"}, "model.sql_repository_bz.stg_ga_pagespeed_per_pagetype": {"raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy = 'insert_overwrite',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'ga_date', 'data_type': 'date', 'granularity': 'day' }\r\n    )\r\n}}\r\n\r\nwith daily_pagespeed_per_pagetype as(\r\n    /* all page load times are in msec*/\r\n    select\r\n        parse_date('%Y%m%d', date) as ga_date,\r\n        device.deviceCategory as ga_device_category,\r\n       \r\n        round(avg((select hits.latencyTracking.serverResponseTime from unnest(hits.customDimensions) group by hits.latencyTracking.serverResponseTime )),2) as ga_srt_total,\r\n        /*calculate the srt for each pagetype*/\r\n        {% for pagetype in var('ga_pagetype') %}\r\n            round(avg((select hits.latencyTracking.serverResponseTime from unnest(hits.customDimensions) where index = 4 and value = '{{pagetype}}' group by hits.latencyTracking.serverResponseTime )),2) as ga_srt_{{pagetype}},\r\n        {% endfor %}\r\n\r\n        round(avg((select hits.latencyTracking.domContentLoadedTime from unnest(hits.customDimensions) group by hits.latencyTracking.domContentLoadedTime )),2) as ga_clt_total,\r\n        /*calculate the clt for each pagetype*/\r\n        {% for pagetype in var('ga_pagetype') %}\r\n            round(avg((select hits.latencyTracking.domContentLoadedTime from unnest(hits.customDimensions) where index = 4 and value = '{{pagetype}}' group by hits.latencyTracking.domContentLoadedTime )),2) as ga_clt_{{pagetype}},\r\n        {% endfor %}\r\n\r\n        channelgrouping as ga_acquisition_channel\r\n\r\n    from {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n        unnest (hits) as hits\r\n    where _TABLE_SUFFIX not like '%intraday%'\r\n        and hits.page.hostname = 'www.bergzeit.de'\r\n        and hits.latencyTracking.pageLoadSample is not null\r\n\r\n        {% if is_incremental() %}\r\n        and _TABLE_SUFFIX between FORMAT_DATE('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n        {% else %}\r\n        and PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(30) }}\r\n        {% endif %}\r\n\r\n    group by ga_date, ga_device_category, ga_acquisition_channel\r\n),\r\n\r\n/* create a unique identifier for each event */\r\ncreate_surrogate_key as(\r\n\r\n    select\r\n        *,\r\n        {{ dbt_utils.surrogate_key([ 'ga_date','ga_device_category', 'ga_acquisition_channel'])}}  as sk_id\r\n    from daily_pagespeed_per_pagetype\r\n\r\n)\r\n\r\nselect * from create_surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.sql_repository_bz.get_last_n_days_date_range", "macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "ga_date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "stg_ga_pagespeed_per_pagetype"], "unique_id": "model.sql_repository_bz.stg_ga_pagespeed_per_pagetype", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/pages/stg_ga_pagespeed_per_pagetype.sql", "original_file_path": "models/01_staging/google_analytics/pages/stg_ga_pagespeed_per_pagetype.sql", "name": "stg_ga_pagespeed_per_pagetype", "alias": "stg_ga_pagespeed_per_pagetype", "checksum": {"name": "sha256", "checksum": "3c618bf3710bcbfe940ca24de39a834fd8fbc5f6778f918589b49c2cc8a5d56d"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model contains the daily average clt and srt for each pagetype", "columns": {"sk_id": {"name": "sk_id", "description": "the unique primary key created as hashed value", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/pages/_models_ga_pages.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/stg_ga_pagespeed_per_pagetype.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "ga_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.2898357, "compiled_sql": "\n\nwith daily_pagespeed_per_pagetype as(\n    /* all page load times are in msec*/\n    select\n        parse_date('%Y%m%d', date) as ga_date,\n        device.deviceCategory as ga_device_category,\n       \n        round(avg((select hits.latencyTracking.serverResponseTime from unnest(hits.customDimensions) group by hits.latencyTracking.serverResponseTime )),2) as ga_srt_total,\n        /*calculate the srt for each pagetype*/\n        \n            round(avg((select hits.latencyTracking.serverResponseTime from unnest(hits.customDimensions) where index = 4 and value = 'start' group by hits.latencyTracking.serverResponseTime )),2) as ga_srt_start,\n        \n            round(avg((select hits.latencyTracking.serverResponseTime from unnest(hits.customDimensions) where index = 4 and value = 'productdetail' group by hits.latencyTracking.serverResponseTime )),2) as ga_srt_productdetail,\n        \n            round(avg((select hits.latencyTracking.serverResponseTime from unnest(hits.customDimensions) where index = 4 and value = 'category' group by hits.latencyTracking.serverResponseTime )),2) as ga_srt_category,\n        \n            round(avg((select hits.latencyTracking.serverResponseTime from unnest(hits.customDimensions) where index = 4 and value = 'brand' group by hits.latencyTracking.serverResponseTime )),2) as ga_srt_brand,\n        \n            round(avg((select hits.latencyTracking.serverResponseTime from unnest(hits.customDimensions) where index = 4 and value = 'search' group by hits.latencyTracking.serverResponseTime )),2) as ga_srt_search,\n        \n            round(avg((select hits.latencyTracking.serverResponseTime from unnest(hits.customDimensions) where index = 4 and value = 'checkout' group by hits.latencyTracking.serverResponseTime )),2) as ga_srt_checkout,\n        \n            round(avg((select hits.latencyTracking.serverResponseTime from unnest(hits.customDimensions) where index = 4 and value = 'misc' group by hits.latencyTracking.serverResponseTime )),2) as ga_srt_misc,\n        \n            round(avg((select hits.latencyTracking.serverResponseTime from unnest(hits.customDimensions) where index = 4 and value = 'thankyou' group by hits.latencyTracking.serverResponseTime )),2) as ga_srt_thankyou,\n        \n            round(avg((select hits.latencyTracking.serverResponseTime from unnest(hits.customDimensions) where index = 4 and value = 'magazine' group by hits.latencyTracking.serverResponseTime )),2) as ga_srt_magazine,\n        \n\n        round(avg((select hits.latencyTracking.domContentLoadedTime from unnest(hits.customDimensions) group by hits.latencyTracking.domContentLoadedTime )),2) as ga_clt_total,\n        /*calculate the clt for each pagetype*/\n        \n            round(avg((select hits.latencyTracking.domContentLoadedTime from unnest(hits.customDimensions) where index = 4 and value = 'start' group by hits.latencyTracking.domContentLoadedTime )),2) as ga_clt_start,\n        \n            round(avg((select hits.latencyTracking.domContentLoadedTime from unnest(hits.customDimensions) where index = 4 and value = 'productdetail' group by hits.latencyTracking.domContentLoadedTime )),2) as ga_clt_productdetail,\n        \n            round(avg((select hits.latencyTracking.domContentLoadedTime from unnest(hits.customDimensions) where index = 4 and value = 'category' group by hits.latencyTracking.domContentLoadedTime )),2) as ga_clt_category,\n        \n            round(avg((select hits.latencyTracking.domContentLoadedTime from unnest(hits.customDimensions) where index = 4 and value = 'brand' group by hits.latencyTracking.domContentLoadedTime )),2) as ga_clt_brand,\n        \n            round(avg((select hits.latencyTracking.domContentLoadedTime from unnest(hits.customDimensions) where index = 4 and value = 'search' group by hits.latencyTracking.domContentLoadedTime )),2) as ga_clt_search,\n        \n            round(avg((select hits.latencyTracking.domContentLoadedTime from unnest(hits.customDimensions) where index = 4 and value = 'checkout' group by hits.latencyTracking.domContentLoadedTime )),2) as ga_clt_checkout,\n        \n            round(avg((select hits.latencyTracking.domContentLoadedTime from unnest(hits.customDimensions) where index = 4 and value = 'misc' group by hits.latencyTracking.domContentLoadedTime )),2) as ga_clt_misc,\n        \n            round(avg((select hits.latencyTracking.domContentLoadedTime from unnest(hits.customDimensions) where index = 4 and value = 'thankyou' group by hits.latencyTracking.domContentLoadedTime )),2) as ga_clt_thankyou,\n        \n            round(avg((select hits.latencyTracking.domContentLoadedTime from unnest(hits.customDimensions) where index = 4 and value = 'magazine' group by hits.latencyTracking.domContentLoadedTime )),2) as ga_clt_magazine,\n        \n\n        channelgrouping as ga_acquisition_channel\n\n    from `bergzeit`.`79472326`.`ga_sessions_*`,\n        unnest (hits) as hits\n    where _TABLE_SUFFIX not like '%intraday%'\n        and hits.page.hostname = 'www.bergzeit.de'\n        and hits.latencyTracking.pageLoadSample is not null\n\n        \n        and _TABLE_SUFFIX between FORMAT_DATE('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\n        \n\n    group by ga_date, ga_device_category, ga_acquisition_channel\n),\n\n/* create a unique identifier for each event */\ncreate_surrogate_key as(\n\n    select\n        *,\n        to_hex(md5(cast(coalesce(cast(ga_date as \n    string\n), '') || '-' || coalesce(cast(ga_device_category as \n    string\n), '') || '-' || coalesce(cast(ga_acquisition_channel as \n    string\n), '') as \n    string\n)))  as sk_id\n    from daily_pagespeed_per_pagetype\n\n)\n\nselect * from create_surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_pagespeed_per_pagetype`"}, "model.sql_repository_bz.stg_ga_product_performance_profit_bidding": {"raw_sql": "select\r\n\r\n    parse_date('%Y%m%d', date) as ga_date,\r\n    visitid || '_' || fullvisitorid as ga_session_id,\r\n    trafficSource.adwordsClickInfo.customerId AS AdAccountId,\r\n    trafficSource.adwordsClickInfo.gclId AS gclid,\r\n    hits.page.hostname as ga_hostname,\r\n    {{extract_country_from_hostname('hits.page.hostname')}} as country_identifier,\r\n    hits.item.transactionId AS ga_transaction_id,\r\n    product.productsku as ga_productid,\r\n    product.productBrand as ga_brand,\r\n    array_reverse(split(split(product.v2productcategory,' > ')[offset(0)],'/'))[offset(0)] as ga_product_category,\r\n    product.productrevenue / 1000000 as ga_product_revenue,\r\n    product.productquantity as ga_product_quantity,  \r\n    hits.transaction.transactionRevenue/ 1000000 AS ga_transaction_revenue,\r\n    SUM(product.productRevenue / 1000000) OVER (PARTITION BY hits.item.transactionId) AS ga_sum_product_revenue,\r\n    ifnull(\r\n      case\r\n      when hits.transaction.transactioncoupon != \"(not set)\" then safe_cast(split(hits.transaction.transactioncoupon,' | ')[ offset (1)] as float64)\r\n    else 0\r\n    end, 0 ) as ga_couponvalue\r\n\r\n  from\r\n   {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n    unnest(hits) as hits,\r\n    unnest(hits.product) as product\r\n\r\nwhere   \r\n    _TABLE_SUFFIX not like '%intraday%'\r\n    and parse_date('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(2) }}\r\n    and productBrand != 'Erlebniswelt'\r\n    and hits.item.transactionid is not null\r\n    and productrevenue > 0\r\n    and hits.transaction.transactionRevenue > 0", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.extract_country_from_hostname", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "products", "stg_ga_product_performance_profit_bidding"], "unique_id": "model.sql_repository_bz.stg_ga_product_performance_profit_bidding", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/products/stg_ga_product_performance_profit_bidding.sql", "original_file_path": "models/01_staging/google_analytics/products/stg_ga_product_performance_profit_bidding.sql", "name": "stg_ga_product_performance_profit_bidding", "alias": "stg_ga_product_performance_profit_bidding", "checksum": {"name": "sha256", "checksum": "528aac3ee53d2dd7481134002651e41f47f6ac06176a6d4e719c65331fd0c029"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model lists product performance for profit bidding (last 2 days only)", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/products/_models_ga_products.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/products/stg_ga_product_performance_profit_bidding.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750852.3678994, "compiled_sql": "select\n\n    parse_date('%Y%m%d', date) as ga_date,\n    visitid || '_' || fullvisitorid as ga_session_id,\n    trafficSource.adwordsClickInfo.customerId AS AdAccountId,\n    trafficSource.adwordsClickInfo.gclId AS gclid,\n    hits.page.hostname as ga_hostname,\n    \n    case\n        when hits.page.hostname like '%co.uk%' then split(hits.page.hostname, '.')[ offset (3)] \n        else split(hits.page.hostname, '.')[offset(2)] \n    end\n\n as country_identifier,\n    hits.item.transactionId AS ga_transaction_id,\n    product.productsku as ga_productid,\n    product.productBrand as ga_brand,\n    array_reverse(split(split(product.v2productcategory,' > ')[offset(0)],'/'))[offset(0)] as ga_product_category,\n    product.productrevenue / 1000000 as ga_product_revenue,\n    product.productquantity as ga_product_quantity,  \n    hits.transaction.transactionRevenue/ 1000000 AS ga_transaction_revenue,\n    SUM(product.productRevenue / 1000000) OVER (PARTITION BY hits.item.transactionId) AS ga_sum_product_revenue,\n    ifnull(\n      case\n      when hits.transaction.transactioncoupon != \"(not set)\" then safe_cast(split(hits.transaction.transactioncoupon,' | ')[ offset (1)] as float64)\n    else 0\n    end, 0 ) as ga_couponvalue\n\n  from\n   `bergzeit`.`79472326`.`ga_sessions_*`,\n    unnest(hits) as hits,\n    unnest(hits.product) as product\n\nwhere   \n    _TABLE_SUFFIX not like '%intraday%'\n    and parse_date('%Y%m%d', _TABLE_SUFFIX) between \n    date_sub(current_date(), interval 2 day)\n    and date_sub(current_date(), interval 1 day)\n\n    and productBrand != 'Erlebniswelt'\n    and hits.item.transactionid is not null\n    and productrevenue > 0\n    and hits.transaction.transactionRevenue > 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_product_performance_profit_bidding`"}, "model.sql_repository_bz.stg_ga_product_checkouts": {"raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy = 'insert_overwrite',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'ga_date', 'data_type': 'date', 'granularity': 'day' }\r\n    ) \r\n}} \r\n\r\nselect\r\n\r\n    parse_date('%Y%m%d', date) as ga_date,\r\n    visitid || '_' || fullvisitorid as ga_session_id,\r\n    trafficSource.adwordsClickInfo.customerId AS AdAccountId,\r\n    trafficSource.adwordsClickInfo.gclId AS gclid,\r\n    hits.page.hostname as ga_hostname,\r\n    {{extract_country_from_hostname('hits.page.hostname')}} as ga_account,\r\n    hits.item.transactionId AS ga_transaction_id,\r\n    product.productsku as ga_productid,\r\n    product.productBrand as ga_brand,\r\n    array_reverse(split(split(product.v2productcategory,' > ')[offset(0)],'/'))[offset(0)] as ga_product_category,\r\n    product.productrevenue / 1000000 as ga_product_revenue,\r\n    product.productquantity as ga_product_quantity,  \r\n    hits.transaction.transactionRevenue/ 1000000 AS ga_transaction_revenue,\r\n    SUM(product.productRevenue / 1000000) OVER (PARTITION BY hits.item.transactionId) AS ga_sum_product_revenue,\r\n    ifnull(\r\n      case\r\n      when hits.transaction.transactioncoupon != \"(not set)\" then safe_cast(split(hits.transaction.transactioncoupon,' | ')[ offset (1)] as float64)\r\n    else 0\r\n    end, 0 ) as ga_couponvalue\r\n\r\n  from\r\n   {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n    unnest(hits) as hits,\r\n    unnest(hits.product) as product\r\n\r\nwhere \r\n    _TABLE_SUFFIX not like '%intraday%'\r\n    and hits.item.transactionid is not null\r\n    and productrevenue > 0\r\n    and hits.transaction.transactionRevenue > 0\r\n\r\n\r\n{% if is_incremental() %}\r\n\r\n    and \r\n      _TABLE_SUFFIX between FORMAT_DATE('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n\r\n      {% else %}\r\n\r\n    and \r\n      PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between  {{ get_financial_year_to_yesterday_date_range()}}\r\n\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.extract_country_from_hostname", "macro.dbt.is_incremental", "macro.sql_repository_bz.get_financial_year_to_yesterday_date_range"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "ga_date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "products", "stg_ga_product_checkouts"], "unique_id": "model.sql_repository_bz.stg_ga_product_checkouts", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/products/stg_ga_product_checkouts.sql", "original_file_path": "models/01_staging/google_analytics/products/stg_ga_product_checkouts.sql", "name": "stg_ga_product_checkouts", "alias": "stg_ga_product_checkouts", "checksum": {"name": "sha256", "checksum": "248e2d2fb33328920937cfdc119b57965c9e9931ab2c220a618ceac1c2f81f2a"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model extracts products in checkout", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/products/_models_ga_products.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/products/stg_ga_product_checkouts.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "ga_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.3714042, "compiled_sql": " \n\nselect\n\n    parse_date('%Y%m%d', date) as ga_date,\n    visitid || '_' || fullvisitorid as ga_session_id,\n    trafficSource.adwordsClickInfo.customerId AS AdAccountId,\n    trafficSource.adwordsClickInfo.gclId AS gclid,\n    hits.page.hostname as ga_hostname,\n    \n    case\n        when hits.page.hostname like '%co.uk%' then split(hits.page.hostname, '.')[ offset (3)] \n        else split(hits.page.hostname, '.')[offset(2)] \n    end\n\n as ga_account,\n    hits.item.transactionId AS ga_transaction_id,\n    product.productsku as ga_productid,\n    product.productBrand as ga_brand,\n    array_reverse(split(split(product.v2productcategory,' > ')[offset(0)],'/'))[offset(0)] as ga_product_category,\n    product.productrevenue / 1000000 as ga_product_revenue,\n    product.productquantity as ga_product_quantity,  \n    hits.transaction.transactionRevenue/ 1000000 AS ga_transaction_revenue,\n    SUM(product.productRevenue / 1000000) OVER (PARTITION BY hits.item.transactionId) AS ga_sum_product_revenue,\n    ifnull(\n      case\n      when hits.transaction.transactioncoupon != \"(not set)\" then safe_cast(split(hits.transaction.transactioncoupon,' | ')[ offset (1)] as float64)\n    else 0\n    end, 0 ) as ga_couponvalue\n\n  from\n   `bergzeit`.`79472326`.`ga_sessions_*`,\n    unnest(hits) as hits,\n    unnest(hits.product) as product\n\nwhere \n    _TABLE_SUFFIX not like '%intraday%'\n    and hits.item.transactionid is not null\n    and productrevenue > 0\n    and hits.transaction.transactionRevenue > 0\n\n\n\n\n    and \n      _TABLE_SUFFIX between FORMAT_DATE('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\n\n      ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_product_checkouts`"}, "model.sql_repository_bz.stg_ga4_products": {"raw_sql": "{% set partitions_to_replace = [] %}\r\n    {% for i in range(3) %}\r\n        {% set partitions_to_replace = partitions_to_replace.append('date_sub(current_date, interval ' + (i+1)|string + ' day)') %}\r\n    {% endfor %}\r\n    {{\r\n        config(\r\n            materialized = 'incremental',\r\n            incremental_strategy = 'insert_overwrite',\r\n            partition_by={\r\n                \"field\": \"event_date_dt\",\r\n                \"data_type\": \"date\"\r\n            },\r\n            partitions = partitions_to_replace\r\n        )\r\n    }}\r\n    \r\n\r\nwith source_data as (\r\n\r\n    select\r\n        parse_date('%Y%m%d', event_date) as event_date_dt,\r\n        items,\r\n        event_name,\r\n        event_timestamp,\r\n        event_params,\r\n        user_pseudo_id,\r\n        device.category as page_device,\r\n        device.web_info.hostname as page_hostname,\r\n    from\r\n        {{ source('ga4_bz_overall', 'ga4_bz_overall_events') }}\r\n\r\n        where \r\n        _table_suffix not like '%intraday%'\r\n\r\n        {% if is_incremental() %}\r\n                and parse_date('%Y%m%d', _TABLE_SUFFIX) in ({{ partitions_to_replace | join(',') }})\r\n        {% else %}\r\n            and parse_date('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(3)}}\r\n        {% endif %}\r\n\r\n),\r\n\r\nrenamed_and_unnested as (\r\n\r\n    select\r\n        event_date_dt,\r\n        item_id,\r\n        item_name,\r\n        item_brand,\r\n        item_category,\r\n        item_list_name,\r\n        price as item_price,\r\n        event_name,\r\n        event_timestamp,\r\n        event_params,\r\n        user_pseudo_id,\r\n        page_device,\r\n        page_hostname,\r\n        {{ unnest_key('event_params', 'ga_session_id', 'int_value') }}\r\n    from source_data,\r\n        unnest(items) as items\r\n\r\n),\r\n\r\n/* create a unique identifier for each event */\r\ncreate_surrogate_key as(\r\n\r\n    select\r\n        *,\r\n        {{ dbt_utils.surrogate_key(['item_id', 'event_name', 'event_timestamp', 'ga_session_id'])}}  as sk_id\r\n    from renamed_and_unnested\r\n    \r\n)\r\n\r\n\r\nselect * from create_surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.sql_repository_bz.get_last_n_days_date_range", "macro.sql_repository_bz.unnest_key", "macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"field": "event_date_dt", "data_type": "date"}, "partitions": ["date_sub(current_date, interval 1 day)", "date_sub(current_date, interval 2 day)", "date_sub(current_date, interval 3 day)"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "products", "stg_ga4_products"], "unique_id": "model.sql_repository_bz.stg_ga4_products", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/products/stg_ga4_products.sql", "original_file_path": "models/01_staging/google_analytics/products/stg_ga4_products.sql", "name": "stg_ga4_products", "alias": "stg_ga4_products", "checksum": {"name": "sha256", "checksum": "2ecc68abc451e9ee7258ebbc81df30e6e897220ec9a6cfe0762f2122eafe1d99"}, "tags": [], "refs": [], "sources": [["ga4_bz_overall", "ga4_bz_overall_events"]], "description": "this model extracts product information from the GA4 raw data", "columns": {"sk_id": {"name": "sk_id", "description": "the unique primary key created as hashed value", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/products/_models_ga4_products.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/products/stg_ga4_products.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": {"field": "event_date_dt", "data_type": "date"}, "partitions": ["date_sub(current_date, interval 1 day)", "date_sub(current_date, interval 2 day)", "date_sub(current_date, interval 3 day)"]}, "created_at": 1663750852.4072874, "compiled_sql": "\n    \n        \n    \n        \n    \n        \n    \n    \n    \n\nwith source_data as (\n\n    select\n        parse_date('%Y%m%d', event_date) as event_date_dt,\n        items,\n        event_name,\n        event_timestamp,\n        event_params,\n        user_pseudo_id,\n        device.category as page_device,\n        device.web_info.hostname as page_hostname,\n    from\n        `bergzeit`.`analytics_317045356`.`events_*`\n\n        where \n        _table_suffix not like '%intraday%'\n\n        \n                and parse_date('%Y%m%d', _TABLE_SUFFIX) in (date_sub(current_date, interval 1 day),date_sub(current_date, interval 2 day),date_sub(current_date, interval 3 day))\n        \n\n),\n\nrenamed_and_unnested as (\n\n    select\n        event_date_dt,\n        item_id,\n        item_name,\n        item_brand,\n        item_category,\n        item_list_name,\n        price as item_price,\n        event_name,\n        event_timestamp,\n        event_params,\n        user_pseudo_id,\n        page_device,\n        page_hostname,\n        (select value.int_value from unnest(event_params) where key = 'ga_session_id') as \n\n    ga_session_id\n    from source_data,\n        unnest(items) as items\n\n),\n\n/* create a unique identifier for each event */\ncreate_surrogate_key as(\n\n    select\n        *,\n        to_hex(md5(cast(coalesce(cast(item_id as \n    string\n), '') || '-' || coalesce(cast(event_name as \n    string\n), '') || '-' || coalesce(cast(event_timestamp as \n    string\n), '') || '-' || coalesce(cast(ga_session_id as \n    string\n), '') as \n    string\n)))  as sk_id\n    from renamed_and_unnested\n    \n)\n\n\nselect * from create_surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga4_products`"}, "model.sql_repository_bz.stg_ga_products": {"raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy = 'insert_overwrite',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'date', 'data_type': 'date', 'granularity': 'day' }\r\n    ) \r\n}}\r\n\r\nwith ga_product_events as (\r\n\r\n    select\r\n        parse_date('%Y%m%d', date) as date,\r\n        hits.page.hostname as hostname,\r\n        split(page.pagePath,'?')[offset(0)] as page,\r\n        device.devicecategory as device,\r\n        productSKU,\r\n        v2ProductName,\r\n        v2ProductCategory,\r\n        productBrand,\r\n        productListName,\r\n        productListPosition,\r\n        isclick,\r\n        visitid || '_' || fullvisitorid as session_id,\r\n        eventInfo.eventAction\r\n    from\r\n        {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n        unnest(hits) as hits,\r\n        unnest(hits.product) as product\r\n    where\r\n        _TABLE_SUFFIX not like '%intraday%'\r\n\r\n        {% if is_incremental() %}\r\n        and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\r\n        {% else %}\r\n        and PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(60) }}\r\n        {% endif %}\r\n\r\n),\r\n\r\n/* create a unique identifier for each event */\r\ncreate_surrogate_key as(\r\n\r\n    select\r\n        *,\r\n        {{ dbt_utils.surrogate_key([ 'session_id', 'page', 'date', 'device', 'hostname', 'productSKU', 'productListName', 'productListPosition', 'eventAction'])}}  as sk_id\r\n    from ga_product_events\r\n    \r\n)\r\n\r\nselect * from create_surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.sql_repository_bz.get_last_n_days_date_range", "macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "products", "stg_ga_products"], "unique_id": "model.sql_repository_bz.stg_ga_products", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/products/stg_ga_products.sql", "original_file_path": "models/01_staging/google_analytics/products/stg_ga_products.sql", "name": "stg_ga_products", "alias": "stg_ga_products", "checksum": {"name": "sha256", "checksum": "5b5f18601697862bc6ec21a5e2f55da71c4a63616b0743ffbabfbdfaf0fd38d8"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model extracts product information from the raw data", "columns": {"sk_id": {"name": "sk_id", "description": "the unique primary key created as hashed value", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/products/_models_ga_products.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/products/stg_ga_products.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.37578, "compiled_sql": "\n\nwith ga_product_events as (\n\n    select\n        parse_date('%Y%m%d', date) as date,\n        hits.page.hostname as hostname,\n        split(page.pagePath,'?')[offset(0)] as page,\n        device.devicecategory as device,\n        productSKU,\n        v2ProductName,\n        v2ProductCategory,\n        productBrand,\n        productListName,\n        productListPosition,\n        isclick,\n        visitid || '_' || fullvisitorid as session_id,\n        eventInfo.eventAction\n    from\n        `bergzeit`.`79472326`.`ga_sessions_*`,\n        unnest(hits) as hits,\n        unnest(hits.product) as product\n    where\n        _TABLE_SUFFIX not like '%intraday%'\n\n        \n        and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\n        \n\n),\n\n/* create a unique identifier for each event */\ncreate_surrogate_key as(\n\n    select\n        *,\n        to_hex(md5(cast(coalesce(cast(session_id as \n    string\n), '') || '-' || coalesce(cast(page as \n    string\n), '') || '-' || coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') || '-' || coalesce(cast(hostname as \n    string\n), '') || '-' || coalesce(cast(productSKU as \n    string\n), '') || '-' || coalesce(cast(productListName as \n    string\n), '') || '-' || coalesce(cast(productListPosition as \n    string\n), '') || '-' || coalesce(cast(eventAction as \n    string\n), '') as \n    string\n)))  as sk_id\n    from ga_product_events\n    \n)\n\nselect * from create_surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_products`"}, "model.sql_repository_bz.stg_ga_sessions_attribution_calculation": {"raw_sql": "with bz_sessions as (\r\n    \r\n    select\r\n        parse_date('%Y%m%d', date) as date,\r\n        fullVisitorId,\r\n        clientId,\r\n        visitId,\r\n        channelGrouping,\r\n        hits.page.hostname as hostname,\r\n        trafficsource.campaign as campaign,\r\n        case when totals.transactions = 1 then date else null end as transactiondate,\r\n        totals.transactions as totals_transactions, \r\n        max(hits.transaction.transactionid) as transactionId,\r\n        (sum(hits.transaction.transactionrevenue)/1000000) as revenue,\r\n        if(sum(if(trafficsource.istruedirect = true, 1,0))>0,1,0) as true_directs,\r\n    from\r\n        {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }}, \r\n        unnest(hits) as hits\r\n    where \r\n        _table_suffix between format_date('%Y%m%d',date_sub(current_date(), interval 61 day))\r\n        and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\r\n    group by\r\n    1,2,3,4,5,6,7,8,9\r\n\r\n)\r\nselect * from bz_sessions", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "sessions", "stg_ga_sessions_attribution_calculation"], "unique_id": "model.sql_repository_bz.stg_ga_sessions_attribution_calculation", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/sessions/stg_ga_sessions_attribution_calculation.sql", "original_file_path": "models/01_staging/google_analytics/sessions/stg_ga_sessions_attribution_calculation.sql", "name": "stg_ga_sessions_attribution_calculation", "alias": "stg_ga_sessions_attribution_calculation", "checksum": {"name": "sha256", "checksum": "10c9e05cfc3d31166fd5c69749daadd23c169c56230dd91e362d0c9ab464bd4f"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model contains all sessions of the last 60 days as input for markov attribution calculation", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/sessions/_models_ga_sessions.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/sessions/stg_ga_sessions_attribution_calculation.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750852.4274178, "compiled_sql": "with bz_sessions as (\n    \n    select\n        parse_date('%Y%m%d', date) as date,\n        fullVisitorId,\n        clientId,\n        visitId,\n        channelGrouping,\n        hits.page.hostname as hostname,\n        trafficsource.campaign as campaign,\n        case when totals.transactions = 1 then date else null end as transactiondate,\n        totals.transactions as totals_transactions, \n        max(hits.transaction.transactionid) as transactionId,\n        (sum(hits.transaction.transactionrevenue)/1000000) as revenue,\n        if(sum(if(trafficsource.istruedirect = true, 1,0))>0,1,0) as true_directs,\n    from\n        `bergzeit`.`79472326`.`ga_sessions_*`, \n        unnest(hits) as hits\n    where \n        _table_suffix between format_date('%Y%m%d',date_sub(current_date(), interval 61 day))\n        and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\n    group by\n    1,2,3,4,5,6,7,8,9\n\n)\nselect * from bz_sessions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_sessions_attribution_calculation`"}, "model.sql_repository_bz.stg_ga_session_totals": {"raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy = 'insert_overwrite',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'date', 'data_type': 'date', 'granularity': 'day' }\r\n    ) \r\n}} \r\n\r\n\r\nwith daily_overall_session_totals as(\r\n\r\n    select\r\n        {{ dbt_utils.surrogate_key([\r\n            'date', 'fullvisitorid', 'visitid'\r\n        ])}}  as sk_id,\r\n        parse_date('%Y%m%d', date) as date,\r\n        visitid || '_' || fullvisitorid as ga_session_id,\r\n        device.deviceCategory as device,\r\n        channelGrouping as channel_grouping,\r\n        {{high_level_channel_grouping('channelGrouping')}}  as ga_acquisition_channel_groups,\r\n        /* if no interaction events in session, value is zero per row  */\r\n        coalesce(totals.newVisits,0) as is_new_visitor,\r\n        coalesce(totals.bounces,0) as is_bounce,\r\n        totals.pageviews as pageviews,\r\n        totals.hits as hits,\r\n        coalesce(totals.transactions,0) as transactions,\r\n        round(coalesce(totals.transactionrevenue / 1000000,0),3) as order_value\r\n    from {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }}\r\n    where \r\n        _TABLE_SUFFIX not like '%intraday%'\r\n        /*non-bounced sessions only in order to match session count in Analytics UI*/\r\n        and totals.visits = 1\r\n        {% if is_incremental() %}\r\n            and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\r\n            {% else %}\r\n            and parse_date('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(60) }}\r\n        {% endif %}\r\n\r\n)\r\n\r\nselect * from daily_overall_session_totals", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.high_level_channel_grouping", "macro.dbt.is_incremental", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "sessions", "stg_ga_session_totals"], "unique_id": "model.sql_repository_bz.stg_ga_session_totals", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/sessions/stg_ga_session_totals.sql", "original_file_path": "models/01_staging/google_analytics/sessions/stg_ga_session_totals.sql", "name": "stg_ga_session_totals", "alias": "stg_ga_session_totals", "checksum": {"name": "sha256", "checksum": "cb2264b863c486097652d308fe7a7b60c4de230720acad18673e0d8af40d534f"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model contains all totals values of the daily overall session table", "columns": {"sk_id": {"name": "sk_id", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "channel_grouping": {"name": "channel_grouping", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hits": {"name": "hits", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/sessions/_models_ga_sessions.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/sessions/stg_ga_session_totals.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.4232771, "compiled_sql": " \n\n\nwith daily_overall_session_totals as(\n\n    select\n        to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(fullvisitorid as \n    string\n), '') || '-' || coalesce(cast(visitid as \n    string\n), '') as \n    string\n)))  as sk_id,\n        parse_date('%Y%m%d', date) as date,\n        visitid || '_' || fullvisitorid as ga_session_id,\n        device.deviceCategory as device,\n        channelGrouping as channel_grouping,\n        \n  \n  case\n    when channelGrouping in ('Brand Paid Search', 'Organic Search Home', 'Direct') then 'Brand'\n    when channelGrouping in ('Generic Paid Search Google', 'Generic Paid Shopping Google', 'Display', 'Generic Paid Search Bing', 'PSM', 'Affiliate', 'Social Paid', 'Native') then 'Paid'\n    when channelGrouping in ('Organic Search Non-Home', 'Referral', 'Hersteller Links', 'Social Organic', 'Organic Search Magazin') then 'Organic'\n    when channelGrouping in ('Newsletter', 'Triggermail') then 'Email'\n  else 'Other'\n  end\n\n    as ga_acquisition_channel_groups,\n        /* if no interaction events in session, value is zero per row  */\n        coalesce(totals.newVisits,0) as is_new_visitor,\n        coalesce(totals.bounces,0) as is_bounce,\n        totals.pageviews as pageviews,\n        totals.hits as hits,\n        coalesce(totals.transactions,0) as transactions,\n        round(coalesce(totals.transactionrevenue / 1000000,0),3) as order_value\n    from `bergzeit`.`79472326`.`ga_sessions_*`\n    where \n        _TABLE_SUFFIX not like '%intraday%'\n        /*non-bounced sessions only in order to match session count in Analytics UI*/\n        and totals.visits = 1\n        \n            and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\n            \n\n)\n\nselect * from daily_overall_session_totals", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_session_totals`"}, "model.sql_repository_bz.stg_ga_ecommerce_actions": {"raw_sql": "select\r\n    parse_date('%Y%m%d', date) as c_date,\r\n    visitid as ga_visit_id,\r\n    hits.page.hostname as hostname,\r\n    {{extract_country_from_hostname('hits.page.hostname')}} as account,\r\n    product.productsku as c_offer_id,\r\n    product.productBrand as ga_brand,\r\n    product.v2ProductName as ga_productname,\r\n    product.productQuantity as ga_product_quantity,\r\n    hits.ecommerceaction.action_type as ga_eec_action_type\r\n      \r\n  from \r\n      {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n      unnest(hits) as hits,\r\n      unnest(hits.product) as product\r\n\r\n  where _TABLE_SUFFIX not like '%intraday%'\r\n  and hits.ecommerceaction.action_type is not null\r\n  and hits.type = 'EVENT'\r\n\r\n{% if is_incremental() %}\r\n\r\n    and \r\n      _TABLE_SUFFIX between FORMAT_DATE('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n\r\n      {% else %}\r\n\r\n    and \r\n      PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(400) }}\r\n\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.extract_country_from_hostname", "macro.dbt.is_incremental", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "stg_ga_ecommerce_actions"], "unique_id": "model.sql_repository_bz.stg_ga_ecommerce_actions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/events/stg_ga_ecommerce_actions.sql", "original_file_path": "models/01_staging/google_analytics/events/stg_ga_ecommerce_actions.sql", "name": "stg_ga_ecommerce_actions", "alias": "stg_ga_ecommerce_actions", "checksum": {"name": "sha256", "checksum": "042a600ea93037ca98381e4e3a7dc4265e665cbc5611668cda762a4dc63f58f0"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model extracts all eec events", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/events/_models_ga_events.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/stg_ga_ecommerce_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750852.6185045, "compiled_sql": "select\n    parse_date('%Y%m%d', date) as c_date,\n    visitid as ga_visit_id,\n    hits.page.hostname as hostname,\n    \n    case\n        when hits.page.hostname like '%co.uk%' then split(hits.page.hostname, '.')[ offset (3)] \n        else split(hits.page.hostname, '.')[offset(2)] \n    end\n\n as account,\n    product.productsku as c_offer_id,\n    product.productBrand as ga_brand,\n    product.v2ProductName as ga_productname,\n    product.productQuantity as ga_product_quantity,\n    hits.ecommerceaction.action_type as ga_eec_action_type\n      \n  from \n      `bergzeit`.`79472326`.`ga_sessions_*`,\n      unnest(hits) as hits,\n      unnest(hits.product) as product\n\n  where _TABLE_SUFFIX not like '%intraday%'\n  and hits.ecommerceaction.action_type is not null\n  and hits.type = 'EVENT'\n\n\n\n    and \n      PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between \n    date_sub(current_date(), interval 400 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_ecommerce_actions`"}, "model.sql_repository_bz.stg_ga_filter_events": {"raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy = 'insert_overwrite',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'date', 'data_type': 'date', 'granularity': 'day' }\r\n    ) \r\n}} \r\n\r\n\r\nselect\r\n    parse_date('%Y%m%d', date) AS date,\r\n    hits.page.hostname as hostname,\r\n    device.devicecategory as device,\r\n    hits.type as hit_type,\r\n    split(hits.page.pagepath,'?')[safe_offset(0)] as page,\r\n    case \r\n      when regexp_contains(hits.page.pagepath, r\".*\\-herren|\\-heren|\\-men|\\-uomo.*\") then \"herren\"\r\n      when regexp_contains(hits.page.pagepath, r\".*\\-kinder|\\-kids|\\-kinderen|\\-bambino.*\") then \"kinder\"\r\n      when regexp_contains(hits.page.pagepath, r\".*\\-damen|\\-dames|\\-women|\\-donna.*\") then \"damen\"\r\n      else \"unisex\"\r\n    end as page_gender,\r\n    hits.eventinfo.eventaction,\r\n    hits.eventinfo.eventcategory,\r\n    # hits.eventinfo.eventlabel,\r\n    #split(hits.eventinfo.eventlabel,'_')[safe_offset(1)] as filter_type,\r\n    regexp_extract(replace(hits.eventinfo.eventlabel, 'filter_', ''), r'(.*)\\_') as filter_type,\r\n    # split(hits.eventinfo.eventlabel,'_')[safe_offset(2)] as filter_value,\r\n    # customdimension.value as category,\r\n    count(hits.hitnumber) as clicks\r\n\r\nfrom\r\n    {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n    unnest(hits) as hits# ,\r\n    # unnest(hits.customdimensions) as customdimension\r\n\r\nwhere \r\n    _TABLE_SUFFIX not like '%intraday%'\r\n    and hits.eventinfo.eventlabel like '%filter%'\r\n\r\n{% if is_incremental() %}\r\n\r\n    and \r\n      _TABLE_SUFFIX between FORMAT_DATE('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n\r\n      {% else %}\r\n\r\n    and PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(90) }}\r\n    /* new filter naming for ishop */\r\n    and PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) > '2022-03-17'\r\n\r\n{% endif %}\r\n    \r\n  group by\r\n    1,2,3,4,5,6,7,8,9", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "stg_ga_filter_events"], "unique_id": "model.sql_repository_bz.stg_ga_filter_events", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/events/stg_ga_filter_events.sql", "original_file_path": "models/01_staging/google_analytics/events/stg_ga_filter_events.sql", "name": "stg_ga_filter_events", "alias": "stg_ga_filter_events", "checksum": {"name": "sha256", "checksum": "fa612548ef2c51449570131c6372c3d277ff6db7a08b7754869ca35d4fe6ee51"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model extracts all filter events", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/events/_models_ga_events.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/stg_ga_filter_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.6112094, "compiled_sql": " \n\n\nselect\n    parse_date('%Y%m%d', date) AS date,\n    hits.page.hostname as hostname,\n    device.devicecategory as device,\n    hits.type as hit_type,\n    split(hits.page.pagepath,'?')[safe_offset(0)] as page,\n    case \n      when regexp_contains(hits.page.pagepath, r\".*\\-herren|\\-heren|\\-men|\\-uomo.*\") then \"herren\"\n      when regexp_contains(hits.page.pagepath, r\".*\\-kinder|\\-kids|\\-kinderen|\\-bambino.*\") then \"kinder\"\n      when regexp_contains(hits.page.pagepath, r\".*\\-damen|\\-dames|\\-women|\\-donna.*\") then \"damen\"\n      else \"unisex\"\n    end as page_gender,\n    hits.eventinfo.eventaction,\n    hits.eventinfo.eventcategory,\n    # hits.eventinfo.eventlabel,\n    #split(hits.eventinfo.eventlabel,'_')[safe_offset(1)] as filter_type,\n    regexp_extract(replace(hits.eventinfo.eventlabel, 'filter_', ''), r'(.*)\\_') as filter_type,\n    # split(hits.eventinfo.eventlabel,'_')[safe_offset(2)] as filter_value,\n    # customdimension.value as category,\n    count(hits.hitnumber) as clicks\n\nfrom\n    `bergzeit`.`79472326`.`ga_sessions_*`,\n    unnest(hits) as hits# ,\n    # unnest(hits.customdimensions) as customdimension\n\nwhere \n    _TABLE_SUFFIX not like '%intraday%'\n    and hits.eventinfo.eventlabel like '%filter%'\n\n\n\n    and \n      _TABLE_SUFFIX between FORMAT_DATE('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\n\n      \n    \n  group by\n    1,2,3,4,5,6,7,8,9", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_filter_events`"}, "model.sql_repository_bz.stg_ga_hits_all_properties": {"raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy = 'insert_overwrite',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'ga_date', 'data_type': 'date', 'granularity': 'day' }\r\n    ) \r\n}} \r\n\r\n/* dbt source table name differs slightly from dataset name */\r\n{% set ga_properties =  [\r\n        {'dataset':'overall', 'table':'all'},\r\n        {'dataset':'de', 'table':'de'},\r\n        {'dataset':'at', 'table':'at'},\r\n        {'dataset':'ch', 'table':'ch'}\r\n]%}\r\n\r\nwith daily_hits_per_country as (\r\n\r\n  {% for ga_property in ga_properties %}\r\n\r\n    {% set ga_property_dataset = 'ga_bz_master_view_' + ga_property.dataset %}\r\n    {% set ga_property_table = 'ga_sessions_' + ga_property.table %}\r\n    {% set ga_property_name = 'bz_' + ga_property.table %}\r\n\r\n    select\r\n        /* generate unique hit key */\r\n        {{ dbt_utils.surrogate_key([\r\n            'hits.time', 'visitid','fullvisitorid',\r\n            'hits.type', 'hits.page.hostname', ' page.pagePath'\r\n        ])}}  as hit_id,\r\n        '{{ ga_property_name }}' as ga_property,\r\n        parse_date('%Y%m%d', date) as ga_date,\r\n        hits.time as milliseconds_from_start,\r\n        visitid || '_' || fullvisitorid as ga_session_id,\r\n        hits.page.hostname as hostname,\r\n        concat(hits.page.hostname, hits.page.pagePath) as page,\r\n        hits.type as hit_type\r\n    from \r\n        /* replacing to overall in dataset name */\r\n        {{ source( ga_property_dataset, ga_property_table) }}, \r\n        unnest(hits) AS hits\r\n    where \r\n        _TABLE_SUFFIX not like '%intraday%'\r\n        {% if is_incremental() %}\r\n            and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\r\n            {% else %}\r\n            and parse_date('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(31) }}\r\n        {% endif %}\r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n)\r\n\r\nselect * from daily_hits_per_country", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt.is_incremental", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all", "source.sql_repository_bz.ga_bz_master_view_de.ga_sessions_de", "source.sql_repository_bz.ga_bz_master_view_at.ga_sessions_at", "source.sql_repository_bz.ga_bz_master_view_ch.ga_sessions_ch"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "ga_date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "stg_ga_hits_all_properties"], "unique_id": "model.sql_repository_bz.stg_ga_hits_all_properties", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/events/stg_ga_hits_all_properties.sql", "original_file_path": "models/01_staging/google_analytics/events/stg_ga_hits_all_properties.sql", "name": "stg_ga_hits_all_properties", "alias": "stg_ga_hits_all_properties", "checksum": {"name": "sha256", "checksum": "b0f32c084670a4ab267027610a8adc58ba60ac81a02f8612d302d5443c4d60c6"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"], ["ga_bz_master_view_de", "ga_sessions_de"], ["ga_bz_master_view_at", "ga_sessions_at"], ["ga_bz_master_view_ch", "ga_sessions_ch"]], "description": "this model extracts hits from overall, de, at, ch properties for comparison", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/events/_models_ga_events.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/stg_ga_hits_all_properties.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "ga_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.6148186, "compiled_sql": " \n\n/* dbt source table name differs slightly from dataset name */\n\n\nwith daily_hits_per_country as (\n\n  \n\n    \n    \n    \n\n    select\n        /* generate unique hit key */\n        to_hex(md5(cast(coalesce(cast(hits.time as \n    string\n), '') || '-' || coalesce(cast(visitid as \n    string\n), '') || '-' || coalesce(cast(fullvisitorid as \n    string\n), '') || '-' || coalesce(cast(hits.type as \n    string\n), '') || '-' || coalesce(cast(hits.page.hostname as \n    string\n), '') || '-' || coalesce(cast( page.pagePath as \n    string\n), '') as \n    string\n)))  as hit_id,\n        'bz_all' as ga_property,\n        parse_date('%Y%m%d', date) as ga_date,\n        hits.time as milliseconds_from_start,\n        visitid || '_' || fullvisitorid as ga_session_id,\n        hits.page.hostname as hostname,\n        concat(hits.page.hostname, hits.page.pagePath) as page,\n        hits.type as hit_type\n    from \n        /* replacing to overall in dataset name */\n        `bergzeit`.`79472326`.`ga_sessions_*`, \n        unnest(hits) AS hits\n    where \n        _TABLE_SUFFIX not like '%intraday%'\n        \n            and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\n            \n\n    union all\n    \n\n    \n    \n    \n\n    select\n        /* generate unique hit key */\n        to_hex(md5(cast(coalesce(cast(hits.time as \n    string\n), '') || '-' || coalesce(cast(visitid as \n    string\n), '') || '-' || coalesce(cast(fullvisitorid as \n    string\n), '') || '-' || coalesce(cast(hits.type as \n    string\n), '') || '-' || coalesce(cast(hits.page.hostname as \n    string\n), '') || '-' || coalesce(cast( page.pagePath as \n    string\n), '') as \n    string\n)))  as hit_id,\n        'bz_de' as ga_property,\n        parse_date('%Y%m%d', date) as ga_date,\n        hits.time as milliseconds_from_start,\n        visitid || '_' || fullvisitorid as ga_session_id,\n        hits.page.hostname as hostname,\n        concat(hits.page.hostname, hits.page.pagePath) as page,\n        hits.type as hit_type\n    from \n        /* replacing to overall in dataset name */\n        `bergzeit`.`79462285_EU_Backup`.`ga_sessions_*`, \n        unnest(hits) AS hits\n    where \n        _TABLE_SUFFIX not like '%intraday%'\n        \n            and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\n            \n\n    union all\n    \n\n    \n    \n    \n\n    select\n        /* generate unique hit key */\n        to_hex(md5(cast(coalesce(cast(hits.time as \n    string\n), '') || '-' || coalesce(cast(visitid as \n    string\n), '') || '-' || coalesce(cast(fullvisitorid as \n    string\n), '') || '-' || coalesce(cast(hits.type as \n    string\n), '') || '-' || coalesce(cast(hits.page.hostname as \n    string\n), '') || '-' || coalesce(cast( page.pagePath as \n    string\n), '') as \n    string\n)))  as hit_id,\n        'bz_at' as ga_property,\n        parse_date('%Y%m%d', date) as ga_date,\n        hits.time as milliseconds_from_start,\n        visitid || '_' || fullvisitorid as ga_session_id,\n        hits.page.hostname as hostname,\n        concat(hits.page.hostname, hits.page.pagePath) as page,\n        hits.type as hit_type\n    from \n        /* replacing to overall in dataset name */\n        `bergzeit`.`79471425`.`ga_sessions_*`, \n        unnest(hits) AS hits\n    where \n        _TABLE_SUFFIX not like '%intraday%'\n        \n            and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\n            \n\n    union all\n    \n\n    \n    \n    \n\n    select\n        /* generate unique hit key */\n        to_hex(md5(cast(coalesce(cast(hits.time as \n    string\n), '') || '-' || coalesce(cast(visitid as \n    string\n), '') || '-' || coalesce(cast(fullvisitorid as \n    string\n), '') || '-' || coalesce(cast(hits.type as \n    string\n), '') || '-' || coalesce(cast(hits.page.hostname as \n    string\n), '') || '-' || coalesce(cast( page.pagePath as \n    string\n), '') as \n    string\n)))  as hit_id,\n        'bz_ch' as ga_property,\n        parse_date('%Y%m%d', date) as ga_date,\n        hits.time as milliseconds_from_start,\n        visitid || '_' || fullvisitorid as ga_session_id,\n        hits.page.hostname as hostname,\n        concat(hits.page.hostname, hits.page.pagePath) as page,\n        hits.type as hit_type\n    from \n        /* replacing to overall in dataset name */\n        `bergzeit`.`79472121`.`ga_sessions_*`, \n        unnest(hits) AS hits\n    where \n        _TABLE_SUFFIX not like '%intraday%'\n        \n            and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\n            \n\n    \n    \n\n)\n\nselect * from daily_hits_per_country", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_hits_all_properties`"}, "model.sql_repository_bz.stg_ga_events_promotion": {"raw_sql": "/* incremental model is continously not working which leads to missing data\r\n\r\n{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy = 'insert_overwrite',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'date', 'data_type': 'date', 'granularity': 'day' }\r\n    ) \r\n}} \r\n*/\r\n\r\nwith teaser_events as (\r\n\r\n  select\r\n    /* generate unique event key */\r\n    {{ dbt_utils.surrogate_key([\r\n        'date', 'hits.time', 'visitid', 'fullvisitorid',\r\n        'page.pagePath', 'hits.page.hostname',\r\n        'promotion.promoCreative', 'promotion.promoName', \r\n        'promotion.promoId', 'promotion.promoPosition', 'promotionActionInfo.promoIsClick'\r\n    ])}}  as teaser_event_id,\r\n    parse_date('%Y%m%d', date) as date,\r\n    hits.time as milliseconds_from_start,\r\n    visitid || '_' || fullvisitorid as ga_session_id,\r\n    page.hostname as hostname,\r\n    page.pagePath as page,\r\n    device.devicecategory as device,\r\n    hits.type AS hit_type,\r\n    \r\n    /* promotion teaser info per event */\r\n    if(promotion.promoCreative = '(not set)', Null, promotion.promoCreative) as promo_creative,\r\n    if(promotion.promoId = '(not set)', Null, promotion.promoId) as promo_id,\r\n    /* create null values to enable not_null tests */\r\n    if(promotion.promoName = '(not set)', Null, promotion.promoName) as promo_name,\r\n    promotion.promoPosition as promo_position,\r\n    case\r\n        when promotionActionInfo.promoIsClick is True then 'promo_click'\r\n        when promotionActionInfo.promoIsView  is True then 'promo_view'\r\n        else '_other'\r\n    end as promo_interaction_type,\r\n    hits.eventInfo.eventAction as event_action\r\n  \r\n  from\r\n    {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n    unnest(hits) as hits,\r\n    unnest(hits.promotion) as promotion\r\n\r\n  where \r\n    _TABLE_SUFFIX not like '%intraday%'\r\n    and parse_date('%Y%m%d', _TABLE_SUFFIX) between {{get_last_n_days_date_range(7)}}\r\n\r\n    /* \r\n    {% if is_incremental() %}\r\n        and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\r\n        {% else %}\r\n        and parse_date('%Y%m%d', _TABLE_SUFFIX) between {{get_last_n_days_date_range(30)}}\r\n    {% endif %}\r\n\r\n    */\r\n\r\n    and hits.eventInfo.eventAction = 'eec.promoView'\r\n)\r\n\r\nselect * from teaser_events", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_last_n_days_date_range", "macro.dbt.is_incremental"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": ["analytics-alerts"], "meta": {"owner": "@Chris G"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "stg_ga_events_promotion"], "unique_id": "model.sql_repository_bz.stg_ga_events_promotion", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/events/stg_ga_events_promotion.sql", "original_file_path": "models/01_staging/google_analytics/events/stg_ga_events_promotion.sql", "name": "stg_ga_events_promotion", "alias": "stg_ga_events_promotion", "checksum": {"name": "sha256", "checksum": "4fe0628864d1562069957a8d86a2accef869258472ebd76667de3d7c6676cb1d"}, "tags": ["analytics-alerts"], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "teaser events with all contextual event information", "columns": {"teaser_event_id": {"name": "teaser_event_id", "description": "unique event key based on time variables, user ids and promo information", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "promo_id": {"name": "promo_id", "description": "the promo name with an ishop teaser id as suffix", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promo_name": {"name": "promo_name", "description": "the teaser name set in the ishop backoffice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promo_interaction_type": {"name": "promo_interaction_type", "description": "the interaction type with the teaser, either view or click", "meta": {}, "data_type": null, "quote": null, "tags": []}, "promo_creative": {"name": "promo_creative", "description": "the type of teaser, as set in the ishop backoffice, e.g. image-text-teaser", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/events/_models_ga_events.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/stg_ga_events_promotion.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.6010566, "compiled_sql": "/* incremental model is continously not working which leads to missing data\n\n \n*/\n\nwith teaser_events as (\n\n  select\n    /* generate unique event key */\n    to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(hits.time as \n    string\n), '') || '-' || coalesce(cast(visitid as \n    string\n), '') || '-' || coalesce(cast(fullvisitorid as \n    string\n), '') || '-' || coalesce(cast(page.pagePath as \n    string\n), '') || '-' || coalesce(cast(hits.page.hostname as \n    string\n), '') || '-' || coalesce(cast(promotion.promoCreative as \n    string\n), '') || '-' || coalesce(cast(promotion.promoName as \n    string\n), '') || '-' || coalesce(cast(promotion.promoId as \n    string\n), '') || '-' || coalesce(cast(promotion.promoPosition as \n    string\n), '') || '-' || coalesce(cast(promotionActionInfo.promoIsClick as \n    string\n), '') as \n    string\n)))  as teaser_event_id,\n    parse_date('%Y%m%d', date) as date,\n    hits.time as milliseconds_from_start,\n    visitid || '_' || fullvisitorid as ga_session_id,\n    page.hostname as hostname,\n    page.pagePath as page,\n    device.devicecategory as device,\n    hits.type AS hit_type,\n    \n    /* promotion teaser info per event */\n    if(promotion.promoCreative = '(not set)', Null, promotion.promoCreative) as promo_creative,\n    if(promotion.promoId = '(not set)', Null, promotion.promoId) as promo_id,\n    /* create null values to enable not_null tests */\n    if(promotion.promoName = '(not set)', Null, promotion.promoName) as promo_name,\n    promotion.promoPosition as promo_position,\n    case\n        when promotionActionInfo.promoIsClick is True then 'promo_click'\n        when promotionActionInfo.promoIsView  is True then 'promo_view'\n        else '_other'\n    end as promo_interaction_type,\n    hits.eventInfo.eventAction as event_action\n  \n  from\n    `bergzeit`.`79472326`.`ga_sessions_*`,\n    unnest(hits) as hits,\n    unnest(hits.promotion) as promotion\n\n  where \n    _TABLE_SUFFIX not like '%intraday%'\n    and parse_date('%Y%m%d', _TABLE_SUFFIX) between \n    date_sub(current_date(), interval 7 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n    /* \n    \n        and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\n        \n\n    */\n\n    and hits.eventInfo.eventAction = 'eec.promoView'\n)\n\nselect * from teaser_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_events_promotion`"}, "model.sql_repository_bz.stg_ga4_events_checkout": {"raw_sql": "{% set partitions_to_replace = [] %}\r\n    {% for i in range(3) %}\r\n        {% set partitions_to_replace = partitions_to_replace.append('date_sub(current_date, interval ' + (i+1)|string + ' day)') %}\r\n    {% endfor %}\r\n    {{\r\n        config(\r\n            materialized = 'incremental',\r\n            incremental_strategy = 'insert_overwrite',\r\n            partition_by={\r\n                \"field\": \"event_date_dt\",\r\n                \"data_type\": \"date\"\r\n            },\r\n            partitions = partitions_to_replace\r\n        )\r\n    }}\r\n\r\nwith source_data as (\r\n\r\n    select\r\n        parse_date('%Y%m%d',event_date) as event_date_dt,\r\n        event_timestamp,\r\n        event_name,\r\n        event_params,\r\n        user_id, --always empty\r\n        user_pseudo_id,\r\n        device,\r\n        event_dimensions,\r\n        traffic_source,\r\n        ecommerce,\r\n        items\r\n    from {{ source('ga4_bz_overall', 'ga4_bz_overall_events') }}\r\n        where _table_suffix not like '%intraday%'\r\n        and regexp_contains(event_name, 'cart|checkout|payment|purchase')\r\n    \r\n        {% if is_incremental() %}\r\n                and parse_date('%Y%m%d', _TABLE_SUFFIX) in ({{ partitions_to_replace | join(',') }})\r\n        {% else %}\r\n            and parse_date('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(30)}}\r\n        {% endif %}\r\n\r\n),\r\n\r\nrenamed_and_unnested as (\r\n\r\n    select\r\n        event_date_dt,\r\n        event_timestamp,\r\n        lower(replace(trim(event_name), \" \", \"_\")) as event_name, -- Clean up all event names to be snake cased\r\n        user_pseudo_id,\r\n        device.category as page_device,\r\n        device.web_info.hostname as page_hostname,\r\n        lower(traffic_source.name) as trafficsource_name,\r\n        traffic_source.source as trafficsource_source,\r\n        traffic_source.medium as trafficsource_medium,\r\n        ecommerce.total_item_quantity,\r\n        ecommerce.purchase_revenue as order_value,\r\n        items,\r\n        to_json_string(items) as hashable_items,\r\n        {{ unnest_key('event_params', 'ga_session_id', 'int_value') }},\r\n        {{ unnest_key('event_params', 'page_location') }},\r\n        {{ unnest_key('event_params', 'ga_session_number',  'int_value') }},\r\n        (case when (SELECT value.string_value FROM unnest(event_params) WHERE key = \"session_engaged\") = \"1\" then 1 end) as session_engaged,\r\n        {{ unnest_key('event_params', 'engagement_time_msec', 'int_value') }},\r\n        {{ unnest_key('event_params', 'page_title') }},\r\n        {{ unnest_key('event_params', 'page_referrer') }},\r\n        {{ unnest_key('event_params', 'source') }},\r\n        {{ unnest_key('event_params', 'medium') }},\r\n        {{ unnest_key('event_params', 'campaign') }},\r\n        CASE \r\n            WHEN event_name = 'purchase' THEN 1\r\n            ELSE 0\r\n        END AS is_purchase,\r\n    from source_data\r\n\r\n),\r\n\r\n/* create a unique identifier for each event */\r\ncreate_surrogate_key as(\r\n\r\n    select\r\n        * except(hashable_items),\r\n        {{ dbt_utils.surrogate_key(['event_timestamp', 'ga_session_id', 'event_name','engagement_time_msec','hashable_items'])}}  as sk_id\r\n    from renamed_and_unnested\r\n    \r\n)\r\n\r\n\r\nselect * from create_surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.sql_repository_bz.get_last_n_days_date_range", "macro.sql_repository_bz.unnest_key", "macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"field": "event_date_dt", "data_type": "date"}, "partitions": ["date_sub(current_date, interval 1 day)", "date_sub(current_date, interval 2 day)", "date_sub(current_date, interval 3 day)"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "stg_ga4_events_checkout"], "unique_id": "model.sql_repository_bz.stg_ga4_events_checkout", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/events/stg_ga4_events_checkout.sql", "original_file_path": "models/01_staging/google_analytics/events/stg_ga4_events_checkout.sql", "name": "stg_ga4_events_checkout", "alias": "stg_ga4_events_checkout", "checksum": {"name": "sha256", "checksum": "bebdef87c3ab3ed035bb087edcb80b2ed9fbadf6d359d379212a5c0427e60aa9"}, "tags": [], "refs": [], "sources": [["ga4_bz_overall", "ga4_bz_overall_events"]], "description": "this model shows all GA4 events related to the order process of the current Overall Property", "columns": {"sk_id": {"name": "sk_id", "description": "the unique id for each event (currently with uniqueness issues)", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "the name of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/events/_models_ga4_events.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/stg_ga4_events_checkout.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": {"field": "event_date_dt", "data_type": "date"}, "partitions": ["date_sub(current_date, interval 1 day)", "date_sub(current_date, interval 2 day)", "date_sub(current_date, interval 3 day)"]}, "created_at": 1663750852.4800835, "compiled_sql": "\n    \n        \n    \n        \n    \n        \n    \n    \n\nwith source_data as (\n\n    select\n        parse_date('%Y%m%d',event_date) as event_date_dt,\n        event_timestamp,\n        event_name,\n        event_params,\n        user_id, --always empty\n        user_pseudo_id,\n        device,\n        event_dimensions,\n        traffic_source,\n        ecommerce,\n        items\n    from `bergzeit`.`analytics_317045356`.`events_*`\n        where _table_suffix not like '%intraday%'\n        and regexp_contains(event_name, 'cart|checkout|payment|purchase')\n    \n        \n                and parse_date('%Y%m%d', _TABLE_SUFFIX) in (date_sub(current_date, interval 1 day),date_sub(current_date, interval 2 day),date_sub(current_date, interval 3 day))\n        \n\n),\n\nrenamed_and_unnested as (\n\n    select\n        event_date_dt,\n        event_timestamp,\n        lower(replace(trim(event_name), \" \", \"_\")) as event_name, -- Clean up all event names to be snake cased\n        user_pseudo_id,\n        device.category as page_device,\n        device.web_info.hostname as page_hostname,\n        lower(traffic_source.name) as trafficsource_name,\n        traffic_source.source as trafficsource_source,\n        traffic_source.medium as trafficsource_medium,\n        ecommerce.total_item_quantity,\n        ecommerce.purchase_revenue as order_value,\n        items,\n        to_json_string(items) as hashable_items,\n        (select value.int_value from unnest(event_params) where key = 'ga_session_id') as \n\n    ga_session_id,\n        (select value.string_value from unnest(event_params) where key = 'page_location') as \n\n    page_location,\n        (select value.int_value from unnest(event_params) where key = 'ga_session_number') as \n\n    ga_session_number,\n        (case when (SELECT value.string_value FROM unnest(event_params) WHERE key = \"session_engaged\") = \"1\" then 1 end) as session_engaged,\n        (select value.int_value from unnest(event_params) where key = 'engagement_time_msec') as \n\n    engagement_time_msec,\n        (select value.string_value from unnest(event_params) where key = 'page_title') as \n\n    page_title,\n        (select value.string_value from unnest(event_params) where key = 'page_referrer') as \n\n    page_referrer,\n        (select value.string_value from unnest(event_params) where key = 'source') as \n\n    source,\n        (select value.string_value from unnest(event_params) where key = 'medium') as \n\n    medium,\n        (select value.string_value from unnest(event_params) where key = 'campaign') as \n\n    campaign,\n        CASE \n            WHEN event_name = 'purchase' THEN 1\n            ELSE 0\n        END AS is_purchase,\n    from source_data\n\n),\n\n/* create a unique identifier for each event */\ncreate_surrogate_key as(\n\n    select\n        * except(hashable_items),\n        to_hex(md5(cast(coalesce(cast(event_timestamp as \n    string\n), '') || '-' || coalesce(cast(ga_session_id as \n    string\n), '') || '-' || coalesce(cast(event_name as \n    string\n), '') || '-' || coalesce(cast(engagement_time_msec as \n    string\n), '') || '-' || coalesce(cast(hashable_items as \n    string\n), '') as \n    string\n)))  as sk_id\n    from renamed_and_unnested\n    \n)\n\n\nselect * from create_surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_checkout`"}, "model.sql_repository_bz.stg_ga4_events_custom": {"raw_sql": "{% set partitions_to_replace = [] %}\r\n    {% for i in range(3) %}\r\n        {% set partitions_to_replace = partitions_to_replace.append('date_sub(current_date, interval ' + (i+1)|string + ' day)') %}\r\n    {% endfor %}\r\n    {{\r\n        config(\r\n            materialized = 'incremental',\r\n            incremental_strategy = 'insert_overwrite',\r\n            partition_by={\r\n                \"field\": \"event_date_dt\",\r\n                \"data_type\": \"date\"\r\n            },\r\n            partitions = partitions_to_replace\r\n        )\r\n    }}\r\n\r\n\r\nwith source_data as (\r\n\r\n    select\r\n        parse_date('%Y%m%d',event_date) as event_date_dt,\r\n        event_timestamp,\r\n        event_name,\r\n        event_params,\r\n        user_id, --always empty\r\n        user_pseudo_id,\r\n        device,\r\n        event_dimensions,\r\n        traffic_source,\r\n        ecommerce\r\n    from {{ source('ga4_bz_overall', 'ga4_bz_overall_events') }}\r\n        where _table_suffix not like '%intraday%'\r\n        and event_name like('_custom%')\r\n    \r\n        {% if is_incremental() %}\r\n                and parse_date('%Y%m%d', _TABLE_SUFFIX) in ({{ partitions_to_replace | join(',') }})\r\n        {% else %}\r\n            and parse_date('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(30)}}\r\n        {% endif %}\r\n\r\n),\r\n\r\nrenamed_and_unnested as (\r\n\r\n    select\r\n        event_date_dt,\r\n        event_timestamp,\r\n        lower(replace(trim(event_name), \" \", \"_\")) as event_name, -- Clean up all event names to be snake cased\r\n        user_pseudo_id,\r\n        device.category as page_device,\r\n        device.web_info.hostname as page_hostname,\r\n        lower(traffic_source.name) as trafficsource_name,\r\n        traffic_source.source as trafficsource_source,\r\n        traffic_source.medium as trafficsource_medium,\r\n        {{ unnest_key('event_params', 'ga_session_id', 'int_value') }},\r\n        {{ unnest_key('event_params', 'page_location') }},\r\n        {{ unnest_key('event_params', 'ga_session_number',  'int_value') }},\r\n        (case when (SELECT value.string_value FROM unnest(event_params) WHERE key = \"session_engaged\") = \"1\" then 1 end) as session_engaged,\r\n        {{ unnest_key('event_params', 'engagement_time_msec', 'int_value') }},\r\n        {{ unnest_key('event_params', 'page_title') }},\r\n        {{ unnest_key('event_params', 'page_referrer') }},\r\n        {{ unnest_key('event_params', 'source') }},\r\n        {{ unnest_key('event_params', 'medium') }},\r\n        {{ unnest_key('event_params', 'campaign') }}\r\n    from source_data\r\n\r\n),\r\n\r\n/* create a unique identifier for each event */\r\ncreate_surrogate_key as(\r\n\r\n    select\r\n        *,\r\n        {{ dbt_utils.surrogate_key(['event_timestamp', 'ga_session_id', 'event_name', 'engagement_time_msec'])}}  as sk_id\r\n    from renamed_and_unnested\r\n    \r\n)\r\n\r\n\r\nselect * from create_surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.sql_repository_bz.get_last_n_days_date_range", "macro.sql_repository_bz.unnest_key", "macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"field": "event_date_dt", "data_type": "date"}, "partitions": ["date_sub(current_date, interval 1 day)", "date_sub(current_date, interval 2 day)", "date_sub(current_date, interval 3 day)"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "stg_ga4_events_custom"], "unique_id": "model.sql_repository_bz.stg_ga4_events_custom", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/events/stg_ga4_events_custom.sql", "original_file_path": "models/01_staging/google_analytics/events/stg_ga4_events_custom.sql", "name": "stg_ga4_events_custom", "alias": "stg_ga4_events_custom", "checksum": {"name": "sha256", "checksum": "0c7a1bf2afdde585d1541e974181f889036677ac204ec560163cdedbf46dd4ce"}, "tags": [], "refs": [], "sources": [["ga4_bz_overall", "ga4_bz_overall_events"]], "description": "this model shows all custom GA4 events of the current Overall Property", "columns": {"event_name": {"name": "event_name", "description": "the name of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sk_id": {"name": "sk_id", "description": "the unique primary key created as hashed value including event_timestamp, session_id and event_name", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/events/_models_ga4_events.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/stg_ga4_events_custom.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": {"field": "event_date_dt", "data_type": "date"}, "partitions": ["date_sub(current_date, interval 1 day)", "date_sub(current_date, interval 2 day)", "date_sub(current_date, interval 3 day)"]}, "created_at": 1663750852.4749918, "compiled_sql": "\n    \n        \n    \n        \n    \n        \n    \n    \n\n\nwith source_data as (\n\n    select\n        parse_date('%Y%m%d',event_date) as event_date_dt,\n        event_timestamp,\n        event_name,\n        event_params,\n        user_id, --always empty\n        user_pseudo_id,\n        device,\n        event_dimensions,\n        traffic_source,\n        ecommerce\n    from `bergzeit`.`analytics_317045356`.`events_*`\n        where _table_suffix not like '%intraday%'\n        and event_name like('_custom%')\n    \n        \n                and parse_date('%Y%m%d', _TABLE_SUFFIX) in (date_sub(current_date, interval 1 day),date_sub(current_date, interval 2 day),date_sub(current_date, interval 3 day))\n        \n\n),\n\nrenamed_and_unnested as (\n\n    select\n        event_date_dt,\n        event_timestamp,\n        lower(replace(trim(event_name), \" \", \"_\")) as event_name, -- Clean up all event names to be snake cased\n        user_pseudo_id,\n        device.category as page_device,\n        device.web_info.hostname as page_hostname,\n        lower(traffic_source.name) as trafficsource_name,\n        traffic_source.source as trafficsource_source,\n        traffic_source.medium as trafficsource_medium,\n        (select value.int_value from unnest(event_params) where key = 'ga_session_id') as \n\n    ga_session_id,\n        (select value.string_value from unnest(event_params) where key = 'page_location') as \n\n    page_location,\n        (select value.int_value from unnest(event_params) where key = 'ga_session_number') as \n\n    ga_session_number,\n        (case when (SELECT value.string_value FROM unnest(event_params) WHERE key = \"session_engaged\") = \"1\" then 1 end) as session_engaged,\n        (select value.int_value from unnest(event_params) where key = 'engagement_time_msec') as \n\n    engagement_time_msec,\n        (select value.string_value from unnest(event_params) where key = 'page_title') as \n\n    page_title,\n        (select value.string_value from unnest(event_params) where key = 'page_referrer') as \n\n    page_referrer,\n        (select value.string_value from unnest(event_params) where key = 'source') as \n\n    source,\n        (select value.string_value from unnest(event_params) where key = 'medium') as \n\n    medium,\n        (select value.string_value from unnest(event_params) where key = 'campaign') as \n\n    campaign\n    from source_data\n\n),\n\n/* create a unique identifier for each event */\ncreate_surrogate_key as(\n\n    select\n        *,\n        to_hex(md5(cast(coalesce(cast(event_timestamp as \n    string\n), '') || '-' || coalesce(cast(ga_session_id as \n    string\n), '') || '-' || coalesce(cast(event_name as \n    string\n), '') || '-' || coalesce(cast(engagement_time_msec as \n    string\n), '') as \n    string\n)))  as sk_id\n    from renamed_and_unnested\n    \n)\n\n\nselect * from create_surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_custom`"}, "model.sql_repository_bz.stg_ga_events_per_page": {"raw_sql": "{{ \r\n    config(\r\n        materialized='incremental',\r\n        incremental_strategy = 'insert_overwrite',\r\n        on_schema_change='fail',\r\n        partition_by={ 'field': 'date', 'data_type': 'date', 'granularity': 'day' }\r\n    ) \r\n}} \r\n\r\nwith events_by_day_and_hostname as (\r\n\r\n    select\r\n        parse_date('%Y%m%d', date) as date,\r\n        hits.page.hostname as hostname,\r\n        split(page.pagePath,'?')[offset(0)] as page,\r\n        device.devicecategory as device,\r\n        hits.type as hit_type,\r\n\r\n        /* convert eec action types indices to values > TBD: rewrite as central macro */\r\n        case\r\n            when hits.eCommerceAction.action_type = '1' then 'product_list'\r\n            when hits.eCommerceAction.action_type = '2' then 'detail_view'\r\n            when hits.eCommerceAction.action_type = '3' then 'add_to_cart'\r\n            when hits.eCommerceAction.action_type = '4' then 'remove_from_cart'\r\n            when hits.eCommerceAction.action_type IN ('5', '6', '7', '8') then 'checkout'\r\n            else 'no_eec'\r\n        end as eec_actiontype,\r\n        hits.eventInfo.eventAction as event_action,\r\n        hits.eventInfo.eventCategory as event_category,\r\n        hits.eventInfo.eventLabel as event_label,\r\n        count(hits.eventInfo.eventLabel) as event_count, --why count the event label? all eec Events don't have a label and hence the event_count is 0 for those.\r\n        sum(if(hits.eventInfo.eventLabel like ('%testbericht-lesen%'),1,0)) as event_count_testbericht\r\n    from\r\n        {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n        unnest(hits) AS hits\r\n    where \r\n        _TABLE_SUFFIX not like '%intraday%'\r\n\r\n        {% if is_incremental() %}\r\n        and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\r\n        {% else %}\r\n        and parse_date('%Y%m%d', _TABLE_SUFFIX) between {{ get_financial_year_to_yesterday_date_range()}}\r\n        {% endif %}\r\n    group by 1,2,3,4,5,6,7,8,9\r\n\r\n),\r\n\r\n/* create a unique identifier for each event */\r\nevent_surrogate_key as(\r\n\r\n    select\r\n        *,\r\n        {{ dbt_utils.surrogate_key([ 'date', 'hostname', 'page', 'device', 'hit_type' , 'event_action', 'event_category','event_label'])}}  as sk_id\r\n    from events_by_day_and_hostname\r\n    \r\n)\r\n\r\n\r\nselect * from event_surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.sql_repository_bz.get_financial_year_to_yesterday_date_range", "macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "stg_ga_events_per_page"], "unique_id": "model.sql_repository_bz.stg_ga_events_per_page", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/events/stg_ga_events_per_page.sql", "original_file_path": "models/01_staging/google_analytics/events/stg_ga_events_per_page.sql", "name": "stg_ga_events_per_page", "alias": "stg_ga_events_per_page", "checksum": {"name": "sha256", "checksum": "cf8792c27d4441aa4880e80941a447b9c8ba45790c43a1fa29a6330cbfc475c8"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model collects all events and related page", "columns": {"sk_id": {"name": "sk_id", "description": "a unique identifier of the event", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/events/_models_ga_events.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/stg_ga_events_per_page.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.5921748, "compiled_sql": " \n\nwith events_by_day_and_hostname as (\n\n    select\n        parse_date('%Y%m%d', date) as date,\n        hits.page.hostname as hostname,\n        split(page.pagePath,'?')[offset(0)] as page,\n        device.devicecategory as device,\n        hits.type as hit_type,\n\n        /* convert eec action types indices to values > TBD: rewrite as central macro */\n        case\n            when hits.eCommerceAction.action_type = '1' then 'product_list'\n            when hits.eCommerceAction.action_type = '2' then 'detail_view'\n            when hits.eCommerceAction.action_type = '3' then 'add_to_cart'\n            when hits.eCommerceAction.action_type = '4' then 'remove_from_cart'\n            when hits.eCommerceAction.action_type IN ('5', '6', '7', '8') then 'checkout'\n            else 'no_eec'\n        end as eec_actiontype,\n        hits.eventInfo.eventAction as event_action,\n        hits.eventInfo.eventCategory as event_category,\n        hits.eventInfo.eventLabel as event_label,\n        count(hits.eventInfo.eventLabel) as event_count, --why count the event label? all eec Events don't have a label and hence the event_count is 0 for those.\n        sum(if(hits.eventInfo.eventLabel like ('%testbericht-lesen%'),1,0)) as event_count_testbericht\n    from\n        `bergzeit`.`79472326`.`ga_sessions_*`,\n        unnest(hits) AS hits\n    where \n        _TABLE_SUFFIX not like '%intraday%'\n\n        \n        and _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\n        \n    group by 1,2,3,4,5,6,7,8,9\n\n),\n\n/* create a unique identifier for each event */\nevent_surrogate_key as(\n\n    select\n        *,\n        to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(hostname as \n    string\n), '') || '-' || coalesce(cast(page as \n    string\n), '') || '-' || coalesce(cast(device as \n    string\n), '') || '-' || coalesce(cast(hit_type as \n    string\n), '') || '-' || coalesce(cast(event_action as \n    string\n), '') || '-' || coalesce(cast(event_category as \n    string\n), '') || '-' || coalesce(cast(event_label as \n    string\n), '') as \n    string\n)))  as sk_id\n    from events_by_day_and_hostname\n    \n)\n\n\nselect * from event_surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_events_per_page`"}, "model.sql_repository_bz.stg_ga_events": {"raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy = 'insert_overwrite',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'date', 'data_type': 'date', 'granularity': 'day' }\r\n    ) \r\n}} \r\n\r\n\r\n with ga_events as (\r\n\r\n    select\r\n        /* generate unique md5 hash event key */\r\n        {{ dbt_utils.surrogate_key([\r\n            'date', 'hits.time', \r\n            'fullvisitorid', 'visitid', \r\n            'hits.page.pagepath', 'hits.page.hostname', 'hits.type', \r\n            'hits.eCommerceAction.action_type', 'hits.eventInfo.eventAction', \r\n            'hits.eventInfo.eventCategory', 'hits.eventInfo.eventLabel'\r\n        ])}}  as event_id,\r\n\r\n        parse_date('%Y%m%d', date) as date,\r\n        hits.time as milliseconds_from_start,\r\n        visitid || '_' || fullvisitorid as session_id,\r\n        hits.type as event_type,\r\n        split(hits.page.pagepath,'?')[safe_offset(0)] as page_path,\r\n        hits.page.hostname as page_hostname,\r\n        device.devicecategory as user_device,\r\n        hits.isentrance as event_is_entrance,\r\n\r\n        /* convert eec action types indices to values > TBD: rewrite as central macro */\r\n        case \r\n            when hits.eCommerceAction.action_type = \"1\" then \"product_list\"\r\n            when hits.eCommerceAction.action_type = \"2\" then \"detail_view\"\r\n            when hits.eCommerceAction.action_type = \"3\" then \"add_to_cart\"\r\n            when hits.eCommerceAction.action_type = \"4\" then \"remove_from_cart\"\r\n            when hits.eCommerceAction.action_type IN (\"5\", \"6\", \"7\", \"8\") then \"checkout\"\r\n            else \"no_eec\"\r\n        end as eec_actiontype,\r\n        \r\n        hits.eventInfo.eventAction as event_action,\r\n        hits.eventInfo.eventCategory as event_category,\r\n        hits.eventInfo.eventLabel as event_label,\r\n\r\n        /* Getting custom dimension indives and values via subquery for all used indices */\r\n        {% for dimension in var('ga_3used_custom_dimensions') -%}\r\n            {% set cd_column_name = 'cd_' + dimension.name|string -%}\r\n            (select value from unnest(hits.customDimensions) where index = {{dimension.index}}) as {{cd_column_name}} {%- if not loop.last -%}, {% endif %}\r\n        {% endfor %} \r\n        \r\n    from\r\n        {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n        unnest(hits) as hits\r\n\r\n    where \r\n        _TABLE_SUFFIX not like '%intraday%'\r\n        {% if is_incremental() %}\r\n        and \r\n            _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\r\n        {% else %}\r\n        and \r\n            parse_date('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(30) }}\r\n        {% endif %}\r\n    \r\n)\r\n\r\nselect * from ga_events", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt.is_incremental", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": ["analytics-alerts", "daily-alerts"], "meta": {"owner": "@Chris G"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "stg_ga_events"], "unique_id": "model.sql_repository_bz.stg_ga_events", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/events/stg_ga_events.sql", "original_file_path": "models/01_staging/google_analytics/events/stg_ga_events.sql", "name": "stg_ga_events", "alias": "stg_ga_events", "checksum": {"name": "sha256", "checksum": "3e26bbde847941917cd99c032177d3e075e335f8b45ab4b1f18150d893dc4baf"}, "tags": ["analytics-alerts", "daily-alerts"], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model extracts all custom dimensions for an event", "columns": {"event_id": {"name": "event_id", "description": "a unique identifier of the event based on time, metadata and session id", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/events/_models_ga_events.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/stg_ga_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.6071203, "compiled_sql": " \n\n\n with ga_events as (\n\n    select\n        /* generate unique md5 hash event key */\n        to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(hits.time as \n    string\n), '') || '-' || coalesce(cast(fullvisitorid as \n    string\n), '') || '-' || coalesce(cast(visitid as \n    string\n), '') || '-' || coalesce(cast(hits.page.pagepath as \n    string\n), '') || '-' || coalesce(cast(hits.page.hostname as \n    string\n), '') || '-' || coalesce(cast(hits.type as \n    string\n), '') || '-' || coalesce(cast(hits.eCommerceAction.action_type as \n    string\n), '') || '-' || coalesce(cast(hits.eventInfo.eventAction as \n    string\n), '') || '-' || coalesce(cast(hits.eventInfo.eventCategory as \n    string\n), '') || '-' || coalesce(cast(hits.eventInfo.eventLabel as \n    string\n), '') as \n    string\n)))  as event_id,\n\n        parse_date('%Y%m%d', date) as date,\n        hits.time as milliseconds_from_start,\n        visitid || '_' || fullvisitorid as session_id,\n        hits.type as event_type,\n        split(hits.page.pagepath,'?')[safe_offset(0)] as page_path,\n        hits.page.hostname as page_hostname,\n        device.devicecategory as user_device,\n        hits.isentrance as event_is_entrance,\n\n        /* convert eec action types indices to values > TBD: rewrite as central macro */\n        case \n            when hits.eCommerceAction.action_type = \"1\" then \"product_list\"\n            when hits.eCommerceAction.action_type = \"2\" then \"detail_view\"\n            when hits.eCommerceAction.action_type = \"3\" then \"add_to_cart\"\n            when hits.eCommerceAction.action_type = \"4\" then \"remove_from_cart\"\n            when hits.eCommerceAction.action_type IN (\"5\", \"6\", \"7\", \"8\") then \"checkout\"\n            else \"no_eec\"\n        end as eec_actiontype,\n        \n        hits.eventInfo.eventAction as event_action,\n        hits.eventInfo.eventCategory as event_category,\n        hits.eventInfo.eventLabel as event_label,\n\n        /* Getting custom dimension indives and values via subquery for all used indices */\n        (select value from unnest(hits.customDimensions) where index = 2) as cd_event_ab_hit, \n        (select value from unnest(hits.customDimensions) where index = 3) as cd_user_login_status, \n        (select value from unnest(hits.customDimensions) where index = 4) as cd_page_type, \n        (select value from unnest(hits.customDimensions) where index = 5) as cd_product_delivery_time, \n        (select value from unnest(hits.customDimensions) where index = 6) as cd_event_gclid, \n        (select value from unnest(hits.customDimensions) where index = 7) as cd_page_product_count, \n        (select value from unnest(hits.customDimensions) where index = 8) as cd_product_is_highlight, \n        (select value from unnest(hits.customDimensions) where index = 9) as cd_product_id, \n        (select value from unnest(hits.customDimensions) where index = 10) as cd_page_category_path, \n        (select value from unnest(hits.customDimensions) where index = 11) as cd_page_type_specific, \n        (select value from unnest(hits.customDimensions) where index = 12) as cd_product_badge, \n        (select value from unnest(hits.customDimensions) where index = 13) as cd_product_image_count, \n        (select value from unnest(hits.customDimensions) where index = 15) as cd_event_recom_type, \n        (select value from unnest(hits.customDimensions) where index = 21) as cd_page_magazine_category, \n        (select value from unnest(hits.customDimensions) where index = 22) as cd_page_magazine_publication_date, \n        (select value from unnest(hits.customDimensions) where index = 23) as cd_page_magazine_sportstype, \n        (select value from unnest(hits.customDimensions) where index = 24) as cd_page_magazine_pagetype, \n        (select value from unnest(hits.customDimensions) where index = 25) as cd_session_minubo_id, \n        (select value from unnest(hits.customDimensions) where index = 26) as cd_event_is_affiliate\n         \n        \n    from\n        `bergzeit`.`79472326`.`ga_sessions_*`,\n        unnest(hits) as hits\n\n    where \n        _TABLE_SUFFIX not like '%intraday%'\n        \n        and \n            _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',date_sub(current_date(), interval 1 day))\n        \n    \n)\n\nselect * from ga_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_events`"}, "model.sql_repository_bz.stg_ga4_events_standard": {"raw_sql": "{% set partitions_to_replace = [] %}\r\n    {% for i in range(3) %}\r\n        {% set partitions_to_replace = partitions_to_replace.append('date_sub(current_date, interval ' + (i+1)|string + ' day)') %}\r\n    {% endfor %}\r\n    {{\r\n        config(\r\n            materialized = 'incremental',\r\n            incremental_strategy = 'insert_overwrite',\r\n            partition_by={\r\n                \"field\": \"event_date_dt\",\r\n                \"data_type\": \"date\"\r\n            },\r\n            partitions = partitions_to_replace\r\n        )\r\n    }}\r\n\r\n\r\nwith source_data as (\r\n\r\n    select\r\n        parse_date('%Y%m%d', event_date) as event_date_dt,\r\n        event_timestamp,\r\n        event_name,\r\n        event_params,\r\n        device.category as page_device,\r\n        user_pseudo_id,\r\n        device.web_info.hostname as page_hostname,\r\n        lower(traffic_source.name) as trafficsource_name,\r\n        traffic_source.source as trafficsource_source,\r\n        traffic_source.medium as trafficsource_medium,\r\n        items\r\n    from {{ source('ga4_bz_overall', 'ga4_bz_overall_events') }}\r\n        where _TABLE_SUFFIX not like '%intraday%'\r\n        and not regexp_contains(event_name, 'cart|checkout|payment|purchase|_custom')\r\n\r\n        {% if is_incremental() %}\r\n        and parse_date('%Y%m%d', _TABLE_SUFFIX) in ({{ partitions_to_replace | join(',') }})\r\n        {% else %}\r\n        and parse_date('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(30) }}\r\n        {% endif %}\r\n\r\n),\r\n\r\nrenamed_and_unnested as (\r\n\r\n    select\r\n        event_date_dt,\r\n        event_timestamp,\r\n        lower(replace(trim(event_name), \" \", \"_\")) as event_name, -- Clean up all event names to be snake cased\r\n        user_pseudo_id,\r\n        page_device,\r\n        page_hostname,\r\n        trafficsource_name,\r\n        trafficsource_source,\r\n        trafficsource_medium,\r\n        items,\r\n        to_json_string(items) as hashable_items,\r\n        {{ unnest_key('event_params', 'ga_session_id', 'int_value') }},\r\n        {{ unnest_key('event_params', 'page_location') }},\r\n        {{ unnest_key('event_params', 'ga_session_number',  'int_value') }},\r\n        (case when (select value.string_value from unnest(event_params) where key = \"session_engaged\") = \"1\" then 1 end) as session_engaged,\r\n        {{ unnest_key('event_params', 'engagement_time_msec', 'int_value') }},\r\n        {{ unnest_key('event_params', 'page_title') }},\r\n        {{ unnest_key('event_params', 'page_referrer') }},\r\n        {{ unnest_key('event_params', 'source') }},\r\n        {{ unnest_key('event_params', 'medium') }},\r\n        {{ unnest_key('event_params', 'campaign') }}\r\n    from source_data\r\n\r\n),\r\n\r\n/* create a unique identifier for each event */\r\ncreate_surrogate_key as(\r\n\r\n    select\r\n        * except(hashable_items),\r\n        {{ dbt_utils.surrogate_key(['event_timestamp', 'ga_session_id', 'event_name','engagement_time_msec', 'hashable_items'])}}  as sk_id\r\n    from renamed_and_unnested\r\n    \r\n)\r\n\r\n\r\nselect * from create_surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.sql_repository_bz.get_last_n_days_date_range", "macro.sql_repository_bz.unnest_key", "macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"field": "event_date_dt", "data_type": "date"}, "partitions": ["date_sub(current_date, interval 1 day)", "date_sub(current_date, interval 2 day)", "date_sub(current_date, interval 3 day)"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "stg_ga4_events_standard"], "unique_id": "model.sql_repository_bz.stg_ga4_events_standard", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/events/stg_ga4_events_standard.sql", "original_file_path": "models/01_staging/google_analytics/events/stg_ga4_events_standard.sql", "name": "stg_ga4_events_standard", "alias": "stg_ga4_events_standard", "checksum": {"name": "sha256", "checksum": "8e87e7495c0f6f475aae587b3d0b4abf203f89264bd2afb2faf230c02d66ac4f"}, "tags": [], "refs": [], "sources": [["ga4_bz_overall", "ga4_bz_overall_events"]], "description": "this model shows all GA4 standard events of the current Overall Property", "columns": {"event_name": {"name": "event_name", "description": "the name of the event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "key": {"name": "key", "description": "the event parameter's key, either automatically or custom defined", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sk_id": {"name": "sk_id", "description": "the unique primary key created as hashed value including event_timestamp, session_id and event_name", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/events/_models_ga4_events.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/stg_ga4_events_standard.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": {"field": "event_date_dt", "data_type": "date"}, "partitions": ["date_sub(current_date, interval 1 day)", "date_sub(current_date, interval 2 day)", "date_sub(current_date, interval 3 day)"]}, "created_at": 1663750852.4852173, "compiled_sql": "\n    \n        \n    \n        \n    \n        \n    \n    \n\n\nwith source_data as (\n\n    select\n        parse_date('%Y%m%d', event_date) as event_date_dt,\n        event_timestamp,\n        event_name,\n        event_params,\n        device.category as page_device,\n        user_pseudo_id,\n        device.web_info.hostname as page_hostname,\n        lower(traffic_source.name) as trafficsource_name,\n        traffic_source.source as trafficsource_source,\n        traffic_source.medium as trafficsource_medium,\n        items\n    from `bergzeit`.`analytics_317045356`.`events_*`\n        where _TABLE_SUFFIX not like '%intraday%'\n        and not regexp_contains(event_name, 'cart|checkout|payment|purchase|_custom')\n\n        \n        and parse_date('%Y%m%d', _TABLE_SUFFIX) in (date_sub(current_date, interval 1 day),date_sub(current_date, interval 2 day),date_sub(current_date, interval 3 day))\n        \n\n),\n\nrenamed_and_unnested as (\n\n    select\n        event_date_dt,\n        event_timestamp,\n        lower(replace(trim(event_name), \" \", \"_\")) as event_name, -- Clean up all event names to be snake cased\n        user_pseudo_id,\n        page_device,\n        page_hostname,\n        trafficsource_name,\n        trafficsource_source,\n        trafficsource_medium,\n        items,\n        to_json_string(items) as hashable_items,\n        (select value.int_value from unnest(event_params) where key = 'ga_session_id') as \n\n    ga_session_id,\n        (select value.string_value from unnest(event_params) where key = 'page_location') as \n\n    page_location,\n        (select value.int_value from unnest(event_params) where key = 'ga_session_number') as \n\n    ga_session_number,\n        (case when (select value.string_value from unnest(event_params) where key = \"session_engaged\") = \"1\" then 1 end) as session_engaged,\n        (select value.int_value from unnest(event_params) where key = 'engagement_time_msec') as \n\n    engagement_time_msec,\n        (select value.string_value from unnest(event_params) where key = 'page_title') as \n\n    page_title,\n        (select value.string_value from unnest(event_params) where key = 'page_referrer') as \n\n    page_referrer,\n        (select value.string_value from unnest(event_params) where key = 'source') as \n\n    source,\n        (select value.string_value from unnest(event_params) where key = 'medium') as \n\n    medium,\n        (select value.string_value from unnest(event_params) where key = 'campaign') as \n\n    campaign\n    from source_data\n\n),\n\n/* create a unique identifier for each event */\ncreate_surrogate_key as(\n\n    select\n        * except(hashable_items),\n        to_hex(md5(cast(coalesce(cast(event_timestamp as \n    string\n), '') || '-' || coalesce(cast(ga_session_id as \n    string\n), '') || '-' || coalesce(cast(event_name as \n    string\n), '') || '-' || coalesce(cast(engagement_time_msec as \n    string\n), '') || '-' || coalesce(cast(hashable_items as \n    string\n), '') as \n    string\n)))  as sk_id\n    from renamed_and_unnested\n    \n)\n\n\nselect * from create_surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_standard`"}, "model.sql_repository_bz.stg_ga_magazin_custom_dims": {"raw_sql": "with magazin_custom_dims_per_page as(\r\n\r\n    select\r\n        concat('https://',hits.page.hostname) as hostname,\r\n        split(hits.page.pagepath,'?')[safe_offset(0)] as page,\r\n        max(parse_date('%d-%m-%Y',\r\n            (select value from unnest(hits.customDimensions) where index = 22 group by value)))\r\n        as max_magPublicationDate, /*if post was reworked use the last publication date */\r\n    from\r\n        {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }},\r\n        unnest(hits) as hits\r\n\r\n    where _TABLE_SUFFIX not like '%intraday%'\r\n        and hits.page.hostname = 'www.bergzeit.de'\r\n        and hits.page.pagepath like('%/magazin/%')\r\n        and hits.type = 'PAGE' \r\n        and PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(30) }}\r\n    group by 1,2\r\n\r\n),\r\n\r\ncreate_primary_key as (\r\n\r\n    select\r\n        {{dbt_utils.surrogate_key(['hostname','page'])}}  as sk_id,\r\n        *\r\n    from magazin_custom_dims_per_page\r\n\r\n)\r\n\r\nselect * from create_primary_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range", "macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "magazine", "stg_ga_magazin_custom_dims"], "unique_id": "model.sql_repository_bz.stg_ga_magazin_custom_dims", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/magazine/stg_ga_magazin_custom_dims.sql", "original_file_path": "models/01_staging/google_analytics/magazine/stg_ga_magazin_custom_dims.sql", "name": "stg_ga_magazin_custom_dims", "alias": "stg_ga_magazin_custom_dims", "checksum": {"name": "sha256", "checksum": "63d0ede5ec3421a57e29e7d5d0c548f0024a97885b3b771c212dfbc2fc07e53e"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model extracts the publication date custom dim for each magazine article opened in the last 30 days", "columns": {"page": {"name": "page", "description": "url without utm parameters", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hostname": {"name": "hostname", "description": "https:// concatenated with the ga hostname", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_magPublicationDate": {"name": "max_magPublicationDate", "description": "last publication date of an article to account for reworks", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sk_id": {"name": "sk_id", "description": "the unique primary key created as hashed value including hostname and page", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/magazine/_models_ga_magazine.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/magazine/stg_ga_magazin_custom_dims.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750852.754226, "compiled_sql": "with magazin_custom_dims_per_page as(\n\n    select\n        concat('https://',hits.page.hostname) as hostname,\n        split(hits.page.pagepath,'?')[safe_offset(0)] as page,\n        max(parse_date('%d-%m-%Y',\n            (select value from unnest(hits.customDimensions) where index = 22 group by value)))\n        as max_magPublicationDate, /*if post was reworked use the last publication date */\n    from\n        `bergzeit`.`79472326`.`ga_sessions_*`,\n        unnest(hits) as hits\n\n    where _TABLE_SUFFIX not like '%intraday%'\n        and hits.page.hostname = 'www.bergzeit.de'\n        and hits.page.pagepath like('%/magazin/%')\n        and hits.type = 'PAGE' \n        and PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1,2\n\n),\n\ncreate_primary_key as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(hostname as \n    string\n), '') || '-' || coalesce(cast(page as \n    string\n), '') as \n    string\n)))  as sk_id,\n        *\n    from magazin_custom_dims_per_page\n\n)\n\nselect * from create_primary_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_magazin_custom_dims`"}, "model.sql_repository_bz.stg_ga_transactions_conversion_backfill": {"raw_sql": "with ga_transactions_conversion_backfill as (\r\n\r\n    select\r\n        parse_date('%Y%m%d',  date) as ga_date,\r\n        visitid || '_' || fullvisitorid as ga_session_id,\r\n        fullvisitorid as ga_fullvisitor_id,\r\n        hits.page.hostname as ga_hostname,\r\n        trafficsource.adwordsClickInfo.gclid as ga_gclid,\r\n        channelgrouping as ga_acquisition_channel,\r\n        trafficsource.campaign as ga_campaign,\r\n        device.devicecategory as ga_device_category,\r\n        /* primary key */\r\n        hits.item.transactionid as ga_transaction_id,\r\n        round(hits.transaction.transactionrevenue / 1000000,3) as ga_transaction_revenue,\r\n        round(hits.transaction.transactiontax / 1000000,3) as ga_transaction_tax,\r\n        round(hits.transaction.transactionshipping / 1000000,3) as ga_transaction_shipping\r\n    from\r\n        {{ source('ga_bz_master_view_overall', 'ga_sessions_all')}},\r\n        unnest(hits) as hits,\r\n        unnest(product) as product\r\n    where \r\n        _TABLE_SUFFIX not like '%intraday%'\r\n        and hits.item.transactionid is not null \r\n        and productrevenue > 0\r\n        and parse_date('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(1) }}\r\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\r\n\r\n) \r\n\r\nselect * from ga_transactions_conversion_backfill", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "stg_ga_transactions_conversion_backfill"], "unique_id": "model.sql_repository_bz.stg_ga_transactions_conversion_backfill", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/transactions/stg_ga_transactions_conversion_backfill.sql", "original_file_path": "models/01_staging/google_analytics/transactions/stg_ga_transactions_conversion_backfill.sql", "name": "stg_ga_transactions_conversion_backfill", "alias": "stg_ga_transactions_conversion_backfill", "checksum": {"name": "sha256", "checksum": "843d4b9d13217e9e8ef960a6c630bfa7b3bc6ebcadc1c92dadbcd39624699eb7"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model lists yesterdays GA overall transactions for conversion backfill", "columns": {"ga_date": {"name": "ga_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ga_transaction_id": {"name": "ga_transaction_id", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/stg_ga_transactions_conversion_backfill.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750852.772653, "compiled_sql": "with ga_transactions_conversion_backfill as (\n\n    select\n        parse_date('%Y%m%d',  date) as ga_date,\n        visitid || '_' || fullvisitorid as ga_session_id,\n        fullvisitorid as ga_fullvisitor_id,\n        hits.page.hostname as ga_hostname,\n        trafficsource.adwordsClickInfo.gclid as ga_gclid,\n        channelgrouping as ga_acquisition_channel,\n        trafficsource.campaign as ga_campaign,\n        device.devicecategory as ga_device_category,\n        /* primary key */\n        hits.item.transactionid as ga_transaction_id,\n        round(hits.transaction.transactionrevenue / 1000000,3) as ga_transaction_revenue,\n        round(hits.transaction.transactiontax / 1000000,3) as ga_transaction_tax,\n        round(hits.transaction.transactionshipping / 1000000,3) as ga_transaction_shipping\n    from\n        `bergzeit`.`79472326`.`ga_sessions_*`,\n        unnest(hits) as hits,\n        unnest(product) as product\n    where \n        _TABLE_SUFFIX not like '%intraday%'\n        and hits.item.transactionid is not null \n        and productrevenue > 0\n        and parse_date('%Y%m%d', _TABLE_SUFFIX) between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n\n) \n\nselect * from ga_transactions_conversion_backfill", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions_conversion_backfill`"}, "model.sql_repository_bz.stg_ga_transactions_with_adclick_involvement": {"raw_sql": "/* fetches all transaction ids of last 30days with any adaccount involvement in the analytics customer journey */\r\n\r\nwith all_visitors_with_ad_touchpoints as (\r\n\r\n    select distinct fullvisitorid\r\n    from {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }}\r\n    where\r\n        _TABLE_SUFFIX not like '%intraday%'\r\n        and parse_date('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(30) }}\r\n        -- check against ad account list of Perf, Brand, Display\r\n        and (cast(trafficsource.adwordsclickinfo.customerid as string) in unnest( {{ var('gads_account_ids') }}) )\r\n\r\n),\r\n\r\nall_journeys_with_ad_involvement as (\r\n\r\n    select\r\n        parse_date('%Y%m%d',  date) as ad_date,\r\n        -- the Google Ads account ID\r\n        trafficsource.adwordsclickinfo.customerid as adaccountid,\r\n        hits.item.transactionid as transactionid,\r\n        -- for later joins \r\n        1 as found\r\n    from\r\n        {{ source('ga_bz_master_view_overall', 'ga_sessions_all') }} as all_transactions_and_ad_accounts, \r\n        unnest(hits) as hits\r\n    where\r\n        -- filters all journeys and visitorIds with any ad account involvement in time range\r\n        exists ( \r\n            select * \r\n            from all_visitors_with_ad_touchpoints\r\n            where all_visitors_with_ad_touchpoints.fullvisitorid = all_transactions_and_ad_accounts.fullvisitorid\r\n        )\r\n        and _TABLE_SUFFIX not like '%intraday%'\r\n        and parse_date('%Y%m%d', _TABLE_SUFFIX) between {{ get_last_n_days_date_range(2) }}\r\n        and totals.transactions > 0\r\n        and hits.item.transactionid is not null\r\n\r\n), \r\n\r\njourneys_with_ad_involvement_and_sale as (\r\n\r\n    select\r\n        ad_date,\r\n        adaccountid as ad_adaccountid,\r\n        /* primary key */\r\n        transactionid as ad_transactionid,\r\n    from all_journeys_with_ad_involvement\r\n    where adaccountid is not null\r\n\r\n)\r\n\r\nselect * from journeys_with_ad_involvement_and_sale", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all", "source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "stg_ga_transactions_with_adclick_involvement"], "unique_id": "model.sql_repository_bz.stg_ga_transactions_with_adclick_involvement", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/transactions/stg_ga_transactions_with_adclick_involvement.sql", "original_file_path": "models/01_staging/google_analytics/transactions/stg_ga_transactions_with_adclick_involvement.sql", "name": "stg_ga_transactions_with_adclick_involvement", "alias": "stg_ga_transactions_with_adclick_involvement", "checksum": {"name": "sha256", "checksum": "2d874845126958d7d0f24d078c08029299d576bbf53503f5d6b684fe4fa7c402"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"], ["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model lists all transactions with addclick involvement for profit bidding", "columns": {"ad_transactionid": {"name": "ad_transactionid", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/stg_ga_transactions_with_adclick_involvement.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750852.7668955, "compiled_sql": "/* fetches all transaction ids of last 30days with any adaccount involvement in the analytics customer journey */\n\nwith all_visitors_with_ad_touchpoints as (\n\n    select distinct fullvisitorid\n    from `bergzeit`.`79472326`.`ga_sessions_*`\n    where\n        _TABLE_SUFFIX not like '%intraday%'\n        and parse_date('%Y%m%d', _TABLE_SUFFIX) between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n        -- check against ad account list of Perf, Brand, Display\n        and (cast(trafficsource.adwordsclickinfo.customerid as string) in unnest( ['1631966904', '8865602237', '9886399864', '9156948459', '8369274094', '1635925247', '7806554469', '5958867839', '3929840027', '3091405967', '1740354347', '1845331214', '4049291822', '2495559838', '7844181130', '1468347477', '3203491330', '5575738585']) )\n\n),\n\nall_journeys_with_ad_involvement as (\n\n    select\n        parse_date('%Y%m%d',  date) as ad_date,\n        -- the Google Ads account ID\n        trafficsource.adwordsclickinfo.customerid as adaccountid,\n        hits.item.transactionid as transactionid,\n        -- for later joins \n        1 as found\n    from\n        `bergzeit`.`79472326`.`ga_sessions_*` as all_transactions_and_ad_accounts, \n        unnest(hits) as hits\n    where\n        -- filters all journeys and visitorIds with any ad account involvement in time range\n        exists ( \n            select * \n            from all_visitors_with_ad_touchpoints\n            where all_visitors_with_ad_touchpoints.fullvisitorid = all_transactions_and_ad_accounts.fullvisitorid\n        )\n        and _TABLE_SUFFIX not like '%intraday%'\n        and parse_date('%Y%m%d', _TABLE_SUFFIX) between \n    date_sub(current_date(), interval 2 day)\n    and date_sub(current_date(), interval 1 day)\n\n        and totals.transactions > 0\n        and hits.item.transactionid is not null\n\n), \n\njourneys_with_ad_involvement_and_sale as (\n\n    select\n        ad_date,\n        adaccountid as ad_adaccountid,\n        /* primary key */\n        transactionid as ad_transactionid,\n    from all_journeys_with_ad_involvement\n    where adaccountid is not null\n\n)\n\nselect * from journeys_with_ad_involvement_and_sale", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions_with_adclick_involvement`"}, "model.sql_repository_bz.stg_ga_transactions": {"raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    incremental_strategy = 'insert_overwrite',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'ga_date', 'data_type': 'date', 'granularity': 'day' }\r\n    ) \r\n}} \r\n\r\nwith transactions as (\r\n  \r\n  select\r\n    {{ dbt_utils.surrogate_key([\r\n              'date', 'fullvisitorid', 'visitid'\r\n          ])}}  as sk_id,\r\n    parse_date('%Y%m%d',  date) as ga_date,\r\n    visitid || '_' || fullvisitorid as ga_session_id,\r\n    fullvisitorid as ga_fullvisitor_id,\r\n    hits.page.hostname as ga_hostname,\r\n    trafficsource.adwordsClickInfo.gclid as ga_gclid,\r\n    channelgrouping as ga_acquisition_channel,\r\n    {{high_level_channel_grouping('channelGrouping')}}  as ga_acquisition_channel_groups,\r\n    trafficsource.campaign as ga_campaign,\r\n    device.devicecategory as ga_device_category,\r\n    /* primary key */\r\n    hits.item.transactionid as ga_transaction_id,\r\n    round(hits.transaction.transactionrevenue / 1000000,3) as ga_transaction_revenue,\r\n    round(hits.transaction.transactiontax / 1000000,3) as ga_transaction_tax,\r\n    round(hits.transaction.transactionshipping / 1000000,3) as ga_transaction_shipping\r\n\r\n  from\r\n    {{ source('ga_bz_master_view_overall', 'ga_sessions_all')}},\r\n    unnest(hits) as hits,\r\n    unnest(product) as product\r\n    \r\n  where \r\n    _TABLE_SUFFIX not like '%intraday%'\r\n    and hits.item.transactionid is not null \r\n    and productrevenue > 0\r\n\r\n  {% if is_incremental() %}\r\n\r\n      and \r\n        _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n\r\n        {% else %}\r\n\r\n      and \r\n        (\r\n          -- club analysis needs transactions since club start (Nov 2020)\r\n        parse_date('%Y%m%d', _TABLE_SUFFIX) >= '2020-11-01' \r\n        )\r\n\r\n  {% endif %}\r\n\r\n  group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14\r\n)\r\n\r\nselect * from transactions", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.high_level_channel_grouping", "macro.dbt.is_incremental"], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "ga_date", "data_type": "date", "granularity": "day"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "stg_ga_transactions"], "unique_id": "model.sql_repository_bz.stg_ga_transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_analytics/transactions/stg_ga_transactions.sql", "original_file_path": "models/01_staging/google_analytics/transactions/stg_ga_transactions.sql", "name": "stg_ga_transactions", "alias": "stg_ga_transactions", "checksum": {"name": "sha256", "checksum": "8621a1c23995236aaa19dc5b0b1549eed8eebbf99a38dbc285cee9c488c78845"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "description": "this model lists all Google Analytics transactions, accounting for gaps due to missing consent", "columns": {"ga_transaction_id": {"name": "ga_transaction_id", "description": "the order id as provided by the ishop OMS commerce system", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "sk_id": {"name": "sk_id", "description": "unique session key, here foreign key for session table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ga_date": {"name": "ga_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/stg_ga_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "incremental", "incremental_strategy": "insert_overwrite", "on_schema_change": "fail", "partition_by": {"field": "ga_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750852.7758727, "compiled_sql": " \n\nwith transactions as (\n  \n  select\n    to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(fullvisitorid as \n    string\n), '') || '-' || coalesce(cast(visitid as \n    string\n), '') as \n    string\n)))  as sk_id,\n    parse_date('%Y%m%d',  date) as ga_date,\n    visitid || '_' || fullvisitorid as ga_session_id,\n    fullvisitorid as ga_fullvisitor_id,\n    hits.page.hostname as ga_hostname,\n    trafficsource.adwordsClickInfo.gclid as ga_gclid,\n    channelgrouping as ga_acquisition_channel,\n    \n  \n  case\n    when channelGrouping in ('Brand Paid Search', 'Organic Search Home', 'Direct') then 'Brand'\n    when channelGrouping in ('Generic Paid Search Google', 'Generic Paid Shopping Google', 'Display', 'Generic Paid Search Bing', 'PSM', 'Affiliate', 'Social Paid', 'Native') then 'Paid'\n    when channelGrouping in ('Organic Search Non-Home', 'Referral', 'Hersteller Links', 'Social Organic', 'Organic Search Magazin') then 'Organic'\n    when channelGrouping in ('Newsletter', 'Triggermail') then 'Email'\n  else 'Other'\n  end\n\n    as ga_acquisition_channel_groups,\n    trafficsource.campaign as ga_campaign,\n    device.devicecategory as ga_device_category,\n    /* primary key */\n    hits.item.transactionid as ga_transaction_id,\n    round(hits.transaction.transactionrevenue / 1000000,3) as ga_transaction_revenue,\n    round(hits.transaction.transactiontax / 1000000,3) as ga_transaction_tax,\n    round(hits.transaction.transactionshipping / 1000000,3) as ga_transaction_shipping\n\n  from\n    `bergzeit`.`79472326`.`ga_sessions_*`,\n    unnest(hits) as hits,\n    unnest(product) as product\n    \n  where \n    _TABLE_SUFFIX not like '%intraday%'\n    and hits.item.transactionid is not null \n    and productrevenue > 0\n\n  \n\n      and \n        _TABLE_SUFFIX between format_date('%Y%m%d', _dbt_max_partition) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\n\n        \n\n  group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14\n)\n\nselect * from transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions`"}, "model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim": {"raw_sql": "with channel_pilot_source_feeds_ipim as (\r\n\r\n    select\r\n        {{ dbt_utils.surrogate_key(['country', 'productid']) }} as country_product_id,\r\n        *\r\n    from {{ source('product_inventory', 'channelpilot_source_feeds_all') }}\r\n\r\n)\r\n\r\nselect * from channel_pilot_source_feeds_ipim", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.product_inventory.channelpilot_source_feeds_all"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": ["channelpilot-alerts", "daily-alerts"], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "stg_channel_pilot_source_feeds_ipim"], "unique_id": "model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/channelpilot_source/stg_channel_pilot_source_feeds_ipim.sql", "original_file_path": "models/01_staging/channelpilot_source/stg_channel_pilot_source_feeds_ipim.sql", "name": "stg_channel_pilot_source_feeds_ipim", "alias": "stg_channel_pilot_source_feeds_ipim", "checksum": {"name": "sha256", "checksum": "21abb962ec53278ac945493ce4d5e79710d442a3db31d3084156a4015f5a6630"}, "tags": ["channelpilot-alerts", "daily-alerts"], "refs": [], "sources": [["product_inventory", "channelpilot_source_feeds_all"]], "description": "a union of all channelpilot source feeds from Bergzeit SFTP, for data testing purposes", "columns": {"country_product_id": {"name": "country_product_id", "description": "the combined country and product_id as primary key", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "productid": {"name": "productid", "description": "the bergzeit product id of the child variant", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_description": {"name": "short_description", "description": "the short description of the product in one sentence", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_path": {"name": "category_path", "description": "a string of hierarchical categories that represents the primary category association", "meta": {}, "data_type": null, "quote": null, "tags": []}, "verkaufspreis": {"name": "verkaufspreis", "description": "the current price as displayed in the store", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uvp": {"name": "uvp", "description": "the recommended retail price for a product", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ean": {"name": "ean", "description": "the European article number, or a generally unique identifier per sku", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_title": {"name": "base_title", "description": "the product title without brand or style information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "externeid": {"name": "externeid", "description": "identifier tuple for generating image urls per product id", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/stg_channel_pilot_source_feeds_ipim.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750852.8637705, "compiled_sql": "with channel_pilot_source_feeds_ipim as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(country as \n    string\n), '') || '-' || coalesce(cast(productid as \n    string\n), '') as \n    string\n))) as country_product_id,\n        *\n    from `bergzeit`.`product_inventory`.`channelpilot_source_feeds_all`\n\n)\n\nselect * from channel_pilot_source_feeds_ipim", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`"}, "model.sql_repository_bz.stg_crawl_sitemap_urls_bergfreunde": {"raw_sql": "{% set prefix = 'https://www.bergfreunde.de/sitemap/sitemap_' %}\r\n\r\nwith sitemap_urls_bergfreunde as (\r\n\r\n    select\r\n        loc as url,\r\n        split(split(sitemap, '{{ prefix }}')[safe_offset(1)],'.xml.gz')[safe_offset(0)] as sitemap_name,\r\n        download_date,\r\n        lastmod,\r\n        image,\r\n        image_loc,\r\n        image_title\r\n    from {{source('crawl_data','bf_sitemap_current') }}\r\n    \r\n)\r\n\r\nselect * from sitemap_urls_bergfreunde", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.crawl_data.bf_sitemap_current"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "stg_crawl_sitemap_urls_bergfreunde"], "unique_id": "model.sql_repository_bz.stg_crawl_sitemap_urls_bergfreunde", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_crawl_data/stg_crawl_sitemap_urls_bergfreunde.sql", "original_file_path": "models/01_staging/google_crawl_data/stg_crawl_sitemap_urls_bergfreunde.sql", "name": "stg_crawl_sitemap_urls_bergfreunde", "alias": "stg_crawl_sitemap_urls_bergfreunde", "checksum": {"name": "sha256", "checksum": "a52d8cdb5bd61d6a2ecc98fa026d62f9246f5742d2e24c7caf4363b91255a241"}, "tags": [], "refs": [], "sources": [["crawl_data", "bf_sitemap_current"]], "description": "this model lists all current URLs in the bergfreunde sitemap with sub sitemap name", "columns": {"url": {"name": "url", "description": "the unique key of the table, as there is no historization of data", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_crawl_data/_models_stg_crawl.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/stg_crawl_sitemap_urls_bergfreunde.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750853.056117, "compiled_sql": "\n\nwith sitemap_urls_bergfreunde as (\n\n    select\n        loc as url,\n        split(split(sitemap, 'https://www.bergfreunde.de/sitemap/sitemap_')[safe_offset(1)],'.xml.gz')[safe_offset(0)] as sitemap_name,\n        download_date,\n        lastmod,\n        image,\n        image_loc,\n        image_title\n    from `bergzeit`.`CrawlLogfileData`.`sitemap_bergfreunde`\n    \n)\n\nselect * from sitemap_urls_bergfreunde", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_bergfreunde`"}, "model.sql_repository_bz.stg_crawl_gbot_logfiles": {"raw_sql": "{{ config(\r\n    partition_by={\r\n      \"field\": \"gbot_date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    }\r\n)}}\r\n\r\n\r\nwith googlebot_logfiles_daily as (\r\n\r\n    select \r\n        Date as gbot_date,\r\n        Domain as domain,\t\r\n        RequestTime as request_time,\r\n        concat('https://', RequestUrl) as url,\r\n        -- stripping out utm parameters, but keeping other query strings\r\n        concat('https://', split(RequestUrl,'?utm')[safe_offset(0)]) as url_noutm,\r\n        -- all image assets classified as is_image\r\n        case \r\n            when (RequestUrl LIKE \"%.jpg%\" OR RequestUrl LIKE \"%.svg%\" OR RequestUrl LIKE \"%.png%\" OR RequestUrl LIKE \"%.jpeg%\" OR RequestUrl LIKE \"%webp%\") then true\r\n            else false\r\n        end as is_image,\r\n        StatusCode as status_code,\t\r\n        Referer as referer\r\n    from {{ source('crawl_data','gbot_crawl_data') }}\r\n    where \r\n        date between {{ get_last_n_days_date_range(180) }}\r\n        -- Googlebot trying to update certain counters, thus skipped\r\n        and RequestUrl not like ('%PUT /%')\r\n\r\n)\r\n\r\nselect * from googlebot_logfiles_daily", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.crawl_data.gbot_crawl_data"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"field": "gbot_date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "stg_crawl_gbot_logfiles"], "unique_id": "model.sql_repository_bz.stg_crawl_gbot_logfiles", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_crawl_data/stg_crawl_gbot_logfiles.sql", "original_file_path": "models/01_staging/google_crawl_data/stg_crawl_gbot_logfiles.sql", "name": "stg_crawl_gbot_logfiles", "alias": "stg_crawl_gbot_logfiles", "checksum": {"name": "sha256", "checksum": "3a6e475159cb99bfa7c2ca5d7ca30d470f4fb9b2a8db5e397f45a596e9bab70f"}, "tags": [], "refs": [], "sources": [["crawl_data", "gbot_crawl_data"]], "description": "this model lists resources and URLs fetched by Googlebot with status code", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_crawl_data/_models_stg_crawl.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/stg_crawl_gbot_logfiles.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table", "partition_by": {"field": "gbot_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750853.040872, "compiled_sql": "\n\n\nwith googlebot_logfiles_daily as (\n\n    select \n        Date as gbot_date,\n        Domain as domain,\t\n        RequestTime as request_time,\n        concat('https://', RequestUrl) as url,\n        -- stripping out utm parameters, but keeping other query strings\n        concat('https://', split(RequestUrl,'?utm')[safe_offset(0)]) as url_noutm,\n        -- all image assets classified as is_image\n        case \n            when (RequestUrl LIKE \"%.jpg%\" OR RequestUrl LIKE \"%.svg%\" OR RequestUrl LIKE \"%.png%\" OR RequestUrl LIKE \"%.jpeg%\" OR RequestUrl LIKE \"%webp%\") then true\n            else false\n        end as is_image,\n        StatusCode as status_code,\t\n        Referer as referer\n    from `bergzeit`.`CrawlLogfileData`.`DailyCrawlData_All`\n    where \n        date between \n    date_sub(current_date(), interval 180 day)\n    and date_sub(current_date(), interval 1 day)\n\n        -- Googlebot trying to update certain counters, thus skipped\n        and RequestUrl not like ('%PUT /%')\n\n)\n\nselect * from googlebot_logfiles_daily", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_crawl_gbot_logfiles`"}, "model.sql_repository_bz.stg_crawl_sitemap_urls_all": {"raw_sql": "{{ \r\n  config(\r\n    materialized='table',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'crawl_date', 'data_type': 'date', 'granularity': 'day' }\r\n  ) \r\n}} \r\n\r\n/* for country list, see dbt_project.yml file */\r\nwith sitemap_urls_all as (\r\n\r\n    {% for country in var('country_sitemaps') %}\r\n        {% set country_sitemap = 'sitemap_data_' + country %}\r\n        select\r\n            {{ dbt_utils.surrogate_key(['date', 'url', 'sitemap_url']) }} as sk_id,\r\n            date as crawl_date,\r\n            '{{ country }}' as sitemap_country, \r\n            url,\r\n            lastmod_date,\r\n            changefreq,\r\n            priority,\r\n            /*if the sitemap url is an empty string it is contained in the image url*/\r\n            case\r\n              when char_length(sitemap_url) <= 1 then image_url_first\r\n              else sitemap_url\r\n            end as sitemap_url,\r\n            image_url_first,\r\n            product_sku\r\n        from {{ source('crawl_data', country_sitemap) }}\r\n        where date between {{ get_last_n_days_date_range(180) }}\r\n    \r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}\r\n\r\n),\r\n\r\n/* Extract the sitemap name from the sitemap url:\r\n   - for the OLD sitemap, split at backslash and save offset \r\n   - for the NEW sitemap, split at hyphen and save one offset for single word names \r\n     or save two offsets for two word names */\r\n   \r\nurls_with_sitemap_name as(\r\n  select\r\n    *,\r\n    case\r\n      when sitemap_url like('%?index=%') or sitemap_url like('%static%') \r\n        then split(sitemap_url,'/')[SAFE_OFFSET(4)]\r\n      when split(sitemap_url,'-')[SAFE_OFFSET(4)] is null \r\n        then split(split(sitemap_url,'-')[SAFE_OFFSET(3)],'.xml')[SAFE_OFFSET(0)]\r\n      else concat(split(split(sitemap_url,'-')[SAFE_OFFSET(3)],'.xml')[SAFE_OFFSET(0)],\r\n                  ' ',\r\n                  split(split(sitemap_url,'-')[SAFE_OFFSET(4)],'.xml')[SAFE_OFFSET(0)])\r\n    end as sitemap_name\r\n  from sitemap_urls_all\r\n\r\n)\r\n\r\nselect * from urls_with_sitemap_name", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.crawl_data.sitemap_data_de", "source.sql_repository_bz.crawl_data.sitemap_data_it", "source.sql_repository_bz.crawl_data.sitemap_data_nl", "source.sql_repository_bz.crawl_data.sitemap_data_uk"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "crawl_date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "stg_crawl_sitemap_urls_all"], "unique_id": "model.sql_repository_bz.stg_crawl_sitemap_urls_all", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_crawl_data/stg_crawl_sitemap_urls_all.sql", "original_file_path": "models/01_staging/google_crawl_data/stg_crawl_sitemap_urls_all.sql", "name": "stg_crawl_sitemap_urls_all", "alias": "stg_crawl_sitemap_urls_all", "checksum": {"name": "sha256", "checksum": "333ed1821966e8ee9d63e70fb6ea8dd1fdf8fd6bc67c6d99c4d729ded6c0c528"}, "tags": [], "refs": [], "sources": [["crawl_data", "sitemap_data_de"], ["crawl_data", "sitemap_data_it"], ["crawl_data", "sitemap_data_nl"], ["crawl_data", "sitemap_data_uk"]], "description": "this model lists all country sitemap URLs per day with sub sitemap names", "columns": {"sk_id": {"name": "sk_id", "description": "the unique crawl key for a url at a given date", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "sitemap_name": {"name": "sitemap_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_crawl_data/_models_stg_crawl.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/stg_crawl_sitemap_urls_all.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table", "on_schema_change": "fail", "partition_by": {"field": "crawl_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750853.052102, "compiled_sql": " \n\n/* for country list, see dbt_project.yml file */\nwith sitemap_urls_all as (\n\n    \n        \n        select\n            to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(url as \n    string\n), '') || '-' || coalesce(cast(sitemap_url as \n    string\n), '') as \n    string\n))) as sk_id,\n            date as crawl_date,\n            'de' as sitemap_country, \n            url,\n            lastmod_date,\n            changefreq,\n            priority,\n            /*if the sitemap url is an empty string it is contained in the image url*/\n            case\n              when char_length(sitemap_url) <= 1 then image_url_first\n              else sitemap_url\n            end as sitemap_url,\n            image_url_first,\n            product_sku\n        from `bergzeit`.`CrawlLogfileData`.`sitemap_de_daily`\n        where date between \n    date_sub(current_date(), interval 180 day)\n    and date_sub(current_date(), interval 1 day)\n\n    \n    union all\n    \n        \n        select\n            to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(url as \n    string\n), '') || '-' || coalesce(cast(sitemap_url as \n    string\n), '') as \n    string\n))) as sk_id,\n            date as crawl_date,\n            'it' as sitemap_country, \n            url,\n            lastmod_date,\n            changefreq,\n            priority,\n            /*if the sitemap url is an empty string it is contained in the image url*/\n            case\n              when char_length(sitemap_url) <= 1 then image_url_first\n              else sitemap_url\n            end as sitemap_url,\n            image_url_first,\n            product_sku\n        from `bergzeit`.`CrawlLogfileData`.`sitemap_it_daily`\n        where date between \n    date_sub(current_date(), interval 180 day)\n    and date_sub(current_date(), interval 1 day)\n\n    \n    union all\n    \n        \n        select\n            to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(url as \n    string\n), '') || '-' || coalesce(cast(sitemap_url as \n    string\n), '') as \n    string\n))) as sk_id,\n            date as crawl_date,\n            'nl' as sitemap_country, \n            url,\n            lastmod_date,\n            changefreq,\n            priority,\n            /*if the sitemap url is an empty string it is contained in the image url*/\n            case\n              when char_length(sitemap_url) <= 1 then image_url_first\n              else sitemap_url\n            end as sitemap_url,\n            image_url_first,\n            product_sku\n        from `bergzeit`.`CrawlLogfileData`.`sitemap_nl_daily`\n        where date between \n    date_sub(current_date(), interval 180 day)\n    and date_sub(current_date(), interval 1 day)\n\n    \n    union all\n    \n        \n        select\n            to_hex(md5(cast(coalesce(cast(date as \n    string\n), '') || '-' || coalesce(cast(url as \n    string\n), '') || '-' || coalesce(cast(sitemap_url as \n    string\n), '') as \n    string\n))) as sk_id,\n            date as crawl_date,\n            'uk' as sitemap_country, \n            url,\n            lastmod_date,\n            changefreq,\n            priority,\n            /*if the sitemap url is an empty string it is contained in the image url*/\n            case\n              when char_length(sitemap_url) <= 1 then image_url_first\n              else sitemap_url\n            end as sitemap_url,\n            image_url_first,\n            product_sku\n        from `bergzeit`.`CrawlLogfileData`.`sitemap_uk_daily`\n        where date between \n    date_sub(current_date(), interval 180 day)\n    and date_sub(current_date(), interval 1 day)\n\n    \n    \n    \n\n),\n\n/* Extract the sitemap name from the sitemap url:\n   - for the OLD sitemap, split at backslash and save offset \n   - for the NEW sitemap, split at hyphen and save one offset for single word names \n     or save two offsets for two word names */\n   \nurls_with_sitemap_name as(\n  select\n    *,\n    case\n      when sitemap_url like('%?index=%') or sitemap_url like('%static%') \n        then split(sitemap_url,'/')[SAFE_OFFSET(4)]\n      when split(sitemap_url,'-')[SAFE_OFFSET(4)] is null \n        then split(split(sitemap_url,'-')[SAFE_OFFSET(3)],'.xml')[SAFE_OFFSET(0)]\n      else concat(split(split(sitemap_url,'-')[SAFE_OFFSET(3)],'.xml')[SAFE_OFFSET(0)],\n                  ' ',\n                  split(split(sitemap_url,'-')[SAFE_OFFSET(4)],'.xml')[SAFE_OFFSET(0)])\n    end as sitemap_name\n  from sitemap_urls_all\n\n)\n\nselect * from urls_with_sitemap_name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_all`"}, "model.sql_repository_bz.stg_crawl_advertools_logs": {"raw_sql": "with weekly_advertools_crawl_data as (\r\n\r\n    select \r\n        {{ dbt_utils.surrogate_key(['crawl_time', 'url', 'resp_headers_date']) }} as url_crawl_id,\r\n        *\r\n    from {{ source('crawl_data', 'crawl_advertools_logs') }}\r\n\r\n)\r\n\r\nselect * from weekly_advertools_crawl_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.sql_repository_bz.crawl_data.crawl_advertools_logs"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "stg_crawl_advertools_logs"], "unique_id": "model.sql_repository_bz.stg_crawl_advertools_logs", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_crawl_data/stg_crawl_advertools_logs.sql", "original_file_path": "models/01_staging/google_crawl_data/stg_crawl_advertools_logs.sql", "name": "stg_crawl_advertools_logs", "alias": "stg_crawl_advertools_logs", "checksum": {"name": "sha256", "checksum": "52d05d30cb6cb6dd2e3a622115193eb715b0659290440f6abf3c3ab8f3b80ca7"}, "tags": [], "refs": [], "sources": [["crawl_data", "crawl_advertools_logs"]], "description": "this model lists a tabular output of an exploratory weekly custom crawl with the Python advertools library", "columns": {"date": {"name": "date", "description": "the date of the scheduled crawl", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_crawl_id": {"name": "url_crawl_id", "description": "the unique crawl event id of a url at a given date", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_crawl_data/_models_stg_crawl.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/stg_crawl_advertools_logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750853.0372849, "compiled_sql": "with weekly_advertools_crawl_data as (\n\n    select \n        to_hex(md5(cast(coalesce(cast(crawl_time as \n    string\n), '') || '-' || coalesce(cast(url as \n    string\n), '') || '-' || coalesce(cast(resp_headers_date as \n    string\n), '') as \n    string\n))) as url_crawl_id,\n        *\n    from `bergzeit`.`CrawlLogfileData`.`advertools_crawl_logs`\n\n)\n\nselect * from weekly_advertools_crawl_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_crawl_advertools_logs`"}, "model.sql_repository_bz.stg_crawl_sitemap_urls_de": {"raw_sql": "{{ \r\n  config(\r\n    materialized='table',\r\n    on_schema_change='fail',\r\n    partition_by={ 'field': 'crawl_date', 'data_type': 'date', 'granularity': 'day' }\r\n  ) \r\n}} \r\n\r\nwith sitemap_urls_de as (\r\n\r\n    select \r\n        date as crawl_date,\r\n        url,\r\n        lastmod_date,\r\n        changefreq,\r\n        priority,\r\n        image_url_first,\r\n        /*if the sitemap url is an empty string it is contained in the image url*/\r\n        case\r\n          when char_length(sitemap_url) <= 1 then image_url_first\r\n          else sitemap_url\r\n        end as sitemap_url,\r\n        product_sku\r\n    from {{ source('crawl_data','sitemap_data_de') }}\r\n    where date between {{ get_last_n_days_date_range(400) }}\r\n\r\n),\r\n\r\n/*extract the sitemap name from the sitemap url\r\n- for the old sitemap split at backslash and save offset\r\n- for the new sitemap split at hyphen and save one offset for single word names \r\nor save two offsets for two word names*/\r\n\r\nurls_with_sitemap_name as(\r\n  select\r\n    *,\r\n    case\r\n      when sitemap_url like('%?index=%') or sitemap_url like('%static%') \r\n        then split(sitemap_url,'/')[SAFE_OFFSET(4)]\r\n      when split(sitemap_url,'-')[SAFE_OFFSET(4)] is null \r\n        then split(split(sitemap_url,'-')[SAFE_OFFSET(3)],'.xml')[SAFE_OFFSET(0)]\r\n      else concat(split(split(sitemap_url,'-')[SAFE_OFFSET(3)],'.xml')[SAFE_OFFSET(0)],\r\n                  ' ',\r\n                  split(split(sitemap_url,'-')[SAFE_OFFSET(4)],'.xml')[SAFE_OFFSET(0)])\r\n    end as sitemap_name\r\n  from sitemap_urls_de\r\n\r\n)\r\n\r\nselect * from urls_with_sitemap_name", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.crawl_data.sitemap_data_de"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "fail", "required_docs": true, "partition_by": {"field": "crawl_date", "data_type": "date", "granularity": "day"}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "stg_crawl_sitemap_urls_de"], "unique_id": "model.sql_repository_bz.stg_crawl_sitemap_urls_de", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_crawl_data/stg_crawl_sitemap_urls_de.sql", "original_file_path": "models/01_staging/google_crawl_data/stg_crawl_sitemap_urls_de.sql", "name": "stg_crawl_sitemap_urls_de", "alias": "stg_crawl_sitemap_urls_de", "checksum": {"name": "sha256", "checksum": "a32a2cce42d0dd5c8b929011b6a9effeabc909aacc57ba7c9281d9fac8da8f0f"}, "tags": [], "refs": [], "sources": [["crawl_data", "sitemap_data_de"]], "description": "this model lists all DE sitemap URLs per day with sub sitemap names", "columns": {"sitemap_name": {"name": "sitemap_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/google_crawl_data/_models_stg_crawl.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/stg_crawl_sitemap_urls_de.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table", "on_schema_change": "fail", "partition_by": {"field": "crawl_date", "data_type": "date", "granularity": "day"}}, "created_at": 1663750853.0454059, "compiled_sql": " \n\nwith sitemap_urls_de as (\n\n    select \n        date as crawl_date,\n        url,\n        lastmod_date,\n        changefreq,\n        priority,\n        image_url_first,\n        /*if the sitemap url is an empty string it is contained in the image url*/\n        case\n          when char_length(sitemap_url) <= 1 then image_url_first\n          else sitemap_url\n        end as sitemap_url,\n        product_sku\n    from `bergzeit`.`CrawlLogfileData`.`sitemap_de_daily`\n    where date between \n    date_sub(current_date(), interval 400 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\n/*extract the sitemap name from the sitemap url\n- for the old sitemap split at backslash and save offset\n- for the new sitemap split at hyphen and save one offset for single word names \nor save two offsets for two word names*/\n\nurls_with_sitemap_name as(\n  select\n    *,\n    case\n      when sitemap_url like('%?index=%') or sitemap_url like('%static%') \n        then split(sitemap_url,'/')[SAFE_OFFSET(4)]\n      when split(sitemap_url,'-')[SAFE_OFFSET(4)] is null \n        then split(split(sitemap_url,'-')[SAFE_OFFSET(3)],'.xml')[SAFE_OFFSET(0)]\n      else concat(split(split(sitemap_url,'-')[SAFE_OFFSET(3)],'.xml')[SAFE_OFFSET(0)],\n                  ' ',\n                  split(split(sitemap_url,'-')[SAFE_OFFSET(4)],'.xml')[SAFE_OFFSET(0)])\n    end as sitemap_name\n  from sitemap_urls_de\n\n)\n\nselect * from urls_with_sitemap_name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_de`"}, "model.sql_repository_bz.stg_nav_credit_memo_header_and_lines": {"raw_sql": "with credit_memo_header as (\r\n\r\n    select\r\n        id as cred_h_id,\r\n        invoice_assigned_id,\r\n        main_return_reason_id,\r\n        shop_order_id as cred_h_shop_order_id,\r\n        currency_factor\r\n    from {{ source('azure_dwh_discovery', 'nav_credit_memo_header')}}\r\n    where invoice_assigned_id is not null\r\n\r\n),\r\n\r\ncredit_memo_line as (\r\n\r\n    select\r\n        document_id as cred_l_document_id,\r\n        line_id as cred_l_line_id,\r\n        line_asset_id as cred_l_product_sku,\r\n        line_asset_type as cred_l_line_asset_type,\r\n        order_id as cred_l_order_id,\r\n        return_reason_id,\r\n        return_base_document_id, \r\n        return_base_line_id,\r\n        voucher_transaction_type as cred_l_voucher_transaction_type,\r\n        voucher_id as cred_l_voucher_id,\r\n        quantity as cred_l_quantity,\r\n        quantity_announced_return,\r\n        amount as cred_l_amount,\r\n        amount_incl_vat as cred_l_amount_incl_vat,\r\n        vat_base_amount as cred_l_vat_base_amount,\r\n        vat_quote as cred_l_vat_quote,\r\n        line_amount as cred_l_line_amount,\r\n        line_discount_amount as cred_l_line_discount_amount,\r\n        line_discount_quote as cred_l_line_discount_quote,\r\n\r\n        line_amount / (1+(vat_quote/100)) as crmemo_amount_excl_vat,\r\n        unit_cost_amount /*/ (1+(vat_quote/100)) */ as crmemo_cost_excl_vat\r\n\r\n    from {{ source('azure_dwh_discovery', 'nav_credit_memo_line')}} \r\n\r\n--where set_item_id = 'SET-ARTIKEL' or (set_item_id is null and amount != 0) \r\n\r\n),\r\n\r\njoined_data as (\r\n\r\n    select * from credit_memo_header as c_h\r\n    left join credit_memo_line as c_l \r\n    on c_h.cred_h_id = c_l.cred_l_document_id\r\n\r\n)\r\n\r\nselect \r\n    *,\r\n    if(round(currency_factor,0) = 0, \r\n        crmemo_amount_excl_vat, \r\n        crmemo_amount_excl_vat * currency_factor) as crmemo_amount_excl_vat_euro,\r\nfrom joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.azure_dwh_discovery.nav_credit_memo_header", "source.sql_repository_bz.azure_dwh_discovery.nav_credit_memo_line"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "navision", "stg_nav_credit_memo_header_and_lines"], "unique_id": "model.sql_repository_bz.stg_nav_credit_memo_header_and_lines", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/navision/stg_nav_credit_memo_header_and_lines.sql", "original_file_path": "models/01_staging/navision/stg_nav_credit_memo_header_and_lines.sql", "name": "stg_nav_credit_memo_header_and_lines", "alias": "stg_nav_credit_memo_header_and_lines", "checksum": {"name": "sha256", "checksum": "7d45fa5440edf3f14209b9fa4335a5d56b13af5ee9b0d4a8c79ae51289d583a0"}, "tags": [], "refs": [], "sources": [["azure_dwh_discovery", "nav_credit_memo_header"], ["azure_dwh_discovery", "nav_credit_memo_line"]], "description": "this model contains nav credit memo data", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/navision/_models_stg_nav.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/navision/stg_nav_credit_memo_header_and_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750853.1567264, "compiled_sql": "with credit_memo_header as (\n\n    select\n        id as cred_h_id,\n        invoice_assigned_id,\n        main_return_reason_id,\n        shop_order_id as cred_h_shop_order_id,\n        currency_factor\n    from `bergzeit`.`azure_dwh_discovery`.`credit_memo_header`\n    where invoice_assigned_id is not null\n\n),\n\ncredit_memo_line as (\n\n    select\n        document_id as cred_l_document_id,\n        line_id as cred_l_line_id,\n        line_asset_id as cred_l_product_sku,\n        line_asset_type as cred_l_line_asset_type,\n        order_id as cred_l_order_id,\n        return_reason_id,\n        return_base_document_id, \n        return_base_line_id,\n        voucher_transaction_type as cred_l_voucher_transaction_type,\n        voucher_id as cred_l_voucher_id,\n        quantity as cred_l_quantity,\n        quantity_announced_return,\n        amount as cred_l_amount,\n        amount_incl_vat as cred_l_amount_incl_vat,\n        vat_base_amount as cred_l_vat_base_amount,\n        vat_quote as cred_l_vat_quote,\n        line_amount as cred_l_line_amount,\n        line_discount_amount as cred_l_line_discount_amount,\n        line_discount_quote as cred_l_line_discount_quote,\n\n        line_amount / (1+(vat_quote/100)) as crmemo_amount_excl_vat,\n        unit_cost_amount /*/ (1+(vat_quote/100)) */ as crmemo_cost_excl_vat\n\n    from `bergzeit`.`azure_dwh_discovery`.`credit_memo_line` \n\n--where set_item_id = 'SET-ARTIKEL' or (set_item_id is null and amount != 0) \n\n),\n\njoined_data as (\n\n    select * from credit_memo_header as c_h\n    left join credit_memo_line as c_l \n    on c_h.cred_h_id = c_l.cred_l_document_id\n\n)\n\nselect \n    *,\n    if(round(currency_factor,0) = 0, \n        crmemo_amount_excl_vat, \n        crmemo_amount_excl_vat * currency_factor) as crmemo_amount_excl_vat_euro,\nfrom joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_nav_credit_memo_header_and_lines`"}, "model.sql_repository_bz.stg_nav_customers_new_id": {"raw_sql": "select *  \r\nfrom {{ source('azure_dwh_discovery', 'nav_customers_new_id') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.azure_dwh_discovery.nav_customers_new_id"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "navision", "stg_nav_customers_new_id"], "unique_id": "model.sql_repository_bz.stg_nav_customers_new_id", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/navision/stg_nav_customers_new_id.sql", "original_file_path": "models/01_staging/navision/stg_nav_customers_new_id.sql", "name": "stg_nav_customers_new_id", "alias": "stg_nav_customers_new_id", "checksum": {"name": "sha256", "checksum": "186acb6387aea9fc3f49c4ba5a7e2859b540dd7edf93110ec71e963f1276a807"}, "tags": [], "refs": [], "sources": [["azure_dwh_discovery", "nav_customers_new_id"]], "description": "one time export for Discovery dev (2022-07-19) with new oms/ishop customer id", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/navision/_models_stg_nav.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/navision/stg_nav_customers_new_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750853.164137, "compiled_sql": "select *  \nfrom `bergzeit`.`azure_dwh_discovery`.`customers_new_id`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_nav_customers_new_id`"}, "model.sql_repository_bz.stg_nav_sales_channel_description": {"raw_sql": "select * \r\nfrom {{ source('azure_dwh_discovery', 'nav_sales_channel') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.azure_dwh_discovery.nav_sales_channel"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "navision", "stg_nav_sales_channel_description"], "unique_id": "model.sql_repository_bz.stg_nav_sales_channel_description", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/navision/stg_nav_sales_channel_description.sql", "original_file_path": "models/01_staging/navision/stg_nav_sales_channel_description.sql", "name": "stg_nav_sales_channel_description", "alias": "stg_nav_sales_channel_description", "checksum": {"name": "sha256", "checksum": "2a739ddbfb2934fc9d65cbc99a9c2bacdde20503c39e546c9dccde4e934a70d4"}, "tags": [], "refs": [], "sources": [["azure_dwh_discovery", "nav_sales_channel"]], "description": "this model contains sales channel mapping", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/navision/_models_stg_nav.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/navision/stg_nav_sales_channel_description.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750853.171304, "compiled_sql": "select * \nfrom `bergzeit`.`azure_dwh_discovery`.`nav_sales_channel`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_nav_sales_channel_description`"}, "model.sql_repository_bz.stg_nav_transactions": {"raw_sql": "{{ config(\r\npartition_by={\r\n      \"field\": \"T_order_date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    }\r\n    ) \r\n}}\r\n\r\n--fetch nav transaction data\r\n\r\nselect T_order_date\r\n      ,T_shop_channel_id\r\n      ,T_responsiblity_center_id\r\n      ,T_shop_order_id\r\n      ,T_nav_order_id\r\n      ,T_nav_invoice_id\r\n      ,T_customer_id\r\n      ,T_bill_zip_code\r\n      ,T_bill_country\r\n      ,T_ship_zip_code\r\n      ,T_ship_country\r\n      ,T_payment_method_code\r\n      ,T_currency_code\r\n      ,T_currency_factor\r\n      ,T_invoice_amount_incl_vat\r\n      ,T_invoice_amount_excl_vat\r\n      ,T_crmemo_amount_excl_vat --as T_crmemo_amount_incl_vat\r\n      ,T_crmemo_amount_incl_vat --as T_crmemo_amount_excl_vat\r\nfrom {{ source('azure_dwh_discovery', 'nav_transactions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.azure_dwh_discovery.nav_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"data_type": "date", "granularity": "day", "field": "T_order_date"}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "navision", "stg_nav_transactions"], "unique_id": "model.sql_repository_bz.stg_nav_transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/navision/stg_nav_transactions.sql", "original_file_path": "models/01_staging/navision/stg_nav_transactions.sql", "name": "stg_nav_transactions", "alias": "stg_nav_transactions", "checksum": {"name": "sha256", "checksum": "c44074c513aff2473be83e10a0f7d8edcee54cddbe90c13c51309a8ef7f1d031"}, "tags": [], "refs": [], "sources": [["azure_dwh_discovery", "nav_transactions"]], "description": "this model contains nav transactions", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/navision/_models_stg_nav.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/navision/stg_nav_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table", "partition_by": {"data_type": "date", "granularity": "day", "field": "T_order_date"}}, "created_at": 1663750853.1747792, "compiled_sql": "\n\n--fetch nav transaction data\n\nselect T_order_date\n      ,T_shop_channel_id\n      ,T_responsiblity_center_id\n      ,T_shop_order_id\n      ,T_nav_order_id\n      ,T_nav_invoice_id\n      ,T_customer_id\n      ,T_bill_zip_code\n      ,T_bill_country\n      ,T_ship_zip_code\n      ,T_ship_country\n      ,T_payment_method_code\n      ,T_currency_code\n      ,T_currency_factor\n      ,T_invoice_amount_incl_vat\n      ,T_invoice_amount_excl_vat\n      ,T_crmemo_amount_excl_vat --as T_crmemo_amount_incl_vat\n      ,T_crmemo_amount_incl_vat --as T_crmemo_amount_excl_vat\nfrom `bergzeit`.`azure_dwh_discovery`.`transactions`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_nav_transactions`"}, "model.sql_repository_bz.stg_nav_invoice_header_and_lines": {"raw_sql": "{{ config(\r\n    partition_by={\"field\": \"order_date\", \"data_type\": \"date\",   \"granularity\": \"day\" }\r\n) \r\n}}\r\n\r\n--fetch transaction data\r\n\r\nwith invoice_header as (\r\n\r\n    select \r\n        id as inv_h_id,\r\n        order_id as inv_h_order_id ,\r\n        shop_order_id as inv_h_shop_order_id ,\r\n        sales_channel_id ,\r\n        source_code_id ,\r\n        payment_method_id ,\r\n        shipment_method_id ,\r\n        shipment_agent_id ,\r\n        bill_zip_code ,\r\n        bill_country_id ,\r\n        shipment_zip_code ,\r\n        shipment_country_id ,\r\n        sale_customer_id ,\r\n        sale_zip_code ,\r\n        order_date ,\r\n        ship_date ,\r\n        currency_id ,\r\n        currency_factor ,\r\n        customer_price_group_id ,\r\n        customer_posting_group_id ,\r\n        customer_discount_group_id ,\r\n        gen_business_posting_group_id ,\r\n        responsibility_center_id,\r\n\r\n        row_number() over (partition by sale_customer_id, sales_channel_id order by order_date asc) as transaction_no_per_shop_channel,\r\n        min(order_date) over (partition by sale_customer_id order by order_date /*, T_shop_order_id*/ asc) as cust_first_order_date,\r\n        max(order_date) over (partition by sale_customer_id order by order_date /*, T_shop_order_id*/ asc) as cust_last_order_date,\r\n\t    lag(order_date) over (partition by sale_customer_id order by order_date /*, T_shop_order_id*/ asc) as cust_previous_order_date,\r\n        case when row_number() over (partition by sale_customer_id, sales_channel_id order by order_date asc) = 1 then 'Neu' else 'Bestand' end as neu_bestand_per_shop_channel\r\n\r\n    from {{ source('azure_dwh_discovery', 'nav_invoice_header') }}\r\n\r\n    where id <> '-1'\r\n        and order_id <> ''\r\n        /* we only look at Webshop transactions (no marketplaces, no customer service, no local stores) */\r\n        and sales_channel_id like '%Webshop%'\r\n        and shop_order_id is not null\r\n        and responsibility_center_id = 'BZ'\r\n\r\n),\r\n\r\ninvoice_line as (\r\n\r\n    select \r\n        document_id as inv_l_document_id,\r\n        line_id as inv_l_line_id,\r\n        line_asset_id as inv_l_product_sku ,\r\n        line_asset_description as inv_l_product_description,\r\n        line_asset_description_2 as inv_l_product_attributes,\r\n        line_asset_type as inv_l_line_asset_type,\r\n        order_id as inv_l_order_id ,\r\n        voucher_transaction_type as inv_l_voucher_transaction_type,\r\n        voucher_id as inv_l_voucher_id,\r\n        set_entry_id as inv_l_set_entry_id,\r\n        set_line_type as inv_l_set_line_type,\r\n        set_item_id as inv_l_set_item_id ,\r\n        shop_set_item_id as inv_l_shop_set_item_id,\r\n        quantity as inv_l_quantity,\r\n        amount as inv_l_amount ,\r\n        set_base_amount as inv_l_set_base_amount ,\r\n        set_factor as inv_l_set_factor ,\r\n        amount_incl_vat as inv_l_amount_incl_vat,\r\n        vat_base_amount as inv_l_vat_base_amount ,\r\n        vat_quote as inv_l_vat_quote,\r\n        line_amount as inv_l_line_amount,\r\n        line_discount_amount as inv_l_line_discount_amount,\r\n        line_discount_quote as inv_l_line_discount_quote,\r\n        base_discount_quote as inv_l_base_discount_quote,\r\n        standard_discount_quote as inv_l_standard_discount_quote,\r\n        unit_cost_amount,\r\n        unit_cost,\r\n        line_amount / (1+(vat_quote/100)) as invoice_amount_excl_vat,\r\n        unit_cost_amount /*/ (1+(vat_quote/100)) */ as invoice_cost_excl_vat\r\n\r\n    from {{ source('azure_dwh_discovery', 'nav_invoice_line') }}\r\n\r\n)\r\n\r\nselect \r\n    *, \r\n    if(round(currency_factor,0) = 0, \r\n        invoice_amount_excl_vat, \r\n        invoice_amount_excl_vat * currency_factor) as invoice_amount_excl_vat_euro,\r\n    substr(inv_l_product_sku, 1, 7) as inv_parent_id,\r\n    if(inv_l_product_sku = 'AKTION', 1,0 ) as indikator_voucher,\r\n    if(inv_l_product_sku = 'VP' and inv_l_amount > 0, 1,0 ) as indikator_versand,\r\n    if(length(inv_l_product_sku) = 11 and inv_l_product_sku != 'SET-ARTIKEL' and substr(inv_l_product_sku,1,1) not in ('7'), 1, 0) as indikator_product\r\n\r\nfrom invoice_header i_h\r\nleft join invoice_line i_l\r\non i_h.inv_h_id = i_l.inv_l_document_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.azure_dwh_discovery.nav_invoice_header", "source.sql_repository_bz.azure_dwh_discovery.nav_invoice_line"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"data_type": "date", "granularity": "day", "field": "order_date"}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "navision", "stg_nav_invoice_header_and_lines"], "unique_id": "model.sql_repository_bz.stg_nav_invoice_header_and_lines", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/navision/stg_nav_invoice_header_and_lines.sql", "original_file_path": "models/01_staging/navision/stg_nav_invoice_header_and_lines.sql", "name": "stg_nav_invoice_header_and_lines", "alias": "stg_nav_invoice_header_and_lines", "checksum": {"name": "sha256", "checksum": "3ca040eac650d97a3fc46b9b509a78e04fb7292c751eafd6a91553f888b5a9b8"}, "tags": [], "refs": [], "sources": [["azure_dwh_discovery", "nav_invoice_header"], ["azure_dwh_discovery", "nav_invoice_line"]], "description": "this model contains nav invoice data", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/navision/_models_stg_nav.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/navision/stg_nav_invoice_header_and_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table", "partition_by": {"data_type": "date", "granularity": "day", "field": "order_date"}}, "created_at": 1663750853.167528, "compiled_sql": "\n\n--fetch transaction data\n\nwith invoice_header as (\n\n    select \n        id as inv_h_id,\n        order_id as inv_h_order_id ,\n        shop_order_id as inv_h_shop_order_id ,\n        sales_channel_id ,\n        source_code_id ,\n        payment_method_id ,\n        shipment_method_id ,\n        shipment_agent_id ,\n        bill_zip_code ,\n        bill_country_id ,\n        shipment_zip_code ,\n        shipment_country_id ,\n        sale_customer_id ,\n        sale_zip_code ,\n        order_date ,\n        ship_date ,\n        currency_id ,\n        currency_factor ,\n        customer_price_group_id ,\n        customer_posting_group_id ,\n        customer_discount_group_id ,\n        gen_business_posting_group_id ,\n        responsibility_center_id,\n\n        row_number() over (partition by sale_customer_id, sales_channel_id order by order_date asc) as transaction_no_per_shop_channel,\n        min(order_date) over (partition by sale_customer_id order by order_date /*, T_shop_order_id*/ asc) as cust_first_order_date,\n        max(order_date) over (partition by sale_customer_id order by order_date /*, T_shop_order_id*/ asc) as cust_last_order_date,\n\t    lag(order_date) over (partition by sale_customer_id order by order_date /*, T_shop_order_id*/ asc) as cust_previous_order_date,\n        case when row_number() over (partition by sale_customer_id, sales_channel_id order by order_date asc) = 1 then 'Neu' else 'Bestand' end as neu_bestand_per_shop_channel\n\n    from `bergzeit`.`azure_dwh_discovery`.`invoice_header`\n\n    where id <> '-1'\n        and order_id <> ''\n        /* we only look at Webshop transactions (no marketplaces, no customer service, no local stores) */\n        and sales_channel_id like '%Webshop%'\n        and shop_order_id is not null\n        and responsibility_center_id = 'BZ'\n\n),\n\ninvoice_line as (\n\n    select \n        document_id as inv_l_document_id,\n        line_id as inv_l_line_id,\n        line_asset_id as inv_l_product_sku ,\n        line_asset_description as inv_l_product_description,\n        line_asset_description_2 as inv_l_product_attributes,\n        line_asset_type as inv_l_line_asset_type,\n        order_id as inv_l_order_id ,\n        voucher_transaction_type as inv_l_voucher_transaction_type,\n        voucher_id as inv_l_voucher_id,\n        set_entry_id as inv_l_set_entry_id,\n        set_line_type as inv_l_set_line_type,\n        set_item_id as inv_l_set_item_id ,\n        shop_set_item_id as inv_l_shop_set_item_id,\n        quantity as inv_l_quantity,\n        amount as inv_l_amount ,\n        set_base_amount as inv_l_set_base_amount ,\n        set_factor as inv_l_set_factor ,\n        amount_incl_vat as inv_l_amount_incl_vat,\n        vat_base_amount as inv_l_vat_base_amount ,\n        vat_quote as inv_l_vat_quote,\n        line_amount as inv_l_line_amount,\n        line_discount_amount as inv_l_line_discount_amount,\n        line_discount_quote as inv_l_line_discount_quote,\n        base_discount_quote as inv_l_base_discount_quote,\n        standard_discount_quote as inv_l_standard_discount_quote,\n        unit_cost_amount,\n        unit_cost,\n        line_amount / (1+(vat_quote/100)) as invoice_amount_excl_vat,\n        unit_cost_amount /*/ (1+(vat_quote/100)) */ as invoice_cost_excl_vat\n\n    from `bergzeit`.`azure_dwh_discovery`.`invoice_line`\n\n)\n\nselect \n    *, \n    if(round(currency_factor,0) = 0, \n        invoice_amount_excl_vat, \n        invoice_amount_excl_vat * currency_factor) as invoice_amount_excl_vat_euro,\n    substr(inv_l_product_sku, 1, 7) as inv_parent_id,\n    if(inv_l_product_sku = 'AKTION', 1,0 ) as indikator_voucher,\n    if(inv_l_product_sku = 'VP' and inv_l_amount > 0, 1,0 ) as indikator_versand,\n    if(length(inv_l_product_sku) = 11 and inv_l_product_sku != 'SET-ARTIKEL' and substr(inv_l_product_sku,1,1) not in ('7'), 1, 0) as indikator_product\n\nfrom invoice_header i_h\nleft join invoice_line i_l\non i_h.inv_h_id = i_l.inv_l_document_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_nav_invoice_header_and_lines`"}, "model.sql_repository_bz.stg_nav_customers": {"raw_sql": "with customers as (\r\n\r\n    select     \r\n        customer_id,\r\n        shop_customer_oxid_id,\r\n        shop_customer_source_id,\r\n        primary_business_relation,\r\n        customer_discount_group,\r\n        is_registered,\r\n        is_blocked,\r\n        is_newsletter_excluded,\r\n        is_segment_excluded,\r\n        is_marketing_rejected,\r\n        is_loyalty_member,\r\n        responsibility_center  \r\n    from {{ source('azure_dwh_discovery', 'nav_customers') }}\r\n)\r\n\r\nselect * from customers", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.azure_dwh_discovery.nav_customers"]}, "config": {"enabled": true, "alias": null, "schema": "analytics_staging", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_analytics_staging", "fqn": ["sql_repository_bz", "01_staging", "navision", "stg_nav_customers"], "unique_id": "model.sql_repository_bz.stg_nav_customers", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/navision/stg_nav_customers.sql", "original_file_path": "models/01_staging/navision/stg_nav_customers.sql", "name": "stg_nav_customers", "alias": "stg_nav_customers", "checksum": {"name": "sha256", "checksum": "4f1ba13e44612aff56626a63114237da55c891a59225d6ecce0ba20682727803"}, "tags": [], "refs": [], "sources": [["azure_dwh_discovery", "nav_customers"]], "description": "this model contains nav customer data", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/01_staging/navision/_models_stg_nav.yml", "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/navision/stg_nav_customers.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "analytics_staging", "materialized": "table"}, "created_at": 1663750853.1601415, "compiled_sql": "with customers as (\n\n    select     \n        customer_id,\n        shop_customer_oxid_id,\n        shop_customer_source_id,\n        primary_business_relation,\n        customer_discount_group,\n        is_registered,\n        is_blocked,\n        is_newsletter_excluded,\n        is_segment_excluded,\n        is_marketing_rejected,\n        is_loyalty_member,\n        responsibility_center  \n    from `bergzeit`.`azure_dwh_discovery`.`customers`\n)\n\nselect * from customers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_analytics_staging`.`stg_nav_customers`"}, "model.sql_repository_bz.weather_avg_temp_to_monthly_avg": {"raw_sql": "with temps_by_day_and_month_compared as (\r\n\r\n    select\r\n        date,\r\n        weekday_index,\r\n        weekday_name,\r\n        country,\r\n        year_month,\r\n        avg_temp,\r\n        m_avg_temp,\r\n        temp_diff_to_m_avg\r\n    from {{ ref('int_weather_avg_temp_to_monthly_avg') }}\r\n\r\n)\r\n\r\nselect * from temps_by_day_and_month_compared", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_weather_avg_temp_to_monthly_avg"]}, "config": {"enabled": true, "alias": null, "schema": "weather_data", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_weather_data", "fqn": ["sql_repository_bz", "03_marts", "weather_data", "weather_avg_temp_to_monthly_avg"], "unique_id": "model.sql_repository_bz.weather_avg_temp_to_monthly_avg", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/weather_data/weather_avg_temp_to_monthly_avg.sql", "original_file_path": "models/03_marts/weather_data/weather_avg_temp_to_monthly_avg.sql", "name": "weather_avg_temp_to_monthly_avg", "alias": "weather_avg_temp_to_monthly_avg", "checksum": {"name": "sha256", "checksum": "694991f729df1604e645aeef654f3a90dc3f6b36d80805eb95d43f388233a7a0"}, "tags": [], "refs": [["int_weather_avg_temp_to_monthly_avg"]], "sources": [], "description": "### Description\r\n\r\nThis dashboard chart shows the average temperature per country and day, compared to the monthly average. \r\nThe goal is to show unusually warm and cold days, as they influence session and order value\r\n\r\n### What happens after dbt? Final data product and process from marts table\r\n\r\n* A data studio dashboard fetches the marts table as a data source: https://datastudio.google.com/s/o0wAtYRBrl0\r\n\r\n### How oversees the data product and how? \r\n\r\nChristopher Gutknecht. A set of daily data tests check the quality and freshness of data. \r\n\r\n### Is there a visual flow chart for the entire data pipeline\r\n\r\nNot necessary, it is only an exposed marts table.\r\n\r\n### Which branch and ticket does the feature refer to?\r\n\r\nWEBA-597\r\n\r\n### Which further test coverage exists beyond dbt?\r\n\r\nNone.", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_temp": {"name": "avg_temp", "description": "the average temperature per country and day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "m_avg_temp": {"name": "m_avg_temp", "description": "the average temperature per country and month", "meta": {}, "data_type": null, "quote": null, "tags": []}, "temp_diff_to_m_avg": {"name": "temp_diff_to_m_avg", "description": "the calculated temperature difference between daily and monthly average per country", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/weather_data/_models_weather.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/weather_data/weather_avg_temp_to_monthly_avg.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "weather_data", "materialized": "view"}, "created_at": 1663750853.2457037, "compiled_sql": "with temps_by_day_and_month_compared as (\n\n    select\n        date,\n        weekday_index,\n        weekday_name,\n        country,\n        year_month,\n        avg_temp,\n        m_avg_temp,\n        temp_diff_to_m_avg\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_weather_avg_temp_to_monthly_avg`\n\n)\n\nselect * from temps_by_day_and_month_compared", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_weather_data`.`weather_avg_temp_to_monthly_avg`"}, "model.sql_repository_bz.stg_ga_de_overall_session_attributes": {"raw_sql": "-- old model for clv predictions!!!\r\n\r\n{{ config(\r\npartition_by={\r\n      \"field\": \"ga_date\",\r\n      \"data_type\": \"date\",\r\n      \"granularity\": \"day\"\r\n    }\r\n    ) \r\n}}\r\n\r\n--fetch  data\r\n\r\nwith all_data as (\r\n\r\nSELECT \r\n\r\n  PARSE_DATE('%Y%m%d', date) AS ga_date,\r\n  TIMESTAMP_TRUNC(TIMESTAMP_ADD(TIMESTAMP_SECONDS(visitStartTime), INTERVAL hits.time MILLISECOND), second) AS ga_session_timestamp,\r\n  visitID || '_' || fullVisitorId AS ga_session_id,\r\n  hits.page.hostname as ga_hostname,\r\n  channelGrouping as ga_acquisition_channel,\r\n\r\n  CASE\r\n    When channelGrouping IN (\"Brand Paid Search\", \"Organic Search Home\", \"Direct\") THEN \"Brand\"\r\n    When channelGrouping IN (\"Generic Paid Search Google\", \"Display\", \"Generic Paid Search Bing\", \"PSM\", \"Affiliate\", \"Social Paid\", \"Native\") THEN \"Paid\"\r\n    When channelGrouping IN (\"Organic Search Non-Home\", \"Referral\", \"Hersteller Links\", \"Social Organic\", \"Organic Search Magazin\") THEN \"Organic\"\r\n    When channelGrouping IN (\"Newsletter\", \"Triggermail\") THEN \"Email\"\r\n  ELSE \"Other\"\r\n  END  as ga_acquisition_channel_groups,\r\n\r\n  trafficSource.campaign as ga_campaign,\r\n  device.deviceCategory AS ga_device_category,\r\n  hits.item.transactionId as ga_transaction_id,\r\n  hits.hitNumber AS hitnumber,\r\n  hits.eventInfo.eventlabel,\r\n\r\n  CASE WHEN cd.value = 'Suche' OR (REGEXP_CONTAINS(hits.page.pagePath,'=search') = TRUE\r\n                  AND REGEXP_CONTAINS(hits.page.pagePath,'key=') = TRUE \r\n                  AND type = 'PAGE') THEN 1 ELSE 0 END as Indikator_suche,\r\n\r\n  case when cd.value = 'Magazin' then 1 else 0 end as Magazin_interaktion,\r\n  cd.value as cd_value,\r\n  hits.type,\r\n  page.pagepath,\r\n  CASE WHEN type = 'PAGE' THEN 1 ELSE 0 END AS pagehit,\r\n  CASE WHEN value = 'Produktdetail' AND type = 'PAGE' THEN 1 ELSE 0 END AS pdsseitenaufrufe,\r\n  --case when hits.ecommerceAction.step = 1 and hits.ecommerceAction.option = 'Login' then 1 else null end as login,\r\n  --case when hits.ecommerceAction.step = 1 and hits.ecommerceAction.option = 'Gastbestellung' then 1 else null end as Gastbestellung\r\n\r\nFROM {{ source('ga_bz_master_view_de', 'ga_sessions_de')}},\r\n  UNNEST(hits) AS hits,\r\n  UNNEST( hits.customDimensions ) AS cd\r\n\r\nWHERE\r\n  _TABLE_SUFFIX < FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 190 DAY))\r\n  and cd.index = 4  \r\n  and totals.transactions > 0\r\n\r\nORDER BY hitNumber ASC \r\n\r\n)\r\n\r\nselect\r\n\r\n  ga_date,\r\n  ga_session_id,\r\n  ga_hostname,\r\n  ga_acquisition_channel,\r\n  ga_acquisition_channel_groups,\r\n  ga_campaign,\r\n  ga_device_category,\r\n  ga_transaction_id,\r\n  min(ga_session_timestamp) as session_start_time,\r\n  max(ga_session_timestamp) as session_end_time,\r\n  MAX(hitnumber) AS no_hits_per_session,\r\n  MAX(Indikator_suche) AS Indikator_suche,\r\n  SUM(Indikator_suche) AS no_suche_per_session,\r\n  MAX(Magazin_interaktion) AS Magazin_interaktion,\r\n  sum(pagehit) as no_pagehits_per_session,\r\n  sum(pdsseitenaufrufe) as no_pdsseitenaufrufe,\r\n  --if(sum(login) is not null, 'Login', null) as Login,\r\n  --if(sum(Gastbestellung) is not null, 'Gastbestellung', null) as Gastbestellung\r\n\r\nFROM all_data\r\n    \r\nGROUP BY 1,2,3,4,5,6,7,8", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_de.ga_sessions_de"]}, "config": {"enabled": true, "alias": null, "schema": "zz_predictive_input", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "partition_by": {"granularity": "day", "data_type": "date", "field": "ga_date"}, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_zz_predictive_input", "fqn": ["sql_repository_bz", "03_marts", "zz_predictive_input", "stg_ga_de_overall_session_attributes"], "unique_id": "model.sql_repository_bz.stg_ga_de_overall_session_attributes", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/zz_predictive_input/stg_ga_de_overall_session_attributes.sql", "original_file_path": "models/03_marts/zz_predictive_input/stg_ga_de_overall_session_attributes.sql", "name": "stg_ga_de_overall_session_attributes", "alias": "stg_ga_de_overall_session_attributes", "checksum": {"name": "sha256", "checksum": "bf052d1c112097be6bb3c5739d19c0083e81100c9ebec0064175548bc0d05998"}, "tags": [], "refs": [], "sources": [["ga_bz_master_view_de", "ga_sessions_de"]], "description": "this model show eec event data by visit_id (?) and sku, OLD!!! only for predictive purposes", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/zz_predictive_input/_models_predictive.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/zz_predictive_input/stg_ga_de_overall_session_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "zz_predictive_input", "materialized": "view", "partition_by": {"granularity": "day", "data_type": "date", "field": "ga_date"}}, "created_at": 1663750853.2895432, "compiled_sql": "-- old model for clv predictions!!!\n\n\n\n--fetch  data\n\nwith all_data as (\n\nSELECT \n\n  PARSE_DATE('%Y%m%d', date) AS ga_date,\n  TIMESTAMP_TRUNC(TIMESTAMP_ADD(TIMESTAMP_SECONDS(visitStartTime), INTERVAL hits.time MILLISECOND), second) AS ga_session_timestamp,\n  visitID || '_' || fullVisitorId AS ga_session_id,\n  hits.page.hostname as ga_hostname,\n  channelGrouping as ga_acquisition_channel,\n\n  CASE\n    When channelGrouping IN (\"Brand Paid Search\", \"Organic Search Home\", \"Direct\") THEN \"Brand\"\n    When channelGrouping IN (\"Generic Paid Search Google\", \"Display\", \"Generic Paid Search Bing\", \"PSM\", \"Affiliate\", \"Social Paid\", \"Native\") THEN \"Paid\"\n    When channelGrouping IN (\"Organic Search Non-Home\", \"Referral\", \"Hersteller Links\", \"Social Organic\", \"Organic Search Magazin\") THEN \"Organic\"\n    When channelGrouping IN (\"Newsletter\", \"Triggermail\") THEN \"Email\"\n  ELSE \"Other\"\n  END  as ga_acquisition_channel_groups,\n\n  trafficSource.campaign as ga_campaign,\n  device.deviceCategory AS ga_device_category,\n  hits.item.transactionId as ga_transaction_id,\n  hits.hitNumber AS hitnumber,\n  hits.eventInfo.eventlabel,\n\n  CASE WHEN cd.value = 'Suche' OR (REGEXP_CONTAINS(hits.page.pagePath,'=search') = TRUE\n                  AND REGEXP_CONTAINS(hits.page.pagePath,'key=') = TRUE \n                  AND type = 'PAGE') THEN 1 ELSE 0 END as Indikator_suche,\n\n  case when cd.value = 'Magazin' then 1 else 0 end as Magazin_interaktion,\n  cd.value as cd_value,\n  hits.type,\n  page.pagepath,\n  CASE WHEN type = 'PAGE' THEN 1 ELSE 0 END AS pagehit,\n  CASE WHEN value = 'Produktdetail' AND type = 'PAGE' THEN 1 ELSE 0 END AS pdsseitenaufrufe,\n  --case when hits.ecommerceAction.step = 1 and hits.ecommerceAction.option = 'Login' then 1 else null end as login,\n  --case when hits.ecommerceAction.step = 1 and hits.ecommerceAction.option = 'Gastbestellung' then 1 else null end as Gastbestellung\n\nFROM `bergzeit`.`79462285_EU_Backup`.`ga_sessions_*`,\n  UNNEST(hits) AS hits,\n  UNNEST( hits.customDimensions ) AS cd\n\nWHERE\n  _TABLE_SUFFIX < FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 190 DAY))\n  and cd.index = 4  \n  and totals.transactions > 0\n\nORDER BY hitNumber ASC \n\n)\n\nselect\n\n  ga_date,\n  ga_session_id,\n  ga_hostname,\n  ga_acquisition_channel,\n  ga_acquisition_channel_groups,\n  ga_campaign,\n  ga_device_category,\n  ga_transaction_id,\n  min(ga_session_timestamp) as session_start_time,\n  max(ga_session_timestamp) as session_end_time,\n  MAX(hitnumber) AS no_hits_per_session,\n  MAX(Indikator_suche) AS Indikator_suche,\n  SUM(Indikator_suche) AS no_suche_per_session,\n  MAX(Magazin_interaktion) AS Magazin_interaktion,\n  sum(pagehit) as no_pagehits_per_session,\n  sum(pdsseitenaufrufe) as no_pdsseitenaufrufe,\n  --if(sum(login) is not null, 'Login', null) as Login,\n  --if(sum(Gastbestellung) is not null, 'Gastbestellung', null) as Gastbestellung\n\nFROM all_data\n    \nGROUP BY 1,2,3,4,5,6,7,8", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_zz_predictive_input`.`stg_ga_de_overall_session_attributes`"}, "model.sql_repository_bz.pred_repurchase_model_input": {"raw_sql": "# @author: stephanie.hubert\r\n# @description: model input\r\n# @source: ga\r\n# @ticket: weba-412\r\n# @dbt-managed: yes\r\n# @styleguide_v: 0.9\r\n\r\n\r\nSELECT * except (ga_acquisition_channel,ga_device_category, voucher_type, \r\nIndikator_suche, Magazin_interaktion,top_categories,\r\nT_invoice_amount_excl_vat)\r\n    , if(ga_acquisition_channel is null, 'unbekannt', ga_acquisition_channel) as ga_acquisition_channel_korr\r\n    , if(ga_device_category is null, 'unbekannt', ga_device_category) as ga_device_category_korr\r\n    , if(voucher_type is null, 'kein Gutschein', voucher_type) as voucher_type_korr\r\n    , if(Indikator_suche is null, 'unbekannt', cast(Indikator_suche as string)) as indikator_suche_korr\r\n    , if(Magazin_interaktion is null, 'unbekannt', cast(Magazin_interaktion as string)) as indikator_magazin_korr\r\n    , if(T_invoice_amount_excl_vat < 0, 0, T_invoice_amount_excl_vat) as T_invoice_amount_excl_vat_korr\r\n    , if(top_categories is null, 'unbekannt', top_categories) as top_categories_korr\r\n    , cast(transaktion_mit_voucher as string) as indikator_voucher_string\r\n    , cast(ind_versand as string) as indikator_versand_string\r\n    , cast(order_month as string) as order_month_string \r\n  --  , timestamp_diff(session_end_time, session_start_time, minute) as session_length_minutes\r\n    , cast(repurchase_30d as string) as repurchase_30d_string\r\n    , cast(repurchase_90d as string) as repurchase_90d_string\r\n    , cast(repurchase_180d as string) as repurchase_180d_string\r\n\r\n    , ML.STANDARD_SCALER(if(T_invoice_amount_excl_vat < 0, 0, T_invoice_amount_excl_vat)) OVER() AS scal_T_invoice_amount_excl_vat,\r\n            ML.STANDARD_SCALER(no_pdsseitenaufrufe) OVER() AS scal_no_pdsseitenaufrufe,\r\n            ML.STANDARD_SCALER(no_hits_per_session) OVER() AS scal_no_hits_per_session,\r\n            ML.STANDARD_SCALER(no_pagehits_per_session) OVER() AS scal_no_pagehits_per_session,\r\n            ML.STANDARD_SCALER(Anzahl_products) OVER() AS scal_anzahl_products,\r\n            ML.STANDARD_SCALER(transaction_no_per_shop_channel) OVER() AS scal_transaction_no_per_shop_channel,\r\n            ML.STANDARD_SCALER(months_since_first_purchase) OVER() AS scal_months_since_first_purchase,\r\n            --ML.STANDARD_SCALER(timestamp_diff(session_end_time, session_start_time, minute)) OVER() AS scal_session_length_minutes,\r\n            ML.QUANTILE_BUCKETIZE(if(T_invoice_amount_excl_vat < 0, 0, T_invoice_amount_excl_vat), 5) OVER() AS bucket_T_invoice_amount_excl_vat,\r\n            ML.QUANTILE_BUCKETIZE(no_pdsseitenaufrufe, 5) OVER() AS bucket_no_pdsseitenaufrufe,\r\n            ML.QUANTILE_BUCKETIZE(no_hits_per_session,5) OVER() AS bucket_no_hits_per_session,\r\n            ML.QUANTILE_BUCKETIZE(no_pagehits_per_session, 5) OVER() AS bucket_no_pagehits_per_session,\r\n            ML.QUANTILE_BUCKETIZE(anzahl_produkte, 5) OVER() AS bucket_anzahl_products,\r\n            ML.QUANTILE_BUCKETIZE(transaction_no_per_shop_channel, 5) OVER() AS bucket_transaction_no_per_shop_channel,\r\n            ML.QUANTILE_BUCKETIZE(months_since_first_purchase, 5) OVER() AS bucket_months_since_first_purchase,\r\n            --ML.QUANTILE_BUCKETIZE(timestamp_diff(session_end_time, session_start_time, minute), 5) OVER() AS bucket_session_length_minutes\r\n\r\n    \r\n FROM `bergzeit.analysis.pred_repurchase_model_transactions`--{{ref('pred_repurchase_model_transactions')}}\r\n WHERE T_order_date < DATE_SUB(CURRENT_DATE(), INTERVAL 190 DAY)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.pred_repurchase_model_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "zz_predictive_input", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_zz_predictive_input", "fqn": ["sql_repository_bz", "03_marts", "zz_predictive_input", "pred_repurchase_model_input"], "unique_id": "model.sql_repository_bz.pred_repurchase_model_input", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/zz_predictive_input/pred_repurchase_model_input.sql", "original_file_path": "models/03_marts/zz_predictive_input/pred_repurchase_model_input.sql", "name": "pred_repurchase_model_input", "alias": "pred_repurchase_model_input", "checksum": {"name": "sha256", "checksum": "b1e7865b324237f8d089e976dd58fd9b31b84f8f56c0f683013abda99288e133"}, "tags": [], "refs": [["pred_repurchase_model_transactions"]], "sources": [], "description": "xxx", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/zz_predictive_input/_models_predictive.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/zz_predictive_input/pred_repurchase_model_input.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "zz_predictive_input", "materialized": "view"}, "created_at": 1663750853.2808425, "compiled_sql": "# @author: stephanie.hubert\n# @description: model input\n# @source: ga\n# @ticket: weba-412\n# @dbt-managed: yes\n# @styleguide_v: 0.9\n\n\nSELECT * except (ga_acquisition_channel,ga_device_category, voucher_type, \nIndikator_suche, Magazin_interaktion,top_categories,\nT_invoice_amount_excl_vat)\n    , if(ga_acquisition_channel is null, 'unbekannt', ga_acquisition_channel) as ga_acquisition_channel_korr\n    , if(ga_device_category is null, 'unbekannt', ga_device_category) as ga_device_category_korr\n    , if(voucher_type is null, 'kein Gutschein', voucher_type) as voucher_type_korr\n    , if(Indikator_suche is null, 'unbekannt', cast(Indikator_suche as string)) as indikator_suche_korr\n    , if(Magazin_interaktion is null, 'unbekannt', cast(Magazin_interaktion as string)) as indikator_magazin_korr\n    , if(T_invoice_amount_excl_vat < 0, 0, T_invoice_amount_excl_vat) as T_invoice_amount_excl_vat_korr\n    , if(top_categories is null, 'unbekannt', top_categories) as top_categories_korr\n    , cast(transaktion_mit_voucher as string) as indikator_voucher_string\n    , cast(ind_versand as string) as indikator_versand_string\n    , cast(order_month as string) as order_month_string \n  --  , timestamp_diff(session_end_time, session_start_time, minute) as session_length_minutes\n    , cast(repurchase_30d as string) as repurchase_30d_string\n    , cast(repurchase_90d as string) as repurchase_90d_string\n    , cast(repurchase_180d as string) as repurchase_180d_string\n\n    , ML.STANDARD_SCALER(if(T_invoice_amount_excl_vat < 0, 0, T_invoice_amount_excl_vat)) OVER() AS scal_T_invoice_amount_excl_vat,\n            ML.STANDARD_SCALER(no_pdsseitenaufrufe) OVER() AS scal_no_pdsseitenaufrufe,\n            ML.STANDARD_SCALER(no_hits_per_session) OVER() AS scal_no_hits_per_session,\n            ML.STANDARD_SCALER(no_pagehits_per_session) OVER() AS scal_no_pagehits_per_session,\n            ML.STANDARD_SCALER(Anzahl_products) OVER() AS scal_anzahl_products,\n            ML.STANDARD_SCALER(transaction_no_per_shop_channel) OVER() AS scal_transaction_no_per_shop_channel,\n            ML.STANDARD_SCALER(months_since_first_purchase) OVER() AS scal_months_since_first_purchase,\n            --ML.STANDARD_SCALER(timestamp_diff(session_end_time, session_start_time, minute)) OVER() AS scal_session_length_minutes,\n            ML.QUANTILE_BUCKETIZE(if(T_invoice_amount_excl_vat < 0, 0, T_invoice_amount_excl_vat), 5) OVER() AS bucket_T_invoice_amount_excl_vat,\n            ML.QUANTILE_BUCKETIZE(no_pdsseitenaufrufe, 5) OVER() AS bucket_no_pdsseitenaufrufe,\n            ML.QUANTILE_BUCKETIZE(no_hits_per_session,5) OVER() AS bucket_no_hits_per_session,\n            ML.QUANTILE_BUCKETIZE(no_pagehits_per_session, 5) OVER() AS bucket_no_pagehits_per_session,\n            ML.QUANTILE_BUCKETIZE(anzahl_produkte, 5) OVER() AS bucket_anzahl_products,\n            ML.QUANTILE_BUCKETIZE(transaction_no_per_shop_channel, 5) OVER() AS bucket_transaction_no_per_shop_channel,\n            ML.QUANTILE_BUCKETIZE(months_since_first_purchase, 5) OVER() AS bucket_months_since_first_purchase,\n            --ML.QUANTILE_BUCKETIZE(timestamp_diff(session_end_time, session_start_time, minute), 5) OVER() AS bucket_session_length_minutes\n\n    \n FROM `bergzeit.analysis.pred_repurchase_model_transactions`--`bergzeit`.`dbt_zz_predictive_input`.`pred_repurchase_model_transactions`\n WHERE T_order_date < DATE_SUB(CURRENT_DATE(), INTERVAL 190 DAY)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_zz_predictive_input`.`pred_repurchase_model_input`"}, "model.sql_repository_bz.pred_repurchase_model_transactions": {"raw_sql": "with all_data as (\r\n\r\nselect \r\n\r\n* except (inv_h_order_id, order_date,\r\ninv_h_shop_order_id,sales_channel_id, oxid_customer_id, offer_id) ,\r\nif(indikator_product = 1, if(inv_l_set_item_id = 'SET-ARTIKEL', 'Set' ,  trim(top_category)) , null) as Kategorie\r\n\r\nfrom {{ref('int_nav_transactions_and_customers')}} as nav\r\n\r\nleft join {{ref('stg_ga_de_overall_session_attributes')}} as ga\r\non nav.T_shop_order_id = ga.ga_transaction_id\r\n\r\nleft join {{ref('int_nav_invoice_line_aggregated')}} as inv\r\non nav.T_nav_order_id = inv.inv_h_order_id\r\n\r\nleft join {{ref('stg_emarsys_ids')}} as em\r\non nav.shop_customer_id = em.oxid_customer_id\r\n\r\nleft join {{ref('int_gmc_most_recent_prod_attr')}}\r\non inv_l_product_sku = offer_id\r\n\r\n\r\n),\r\n\r\n--fetch merged data\r\n\r\n),\r\n\r\nrelev_attributes as (\r\n\r\nselect \r\n\r\nT_order_date,\r\nT_nav_invoice_id,\r\n    T_shop_channel_id,\r\n    T_responsiblity_center_id,\r\n    T_customer_id,\r\n    shop_customer_id,\r\n    T_ship_country || '_' || substr(T_ship_zip_code, 1, 1) as country_plz_area,\r\n    T_payment_method_code,\r\n    T_invoice_amount_excl_vat,\r\n    ga_hostname,\r\n    ga_acquisition_channel,\r\n    ga_device_category,\r\n    --ga_campaign,\r\n    --session_start_time,\r\n    --session_end_time,\r\n    no_hits_per_session,\t\t\r\nIndikator_suche,\t\r\n--no_suche_per_session,\t\r\nMagazin_interaktion,\r\nno_pagehits_per_session\t,\r\nno_pdsseitenaufrufe\t,\t\r\ntransaktion_mit_voucher\t,\r\nvoucher_type,\t\r\ntop_categories,\r\nind_versand\t,\r\nanzahl_produkte,\t\r\ntransaction_no_per_shop_channel,\r\nneu_bestand_per_shop_channel,\r\ncust_first_order_date,\r\nshop_doi_status,\r\ndate(if(subscription_date in ('None', '0000-00-00 00:00:00'), null, TIMESTAMP(subscription_date))) as emarsys_subscription_date,\r\ndate(if(unsubscription_date in ('None', '0000-00-00 00:00:00'), null, TIMESTAMP(unsubscription_date))) as emarsys_unsubscription_date\r\n\r\n      , lead(T_order_date) over (partition by T_customer_id order by T_order_date /*, T_shop_order_id*/ asc) as cust_next_order_date\r\n      , extract(month FROM T_order_date) as order_month\r\n      --, session_end_time - session_start_time as session_duration\r\n      --, if(regexp_contains(ga_campaign, '^[0-9]{6,6}$'), 1, 0) as indikator_affiliate\r\n\r\nfrom all_data\r\n\r\nwhere T_shop_channel_id = 'Webshop 102' and T_ship_country = 'DE'\r\n\r\n),\r\n\r\nnew_attributes as (\r\nselect *\r\n    , date_diff(cust_next_order_date, T_order_date, DAY) as days_until_next_purchase\r\n    , date_diff(T_order_date, cust_first_order_date,  MONTH) as months_since_first_purchase\r\n    , case when T_payment_method_code in ('KLARNA RE', 'RECHNUNG', 'BILLPAY', 'BILLPAY_PL') then 'Rechnung'\r\n           when T_payment_method_code in ('DANKORT', 'KREDITKART') then 'Kreditkarte'\r\n    else T_payment_method_code end as payment_method_groups \r\n    , case when shop_doi_status = '1' and   emarsys_subscription_date <= T_order_date and emarsys_unsubscription_date is null then 1\r\n      else 0 end as indikator_emarsys_doi\r\n\r\n\r\nfrom relev_attributes\r\n)\r\n\r\nselect * except(\r\n    T_shop_channel_id,\r\n    T_responsiblity_center_id,\r\n    T_customer_id,\r\n    shop_customer_id,\r\n    ga_hostname,\r\n    cust_first_order_date,\r\n    cust_next_order_date,\r\n    days_until_next_purchase,\r\n    shop_doi_status,\r\n    emarsys_subscription_date,\r\n    emarsys_unsubscription_date),\r\nif(days_until_next_purchase < 30, 1, 0) as repurchase_30d,\r\nif(days_until_next_purchase < 90, 1, 0) as repurchase_90d,\r\nif(days_until_next_purchase < 180, 1, 0) as repurchase_180d\r\n\r\nfrom new_attributes\r\nwhere T_order_date > '2019-01-01'\r\n\r\n/*\r\n\r\nkat_data as (\r\n\r\nselect \r\n    category_type as k_category_type, \r\n    count(*) as anzahl\r\nfrom agg_data\r\ngroup by 1\r\n)\r\n\r\nselect \r\n    * except (k_category_type, anzahl) ,\r\n    if(anzahl < 1000, 'Rest', category_type) as top_categories\r\n\r\nfrom agg_data\r\n\r\nleft join kat_data\r\non category_type = k_category_type\r\n */", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_nav_transactions_and_customers", "model.sql_repository_bz.stg_ga_de_overall_session_attributes", "model.sql_repository_bz.int_nav_invoice_line_aggregated", "model.sql_repository_bz.stg_emarsys_ids", "model.sql_repository_bz.int_gmc_most_recent_prod_attr"]}, "config": {"enabled": true, "alias": null, "schema": "zz_predictive_input", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_zz_predictive_input", "fqn": ["sql_repository_bz", "03_marts", "zz_predictive_input", "pred_repurchase_model_transactions"], "unique_id": "model.sql_repository_bz.pred_repurchase_model_transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/zz_predictive_input/pred_repurchase_model_transactions.sql", "original_file_path": "models/03_marts/zz_predictive_input/pred_repurchase_model_transactions.sql", "name": "pred_repurchase_model_transactions", "alias": "pred_repurchase_model_transactions", "checksum": {"name": "sha256", "checksum": "6c187c30e2ba46e63e572105f78515092fa9092baa14bbf81b1f4ce0e83b9b44"}, "tags": [], "refs": [["int_nav_transactions_and_customers"], ["stg_ga_de_overall_session_attributes"], ["int_nav_invoice_line_aggregated"], ["stg_emarsys_ids"], ["int_gmc_most_recent_prod_attr"]], "sources": [], "description": "xxx", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/zz_predictive_input/_models_predictive.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/zz_predictive_input/pred_repurchase_model_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "zz_predictive_input", "materialized": "view"}, "created_at": 1663750853.286036, "compiled_sql": "with all_data as (\n\nselect \n\n* except (inv_h_order_id, order_date,\ninv_h_shop_order_id,sales_channel_id, oxid_customer_id, offer_id) ,\nif(indikator_product = 1, if(inv_l_set_item_id = 'SET-ARTIKEL', 'Set' ,  trim(top_category)) , null) as Kategorie\n\nfrom `bergzeit`.`dbt_analytics_intermediate`.`int_nav_transactions_and_customers` as nav\n\nleft join `bergzeit`.`dbt_zz_predictive_input`.`stg_ga_de_overall_session_attributes` as ga\non nav.T_shop_order_id = ga.ga_transaction_id\n\nleft join `bergzeit`.`dbt_analytics_intermediate`.`int_nav_invoice_line_aggregated` as inv\non nav.T_nav_order_id = inv.inv_h_order_id\n\nleft join `bergzeit`.`dbt_analytics_staging`.`stg_emarsys_ids` as em\non nav.shop_customer_id = em.oxid_customer_id\n\nleft join `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_most_recent_prod_attr`\non inv_l_product_sku = offer_id\n\n\n),\n\n--fetch merged data\n\n),\n\nrelev_attributes as (\n\nselect \n\nT_order_date,\nT_nav_invoice_id,\n    T_shop_channel_id,\n    T_responsiblity_center_id,\n    T_customer_id,\n    shop_customer_id,\n    T_ship_country || '_' || substr(T_ship_zip_code, 1, 1) as country_plz_area,\n    T_payment_method_code,\n    T_invoice_amount_excl_vat,\n    ga_hostname,\n    ga_acquisition_channel,\n    ga_device_category,\n    --ga_campaign,\n    --session_start_time,\n    --session_end_time,\n    no_hits_per_session,\t\t\nIndikator_suche,\t\n--no_suche_per_session,\t\nMagazin_interaktion,\nno_pagehits_per_session\t,\nno_pdsseitenaufrufe\t,\t\ntransaktion_mit_voucher\t,\nvoucher_type,\t\ntop_categories,\nind_versand\t,\nanzahl_produkte,\t\ntransaction_no_per_shop_channel,\nneu_bestand_per_shop_channel,\ncust_first_order_date,\nshop_doi_status,\ndate(if(subscription_date in ('None', '0000-00-00 00:00:00'), null, TIMESTAMP(subscription_date))) as emarsys_subscription_date,\ndate(if(unsubscription_date in ('None', '0000-00-00 00:00:00'), null, TIMESTAMP(unsubscription_date))) as emarsys_unsubscription_date\n\n      , lead(T_order_date) over (partition by T_customer_id order by T_order_date /*, T_shop_order_id*/ asc) as cust_next_order_date\n      , extract(month FROM T_order_date) as order_month\n      --, session_end_time - session_start_time as session_duration\n      --, if(regexp_contains(ga_campaign, '^[0-9]{6,6}$'), 1, 0) as indikator_affiliate\n\nfrom all_data\n\nwhere T_shop_channel_id = 'Webshop 102' and T_ship_country = 'DE'\n\n),\n\nnew_attributes as (\nselect *\n    , date_diff(cust_next_order_date, T_order_date, DAY) as days_until_next_purchase\n    , date_diff(T_order_date, cust_first_order_date,  MONTH) as months_since_first_purchase\n    , case when T_payment_method_code in ('KLARNA RE', 'RECHNUNG', 'BILLPAY', 'BILLPAY_PL') then 'Rechnung'\n           when T_payment_method_code in ('DANKORT', 'KREDITKART') then 'Kreditkarte'\n    else T_payment_method_code end as payment_method_groups \n    , case when shop_doi_status = '1' and   emarsys_subscription_date <= T_order_date and emarsys_unsubscription_date is null then 1\n      else 0 end as indikator_emarsys_doi\n\n\nfrom relev_attributes\n)\n\nselect * except(\n    T_shop_channel_id,\n    T_responsiblity_center_id,\n    T_customer_id,\n    shop_customer_id,\n    ga_hostname,\n    cust_first_order_date,\n    cust_next_order_date,\n    days_until_next_purchase,\n    shop_doi_status,\n    emarsys_subscription_date,\n    emarsys_unsubscription_date),\nif(days_until_next_purchase < 30, 1, 0) as repurchase_30d,\nif(days_until_next_purchase < 90, 1, 0) as repurchase_90d,\nif(days_until_next_purchase < 180, 1, 0) as repurchase_180d\n\nfrom new_attributes\nwhere T_order_date > '2019-01-01'\n\n/*\n\nkat_data as (\n\nselect \n    category_type as k_category_type, \n    count(*) as anzahl\nfrom agg_data\ngroup by 1\n)\n\nselect \n    * except (k_category_type, anzahl) ,\n    if(anzahl < 1000, 'Rest', category_type) as top_categories\n\nfrom agg_data\n\nleft join kat_data\non category_type = k_category_type\n */", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_zz_predictive_input`.`pred_repurchase_model_transactions`"}, "model.sql_repository_bz.transaction_value_consentless_soll_ist_report": {"raw_sql": "with consentless_transactions_aggr_by_day_country as (\r\n\r\n    select *\r\n    from {{ ref('int_consentless_transactions_aggr_by_day_country') }}\r\n\r\n)\r\n\r\nselect * from consentless_transactions_aggr_by_day_country", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_consentless_transactions_aggr_by_day_country"]}, "config": {"enabled": true, "alias": null, "schema": "transaction", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_transaction", "fqn": ["sql_repository_bz", "03_marts", "transaction", "transaction_value_consentless_soll_ist_report"], "unique_id": "model.sql_repository_bz.transaction_value_consentless_soll_ist_report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/transaction/transaction_value_consentless_soll_ist_report.sql", "original_file_path": "models/03_marts/transaction/transaction_value_consentless_soll_ist_report.sql", "name": "transaction_value_consentless_soll_ist_report", "alias": "transaction_value_consentless_soll_ist_report", "checksum": {"name": "sha256", "checksum": "6b8352d41a587e13600cb5eff6cb9c4d7f230db21a42fd04a58cfeb75fe638fd"}, "tags": [], "refs": [["int_consentless_transactions_aggr_by_day_country"]], "sources": [], "description": "this model lists the consentless transaction values in EUR for all iShop hostnames", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/transaction/_models_transactions.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/transaction/transaction_value_consentless_soll_ist_report.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "transaction", "materialized": "view"}, "created_at": 1663750853.3518734, "compiled_sql": "with consentless_transactions_aggr_by_day_country as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_consentless_transactions_aggr_by_day_country`\n\n)\n\nselect * from consentless_transactions_aggr_by_day_country", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_transaction`.`transaction_value_consentless_soll_ist_report`"}, "model.sql_repository_bz.transaction_voucher_data": {"raw_sql": "with inv_and_crmemo as (\r\n\r\n    select\r\n        order_date,\r\n        inv_h_shop_order_id as T_shop_order_id,\r\n        inv_h_order_id as T_nav_order_id,\r\n        sales_channel_id as shop_channel_id,\r\n        sales_channel_description,\r\n        shipment_country_id as T_ship_country,\r\n        sum_invoice_amount_excl_vat_euro as invoice_amount_excl_vat_euro,\r\n        sum_crmemo_amount_excl_vat_euro as credit_memo_amount_excl_vat_euro\r\n\r\n    from {{ref('int_nav_invoice_crmemo_combined')}}\r\n    where order_date between {{get_financial_year_to_yesterday_date_range()}}\r\n\r\n),\r\n\r\nvouchers as (\r\n\r\n    select\r\n        inv_h_order_id,\r\n        inv_l_product_sku,\r\n        inv_l_product_description,\r\n        inv_l_product_attributes\r\n    from {{ref('stg_nav_invoice_header_and_lines')}}\r\n    where order_date between {{get_financial_year_to_yesterday_date_range()}} \r\n    and inv_l_product_sku = 'AKTION'\r\n\r\n),\r\n\r\njoined_data as (\r\n\r\n    select *\r\n    from inv_and_crmemo\r\n    inner join vouchers\r\n    on T_nav_order_id = inv_h_order_id\r\n\r\n)\r\n\r\nselect * from joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_financial_year_to_yesterday_date_range"], "nodes": ["model.sql_repository_bz.int_nav_invoice_crmemo_combined", "model.sql_repository_bz.stg_nav_invoice_header_and_lines"]}, "config": {"enabled": true, "alias": null, "schema": "transaction", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_transaction", "fqn": ["sql_repository_bz", "03_marts", "transaction", "transaction_voucher_data"], "unique_id": "model.sql_repository_bz.transaction_voucher_data", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/transaction/transaction_voucher_data.sql", "original_file_path": "models/03_marts/transaction/transaction_voucher_data.sql", "name": "transaction_voucher_data", "alias": "transaction_voucher_data", "checksum": {"name": "sha256", "checksum": "b6b10269539bb8b1dcca67e351b5b7e4a37c5ae77d5b66d038fabf5186b6c6eb"}, "tags": [], "refs": [["int_nav_invoice_crmemo_combined"], ["stg_nav_invoice_header_and_lines"]], "sources": [], "description": "this model lists all transactions that contain a voucher", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/transaction/_models_transactions.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/transaction/transaction_voucher_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "transaction", "materialized": "view"}, "created_at": 1663750853.3556383, "compiled_sql": "with inv_and_crmemo as (\n\n    select\n        order_date,\n        inv_h_shop_order_id as T_shop_order_id,\n        inv_h_order_id as T_nav_order_id,\n        sales_channel_id as shop_channel_id,\n        sales_channel_description,\n        shipment_country_id as T_ship_country,\n        sum_invoice_amount_excl_vat_euro as invoice_amount_excl_vat_euro,\n        sum_crmemo_amount_excl_vat_euro as credit_memo_amount_excl_vat_euro\n\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_invoice_crmemo_combined`\n    where order_date between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n\n\n),\n\nvouchers as (\n\n    select\n        inv_h_order_id,\n        inv_l_product_sku,\n        inv_l_product_description,\n        inv_l_product_attributes\n    from `bergzeit`.`dbt_analytics_staging`.`stg_nav_invoice_header_and_lines`\n    where order_date between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n \n    and inv_l_product_sku = 'AKTION'\n\n),\n\njoined_data as (\n\n    select *\n    from inv_and_crmemo\n    inner join vouchers\n    on T_nav_order_id = inv_h_order_id\n\n)\n\nselect * from joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_transaction`.`transaction_voucher_data`"}, "model.sql_repository_bz.transaction_ga_nav_attributes": {"raw_sql": "with transaction_ga_nav_attributes as (\r\n\r\n    select\r\n        *,\r\n        date_diff(order_date, cust_previous_order_date, day) as days_between_purchases\r\n    from {{ ref('int_nav_invoice_crmemo_combined') }} as nav\r\n    left join {{ ref('stg_ga_transactions') }} as ga\r\n        on nav.inv_h_shop_order_id = ga.ga_transaction_id\r\n\r\n) \r\n\r\nselect * from transaction_ga_nav_attributes", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_nav_invoice_crmemo_combined", "model.sql_repository_bz.stg_ga_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "transaction", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_transaction", "fqn": ["sql_repository_bz", "03_marts", "transaction", "transaction_ga_nav_attributes"], "unique_id": "model.sql_repository_bz.transaction_ga_nav_attributes", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/transaction/transaction_ga_nav_attributes.sql", "original_file_path": "models/03_marts/transaction/transaction_ga_nav_attributes.sql", "name": "transaction_ga_nav_attributes", "alias": "transaction_ga_nav_attributes", "checksum": {"name": "sha256", "checksum": "f5b26d7efeab55812c6ac6c57cfcb072c4eade5c5fa385bf0fdb0b385324b984"}, "tags": [], "refs": [["int_nav_invoice_crmemo_combined"], ["stg_ga_transactions"]], "sources": [], "description": "this model lists all nav transactions enriched with ga attributes", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/transaction/_models_transactions.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/transaction/transaction_ga_nav_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "transaction", "materialized": "view"}, "created_at": 1663750853.3301423, "compiled_sql": "with transaction_ga_nav_attributes as (\n\n    select\n        *,\n        date_diff(order_date, cust_previous_order_date, day) as days_between_purchases\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_invoice_crmemo_combined` as nav\n    left join `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions` as ga\n        on nav.inv_h_shop_order_id = ga.ga_transaction_id\n\n) \n\nselect * from transaction_ga_nav_attributes", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_transaction`.`transaction_ga_nav_attributes`"}, "model.sql_repository_bz.transaction_order_value_daily_by_country": {"raw_sql": "with base_data as (\r\n\r\n    select\r\n        T_order_date,\r\n        T_nav_order_id,\r\n        T_responsiblity_center_id,\r\n        T_ship_country,\r\n        case\r\n            when T_ship_country in ('CH', 'AT', 'DE', 'GB', 'IT', 'NL', 'BE') then T_ship_country\r\n            when T_ship_country in ('PL', 'SE', 'CZ', 'DK', 'FI', 'FR', 'NO') then 'INT'\r\n        else 'other' end as LL,\r\n        T_shop_channel_id,\r\n        lower(trim(replace(replace(replace(sales_channel_description, 'Webshop', ''), 'International (EN)', 'EN'), 'Outdoor Broker', 'OB'))) as sales_channel,\r\n        T_invoice_amount_excl_vat,\r\n        T_currency_code\r\n    from {{ ref('int_nav_transactions_and_customers') }}\r\n    where\r\n        T_order_date between '2019-03-01' and date_sub(current_date(), interval 2 day)\r\n        and regexp_contains(sales_channel_description, 'Webshop')\r\n        and regexp_contains(lower(sales_channel_description), 'salewa|dynafit') = false\r\n\r\n)\r\n\r\n\r\nselect\r\n    T_responsiblity_center_id as shop_id,\r\n    T_order_date,\r\n    round(sum(T_invoice_amount_excl_vat),2) as amount,\r\n    T_currency_code as currency,\r\n    concat(sales_channel, '_', LL) as LL\r\nfrom base_data\r\ngroup by 1,2,4,5\r\norder by T_order_date desc, count(*) desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_nav_transactions_and_customers"]}, "config": {"enabled": true, "alias": null, "schema": "transaction", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_transaction", "fqn": ["sql_repository_bz", "03_marts", "transaction", "transaction_order_value_daily_by_country"], "unique_id": "model.sql_repository_bz.transaction_order_value_daily_by_country", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/transaction/transaction_order_value_daily_by_country.sql", "original_file_path": "models/03_marts/transaction/transaction_order_value_daily_by_country.sql", "name": "transaction_order_value_daily_by_country", "alias": "transaction_order_value_daily_by_country", "checksum": {"name": "sha256", "checksum": "6fa7e3794458cbdb9e816497176bfb6d554c5e86888a9740315ff393412c685a"}, "tags": [], "refs": [["int_nav_transactions_and_customers"]], "sources": [], "description": "this model lists daily order value (Oxid) for budget planning", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/transaction/_models_transactions.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/transaction/transaction_order_value_daily_by_country.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "transaction", "materialized": "view"}, "created_at": 1663750853.335043, "compiled_sql": "with base_data as (\n\n    select\n        T_order_date,\n        T_nav_order_id,\n        T_responsiblity_center_id,\n        T_ship_country,\n        case\n            when T_ship_country in ('CH', 'AT', 'DE', 'GB', 'IT', 'NL', 'BE') then T_ship_country\n            when T_ship_country in ('PL', 'SE', 'CZ', 'DK', 'FI', 'FR', 'NO') then 'INT'\n        else 'other' end as LL,\n        T_shop_channel_id,\n        lower(trim(replace(replace(replace(sales_channel_description, 'Webshop', ''), 'International (EN)', 'EN'), 'Outdoor Broker', 'OB'))) as sales_channel,\n        T_invoice_amount_excl_vat,\n        T_currency_code\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_transactions_and_customers`\n    where\n        T_order_date between '2019-03-01' and date_sub(current_date(), interval 2 day)\n        and regexp_contains(sales_channel_description, 'Webshop')\n        and regexp_contains(lower(sales_channel_description), 'salewa|dynafit') = false\n\n)\n\n\nselect\n    T_responsiblity_center_id as shop_id,\n    T_order_date,\n    round(sum(T_invoice_amount_excl_vat),2) as amount,\n    T_currency_code as currency,\n    concat(sales_channel, '_', LL) as LL\nfrom base_data\ngroup by 1,2,4,5\norder by T_order_date desc, count(*) desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_transaction`.`transaction_order_value_daily_by_country`"}, "model.sql_repository_bz.pb_order_margins_after_returns": {"raw_sql": "with profit_bidding_order_margins_after_returns as (\r\n\r\n    select\r\n        date,\r\n        -- Google Ads AdAccountId for upload,\r\n        case AdAccountId\r\n            when 9156948459 then 'Sale_PB_IT'\r\n            when 8369274094 then 'Sale_PB_IT'\r\n            when 1635925247 then 'Sale_PB_IT'\r\n            when 1631966904 then 'Sale_PB_NL'\r\n            when 8865602237 then 'Sale_PB_NL'\r\n            when 9886399864 then 'Sale_PB_NL'\r\n            when 5575738585 then 'Sale_PB_AT'\r\n            when 1468347477 then 'Sale_PB_AT'\r\n            when 3203491330 then 'Sale_PB_AT'\r\n            when 7806554469 then 'Sale_PB_test_UK'\r\n            when 5958867839 then 'Sale_PB_test_UK'\r\n            when 3929840027 then 'Sale_PB_test_UK'\r\n            when 4049291822 then 'Sale_PB_test_DE'\r\n            when 2495559838 then 'Sale_PB_test_DE'\r\n            when 7844181130 then 'Sale_PB_test_DE'\r\n            when 3091405967 then 'Sale_PB_test_CH'\r\n            when 1740354347 then 'Sale_PB_test_CH'\r\n            when 1845331214 then 'Sale_PB_test_CH'\r\n            else 'Sale_PB_test'\r\n        end as conversion_name,\r\n        transactionId,\r\n        totalRevenue,\r\n\r\n        /* final order margin calculation logic */\r\n        if(\r\n          /*  set negative order margin values to 1 (only positive values permitted) */\r\n          sum(\r\n            (productRevenue - coupon_cost_per_product)\r\n            - (productRevenue * wholesale_to_price)\r\n            * (1-r_return_rate_est)\r\n          ) < 0, \r\n          1,\r\n          /* else: calculate order margin by subtracting coupon value and multiplying margin and return rate */\r\n          sum(\r\n            (productRevenue - coupon_cost_per_product)\r\n            - (productRevenue * wholesale_to_price)\r\n            * (1-r_return_rate_est)\r\n          )\r\n        ) as order_margins_after_returns\r\n    from {{ref('pb_product_revenue_margins_returns')}}\r\n    group by 1,2,3,4\r\n\r\n)\r\n\r\nselect * from profit_bidding_order_margins_after_returns", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.pb_product_revenue_margins_returns"]}, "config": {"enabled": true, "alias": null, "schema": "profit_bidding", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_profit_bidding", "fqn": ["sql_repository_bz", "03_marts", "profit_bidding", "pb_order_margins_after_returns"], "unique_id": "model.sql_repository_bz.pb_order_margins_after_returns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/profit_bidding/pb_order_margins_after_returns.sql", "original_file_path": "models/03_marts/profit_bidding/pb_order_margins_after_returns.sql", "name": "pb_order_margins_after_returns", "alias": "pb_order_margins_after_returns", "checksum": {"name": "sha256", "checksum": "b2a76407c07aae0594839bec9072294d013345ceef3f0d34bd715aaf5e99745a"}, "tags": [], "refs": [["pb_product_revenue_margins_returns"]], "sources": [], "description": "this model adds conversion names based on adaccount id and calculates order margins after returns", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/profit_bidding/_models_profit_bidding.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/profit_bidding/pb_order_margins_after_returns.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "profit_bidding", "materialized": "view"}, "created_at": 1663750853.368803, "compiled_sql": "with profit_bidding_order_margins_after_returns as (\n\n    select\n        date,\n        -- Google Ads AdAccountId for upload,\n        case AdAccountId\n            when 9156948459 then 'Sale_PB_IT'\n            when 8369274094 then 'Sale_PB_IT'\n            when 1635925247 then 'Sale_PB_IT'\n            when 1631966904 then 'Sale_PB_NL'\n            when 8865602237 then 'Sale_PB_NL'\n            when 9886399864 then 'Sale_PB_NL'\n            when 5575738585 then 'Sale_PB_AT'\n            when 1468347477 then 'Sale_PB_AT'\n            when 3203491330 then 'Sale_PB_AT'\n            when 7806554469 then 'Sale_PB_test_UK'\n            when 5958867839 then 'Sale_PB_test_UK'\n            when 3929840027 then 'Sale_PB_test_UK'\n            when 4049291822 then 'Sale_PB_test_DE'\n            when 2495559838 then 'Sale_PB_test_DE'\n            when 7844181130 then 'Sale_PB_test_DE'\n            when 3091405967 then 'Sale_PB_test_CH'\n            when 1740354347 then 'Sale_PB_test_CH'\n            when 1845331214 then 'Sale_PB_test_CH'\n            else 'Sale_PB_test'\n        end as conversion_name,\n        transactionId,\n        totalRevenue,\n\n        /* final order margin calculation logic */\n        if(\n          /*  set negative order margin values to 1 (only positive values permitted) */\n          sum(\n            (productRevenue - coupon_cost_per_product)\n            - (productRevenue * wholesale_to_price)\n            * (1-r_return_rate_est)\n          ) < 0, \n          1,\n          /* else: calculate order margin by subtracting coupon value and multiplying margin and return rate */\n          sum(\n            (productRevenue - coupon_cost_per_product)\n            - (productRevenue * wholesale_to_price)\n            * (1-r_return_rate_est)\n          )\n        ) as order_margins_after_returns\n    from `bergzeit`.`dbt_profit_bidding`.`pb_product_revenue_margins_returns`\n    group by 1,2,3,4\n\n)\n\nselect * from profit_bidding_order_margins_after_returns", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_profit_bidding`.`pb_order_margins_after_returns`"}, "model.sql_repository_bz.pb_full_working_query": {"raw_sql": "with profit_bidding_final_model as (\r\n\r\n    select * \r\n    from {{ ref('pb_order_margins_after_returns') }} \r\n    where\r\n        /* required field for upload and conversion identification */\r\n        transactionId is not null\r\n        /* revenue value must be greater or equal to 0 */\r\n        and totalRevenue is not null\r\n        /* the order margin value is uploaded to Google Ads as conversion values */\r\n        and order_margins_after_returns is not null\r\n\r\n)\r\n\r\nselect * from profit_bidding_final_model", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.pb_order_margins_after_returns"]}, "config": {"enabled": true, "alias": null, "schema": "profit_bidding", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_profit_bidding", "fqn": ["sql_repository_bz", "03_marts", "profit_bidding", "pb_full_working_query"], "unique_id": "model.sql_repository_bz.pb_full_working_query", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/profit_bidding/pb_full_working_query.sql", "original_file_path": "models/03_marts/profit_bidding/pb_full_working_query.sql", "name": "pb_full_working_query", "alias": "pb_full_working_query", "checksum": {"name": "sha256", "checksum": "b1a904568abd8b3f89229e99de0a32e79273c9c49ecf6477bb903936cbbbdce3"}, "tags": [], "refs": [["pb_order_margins_after_returns"]], "sources": [], "description": "final model that excludes null values in important columns", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion_name": {"name": "conversion_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transactionId": {"name": "transactionId", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}, "totalRevenue": {"name": "totalRevenue", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_margins_after_returns": {"name": "order_margins_after_returns", "description": "the calculated order margins with an average estimated return rate adjustment", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/profit_bidding/_models_profit_bidding.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/profit_bidding/pb_full_working_query.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "profit_bidding", "materialized": "view"}, "created_at": 1663750853.3678544, "compiled_sql": "with profit_bidding_final_model as (\n\n    select * \n    from `bergzeit`.`dbt_profit_bidding`.`pb_order_margins_after_returns` \n    where\n        /* required field for upload and conversion identification */\n        transactionId is not null\n        /* revenue value must be greater or equal to 0 */\n        and totalRevenue is not null\n        /* the order margin value is uploaded to Google Ads as conversion values */\n        and order_margins_after_returns is not null\n\n)\n\nselect * from profit_bidding_final_model", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_profit_bidding`.`pb_full_working_query`"}, "model.sql_repository_bz.pb_product_revenue_margins_returns": {"raw_sql": "/* join peformance data, margins and return rates */\r\n\r\nwith joined_data as (\r\n\r\n    select *\r\n    from {{ ref('int_ga_product_performance_with_ad_touchpoints') }} as perf\r\n\r\n    /* wholesale price join 1 by day */\r\n    left join {{ ref('int_cp_product_price_per_day') }} as wholesale\r\n    on\r\n        perf.productSku = wholesale.w_sku\r\n        and perf.date = wholesale.w_date\r\n\r\n    /* wholesale price join to average */\r\n    left join {{ ref('int_cp_product_price_overall') }} as wholesale_ov\r\n    on perf.productSku = wholesale_ov.wo_sku\r\n\r\n    -- return rate join by country, brand, top_cat \r\n    left join {{ ref('stg_qlik_return_rates') }} as returns_stg\r\n    on\r\n        perf.country_identifier = returns_stg.country\r\n        and perf.productBrand = returns_stg.brand\r\n        and perf.TopCategory = returns_stg.top_category\r\n\r\n    /* return rate join by country */\r\n    left join {{ ref('int_gmc_avg_return_rates_by_country') }} as returns\r\n    on\r\n        perf.country_identifier = returns.r_country\r\n        and perf.TopCategory = returns.r_top_category\r\n\r\n    /* return rate join overall */\r\n    left join {{ ref('int_gmc_avg_return_rates_overall') }} as returns_rwc\r\n    on\r\n        perf.productBrand = returns_rwc.rwc_brand\r\n        and perf.TopCategory = returns_rwc.rwc_top_category\r\n\r\n)\r\n\r\nselect \r\n    *,\r\n    -- get wholesale price per sku, with coalesce fallback logic\r\n    -- 1. Take product wholesale price of exact day\r\n    -- 2. If null, take avg product wholesale price\r\n    -- 3. If null, take overall average\r\n    -- 4. If null, take global wholesale to priceaverage (todo: difference to 4?)\r\n    coalesce(\r\n        w_wholesale_to_price,\r\n        wo_wholesale_to_price_sku_avg,\r\n        wo_wholesale_to_price_overall_avg,\r\n        -- todo: register as variable\r\n        0.5647\r\n    ) as wholesale_to_price,\r\n\r\n    -- get average return rate per sku with fallback logic\r\n    -- rwc = return rate with country\r\n    coalesce(\r\n        return_rate,\r\n        r_return_rate_per_country_and_top_category,\r\n        rwc_return_rate_per_brand_and_top_category,\r\n        rwc_return_rate_per_top_category_overall,\r\n        rwc_return_rate_overall,\r\n        -- todo: register as variable\r\n        0.3976\r\n    ) as r_return_rate_est\r\nfrom joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_product_performance_with_ad_touchpoints", "model.sql_repository_bz.int_cp_product_price_per_day", "model.sql_repository_bz.int_cp_product_price_overall", "model.sql_repository_bz.stg_qlik_return_rates", "model.sql_repository_bz.int_gmc_avg_return_rates_by_country", "model.sql_repository_bz.int_gmc_avg_return_rates_overall"]}, "config": {"enabled": true, "alias": null, "schema": "profit_bidding", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_profit_bidding", "fqn": ["sql_repository_bz", "03_marts", "profit_bidding", "pb_product_revenue_margins_returns"], "unique_id": "model.sql_repository_bz.pb_product_revenue_margins_returns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/profit_bidding/pb_product_revenue_margins_returns.sql", "original_file_path": "models/03_marts/profit_bidding/pb_product_revenue_margins_returns.sql", "name": "pb_product_revenue_margins_returns", "alias": "pb_product_revenue_margins_returns", "checksum": {"name": "sha256", "checksum": "e302c4b6e582b5e6639e82a7ca116bc5402636d0e26ef312e4c56f6619a83930"}, "tags": [], "refs": [["int_ga_product_performance_with_ad_touchpoints"], ["int_cp_product_price_per_day"], ["int_cp_product_price_overall"], ["stg_qlik_return_rates"], ["int_gmc_avg_return_rates_by_country"], ["int_gmc_avg_return_rates_overall"]], "sources": [], "description": "this model joins relevant data and calculates return rates and margins", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/profit_bidding/_models_profit_bidding.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/profit_bidding/pb_product_revenue_margins_returns.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "profit_bidding", "materialized": "view"}, "created_at": 1663750853.3697376, "compiled_sql": "/* join peformance data, margins and return rates */\n\nwith joined_data as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_product_performance_with_ad_touchpoints` as perf\n\n    /* wholesale price join 1 by day */\n    left join `bergzeit`.`dbt_analytics_intermediate`.`int_cp_product_price_per_day` as wholesale\n    on\n        perf.productSku = wholesale.w_sku\n        and perf.date = wholesale.w_date\n\n    /* wholesale price join to average */\n    left join `bergzeit`.`dbt_analytics_intermediate`.`int_cp_product_price_overall` as wholesale_ov\n    on perf.productSku = wholesale_ov.wo_sku\n\n    -- return rate join by country, brand, top_cat \n    left join `bergzeit`.`dbt_analytics_staging`.`stg_qlik_return_rates` as returns_stg\n    on\n        perf.country_identifier = returns_stg.country\n        and perf.productBrand = returns_stg.brand\n        and perf.TopCategory = returns_stg.top_category\n\n    /* return rate join by country */\n    left join `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_avg_return_rates_by_country` as returns\n    on\n        perf.country_identifier = returns.r_country\n        and perf.TopCategory = returns.r_top_category\n\n    /* return rate join overall */\n    left join `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_avg_return_rates_overall` as returns_rwc\n    on\n        perf.productBrand = returns_rwc.rwc_brand\n        and perf.TopCategory = returns_rwc.rwc_top_category\n\n)\n\nselect \n    *,\n    -- get wholesale price per sku, with coalesce fallback logic\n    -- 1. Take product wholesale price of exact day\n    -- 2. If null, take avg product wholesale price\n    -- 3. If null, take overall average\n    -- 4. If null, take global wholesale to priceaverage (todo: difference to 4?)\n    coalesce(\n        w_wholesale_to_price,\n        wo_wholesale_to_price_sku_avg,\n        wo_wholesale_to_price_overall_avg,\n        -- todo: register as variable\n        0.5647\n    ) as wholesale_to_price,\n\n    -- get average return rate per sku with fallback logic\n    -- rwc = return rate with country\n    coalesce(\n        return_rate,\n        r_return_rate_per_country_and_top_category,\n        rwc_return_rate_per_brand_and_top_category,\n        rwc_return_rate_per_top_category_overall,\n        rwc_return_rate_overall,\n        -- todo: register as variable\n        0.3976\n    ) as r_return_rate_est\nfrom joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_profit_bidding`.`pb_product_revenue_margins_returns`"}, "model.sql_repository_bz.onsite_pdp_mut_share_per_day": {"raw_sql": "with product_data as (\r\n\r\n    select\r\n        c_date,\r\n        hostname as c_hostname,\r\n        c_offer_id,\r\n        detail_views,\r\n        sum_product_revenue,\r\n        brand,\r\n        category,\r\n        mut\r\n    from {{ ref('onsite_pdp_product_attributes') }}\r\n\r\n)\r\n\r\nselect\r\n\r\n    c_date as ga_date,\r\n    c_hostname as ga_hostname,\r\n    c_offer_id as ga_offer_id,\r\n    brand,\r\n    category,\r\n    sum(ifnull(detail_views,0)) as pageviews_gesamt,\r\n    sum(if(mut is not null and mut != '', ifnull(detail_views,0), 0)) as pageviews_mut,\r\n    sum(ifnull(sum_product_revenue,0)) as product_revenue_gesamt,\r\n    sum(if(mut is not null and mut != '', ifnull(sum_product_revenue,0), 0)) as product_revenue_mut\r\n\r\nfrom product_data\r\ngroup by 1,2,3,4,5", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.onsite_pdp_product_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "onsite", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_onsite", "fqn": ["sql_repository_bz", "03_marts", "onsite", "onsite_pdp_mut_share_per_day"], "unique_id": "model.sql_repository_bz.onsite_pdp_mut_share_per_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/onsite_pdp_mut_share_per_day.sql", "original_file_path": "models/03_marts/onsite/onsite_pdp_mut_share_per_day.sql", "name": "onsite_pdp_mut_share_per_day", "alias": "onsite_pdp_mut_share_per_day", "checksum": {"name": "sha256", "checksum": "27d50fb0b378708244c9110aa2f5ef8f2325a89014aca986ead649e22f594f5e"}, "tags": [], "refs": [["onsite_pdp_product_attributes"]], "sources": [], "description": "this view classifies product detail pages depending on mut attribute (old model because MUT attribute is no longer supported by IPIM)", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/onsite/_models_onsite.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/onsite_pdp_mut_share_per_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "onsite", "materialized": "view"}, "created_at": 1663750853.494974, "compiled_sql": "with product_data as (\n\n    select\n        c_date,\n        hostname as c_hostname,\n        c_offer_id,\n        detail_views,\n        sum_product_revenue,\n        brand,\n        category,\n        mut\n    from `bergzeit`.`dbt_onsite`.`onsite_pdp_product_attributes`\n\n)\n\nselect\n\n    c_date as ga_date,\n    c_hostname as ga_hostname,\n    c_offer_id as ga_offer_id,\n    brand,\n    category,\n    sum(ifnull(detail_views,0)) as pageviews_gesamt,\n    sum(if(mut is not null and mut != '', ifnull(detail_views,0), 0)) as pageviews_mut,\n    sum(ifnull(sum_product_revenue,0)) as product_revenue_gesamt,\n    sum(if(mut is not null and mut != '', ifnull(sum_product_revenue,0), 0)) as product_revenue_mut\n\nfrom product_data\ngroup by 1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_onsite`.`onsite_pdp_mut_share_per_day`"}, "model.sql_repository_bz.onsite_hits_by_property_and_day": {"raw_sql": "with hits_by_property_and_day as (\r\n\r\n    select *\r\n    from {{ ref('int_ga_hits_by_property_and_day') }}\r\n\r\n)\r\n\r\nselect * from hits_by_property_and_day", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_hits_by_property_and_day"]}, "config": {"enabled": true, "alias": null, "schema": "onsite", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_onsite", "fqn": ["sql_repository_bz", "03_marts", "onsite", "onsite_hits_by_property_and_day"], "unique_id": "model.sql_repository_bz.onsite_hits_by_property_and_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/onsite_hits_by_property_and_day.sql", "original_file_path": "models/03_marts/onsite/onsite_hits_by_property_and_day.sql", "name": "onsite_hits_by_property_and_day", "alias": "onsite_hits_by_property_and_day", "checksum": {"name": "sha256", "checksum": "a3938fe178c7f3ec5bffb008897d56c53c31c4c94e2269a1fe7486f554c84db4"}, "tags": [], "refs": [["int_ga_hits_by_property_and_day"]], "sources": [], "description": "this shows all hits of all 360 properties by day", "columns": {"ga_property": {"name": "ga_property", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hit_type": {"name": "hit_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hits": {"name": "hits", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/onsite/_models_onsite.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/onsite_hits_by_property_and_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "onsite", "materialized": "view"}, "created_at": 1663750853.4875505, "compiled_sql": "with hits_by_property_and_day as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_hits_by_property_and_day`\n\n)\n\nselect * from hits_by_property_and_day", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_onsite`.`onsite_hits_by_property_and_day`"}, "model.sql_repository_bz.onsite_ga_filter_usage": {"raw_sql": "with filter_data as (\r\n    \r\n    select *\r\n    from {{ ref('stg_ga_filter_events') }} as filter\r\n),\r\n\r\npageviews as (\r\n    select *\r\n    from {{ ref('stg_ga_pageviews') }}\r\n)\r\n\r\nselect\r\n    * except (pv_date, pv_device, pv_hostname, pv_page),\r\n    round(safe_divide(clicks, url_page_views),4) as filter_ctr\r\nfrom filter_data as filter\r\nleft join pageviews as pv\r\n    on filter.date = pv.pv_date and\r\n    filter.page = pv.pv_page and\r\n    filter.hostname = pv.pv_hostname and\r\n    filter.device = pv.pv_device\r\n\r\nwhere page != \"/\"", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga_filter_events", "model.sql_repository_bz.stg_ga_pageviews"]}, "config": {"enabled": true, "alias": null, "schema": "onsite", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_onsite", "fqn": ["sql_repository_bz", "03_marts", "onsite", "onsite_ga_filter_usage"], "unique_id": "model.sql_repository_bz.onsite_ga_filter_usage", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/onsite_ga_filter_usage.sql", "original_file_path": "models/03_marts/onsite/onsite_ga_filter_usage.sql", "name": "onsite_ga_filter_usage", "alias": "onsite_ga_filter_usage", "checksum": {"name": "sha256", "checksum": "e250d5d351e90084e08bb3a8ade61e06475ae05112c22c38f3f857fca2169c4d"}, "tags": [], "refs": [["stg_ga_filter_events"], ["stg_ga_pageviews"]], "sources": [], "description": "this model shows filter types per url", "columns": {"page": {"name": "page", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "filter_type": {"name": "filter_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/onsite/_models_onsite.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/onsite_ga_filter_usage.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "onsite", "materialized": "view"}, "created_at": 1663750853.4742262, "compiled_sql": "with filter_data as (\n    \n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_filter_events` as filter\n),\n\npageviews as (\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_pageviews`\n)\n\nselect\n    * except (pv_date, pv_device, pv_hostname, pv_page),\n    round(safe_divide(clicks, url_page_views),4) as filter_ctr\nfrom filter_data as filter\nleft join pageviews as pv\n    on filter.date = pv.pv_date and\n    filter.page = pv.pv_page and\n    filter.hostname = pv.pv_hostname and\n    filter.device = pv.pv_device\n\nwhere page != \"/\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_onsite`.`onsite_ga_filter_usage`"}, "model.sql_repository_bz.onsite_ga4_metric_comparison": {"raw_sql": "with ga3_daily_sessions_transactions_order_value as(\r\n\r\n    select\r\n        ga_date as date,\r\n        sum(ga_sessions) as ga3_sessions,\r\n        sum(ga_transactions) as ga3_transactions,\r\n        sum(ga_order_value) as ga3_order_value\r\n    from {{ref('int_ga_sessions_transactions')}}\r\n    where ga_date between date_sub(current_date(), interval 20 day) and date_sub(current_date(), interval 2 day)\r\n    group by 1\r\n\r\n),\r\n\r\nga4_daily_sessions_transactions_order_value as(\r\n\r\n    select\r\n        event_date_dt as date,\r\n        sum(ga4_sessions) as ga4_sessions,\r\n        sum(ga4_transactions) as ga4_transactions,\r\n        sum(ga4_order_value) as ga4_order_value\r\n    from {{ref('int_ga4_sessions_transactions')}}\r\n    where event_date_dt between date_sub(current_date(), interval 20 day) and date_sub(current_date(), interval 2 day)\r\n    group by 1\r\n\r\n),\r\n\r\nga3_ga4_joined_data as(\r\n\r\n    select\r\n        *\r\n    from ga3_daily_sessions_transactions_order_value\r\n        left join ga4_daily_sessions_transactions_order_value using(date)\r\n\r\n),\r\n\r\nga3_ga4_comparison_data as(\r\n\r\n    select\r\n        date,\r\n        if(ga4_sessions is not null, ga3_sessions/ga4_sessions, null) as sessions_comp,\r\n        if(ga4_transactions is not null, ga3_transactions/ga4_transactions, null) as transactions_comp,\r\n        if(ga4_order_value is not null, ga3_order_value/ga4_order_value, null) as order_value_comp\r\n    from ga3_ga4_joined_data\r\n    \r\n)\r\n\r\nselect * from ga3_ga4_comparison_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_sessions_transactions", "model.sql_repository_bz.int_ga4_sessions_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "onsite", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_onsite", "fqn": ["sql_repository_bz", "03_marts", "onsite", "onsite_ga4_metric_comparison"], "unique_id": "model.sql_repository_bz.onsite_ga4_metric_comparison", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/onsite_ga4_metric_comparison.sql", "original_file_path": "models/03_marts/onsite/onsite_ga4_metric_comparison.sql", "name": "onsite_ga4_metric_comparison", "alias": "onsite_ga4_metric_comparison", "checksum": {"name": "sha256", "checksum": "8b41fa00325724cca600afe73fc88feabc98a07f06be6c47630d880eaf646106"}, "tags": [], "refs": [["int_ga_sessions_transactions"], ["int_ga4_sessions_transactions"]], "sources": [], "description": "this model calculates the daily deviation between GA3 and GA4 sessions, transactions and revenue", "columns": {"sessions_comp": {"name": "sessions_comp", "description": "deviation between GA3 and GA4 session count", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transactions_comp": {"name": "transactions_comp", "description": "deviation between GA3 and GA4 sum of transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_value_comp": {"name": "order_value_comp", "description": "deviation between GA3 and GA4 sum of revenue", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/onsite/_models_onsite.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/onsite_ga4_metric_comparison.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "onsite", "materialized": "view"}, "created_at": 1663750853.4909213, "compiled_sql": "with ga3_daily_sessions_transactions_order_value as(\n\n    select\n        ga_date as date,\n        sum(ga_sessions) as ga3_sessions,\n        sum(ga_transactions) as ga3_transactions,\n        sum(ga_order_value) as ga3_order_value\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_sessions_transactions`\n    where ga_date between date_sub(current_date(), interval 20 day) and date_sub(current_date(), interval 2 day)\n    group by 1\n\n),\n\nga4_daily_sessions_transactions_order_value as(\n\n    select\n        event_date_dt as date,\n        sum(ga4_sessions) as ga4_sessions,\n        sum(ga4_transactions) as ga4_transactions,\n        sum(ga4_order_value) as ga4_order_value\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga4_sessions_transactions`\n    where event_date_dt between date_sub(current_date(), interval 20 day) and date_sub(current_date(), interval 2 day)\n    group by 1\n\n),\n\nga3_ga4_joined_data as(\n\n    select\n        *\n    from ga3_daily_sessions_transactions_order_value\n        left join ga4_daily_sessions_transactions_order_value using(date)\n\n),\n\nga3_ga4_comparison_data as(\n\n    select\n        date,\n        if(ga4_sessions is not null, ga3_sessions/ga4_sessions, null) as sessions_comp,\n        if(ga4_transactions is not null, ga3_transactions/ga4_transactions, null) as transactions_comp,\n        if(ga4_order_value is not null, ga3_order_value/ga4_order_value, null) as order_value_comp\n    from ga3_ga4_joined_data\n    \n)\n\nselect * from ga3_ga4_comparison_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_onsite`.`onsite_ga4_metric_comparison`"}, "model.sql_repository_bz.onsite_pdp_product_attributes": {"raw_sql": "with onsite_data as (\r\n\r\n    select * from {{ ref('int_ga_eecactions_revenue') }}\r\n\r\n),\r\n\r\nproduct_data as (\r\n\r\n    select\r\n        date,\r\n        product_id,\r\n        category,\r\n        brand,\r\n        description,\r\n        season,\r\n        gender,\r\n        mut\r\n    from {{ ref('stg_gmc_product_attributes_daily') }}\r\n\r\n)\r\n\r\nselect * except (date, product_id)\r\nfrom onsite_data as dv\r\nleft join product_data as pd\r\non dv.c_date = pd.date\r\nand dv.c_offer_id = pd.product_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_eecactions_revenue", "model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": null, "schema": "onsite", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_onsite", "fqn": ["sql_repository_bz", "03_marts", "onsite", "onsite_pdp_product_attributes"], "unique_id": "model.sql_repository_bz.onsite_pdp_product_attributes", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/onsite_pdp_product_attributes.sql", "original_file_path": "models/03_marts/onsite/onsite_pdp_product_attributes.sql", "name": "onsite_pdp_product_attributes", "alias": "onsite_pdp_product_attributes", "checksum": {"name": "sha256", "checksum": "90aef0294a6ee8f3f6907198b32da159b348a3ab93decb955a1ffb81a5862457"}, "tags": [], "refs": [["int_ga_eecactions_revenue"], ["stg_gmc_product_attributes_daily"]], "sources": [], "description": "this view joins product detail pages and product attributes", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/onsite/_models_onsite.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/onsite_pdp_product_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "onsite", "materialized": "view"}, "created_at": 1663750853.4985504, "compiled_sql": "with onsite_data as (\n\n    select * from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_eecactions_revenue`\n\n),\n\nproduct_data as (\n\n    select\n        date,\n        product_id,\n        category,\n        brand,\n        description,\n        season,\n        gender,\n        mut\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\n\n)\n\nselect * except (date, product_id)\nfrom onsite_data as dv\nleft join product_data as pd\non dv.c_date = pd.date\nand dv.c_offer_id = pd.product_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_onsite`.`onsite_pdp_product_attributes`"}, "model.sql_repository_bz.onsite_cookie_consent_event_values": {"raw_sql": "with consent_events_data as (\r\n    select\r\n        date,\r\n        host,\r\n        event_value,\r\n        session_id\r\n    from\r\n        {{ ref('stg_consentless_consent_interaction') }}\r\n    where\r\n        hit_type = 'event'\r\n        and date between {{ get_last_n_days_date_range(30) }}\r\n),\r\n\r\ndaily_consent_events as (\r\n    select\r\n        date,\r\n        host,\r\n        event_value,\r\n        count(distinct session_id) as count\r\n    from consent_events_data\r\n    group by 1,2,3\r\n)\r\n\r\nselect\r\n    *,\r\n    sum(count) over (partition by date, host) as all_events\r\n    /* rate calculation in datastudio in order to be able to filter for hostname \r\n    --round(count / sum(count) over (partition by date),4) as consent_rate */\r\nfrom daily_consent_events", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_consentless_consent_interaction"]}, "config": {"enabled": true, "alias": null, "schema": "onsite", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_onsite", "fqn": ["sql_repository_bz", "03_marts", "onsite", "onsite_cookie_consent_event_values"], "unique_id": "model.sql_repository_bz.onsite_cookie_consent_event_values", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/onsite_cookie_consent_event_values.sql", "original_file_path": "models/03_marts/onsite/onsite_cookie_consent_event_values.sql", "name": "onsite_cookie_consent_event_values", "alias": "onsite_cookie_consent_event_values", "checksum": {"name": "sha256", "checksum": "cfc2eb73ccf09789119bff1107b1cefde6cc418a5bf9125db8c98af7c6fa1a89"}, "tags": [], "refs": [["stg_consentless_consent_interaction"]], "sources": [], "description": "this view counts sessions per consent event", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/onsite/_models_onsite.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/onsite_cookie_consent_event_values.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "onsite", "materialized": "view"}, "created_at": 1663750853.4620492, "compiled_sql": "with consent_events_data as (\n    select\n        date,\n        host,\n        event_value,\n        session_id\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_consentless_consent_interaction`\n    where\n        hit_type = 'event'\n        and date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n),\n\ndaily_consent_events as (\n    select\n        date,\n        host,\n        event_value,\n        count(distinct session_id) as count\n    from consent_events_data\n    group by 1,2,3\n)\n\nselect\n    *,\n    sum(count) over (partition by date, host) as all_events\n    /* rate calculation in datastudio in order to be able to filter for hostname \n    --round(count / sum(count) over (partition by date),4) as consent_rate */\nfrom daily_consent_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_onsite`.`onsite_cookie_consent_event_values`"}, "model.sql_repository_bz.onsite_ga_sessions_by_hit_count_bucket": {"raw_sql": "with sessions_by_hit_count_bucket as (\r\n\r\n    select *\r\n    from {{ ref('int_ga_sessions_by_hit_count_bucket') }}\r\n\r\n)\r\n\r\nselect * from sessions_by_hit_count_bucket", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_sessions_by_hit_count_bucket"]}, "config": {"enabled": true, "alias": null, "schema": "onsite", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_onsite", "fqn": ["sql_repository_bz", "03_marts", "onsite", "onsite_ga_sessions_by_hit_count_bucket"], "unique_id": "model.sql_repository_bz.onsite_ga_sessions_by_hit_count_bucket", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/onsite_ga_sessions_by_hit_count_bucket.sql", "original_file_path": "models/03_marts/onsite/onsite_ga_sessions_by_hit_count_bucket.sql", "name": "onsite_ga_sessions_by_hit_count_bucket", "alias": "onsite_ga_sessions_by_hit_count_bucket", "checksum": {"name": "sha256", "checksum": "71e9a8fbd8ebcb64f6443c19f1afc9ddf9fbbdd6951117390d9c1af5655ec6e7"}, "tags": [], "refs": [["int_ga_sessions_by_hit_count_bucket"]], "sources": [], "description": "all daily sessions categorized into hit count buckets, to see low high hit volume sessions", "columns": {"hit_count_bucket": {"name": "hit_count_bucket", "description": "breaks a hit count integer value into a finite number of buckets, starting with one and ending with 500", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/onsite/_models_onsite.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/onsite_ga_sessions_by_hit_count_bucket.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "onsite", "materialized": "view"}, "created_at": 1663750853.471551, "compiled_sql": "with sessions_by_hit_count_bucket as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_sessions_by_hit_count_bucket`\n\n)\n\nselect * from sessions_by_hit_count_bucket", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_onsite`.`onsite_ga_sessions_by_hit_count_bucket`"}, "model.sql_repository_bz.onsite_ga_list_page_events": {"raw_sql": "select * from {{ref('int_ga_list_page_events')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_list_page_events"]}, "config": {"enabled": true, "alias": null, "schema": "onsite", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_onsite", "fqn": ["sql_repository_bz", "03_marts", "onsite", "onsite_ga_list_page_events"], "unique_id": "model.sql_repository_bz.onsite_ga_list_page_events", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/onsite_ga_list_page_events.sql", "original_file_path": "models/03_marts/onsite/onsite_ga_list_page_events.sql", "name": "onsite_ga_list_page_events", "alias": "onsite_ga_list_page_events", "checksum": {"name": "sha256", "checksum": "2b19f3ab82157551a98ef332718683c9c633d953d25acea368f76eedac88b4ea"}, "tags": [], "refs": [["int_ga_list_page_events"]], "sources": [], "description": "shows the event type as extracted from the event label for each listpage event", "columns": {}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/onsite/_models_onsite.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/onsite_ga_list_page_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "onsite", "materialized": "view"}, "created_at": 1663750853.4790423, "compiled_sql": "select * from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_list_page_events`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_onsite`.`onsite_ga_list_page_events`"}, "model.sql_repository_bz.onsite_duplicate_teaser_events": {"raw_sql": "with duplicate_teaser_events as (\r\n\r\n    select *\r\n    from {{ ref('int_ga_duplicate_teaser_events') }}\r\n\r\n)\r\n\r\nselect * from duplicate_teaser_events", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_duplicate_teaser_events"]}, "config": {"enabled": true, "alias": null, "schema": "onsite", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_onsite", "fqn": ["sql_repository_bz", "03_marts", "onsite", "onsite_duplicate_teaser_events"], "unique_id": "model.sql_repository_bz.onsite_duplicate_teaser_events", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/onsite_duplicate_teaser_events.sql", "original_file_path": "models/03_marts/onsite/onsite_duplicate_teaser_events.sql", "name": "onsite_duplicate_teaser_events", "alias": "onsite_duplicate_teaser_events", "checksum": {"name": "sha256", "checksum": "cb36acc7510d9be9ae2c1cbe114a010bedec6e45aec66deb83411e22a2a3168d"}, "tags": [], "refs": [["int_ga_duplicate_teaser_events"]], "sources": [], "description": "this model lists all teaser events with at least on duplicate, ie same timestamp event", "columns": {"teaser_event_id": {"name": "teaser_event_id", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/onsite/_models_onsite.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/onsite_duplicate_teaser_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "onsite", "materialized": "view"}, "created_at": 1663750853.466721, "compiled_sql": "with duplicate_teaser_events as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_duplicate_teaser_events`\n\n)\n\nselect * from duplicate_teaser_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_onsite`.`onsite_duplicate_teaser_events`"}, "model.sql_repository_bz.onsite_pdp_testberichte": {"raw_sql": "with testbericht_events as (\r\n    select *\r\n    from {{ ref('stg_ga_events_per_page') }}\r\n    --where event_count_testbericht > 0\r\n\r\n),\r\n\r\ntestbericht_urls as (\r\n    select distinct page as url_tb\r\n    from {{ ref('stg_ga_events_per_page') }}\r\n    where event_count_testbericht > 0\r\n \r\n),\r\n\r\nall_pageviews as (\r\n\r\n    select\r\n        pv_date,\r\n        pv_page,\r\n        pv_hostname,\r\n        pv_device,\r\n        url_page_views\r\n\r\n    from\r\n      {{ ref('int_ga_pdp_pageviews') }}\r\n\r\n)\r\n\r\nselect\r\n    * except (url_tb, pv_date,pv_page,pv_hostname,pv_device)--,\r\n   -- round(event_count_testbericht / url_page_views,4) as ctr\r\nfrom all_pageviews as pagev\r\ninner join testbericht_urls\r\non pagev.pv_page = testbericht_urls.url_tb\r\n\r\nfull join testbericht_events as testb\r\non testb.date = pagev.pv_date\r\nand testb.page = pagev.pv_page\r\nand testb.hostname = pagev.pv_hostname\r\nand testb.device = pagev.pv_device", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga_events_per_page", "model.sql_repository_bz.stg_ga_events_per_page", "model.sql_repository_bz.int_ga_pdp_pageviews"]}, "config": {"enabled": true, "alias": null, "schema": "onsite", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_onsite", "fqn": ["sql_repository_bz", "03_marts", "onsite", "onsite_pdp_testberichte"], "unique_id": "model.sql_repository_bz.onsite_pdp_testberichte", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/onsite_pdp_testberichte.sql", "original_file_path": "models/03_marts/onsite/onsite_pdp_testberichte.sql", "name": "onsite_pdp_testberichte", "alias": "onsite_pdp_testberichte", "checksum": {"name": "sha256", "checksum": "b8ec2d7774b319c5e0ec5511e95c156720006467de463657956fbdd026f699f8"}, "tags": [], "refs": [["stg_ga_events_per_page"], ["stg_ga_events_per_page"], ["int_ga_pdp_pageviews"]], "sources": [], "description": "this view analyses for testberichte event (old model - has to be updated for ishop)", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/onsite/_models_onsite.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/onsite_pdp_testberichte.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "onsite", "materialized": "view"}, "created_at": 1663750853.5019712, "compiled_sql": "with testbericht_events as (\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_events_per_page`\n    --where event_count_testbericht > 0\n\n),\n\ntestbericht_urls as (\n    select distinct page as url_tb\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_events_per_page`\n    where event_count_testbericht > 0\n \n),\n\nall_pageviews as (\n\n    select\n        pv_date,\n        pv_page,\n        pv_hostname,\n        pv_device,\n        url_page_views\n\n    from\n      `bergzeit`.`dbt_analytics_intermediate`.`int_ga_pdp_pageviews`\n\n)\n\nselect\n    * except (url_tb, pv_date,pv_page,pv_hostname,pv_device)--,\n   -- round(event_count_testbericht / url_page_views,4) as ctr\nfrom all_pageviews as pagev\ninner join testbericht_urls\non pagev.pv_page = testbericht_urls.url_tb\n\nfull join testbericht_events as testb\non testb.date = pagev.pv_date\nand testb.page = pagev.pv_page\nand testb.hostname = pagev.pv_hostname\nand testb.device = pagev.pv_device", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_onsite`.`onsite_pdp_testberichte`"}, "model.sql_repository_bz.onsite_ga_internal_search": {"raw_sql": "with search_terms as (\r\n\r\n    select *\r\n    from {{ ref('stg_ga_internal_search') }}\r\n\r\n),\r\n\r\nbrands as (\r\n\r\n    select *\r\n    from {{ ref('stg_gmc_product_brands') }}\r\n\r\n),\r\n\r\nbrand_keyword as (\r\n\r\n    select\r\n    distinct\r\n    internal_search_keyword as b_internal_search_keyword,\r\n    brand\r\n    from search_terms\r\n    join brands\r\n    on REGEXP_CONTAINS(search_terms.internal_search_keyword, CONCAT(r'(?i)\\b', lower(brands.brand), r'\\b'))\r\n\r\n)\r\n\r\nselect * except (b_internal_search_keyword),\r\nif(brand is null, null, if(internal_search_keyword = lower(brand), 1, 0)) as keyword_brand,\r\nif(brand is null, null, if(internal_search_keyword = lower(brand), 0, 1)) as keyword_brand_kombi\r\nfrom search_terms\r\nleft join brand_keyword\r\non internal_search_keyword = b_internal_search_keyword\r\n--where products_brand = 'La Sportiva'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga_internal_search", "model.sql_repository_bz.stg_gmc_product_brands"]}, "config": {"enabled": true, "alias": null, "schema": "onsite", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_onsite", "fqn": ["sql_repository_bz", "03_marts", "onsite", "onsite_ga_internal_search"], "unique_id": "model.sql_repository_bz.onsite_ga_internal_search", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/onsite_ga_internal_search.sql", "original_file_path": "models/03_marts/onsite/onsite_ga_internal_search.sql", "name": "onsite_ga_internal_search", "alias": "onsite_ga_internal_search", "checksum": {"name": "sha256", "checksum": "37a404338d07093a21823c12a7487e313ebbe183777cda885b5dc01483b91568"}, "tags": [], "refs": [["stg_ga_internal_search"], ["stg_gmc_product_brands"]], "sources": [], "description": "classifies the internal search terms by brand only and brand combi searches", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/onsite/_models_onsite.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/onsite_ga_internal_search.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "onsite", "materialized": "view"}, "created_at": 1663750853.4751503, "compiled_sql": "with search_terms as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_internal_search`\n\n),\n\nbrands as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_brands`\n\n),\n\nbrand_keyword as (\n\n    select\n    distinct\n    internal_search_keyword as b_internal_search_keyword,\n    brand\n    from search_terms\n    join brands\n    on REGEXP_CONTAINS(search_terms.internal_search_keyword, CONCAT(r'(?i)\\b', lower(brands.brand), r'\\b'))\n\n)\n\nselect * except (b_internal_search_keyword),\nif(brand is null, null, if(internal_search_keyword = lower(brand), 1, 0)) as keyword_brand,\nif(brand is null, null, if(internal_search_keyword = lower(brand), 0, 1)) as keyword_brand_kombi\nfrom search_terms\nleft join brand_keyword\non internal_search_keyword = b_internal_search_keyword\n--where products_brand = 'La Sportiva'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_onsite`.`onsite_ga_internal_search`"}, "model.sql_repository_bz.onsite_ga_reco_performance": {"raw_sql": "with reco_click_data as(\r\n\r\n    select\r\n        date,\r\n        session_id,\r\n        productListName,\r\n        list_impression,\r\n        list_click\r\n    from {{ref('int_ga_product_list')}}\r\n    where productListName = 'recommendation'\r\n        and list_click is not null\r\n        and date between {{ get_last_n_days_date_range(60) }}\r\n\r\n),\r\n\r\ndaily_aggregated_reco_click_data as(\r\n\r\n    select\r\n        date,\r\n        count(distinct session_id) as sessions_w_reco_click,\r\n        count(session_id)/count(distinct session_id) as reco_clicks_per_session,\r\n        count(list_click) as total_reco_clicks\r\n    from reco_click_data\r\n    group by 1\r\n    order by date desc\r\n\r\n),\r\n\r\ndaily_all_sessions_data as(\r\n\r\n    select\r\n        date,\r\n        count(distinct ga_session_id) as total_sessions\r\n    from {{ref('stg_ga_session_totals')}}\r\n    where date between {{ get_last_n_days_date_range(60) }}\r\n    group by 1\r\n\r\n),\r\n\r\nmerged_reco_and_all_sessions_data as(\r\n\r\n    select\r\n        *\r\n    from daily_aggregated_reco_click_data\r\n    left join daily_all_sessions_data using (date)\r\n\r\n)\r\n\r\nselect * from merged_reco_and_all_sessions_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.int_ga_product_list", "model.sql_repository_bz.stg_ga_session_totals"]}, "config": {"enabled": true, "alias": null, "schema": "onsite", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_onsite", "fqn": ["sql_repository_bz", "03_marts", "onsite", "onsite_ga_reco_performance"], "unique_id": "model.sql_repository_bz.onsite_ga_reco_performance", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/onsite_ga_reco_performance.sql", "original_file_path": "models/03_marts/onsite/onsite_ga_reco_performance.sql", "name": "onsite_ga_reco_performance", "alias": "onsite_ga_reco_performance", "checksum": {"name": "sha256", "checksum": "ea95b27c36cbef4e8a6df7eace15aecaf8d59bb3a42bea601907d865207cd878"}, "tags": [], "refs": [["int_ga_product_list"], ["stg_ga_session_totals"]], "sources": [], "description": "this model shows session level data of recommendation clicks", "columns": {}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/onsite/_models_onsite.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/onsite_ga_reco_performance.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "onsite", "materialized": "view"}, "created_at": 1663750853.4829874, "compiled_sql": "with reco_click_data as(\n\n    select\n        date,\n        session_id,\n        productListName,\n        list_impression,\n        list_click\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_product_list`\n    where productListName = 'recommendation'\n        and list_click is not null\n        and date between \n    date_sub(current_date(), interval 60 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\ndaily_aggregated_reco_click_data as(\n\n    select\n        date,\n        count(distinct session_id) as sessions_w_reco_click,\n        count(session_id)/count(distinct session_id) as reco_clicks_per_session,\n        count(list_click) as total_reco_clicks\n    from reco_click_data\n    group by 1\n    order by date desc\n\n),\n\ndaily_all_sessions_data as(\n\n    select\n        date,\n        count(distinct ga_session_id) as total_sessions\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_session_totals`\n    where date between \n    date_sub(current_date(), interval 60 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1\n\n),\n\nmerged_reco_and_all_sessions_data as(\n\n    select\n        *\n    from daily_aggregated_reco_click_data\n    left join daily_all_sessions_data using (date)\n\n)\n\nselect * from merged_reco_and_all_sessions_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_onsite`.`onsite_ga_reco_performance`"}, "model.sql_repository_bz.alerts_datadiff_ga_minubo": {"raw_sql": "with minubo as (\r\n    select *\r\n    from {{ ref('stg_minubo_ga_kpis_daily') }}\r\n\r\n),\r\n\r\nsessions as (\r\n    select\r\n        date,\r\n        count( distinct ga_session_id) as ga_sessions\r\n    from {{ ref('stg_ga_session_totals') }}\r\n    where date between {{ get_last_n_days_date_range(7) }}\r\n    group by 1\r\n),\r\n\r\npageviews as (\r\n    select \r\n        pv_date,\r\n        --hits.page.hostname as pv_hostname,\r\n        sum(url_page_views) as ga_pageviews\r\n    from {{ ref('stg_ga_pageviews') }}\r\n    where pv_date between {{ get_last_n_days_date_range(7) }}\r\n    group by 1\r\n),\r\n\r\neec_events as (\r\n    select\r\n        c_date,\r\n        sum(detail_views) as ga_detail_views,\r\n        sum(add_to_carts) as ga_add_to_carts\r\n    from {{ ref('int_ga_product_eecactions_by_day') }}\r\n    where c_date between {{ get_last_n_days_date_range(7) }}\r\n    group by 1\r\n\r\n),\r\n\r\njoined_data as (\r\n\r\n    select * except(pv_date, c_date, date)\r\n    from minubo as mi\r\n    left join sessions \r\n    on mi.minubo_ga_date = sessions.date\r\n    left join pageviews as pv\r\n    on mi.minubo_ga_date = pv.pv_date\r\n    left join eec_events as ee\r\n    on mi.minubo_ga_date = ee.c_date\r\n\r\n)\r\n\r\nselect \r\n    *,\r\n    round(safe_divide((ga_sessions - minubo_ga_sessions), ga_sessions),3) as diff_sessions,\r\n    round(safe_divide((ga_pageviews - minubo_ga_page_views), ga_pageviews),3) as diff_page_views,\r\n    round(safe_divide((ga_detail_views - minubo_ga_detail_views), ga_detail_views),3) as diff_detail_views,\r\n    round(safe_divide((ga_add_to_carts - minubo_ga_add_to_carts), ga_add_to_carts),3) as diff_add_to_carts\r\n    \t\t\t\t\t\t\t\r\nfrom joined_data\r\n\r\norder by minubo_ga_date desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily", "model.sql_repository_bz.stg_ga_session_totals", "model.sql_repository_bz.stg_ga_pageviews", "model.sql_repository_bz.int_ga_product_eecactions_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "alerts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_alerts", "fqn": ["sql_repository_bz", "03_marts", "alerting", "alerts_datadiff_ga_minubo"], "unique_id": "model.sql_repository_bz.alerts_datadiff_ga_minubo", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/alerting/alerts_datadiff_ga_minubo.sql", "original_file_path": "models/03_marts/alerting/alerts_datadiff_ga_minubo.sql", "name": "alerts_datadiff_ga_minubo", "alias": "alerts_datadiff_ga_minubo", "checksum": {"name": "sha256", "checksum": "502cc11f77c07a9c14c60b40fee919f3f24e26438ed17814d7983dd960e1aeba"}, "tags": [], "refs": [["stg_minubo_ga_kpis_daily"], ["stg_ga_session_totals"], ["stg_ga_pageviews"], ["int_ga_product_eecactions_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/alerting/alerts_datadiff_ga_minubo.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "alerts", "materialized": "view"}, "created_at": 1663750848.490931, "compiled_sql": "with minubo as (\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_minubo_ga_kpis_daily`\n\n),\n\nsessions as (\n    select\n        date,\n        count( distinct ga_session_id) as ga_sessions\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_session_totals`\n    where date between \n    date_sub(current_date(), interval 7 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1\n),\n\npageviews as (\n    select \n        pv_date,\n        --hits.page.hostname as pv_hostname,\n        sum(url_page_views) as ga_pageviews\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_pageviews`\n    where pv_date between \n    date_sub(current_date(), interval 7 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1\n),\n\neec_events as (\n    select\n        c_date,\n        sum(detail_views) as ga_detail_views,\n        sum(add_to_carts) as ga_add_to_carts\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_product_eecactions_by_day`\n    where c_date between \n    date_sub(current_date(), interval 7 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1\n\n),\n\njoined_data as (\n\n    select * except(pv_date, c_date, date)\n    from minubo as mi\n    left join sessions \n    on mi.minubo_ga_date = sessions.date\n    left join pageviews as pv\n    on mi.minubo_ga_date = pv.pv_date\n    left join eec_events as ee\n    on mi.minubo_ga_date = ee.c_date\n\n)\n\nselect \n    *,\n    round(safe_divide((ga_sessions - minubo_ga_sessions), ga_sessions),3) as diff_sessions,\n    round(safe_divide((ga_pageviews - minubo_ga_page_views), ga_pageviews),3) as diff_page_views,\n    round(safe_divide((ga_detail_views - minubo_ga_detail_views), ga_detail_views),3) as diff_detail_views,\n    round(safe_divide((ga_add_to_carts - minubo_ga_add_to_carts), ga_add_to_carts),3) as diff_add_to_carts\n    \t\t\t\t\t\t\t\nfrom joined_data\n\norder by minubo_ga_date desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_alerts`.`alerts_datadiff_ga_minubo`"}, "model.sql_repository_bz.alerts_ga4_daily_metric_changes": {"raw_sql": "{{\r\n    config(\r\n        materialized='incremental',\r\n        on_schema_change = 'append_new_columns'\r\n    )\r\n}}\r\n\r\n\r\nwith sessions_and_transactions as (\r\n    select \r\n        current_date() as analysis_date,\r\n        event_date_dt,\r\n        page_hostname, \r\n        sum(ga4_sessions) as sessions, \r\n        sum(ga4_transactions) as transactions, \r\n        sum(ga4_order_value) as order_value\r\n    from {{ ref('int_ga4_sessions_transactions') }} \r\n    where event_date_dt between {{ get_last_n_days_date_range(14) }}\r\n    /* get metric per date and hostname */\r\n    group by 1,2,3\r\n),\r\n\r\nevent_count as (\r\n    select \r\n        event_date_dt,\r\n        page_hostname,\r\n        event_count_checkout,\r\n        event_count_standard,\r\n        event_count_custom\r\n    from {{ ref('int_ga4_aggr_event_count') }}\r\n),\r\n\r\njoined_data as (\r\n    select *\r\n    from sessions_and_transactions\r\n    left join event_count\r\n        using(event_date_dt, page_hostname)\r\n)\r\n\r\nselect * from joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.int_ga4_sessions_transactions", "model.sql_repository_bz.int_ga4_aggr_event_count"]}, "config": {"enabled": true, "alias": null, "schema": "alerts", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "append_new_columns", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_alerts", "fqn": ["sql_repository_bz", "03_marts", "alerting", "alerts_ga4_daily_metric_changes"], "unique_id": "model.sql_repository_bz.alerts_ga4_daily_metric_changes", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/alerting/alerts_ga4_daily_metric_changes.sql", "original_file_path": "models/03_marts/alerting/alerts_ga4_daily_metric_changes.sql", "name": "alerts_ga4_daily_metric_changes", "alias": "alerts_ga4_daily_metric_changes", "checksum": {"name": "sha256", "checksum": "807b855c8f6486a89bc66a4cb086322cb12baa0290b1f1aa4eb33399eecb065e"}, "tags": [], "refs": [["int_ga4_sessions_transactions"], ["int_ga4_aggr_event_count"]], "sources": [], "description": "this incremental model lists sessions and transactions and their changes over time", "columns": {"analysis_date": {"name": "analysis_date", "description": "the date when the numbers where calculated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "the date for which the numbers where calculated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_hostname": {"name": "page_hostname", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sessions": {"name": "sessions", "description": "session count", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transactions": {"name": "transactions", "description": "transaction count", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_value": {"name": "order_value", "description": "sum of order value", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_count_checkout": {"name": "event_count_checkout", "description": "count of all checkout events", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_count_standard": {"name": "event_count_standard", "description": "count of all standard events", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_count_custom": {"name": "event_count_custom", "description": "count of all custom events", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/alerting/_models_alerting.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/alerting/alerts_ga4_daily_metric_changes.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "alerts", "materialized": "incremental", "on_schema_change": "append_new_columns"}, "created_at": 1663750853.6929948, "compiled_sql": "\n\n\nwith sessions_and_transactions as (\n    select \n        current_date() as analysis_date,\n        event_date_dt,\n        page_hostname, \n        sum(ga4_sessions) as sessions, \n        sum(ga4_transactions) as transactions, \n        sum(ga4_order_value) as order_value\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga4_sessions_transactions` \n    where event_date_dt between \n    date_sub(current_date(), interval 14 day)\n    and date_sub(current_date(), interval 1 day)\n\n    /* get metric per date and hostname */\n    group by 1,2,3\n),\n\nevent_count as (\n    select \n        event_date_dt,\n        page_hostname,\n        event_count_checkout,\n        event_count_standard,\n        event_count_custom\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga4_aggr_event_count`\n),\n\njoined_data as (\n    select *\n    from sessions_and_transactions\n    left join event_count\n        using(event_date_dt, page_hostname)\n)\n\nselect * from joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_alerts`.`alerts_ga4_daily_metric_changes`"}, "model.sql_repository_bz.alerts_datadiff_consentless_ga_1d": {"raw_sql": "with consentless_transactions as (\r\n    \r\n    select \r\n        date,\r\n        host,\r\n        transaction_id,\r\n        consentPurpose_cc4,\r\n        transaction_value_eur as transaction_value,\r\n        'EUR' as transaction_currency\r\n    from {{ ref('int_consentless_transactions_eur') }}\r\n    where date between {{ get_last_n_days_date_range(30) }}\r\n\r\n),\r\n\r\nconsentless_events as (\r\n    \r\n    select \r\n        date,\r\n        host,\r\n        consentPurpose_cc4\r\n    from {{ ref('stg_consentless_consent_interaction') }}\r\n    where date between {{ get_last_n_days_date_range(30) }}\r\n),\r\n\r\n\r\nga_data_bz as (\r\n\r\n    select \r\n        ga_date,\r\n        ga_session_id,\r\n        ga_fullvisitor_id,\r\n        ga_hostname,\r\n        ga_gclid,\r\n        ga_transaction_id,\r\n        ga_transaction_revenue\r\n    from {{ ref('stg_ga_transactions') }}\r\n    where ga_date between {{ get_last_n_days_date_range(30) }}\r\n\r\n),\r\n\r\nagg_events as (\r\n\r\n    select \r\n        date,\r\n        host,\r\n        count(*) as consent_events_all_1d,\r\n        sum(if(consentPurpose_cc4 = true,1,0)) as consent_events_consent_given_1d\r\n    from consentless_events\r\n    group by 1,2\r\n\r\n),\r\n\r\n\r\nall_data as (\r\n\r\n    select * except (ga_hostname, ga_date)\r\n    from consentless_transactions\r\n    left join ga_data_bz \r\n        on consentless_transactions.date = ga_data_bz.ga_date\r\n        and consentless_transactions.transaction_id = ga_data_bz.ga_transaction_id\r\n\r\n),\r\n\r\n\r\nagg_data as (\r\n\r\n    select \r\n        date,\r\n        host,\r\n        sum(if(transaction_id is not null and consentPurpose_cc4 = true,1,0)) as transactions_consentless_consent_given_1d,\r\n        count(*) as transactions_consentless_all_1d,\r\n        sum(if(ga_transaction_id is not null, 1, 0)) as transactions_ga_1d,\r\n        round(sum(if(consentPurpose_cc4 = true, transaction_value, 0)),0) as transaction_value_consentless_consent_given_1d,\r\n        round(sum(transaction_value),0) as transaction_value_consentless_all_1d,\r\n        round(sum(if(ga_transaction_id is not null, ga_transaction_revenue, 0)),0) as transaction_value_ga_1d\r\n    from all_data\r\n    group by 1,2\r\n)\r\n\r\nselect * \r\nfrom agg_events\r\nfull outer join agg_data using(date, host)\r\nwhere host like '%www.bergzeit%'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.int_consentless_transactions_eur", "model.sql_repository_bz.stg_consentless_consent_interaction", "model.sql_repository_bz.stg_ga_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "alerts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_alerts", "fqn": ["sql_repository_bz", "03_marts", "alerting", "alerts_datadiff_consentless_ga_1d"], "unique_id": "model.sql_repository_bz.alerts_datadiff_consentless_ga_1d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/alerting/alerts_datadiff_consentless_ga_1d.sql", "original_file_path": "models/03_marts/alerting/alerts_datadiff_consentless_ga_1d.sql", "name": "alerts_datadiff_consentless_ga_1d", "alias": "alerts_datadiff_consentless_ga_1d", "checksum": {"name": "sha256", "checksum": "7a7fa2e5bf99c6217c965d848dd2d2f94fb7a824762200fee60273d86cbff13a"}, "tags": [], "refs": [["int_consentless_transactions_eur"], ["stg_consentless_consent_interaction"], ["stg_ga_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/alerting/alerts_datadiff_consentless_ga_1d.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "alerts", "materialized": "view"}, "created_at": 1663750848.5278587, "compiled_sql": "with consentless_transactions as (\n    \n    select \n        date,\n        host,\n        transaction_id,\n        consentPurpose_cc4,\n        transaction_value_eur as transaction_value,\n        'EUR' as transaction_currency\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_consentless_transactions_eur`\n    where date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\nconsentless_events as (\n    \n    select \n        date,\n        host,\n        consentPurpose_cc4\n    from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_consent_interaction`\n    where date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n),\n\n\nga_data_bz as (\n\n    select \n        ga_date,\n        ga_session_id,\n        ga_fullvisitor_id,\n        ga_hostname,\n        ga_gclid,\n        ga_transaction_id,\n        ga_transaction_revenue\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions`\n    where ga_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\nagg_events as (\n\n    select \n        date,\n        host,\n        count(*) as consent_events_all_1d,\n        sum(if(consentPurpose_cc4 = true,1,0)) as consent_events_consent_given_1d\n    from consentless_events\n    group by 1,2\n\n),\n\n\nall_data as (\n\n    select * except (ga_hostname, ga_date)\n    from consentless_transactions\n    left join ga_data_bz \n        on consentless_transactions.date = ga_data_bz.ga_date\n        and consentless_transactions.transaction_id = ga_data_bz.ga_transaction_id\n\n),\n\n\nagg_data as (\n\n    select \n        date,\n        host,\n        sum(if(transaction_id is not null and consentPurpose_cc4 = true,1,0)) as transactions_consentless_consent_given_1d,\n        count(*) as transactions_consentless_all_1d,\n        sum(if(ga_transaction_id is not null, 1, 0)) as transactions_ga_1d,\n        round(sum(if(consentPurpose_cc4 = true, transaction_value, 0)),0) as transaction_value_consentless_consent_given_1d,\n        round(sum(transaction_value),0) as transaction_value_consentless_all_1d,\n        round(sum(if(ga_transaction_id is not null, ga_transaction_revenue, 0)),0) as transaction_value_ga_1d\n    from all_data\n    group by 1,2\n)\n\nselect * \nfrom agg_events\nfull outer join agg_data using(date, host)\nwhere host like '%www.bergzeit%'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_alerts`.`alerts_datadiff_consentless_ga_1d`"}, "model.sql_repository_bz.alerts_consentless_pageviews_magazine_last_hrs": {"raw_sql": "with consentless_pageviews_magazine_last_hrs as (\r\n\r\n    select count(*) as nr_magazine_pageviews\r\n    from {{ ref('stg_consentless_page_views_live') }}\r\n    where\r\n        /* get events for the last two hours */\r\n        datetime between datetime_sub(current_datetime(), interval 2 hour)\r\n        and datetime_sub(current_datetime(), interval 1 minute)\r\n        and hittype = \"page_view\"\r\n        and (pagepath like '%/magazin%' or pagepath like '%/journal%')\r\n\r\n)\r\n\r\nselect * from consentless_pageviews_magazine_last_hrs", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_consentless_page_views_live"]}, "config": {"enabled": true, "alias": null, "schema": "alerts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_alerts", "fqn": ["sql_repository_bz", "03_marts", "alerting", "alerts_consentless_pageviews_magazine_last_hrs"], "unique_id": "model.sql_repository_bz.alerts_consentless_pageviews_magazine_last_hrs", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/alerting/alerts_consentless_pageviews_magazine_last_hrs.sql", "original_file_path": "models/03_marts/alerting/alerts_consentless_pageviews_magazine_last_hrs.sql", "name": "alerts_consentless_pageviews_magazine_last_hrs", "alias": "alerts_consentless_pageviews_magazine_last_hrs", "checksum": {"name": "sha256", "checksum": "00806265d1ce9a250391e44d2c36e6999855e26a216996a2209653bac779a232"}, "tags": [], "refs": [["stg_consentless_page_views_live"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/alerting/alerts_consentless_pageviews_magazine_last_hrs.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "alerts", "materialized": "view"}, "created_at": 1663750848.543477, "compiled_sql": "with consentless_pageviews_magazine_last_hrs as (\n\n    select count(*) as nr_magazine_pageviews\n    from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_page_views_live`\n    where\n        /* get events for the last two hours */\n        datetime between datetime_sub(current_datetime(), interval 2 hour)\n        and datetime_sub(current_datetime(), interval 1 minute)\n        and hittype = \"page_view\"\n        and (pagepath like '%/magazin%' or pagepath like '%/journal%')\n\n)\n\nselect * from consentless_pageviews_magazine_last_hrs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_alerts`.`alerts_consentless_pageviews_magazine_last_hrs`"}, "model.sql_repository_bz.alerts_consentless_transactions_last_hrs": {"raw_sql": "with consentless_transactions_last_hrs as (\r\n\r\n    select count(distinct transaction_id) as nr_transactions\r\n    from {{ ref('stg_consentless_transactions_live') }}\r\n    where\r\n        /* set last three hours as current hour window */\r\n        timestamp(date_time) between timestamp_sub(current_timestamp(), interval 3 hour)\r\n        and timestamp_sub(current_timestamp(), interval 1 minute)\r\n        and date = date_sub(current_date(), interval 0 day)\r\n\r\n)\r\n\r\nselect * from consentless_transactions_last_hrs", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_consentless_transactions_live"]}, "config": {"enabled": true, "alias": null, "schema": "alerts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_alerts", "fqn": ["sql_repository_bz", "03_marts", "alerting", "alerts_consentless_transactions_last_hrs"], "unique_id": "model.sql_repository_bz.alerts_consentless_transactions_last_hrs", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/alerting/alerts_consentless_transactions_last_hrs.sql", "original_file_path": "models/03_marts/alerting/alerts_consentless_transactions_last_hrs.sql", "name": "alerts_consentless_transactions_last_hrs", "alias": "alerts_consentless_transactions_last_hrs", "checksum": {"name": "sha256", "checksum": "62fae99acddb1511a688f67d6d076380ed93385c48258ac4ca99ab45d4bcd97c"}, "tags": [], "refs": [["stg_consentless_transactions_live"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/alerting/alerts_consentless_transactions_last_hrs.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "alerts", "materialized": "view"}, "created_at": 1663750848.5472407, "compiled_sql": "with consentless_transactions_last_hrs as (\n\n    select count(distinct transaction_id) as nr_transactions\n    from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions_live`\n    where\n        /* set last three hours as current hour window */\n        timestamp(date_time) between timestamp_sub(current_timestamp(), interval 3 hour)\n        and timestamp_sub(current_timestamp(), interval 1 minute)\n        and date = date_sub(current_date(), interval 0 day)\n\n)\n\nselect * from consentless_transactions_last_hrs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_alerts`.`alerts_consentless_transactions_last_hrs`"}, "model.sql_repository_bz.alerts_consentless_offline_pages": {"raw_sql": "with all_offline_pages as (\r\n    select *\r\n    from {{ ref('int_consentless_offline_pages') }}\r\n),\r\n\r\nagg_data as (\r\n    select \r\n        count(*) as nr_offline_pages\r\n    from all_offline_pages\r\n)\r\n\r\nselect * from agg_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_consentless_offline_pages"]}, "config": {"enabled": true, "alias": null, "schema": "alerts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_alerts", "fqn": ["sql_repository_bz", "03_marts", "alerting", "alerts_consentless_offline_pages"], "unique_id": "model.sql_repository_bz.alerts_consentless_offline_pages", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/alerting/alerts_consentless_offline_pages.sql", "original_file_path": "models/03_marts/alerting/alerts_consentless_offline_pages.sql", "name": "alerts_consentless_offline_pages", "alias": "alerts_consentless_offline_pages", "checksum": {"name": "sha256", "checksum": "9235637c6fcf3e8bcae04916201144b6498708a5abe97dc373c04bf08fb31259"}, "tags": [], "refs": [["int_consentless_offline_pages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/alerting/alerts_consentless_offline_pages.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "alerts", "materialized": "view"}, "created_at": 1663750848.5512075, "compiled_sql": "with all_offline_pages as (\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_consentless_offline_pages`\n),\n\nagg_data as (\n    select \n        count(*) as nr_offline_pages\n    from all_offline_pages\n)\n\nselect * from agg_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_alerts`.`alerts_consentless_offline_pages`"}, "model.sql_repository_bz.alerts_consentless_consent_events_last_hrs": {"raw_sql": "with consentless_consent_interactions_last_hrs as (\r\n\r\n    select count(distinct session_id) as nr_distinct_consent_events\r\n    from {{ ref('stg_consentless_consent_interaction') }}\r\n    where\r\n        /* get events from last two hours */\r\n        timestamp(date_time) between timestamp_sub(current_timestamp(), interval 2 hour) \r\n        and timestamp_sub(current_timestamp(), interval 1 minute)\r\n        and event_category = 'consent_interaction'\r\n\r\n)\r\n\r\nselect * from consentless_consent_interactions_last_hrs", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_consentless_consent_interaction"]}, "config": {"enabled": true, "alias": null, "schema": "alerts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_alerts", "fqn": ["sql_repository_bz", "03_marts", "alerting", "alerts_consentless_consent_events_last_hrs"], "unique_id": "model.sql_repository_bz.alerts_consentless_consent_events_last_hrs", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/alerting/alerts_consentless_consent_events_last_hrs.sql", "original_file_path": "models/03_marts/alerting/alerts_consentless_consent_events_last_hrs.sql", "name": "alerts_consentless_consent_events_last_hrs", "alias": "alerts_consentless_consent_events_last_hrs", "checksum": {"name": "sha256", "checksum": "ba71bfdb79fb8b1ca9fd9530f57f248c588b46d3ac91afb64f583f2eedcf90e2"}, "tags": [], "refs": [["stg_consentless_consent_interaction"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/alerting/alerts_consentless_consent_events_last_hrs.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "alerts", "materialized": "view"}, "created_at": 1663750848.5551472, "compiled_sql": "with consentless_consent_interactions_last_hrs as (\n\n    select count(distinct session_id) as nr_distinct_consent_events\n    from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_consent_interaction`\n    where\n        /* get events from last two hours */\n        timestamp(date_time) between timestamp_sub(current_timestamp(), interval 2 hour) \n        and timestamp_sub(current_timestamp(), interval 1 minute)\n        and event_category = 'consent_interaction'\n\n)\n\nselect * from consentless_consent_interactions_last_hrs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_alerts`.`alerts_consentless_consent_events_last_hrs`"}, "model.sql_repository_bz.cust_cohort_revenue_per_year": {"raw_sql": "with transaction_data as (\r\n\r\n    select *,\r\n        extract(year FROM T_order_date) as order_year,\r\n        extract(year from cust_first_order_date) as cohort_year\r\n    from {{ref('int_nav_transactions_and_customers')}}\r\n    where T_order_date <= '2020-12-31'\r\n    \r\n)\r\n\r\nselect\r\n    cohort_year,\r\n    order_year,\r\n    T_responsiblity_center_id,\r\n    T_shop_channel_id,\r\n    round(sum(revenue_after_return_excl_vat_euro)) as revenue_after_return\r\nfrom transaction_data\r\ngroup by 1,2,3,4", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_nav_transactions_and_customers"]}, "config": {"enabled": true, "alias": null, "schema": "customer", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_customer", "fqn": ["sql_repository_bz", "03_marts", "customer", "cust_cohort_revenue_per_year"], "unique_id": "model.sql_repository_bz.cust_cohort_revenue_per_year", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/customer/cust_cohort_revenue_per_year.sql", "original_file_path": "models/03_marts/customer/cust_cohort_revenue_per_year.sql", "name": "cust_cohort_revenue_per_year", "alias": "cust_cohort_revenue_per_year", "checksum": {"name": "sha256", "checksum": "c098af7f19172ae928857411b8122967308cce217bea0cb8ad143f35f4547a5c"}, "tags": [], "refs": [["int_nav_transactions_and_customers"]], "sources": [], "description": "this model lists revenue per monthly customer cohort", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/customer/_models_customer.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/customer/cust_cohort_revenue_per_year.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "customer", "materialized": "view"}, "created_at": 1663750853.7268157, "compiled_sql": "with transaction_data as (\n\n    select *,\n        extract(year FROM T_order_date) as order_year,\n        extract(year from cust_first_order_date) as cohort_year\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_transactions_and_customers`\n    where T_order_date <= '2020-12-31'\n    \n)\n\nselect\n    cohort_year,\n    order_year,\n    T_responsiblity_center_id,\n    T_shop_channel_id,\n    round(sum(revenue_after_return_excl_vat_euro)) as revenue_after_return\nfrom transaction_data\ngroup by 1,2,3,4", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_customer`.`cust_cohort_revenue_per_year`"}, "model.sql_repository_bz.cust_customer_metrics": {"raw_sql": "with customer_data as (\r\n\r\n    select\r\n        T_customer_id,\r\n        T_shop_channel_id,\r\n        T_responsiblity_center_id,\r\n        min(shop_customer_id) as oxid_customer_id,\r\n        round(sum(T_invoice_amount_incl_vat),2) as invoice_amount_incl_vat,\r\n        max(transaction_no_per_shop_channel) as no_transactions_per_cust,\r\n        max(cust_first_order_date) as cust_first_order_date,\r\n        max(cust_last_order_date) as cust_last_order_date,\r\n        round(sum(revenue_after_return_excl_vat_euro),2) as revenue_after_return_excl_vat_euro,\r\n        sum(if(T_crmemo_amount_excl_vat > 0, 1, 0)) as no_returns_per_cust\r\n    from {{ref('int_nav_transactions_and_customers')}}\r\n    where T_order_date <= '2020-12-31'\r\n    group by 1,2,3\r\n\r\n),\r\n\r\nnew_vars as (\r\n\r\n    select *,\r\n        round(no_returns_per_cust / no_transactions_per_cust,4) as percentage_returned_orders,\r\n        round(invoice_amount_incl_vat / no_transactions_per_cust,2) as avg_order_value_per_cust,\r\n        round(revenue_after_return_excl_vat_euro / no_transactions_per_cust,2) as avg_revenue_after_return_per_cust,\r\n        date_diff('2021-01-01', cust_last_order_date, day) as days_since_last_purchase\r\n    from customer_data\r\n\r\n)\r\n\r\nselect *,\r\nif(days_since_last_purchase <= 130, 'aktiv', if(days_since_last_purchase > 419, 'inaktiv', 'abtruennig')) as current_crm_segments\r\nfrom new_vars", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_nav_transactions_and_customers"]}, "config": {"enabled": true, "alias": null, "schema": "customer", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_customer", "fqn": ["sql_repository_bz", "03_marts", "customer", "cust_customer_metrics"], "unique_id": "model.sql_repository_bz.cust_customer_metrics", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/customer/cust_customer_metrics.sql", "original_file_path": "models/03_marts/customer/cust_customer_metrics.sql", "name": "cust_customer_metrics", "alias": "cust_customer_metrics", "checksum": {"name": "sha256", "checksum": "46cbf1e4ceb3693276fa7212d16b89eadf60a301132982e5ed543336b0af5b81"}, "tags": [], "refs": [["int_nav_transactions_and_customers"]], "sources": [], "description": "this model lists important customer KPIs for exploratory analysis", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/customer/_models_customer.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/customer/cust_customer_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "customer", "materialized": "view"}, "created_at": 1663750853.7302427, "compiled_sql": "with customer_data as (\n\n    select\n        T_customer_id,\n        T_shop_channel_id,\n        T_responsiblity_center_id,\n        min(shop_customer_id) as oxid_customer_id,\n        round(sum(T_invoice_amount_incl_vat),2) as invoice_amount_incl_vat,\n        max(transaction_no_per_shop_channel) as no_transactions_per_cust,\n        max(cust_first_order_date) as cust_first_order_date,\n        max(cust_last_order_date) as cust_last_order_date,\n        round(sum(revenue_after_return_excl_vat_euro),2) as revenue_after_return_excl_vat_euro,\n        sum(if(T_crmemo_amount_excl_vat > 0, 1, 0)) as no_returns_per_cust\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_transactions_and_customers`\n    where T_order_date <= '2020-12-31'\n    group by 1,2,3\n\n),\n\nnew_vars as (\n\n    select *,\n        round(no_returns_per_cust / no_transactions_per_cust,4) as percentage_returned_orders,\n        round(invoice_amount_incl_vat / no_transactions_per_cust,2) as avg_order_value_per_cust,\n        round(revenue_after_return_excl_vat_euro / no_transactions_per_cust,2) as avg_revenue_after_return_per_cust,\n        date_diff('2021-01-01', cust_last_order_date, day) as days_since_last_purchase\n    from customer_data\n\n)\n\nselect *,\nif(days_since_last_purchase <= 130, 'aktiv', if(days_since_last_purchase > 419, 'inaktiv', 'abtruennig')) as current_crm_segments\nfrom new_vars", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_customer`.`cust_customer_metrics`"}, "model.sql_repository_bz.cust_new_returning_visitors_30d": {"raw_sql": "with cust_data as (\r\n\r\n    select\r\n        T_order_date,\r\n        T_shop_channel_id,\r\n        sales_channel_description,\r\n        T_responsiblity_center_id,\r\n        T_shop_order_id,\r\n        T_nav_order_id,\r\n        T_customer_id,\r\n        T_ship_zip_code,\r\n        T_ship_country,\r\n        T_payment_method_code,\r\n        T_invoice_amount_excl_vat,\r\n        transaction_no_per_shop_channel,\r\n        cust_first_order_date,\r\n        neu_bestand_per_shop_channel\r\n\r\n    from {{ref('int_nav_transactions_and_customers')}}\r\n\r\n    where T_order_date between date_sub(current_date(), interval 30 day)\r\n        and date_sub(current_date(), interval 1 day)\r\n        AND regexp_contains(sales_channel_description, 'Marktplatz') = false\r\n        AND regexp_contains(sales_channel_description, 'Erlebnisse') = false\r\n)\r\n\r\nselect * from cust_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_nav_transactions_and_customers"]}, "config": {"enabled": true, "alias": null, "schema": "customer", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_customer", "fqn": ["sql_repository_bz", "03_marts", "customer", "cust_new_returning_visitors_30d"], "unique_id": "model.sql_repository_bz.cust_new_returning_visitors_30d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/customer/cust_new_returning_visitors_30d.sql", "original_file_path": "models/03_marts/customer/cust_new_returning_visitors_30d.sql", "name": "cust_new_returning_visitors_30d", "alias": "cust_new_returning_visitors_30d", "checksum": {"name": "sha256", "checksum": "256a117496e0950dbcbe3cdea7eadfab31233fcfd94e29c4be06cc7b3c7a936b"}, "tags": [], "refs": [["int_nav_transactions_and_customers"]], "sources": [], "description": "this model lists customer status (Neu/Bestand)", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/customer/_models_customer.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/customer/cust_new_returning_visitors_30d.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "customer", "materialized": "view"}, "created_at": 1663750853.73455, "compiled_sql": "with cust_data as (\n\n    select\n        T_order_date,\n        T_shop_channel_id,\n        sales_channel_description,\n        T_responsiblity_center_id,\n        T_shop_order_id,\n        T_nav_order_id,\n        T_customer_id,\n        T_ship_zip_code,\n        T_ship_country,\n        T_payment_method_code,\n        T_invoice_amount_excl_vat,\n        transaction_no_per_shop_channel,\n        cust_first_order_date,\n        neu_bestand_per_shop_channel\n\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_transactions_and_customers`\n\n    where T_order_date between date_sub(current_date(), interval 30 day)\n        and date_sub(current_date(), interval 1 day)\n        AND regexp_contains(sales_channel_description, 'Marktplatz') = false\n        AND regexp_contains(sales_channel_description, 'Erlebnisse') = false\n)\n\nselect * from cust_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_customer`.`cust_new_returning_visitors_30d`"}, "model.sql_repository_bz.cust_perf_cost_mapping": {"raw_sql": "with perf_cost as (\r\n    select \r\n        year_month as year_month_perf_cost,\r\n        country,\r\n        custom_channel_grouping,\r\n        sum_impressions,\r\n        sum_gads_clicks,\r\n        sum_gads_cost\r\n    from {{ ref('int_ga_performance_cost_monthly_by_channel') }}\r\n    -- club analysis only takes de and at cost int account\r\n    where country in ('de', 'at')\r\n        and year_month >= '2020-11'\r\n),\r\n\r\ntransaction_data as (\r\n    select \r\n        T_order_date,\r\n        ga_country,\r\n        ga_acquisition_channel,\r\n        indikator_club_member,\r\n        T_shop_order_id\r\n    from {{ ref('int_nav_transactions_session_customer_attributes') }}\r\n    where ga_acquisition_channel is not null\r\n),\r\n\r\ntransactions_per_channel as (\r\n    select\r\n        format_datetime('%Y-%m', T_order_date) as year_month_order_date,\r\n        ga_country,\r\n        ga_acquisition_channel,\r\n        indikator_club_member as indikator_club_member_cost,\r\n        count(distinct T_shop_order_id) as nr_transactions\r\n    from transaction_data\r\n    group by 1,2,3,4\r\n        \r\n),\r\n\r\n\r\njoined_data as (\r\n    select \r\n        * except (ga_country, year_month_perf_cost, custom_channel_grouping),\r\n        sum(nr_transactions) over ( partition by year_month_order_date, ga_acquisition_channel, country) as sum_transactions\r\n\r\n    from transactions_per_channel as tr\r\n    left join perf_cost as pc\r\n        on tr.year_month_order_date = pc.year_month_perf_cost\r\n        and tr.ga_country = pc.country\r\n        and tr.ga_acquisition_channel = pc.custom_channel_grouping\r\n\r\n)\r\n\r\n    select \r\n        *,\r\n        case \r\n            when sum_gads_cost is not null then sum_gads_cost * (nr_transactions / sum_transactions) \r\n            else 0 \r\n        end as share_ads_cost\r\n        \r\n    from joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_performance_cost_monthly_by_channel", "model.sql_repository_bz.int_nav_transactions_session_customer_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "customer", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_customer", "fqn": ["sql_repository_bz", "03_marts", "customer", "customer_club", "cust_perf_cost_mapping"], "unique_id": "model.sql_repository_bz.cust_perf_cost_mapping", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/customer/customer_club/cust_perf_cost_mapping.sql", "original_file_path": "models/03_marts/customer/customer_club/cust_perf_cost_mapping.sql", "name": "cust_perf_cost_mapping", "alias": "cust_perf_cost_mapping", "checksum": {"name": "sha256", "checksum": "b8eb072a56b902100234ee4259aac7d35469dab89998ee09bc71dcb609d783f2"}, "tags": [], "refs": [["int_ga_performance_cost_monthly_by_channel"], ["int_nav_transactions_session_customer_attributes"]], "sources": [], "description": "this view distributes performance cost to club/non-club customers based on their transaction channel share", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/customer/customer_club/_models_customer_club.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/customer/customer_club/cust_perf_cost_mapping.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "customer", "materialized": "view"}, "created_at": 1663750853.778639, "compiled_sql": "with perf_cost as (\n    select \n        year_month as year_month_perf_cost,\n        country,\n        custom_channel_grouping,\n        sum_impressions,\n        sum_gads_clicks,\n        sum_gads_cost\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_performance_cost_monthly_by_channel`\n    -- club analysis only takes de and at cost int account\n    where country in ('de', 'at')\n        and year_month >= '2020-11'\n),\n\ntransaction_data as (\n    select \n        T_order_date,\n        ga_country,\n        ga_acquisition_channel,\n        indikator_club_member,\n        T_shop_order_id\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_transactions_session_customer_attributes`\n    where ga_acquisition_channel is not null\n),\n\ntransactions_per_channel as (\n    select\n        format_datetime('%Y-%m', T_order_date) as year_month_order_date,\n        ga_country,\n        ga_acquisition_channel,\n        indikator_club_member as indikator_club_member_cost,\n        count(distinct T_shop_order_id) as nr_transactions\n    from transaction_data\n    group by 1,2,3,4\n        \n),\n\n\njoined_data as (\n    select \n        * except (ga_country, year_month_perf_cost, custom_channel_grouping),\n        sum(nr_transactions) over ( partition by year_month_order_date, ga_acquisition_channel, country) as sum_transactions\n\n    from transactions_per_channel as tr\n    left join perf_cost as pc\n        on tr.year_month_order_date = pc.year_month_perf_cost\n        and tr.ga_country = pc.country\n        and tr.ga_acquisition_channel = pc.custom_channel_grouping\n\n)\n\n    select \n        *,\n        case \n            when sum_gads_cost is not null then sum_gads_cost * (nr_transactions / sum_transactions) \n            else 0 \n        end as share_ads_cost\n        \n    from joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_customer`.`cust_perf_cost_mapping`"}, "model.sql_repository_bz.cust_cohort_club_metrics_new_returning": {"raw_sql": "with transactions as (\r\n\r\n    select * \r\n\r\n    from {{ ref('cust_club_retention_rate') }}\r\n\r\n),\r\n\r\n--This table creates the first purchase date marker and calculates the month order - # of months after first purchase\r\n\r\n t_first_purchase as (\r\n\r\n  select \r\n\r\n  t_order_date,\r\n  datetime_diff(t_order_date, first_purchase_per_club_status, month) as month_order,\r\n  format_datetime('%Y-%m', first_purchase_per_club_status) as first_purchase_month,\r\n  shop_customer_id,\r\n  sum_invoice_amount_excl_vat_euro as invoice_amount_excl_vat_euro,\r\n  indikator_club_member, \r\n  neu_bestands_seitnov20_kundenebene\r\n\r\n  from transactions\r\n  ),\r\n\r\n--this table computes the aggregate customer count per first purchase cohort and month order \r\n\r\nt_agg as (\r\n\r\n  select \r\n  first_purchase_month,\r\n  month_order,\r\n  indikator_club_member,\r\n  neu_bestands_seitnov20_kundenebene,\r\n  count(distinct shop_customer_id ) as customers,\r\n  round(sum(invoice_amount_excl_vat_euro),0) as rechnungswert_excl_vat\r\n\r\n  from \r\n  t_first_purchase\r\n\r\n  group by first_purchase_month, month_order, indikator_club_member, neu_bestands_seitnov20_kundenebene\r\n),\r\n\r\n--this table computes the retention rate \r\n\r\n t_cohort as (\r\n\r\n  select *,\r\n  safe_divide(customers, cohortcustomers) as cohortcustomersperc,\r\n  safe_divide(rechnungswert_excl_vat, cohortrechnungswert) as cohortrechnungswertperc\r\n\r\n  from (\r\n\r\n      select\r\n      \r\n       *,\r\n\r\n      first_value(customers) over \r\n        (partition by first_purchase_month, indikator_club_member, neu_bestands_seitnov20_kundenebene order by month_order)  \r\n          as cohortcustomers,\r\n\r\n      first_value(rechnungswert_excl_vat) over \r\n        (partition by first_purchase_month, indikator_club_member, neu_bestands_seitnov20_kundenebene order by month_order)  \r\n          as cohortrechnungswert\r\n\r\n\r\n      from t_agg\r\n  )\r\n )\r\n\r\nselect * \r\n\r\nfrom t_cohort \r\n\r\norder by first_purchase_month, month_order, indikator_club_member, neu_bestands_seitnov20_kundenebene", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.cust_club_retention_rate"]}, "config": {"enabled": true, "alias": null, "schema": "customer", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_customer", "fqn": ["sql_repository_bz", "03_marts", "customer", "customer_club", "cust_cohort_club_metrics_new_returning"], "unique_id": "model.sql_repository_bz.cust_cohort_club_metrics_new_returning", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/customer/customer_club/cust_cohort_club_metrics_new_returning.sql", "original_file_path": "models/03_marts/customer/customer_club/cust_cohort_club_metrics_new_returning.sql", "name": "cust_cohort_club_metrics_new_returning", "alias": "cust_cohort_club_metrics_new_returning", "checksum": {"name": "sha256", "checksum": "2874d641823e15a0d8f82be81e28aab9b2db6db5c142d93e969f81299bcd221a"}, "tags": [], "refs": [["cust_club_retention_rate"]], "sources": [], "description": "this view classifies customer into cohorts, based on first purchase and new vs. returning visitor and lists retention metrics", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/customer/customer_club/_models_customer_club.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/customer/customer_club/cust_cohort_club_metrics_new_returning.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "customer", "materialized": "view"}, "created_at": 1663750853.7712562, "compiled_sql": "with transactions as (\n\n    select * \n\n    from `bergzeit`.`dbt_customer`.`cust_club_retention_rate`\n\n),\n\n--This table creates the first purchase date marker and calculates the month order - # of months after first purchase\n\n t_first_purchase as (\n\n  select \n\n  t_order_date,\n  datetime_diff(t_order_date, first_purchase_per_club_status, month) as month_order,\n  format_datetime('%Y-%m', first_purchase_per_club_status) as first_purchase_month,\n  shop_customer_id,\n  sum_invoice_amount_excl_vat_euro as invoice_amount_excl_vat_euro,\n  indikator_club_member, \n  neu_bestands_seitnov20_kundenebene\n\n  from transactions\n  ),\n\n--this table computes the aggregate customer count per first purchase cohort and month order \n\nt_agg as (\n\n  select \n  first_purchase_month,\n  month_order,\n  indikator_club_member,\n  neu_bestands_seitnov20_kundenebene,\n  count(distinct shop_customer_id ) as customers,\n  round(sum(invoice_amount_excl_vat_euro),0) as rechnungswert_excl_vat\n\n  from \n  t_first_purchase\n\n  group by first_purchase_month, month_order, indikator_club_member, neu_bestands_seitnov20_kundenebene\n),\n\n--this table computes the retention rate \n\n t_cohort as (\n\n  select *,\n  safe_divide(customers, cohortcustomers) as cohortcustomersperc,\n  safe_divide(rechnungswert_excl_vat, cohortrechnungswert) as cohortrechnungswertperc\n\n  from (\n\n      select\n      \n       *,\n\n      first_value(customers) over \n        (partition by first_purchase_month, indikator_club_member, neu_bestands_seitnov20_kundenebene order by month_order)  \n          as cohortcustomers,\n\n      first_value(rechnungswert_excl_vat) over \n        (partition by first_purchase_month, indikator_club_member, neu_bestands_seitnov20_kundenebene order by month_order)  \n          as cohortrechnungswert\n\n\n      from t_agg\n  )\n )\n\nselect * \n\nfrom t_cohort \n\norder by first_purchase_month, month_order, indikator_club_member, neu_bestands_seitnov20_kundenebene", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_customer`.`cust_cohort_club_metrics_new_returning`"}, "model.sql_repository_bz.cust_cohort_club_metrics": {"raw_sql": "with transactions as (\r\n\r\n    select * \r\n\r\n    from {{ ref('cust_club_retention_rate') }}\r\n\r\n),\r\n\r\n--This table creates the first purchase date marker and calculates the month order - # of months after first purchase\r\n\r\n t_first_purchase as (\r\n\r\n  select \r\n\r\n    t_order_date,\r\n    datetime_diff(t_order_date, first_purchase_per_club_status, month) as month_order,\r\n    format_datetime('%Y-%m', first_purchase_per_club_status) as first_purchase_month,\r\n    shop_customer_id,\r\n    T_shop_order_id as shop_order_id,\r\n    sum_invoice_amount_excl_vat_euro as sum_invoice_amount_excl_vat,\r\n    umsatz_netto,\r\n    db_1,\r\n    indikator_club_member\r\n\r\n  from transactions\r\n  ),\r\n\r\n--this table computes the aggregate customer count per first purchase cohort and month order \r\n\r\nt_agg as (\r\n\r\n  select \r\n    first_purchase_month,\r\n    month_order,\r\n    indikator_club_member,\r\n    count(distinct shop_customer_id ) as customers,\r\n    count(distinct shop_order_id ) as transactions,\r\n    round(sum(sum_invoice_amount_excl_vat),0) as sum_rechnungswert_excl_vat,\r\n    round(sum(umsatz_netto),0) as sum_umsatz_netto,\r\n    round(sum(db_1),0) as sum_db_1,\r\n    round(sum(sum_invoice_amount_excl_vat),0) / count(distinct shop_customer_id ) as avg_rechnungswert_per_customer,\r\n    round(sum(umsatz_netto),0) / count(distinct shop_customer_id ) as avg_umsatz_netto_per_customer,\r\n    round(sum(db_1),0) / count(distinct shop_customer_id ) as avg_db_1_per_customer,\r\n    round(sum(sum_invoice_amount_excl_vat),0) / count(distinct shop_order_id ) as avg_rechnungswert_per_transaction,\r\n    round(sum(umsatz_netto),0) / count(distinct shop_order_id ) as avg_umsatz_netto_per_transaction,\r\n    round(sum(db_1),0) / count(distinct shop_order_id ) as avg_db_1_per_transaction,\r\n\r\n  from \r\n  t_first_purchase\r\n\r\n  group by first_purchase_month, month_order, indikator_club_member\r\n),\r\n\r\n--this table computes the retention rate \r\n\r\n t_cohort as (\r\n\r\n  select *,\r\n  safe_divide(customers, cohortcustomers) as cohortcustomersperc,\r\n  safe_divide(sum_rechnungswert_excl_vat, cohortrechnungswert) as cohortrechnungswertperc\r\n\r\n  from (\r\n\r\n      select\r\n      \r\n       *,\r\n\r\n      first_value(customers) over \r\n        (partition by first_purchase_month, indikator_club_member order by month_order)  \r\n          as cohortcustomers,\r\n\r\n      first_value(sum_rechnungswert_excl_vat) over \r\n        (partition by first_purchase_month, indikator_club_member order by month_order)  \r\n          as cohortrechnungswert\r\n\r\n\r\n      from t_agg\r\n  )\r\n )\r\n\r\nselect * \r\n\r\nfrom t_cohort \r\n\r\norder by first_purchase_month, month_order, indikator_club_member", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.cust_club_retention_rate"]}, "config": {"enabled": true, "alias": null, "schema": "customer", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_customer", "fqn": ["sql_repository_bz", "03_marts", "customer", "customer_club", "cust_cohort_club_metrics"], "unique_id": "model.sql_repository_bz.cust_cohort_club_metrics", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/customer/customer_club/cust_cohort_club_metrics.sql", "original_file_path": "models/03_marts/customer/customer_club/cust_cohort_club_metrics.sql", "name": "cust_cohort_club_metrics", "alias": "cust_cohort_club_metrics", "checksum": {"name": "sha256", "checksum": "cebde56d2cb93ce37e33d08857c6779165d69dde0107d56dc0253bf8b935d2a3"}, "tags": [], "refs": [["cust_club_retention_rate"]], "sources": [], "description": "this view classifies customer into cohorts, based on first purchase and lists retention metrics", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/customer/customer_club/_models_customer_club.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/customer/customer_club/cust_cohort_club_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "customer", "materialized": "view"}, "created_at": 1663750853.7744424, "compiled_sql": "with transactions as (\n\n    select * \n\n    from `bergzeit`.`dbt_customer`.`cust_club_retention_rate`\n\n),\n\n--This table creates the first purchase date marker and calculates the month order - # of months after first purchase\n\n t_first_purchase as (\n\n  select \n\n    t_order_date,\n    datetime_diff(t_order_date, first_purchase_per_club_status, month) as month_order,\n    format_datetime('%Y-%m', first_purchase_per_club_status) as first_purchase_month,\n    shop_customer_id,\n    T_shop_order_id as shop_order_id,\n    sum_invoice_amount_excl_vat_euro as sum_invoice_amount_excl_vat,\n    umsatz_netto,\n    db_1,\n    indikator_club_member\n\n  from transactions\n  ),\n\n--this table computes the aggregate customer count per first purchase cohort and month order \n\nt_agg as (\n\n  select \n    first_purchase_month,\n    month_order,\n    indikator_club_member,\n    count(distinct shop_customer_id ) as customers,\n    count(distinct shop_order_id ) as transactions,\n    round(sum(sum_invoice_amount_excl_vat),0) as sum_rechnungswert_excl_vat,\n    round(sum(umsatz_netto),0) as sum_umsatz_netto,\n    round(sum(db_1),0) as sum_db_1,\n    round(sum(sum_invoice_amount_excl_vat),0) / count(distinct shop_customer_id ) as avg_rechnungswert_per_customer,\n    round(sum(umsatz_netto),0) / count(distinct shop_customer_id ) as avg_umsatz_netto_per_customer,\n    round(sum(db_1),0) / count(distinct shop_customer_id ) as avg_db_1_per_customer,\n    round(sum(sum_invoice_amount_excl_vat),0) / count(distinct shop_order_id ) as avg_rechnungswert_per_transaction,\n    round(sum(umsatz_netto),0) / count(distinct shop_order_id ) as avg_umsatz_netto_per_transaction,\n    round(sum(db_1),0) / count(distinct shop_order_id ) as avg_db_1_per_transaction,\n\n  from \n  t_first_purchase\n\n  group by first_purchase_month, month_order, indikator_club_member\n),\n\n--this table computes the retention rate \n\n t_cohort as (\n\n  select *,\n  safe_divide(customers, cohortcustomers) as cohortcustomersperc,\n  safe_divide(sum_rechnungswert_excl_vat, cohortrechnungswert) as cohortrechnungswertperc\n\n  from (\n\n      select\n      \n       *,\n\n      first_value(customers) over \n        (partition by first_purchase_month, indikator_club_member order by month_order)  \n          as cohortcustomers,\n\n      first_value(sum_rechnungswert_excl_vat) over \n        (partition by first_purchase_month, indikator_club_member order by month_order)  \n          as cohortrechnungswert\n\n\n      from t_agg\n  )\n )\n\nselect * \n\nfrom t_cohort \n\norder by first_purchase_month, month_order, indikator_club_member", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_customer`.`cust_cohort_club_metrics`"}, "model.sql_repository_bz.cust_club_retention_rate": {"raw_sql": "with new_vars as (\r\n\r\nselect \r\n\r\n    *,\r\n\r\n    row_number() over ( partition by shop_customer_id order by T_order_date asc) as no_transactions,\r\n    row_number() over ( partition by shop_customer_id, indikator_club_member order by T_order_date asc) as no_transaction_per_club_status,\r\n    count( distinct T_shop_order_id) over ( partition by shop_customer_id ) as max_transactions,\r\n    count( distinct T_shop_order_id) over ( partition by shop_customer_id, indikator_club_member) as max_transactions_per_club_status,\r\n    count ( distinct indikator_club_member) over ( partition by shop_customer_id ) as ctd_indikator_club_member,\r\n    date_diff( T_order_date, event_date, day ) as time_diff_optin_transaction,\r\n    date_diff( T_order_date, cust_previous_order_date, day ) as time_diff_transaction_prev_transaction,\r\n    first_value(T_order_date) over ( partition by shop_customer_id order by T_order_date asc) as first_purchase,\r\n    first_value(T_order_date) over ( partition by shop_customer_id, indikator_club_member order by T_order_date asc ) as first_purchase_per_club_status\r\n    \r\nfrom {{ ref('int_nav_transactions_session_customer_attributes') }}\r\n\r\n)\r\n\r\nselect * except (help_var),\r\n    first_value(help_var) OVER (PARTITION BY shop_customer_id, indikator_club_member ORDER BY T_order_date asc) AS neu_bestands_seitnov20_Kundenebene\r\n\r\n    from (\r\n\r\nselect \r\n    *,\r\n    if(no_transaction_per_club_status = 1 and transaction_no_per_shop_channel = 1, 'Neu', \r\n        if(no_transaction_per_club_status = 1 and transaction_no_per_shop_channel > 1, 'Bestand', null)) as help_var\r\n\r\nfrom new_vars\r\n\r\n    )\r\n\r\norder by shop_customer_id, T_order_date asc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_nav_transactions_session_customer_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "customer", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_customer", "fqn": ["sql_repository_bz", "03_marts", "customer", "customer_club", "cust_club_retention_rate"], "unique_id": "model.sql_repository_bz.cust_club_retention_rate", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/customer/customer_club/cust_club_retention_rate.sql", "original_file_path": "models/03_marts/customer/customer_club/cust_club_retention_rate.sql", "name": "cust_club_retention_rate", "alias": "cust_club_retention_rate", "checksum": {"name": "sha256", "checksum": "6656440e199b0541833631a56e2f98cd84ee11a38b231b82b8523908e3f1a2b3"}, "tags": [], "refs": [["int_nav_transactions_session_customer_attributes"]], "sources": [], "description": "this view lists all transaction data enriched with customer metrics for club analysis", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/customer/customer_club/_models_customer_club.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/customer/customer_club/cust_club_retention_rate.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "customer", "materialized": "view"}, "created_at": 1663750853.761017, "compiled_sql": "with new_vars as (\n\nselect \n\n    *,\n\n    row_number() over ( partition by shop_customer_id order by T_order_date asc) as no_transactions,\n    row_number() over ( partition by shop_customer_id, indikator_club_member order by T_order_date asc) as no_transaction_per_club_status,\n    count( distinct T_shop_order_id) over ( partition by shop_customer_id ) as max_transactions,\n    count( distinct T_shop_order_id) over ( partition by shop_customer_id, indikator_club_member) as max_transactions_per_club_status,\n    count ( distinct indikator_club_member) over ( partition by shop_customer_id ) as ctd_indikator_club_member,\n    date_diff( T_order_date, event_date, day ) as time_diff_optin_transaction,\n    date_diff( T_order_date, cust_previous_order_date, day ) as time_diff_transaction_prev_transaction,\n    first_value(T_order_date) over ( partition by shop_customer_id order by T_order_date asc) as first_purchase,\n    first_value(T_order_date) over ( partition by shop_customer_id, indikator_club_member order by T_order_date asc ) as first_purchase_per_club_status\n    \nfrom `bergzeit`.`dbt_analytics_intermediate`.`int_nav_transactions_session_customer_attributes`\n\n)\n\nselect * except (help_var),\n    first_value(help_var) OVER (PARTITION BY shop_customer_id, indikator_club_member ORDER BY T_order_date asc) AS neu_bestands_seitnov20_Kundenebene\n\n    from (\n\nselect \n    *,\n    if(no_transaction_per_club_status = 1 and transaction_no_per_shop_channel = 1, 'Neu', \n        if(no_transaction_per_club_status = 1 and transaction_no_per_shop_channel > 1, 'Bestand', null)) as help_var\n\nfrom new_vars\n\n    )\n\norder by shop_customer_id, T_order_date asc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_customer`.`cust_club_retention_rate`"}, "model.sql_repository_bz.cust_club_margin_calculation": {"raw_sql": "with cust_club_data as (\r\n\r\n    select * \r\n    from {{ ref('cust_club_retention_rate') }}\r\n\r\n),\r\n\r\nads_costs as (\r\n\r\n    select *\r\n    from {{ ref('cust_perf_cost_mapping') }}\r\n    /* paid channels only */\r\n    where sum_gads_cost is not null\r\n),\r\n\r\n\r\ncost_overall_by_month_and_club_status as (\r\n    select \r\n        year_month_order_date,\r\n        indikator_club_member_cost,\r\n        sum(nr_transactions) as nr_transactions_ga,\r\n        sum(share_ads_cost) as ads_cost_assigned\r\n    from ads_costs\r\n    group by 1,2\r\n),\r\n\r\naggregated_club_data as (\r\n\r\n    select \r\n        format_datetime('%Y-%m', T_order_date) as year_month,\r\n        indikator_club_member,\r\n        indikator_club_member_text,\r\n        -- ggf Neu Bestand\r\n        count(distinct T_shop_order_id) as nr_transactions,\r\n        count(distinct T_nav_customer_id) as nr_customers,\r\n        sum(sum_invoice_amount_excl_vat_euro) as sum_invoice_amount_excl_vat_euro,\r\n        sum(sum_invoice_cost_excl_vat) as sum_invoice_cost_excl_vat,\r\n        sum(sum_crmemo_amount_excl_vat_euro) as sum_crmemo_amount_excl_vat_euro,\r\n        sum(sum_crmemo_cost_excl_vat) as sum_crmemo_cost_excl_vat,\r\n        sum(umsatz_netto) as sum_umsatz_netto,\r\n        sum(db_1) as sum_db_1,\r\n        avg(sum_invoice_amount_excl_vat_euro) as avg_invoice_amount_excl_vat_euro,\r\n        avg(umsatz_netto) as avg_umsatz_netto,\r\n        avg(db_1) as avg_db1\r\n\r\n    from cust_club_data\r\n    /* take full months only */\r\n    where T_order_date < DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 0 MONTH), MONTH)\r\n    group by 1,2,3\r\n\r\n),\r\n\r\nclub_and_cost as (\r\n    select \r\n        * except (year_month_order_date, indikator_club_member_cost)\r\n    from aggregated_club_data as ad\r\n    left join cost_overall_by_month_and_club_status as ac\r\n        on ad.year_month = ac.year_month_order_date\r\n        and ad.indikator_club_member = ac.indikator_club_member_cost\r\n),\r\n\r\nnew_metrics as (\r\n    select \r\n        *,\r\n        sum_db_1 - ads_cost_assigned as sum_db_1_abzgl_perf_cost,\r\n        (sum_db_1 - ads_cost_assigned)/nr_transactions as avg_db_1_abzgl_perf_cost\r\n    from club_and_cost\r\n)\r\n\r\nselect * from new_metrics", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.cust_club_retention_rate", "model.sql_repository_bz.cust_perf_cost_mapping"]}, "config": {"enabled": true, "alias": null, "schema": "customer", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_customer", "fqn": ["sql_repository_bz", "03_marts", "customer", "customer_club", "cust_club_margin_calculation"], "unique_id": "model.sql_repository_bz.cust_club_margin_calculation", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/customer/customer_club/cust_club_margin_calculation.sql", "original_file_path": "models/03_marts/customer/customer_club/cust_club_margin_calculation.sql", "name": "cust_club_margin_calculation", "alias": "cust_club_margin_calculation", "checksum": {"name": "sha256", "checksum": "545f752cd08aefdaacb13405bb474ff3f9ebd9f9e6c1a1f228338a73c3250580"}, "tags": [], "refs": [["cust_club_retention_rate"], ["cust_perf_cost_mapping"]], "sources": [], "description": "this view lists invoice, return and margin data per month and club membership (yes/no)", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/customer/customer_club/_models_customer_club.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/customer/customer_club/cust_club_margin_calculation.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "customer", "materialized": "view"}, "created_at": 1663750853.768146, "compiled_sql": "with cust_club_data as (\n\n    select * \n    from `bergzeit`.`dbt_customer`.`cust_club_retention_rate`\n\n),\n\nads_costs as (\n\n    select *\n    from `bergzeit`.`dbt_customer`.`cust_perf_cost_mapping`\n    /* paid channels only */\n    where sum_gads_cost is not null\n),\n\n\ncost_overall_by_month_and_club_status as (\n    select \n        year_month_order_date,\n        indikator_club_member_cost,\n        sum(nr_transactions) as nr_transactions_ga,\n        sum(share_ads_cost) as ads_cost_assigned\n    from ads_costs\n    group by 1,2\n),\n\naggregated_club_data as (\n\n    select \n        format_datetime('%Y-%m', T_order_date) as year_month,\n        indikator_club_member,\n        indikator_club_member_text,\n        -- ggf Neu Bestand\n        count(distinct T_shop_order_id) as nr_transactions,\n        count(distinct T_nav_customer_id) as nr_customers,\n        sum(sum_invoice_amount_excl_vat_euro) as sum_invoice_amount_excl_vat_euro,\n        sum(sum_invoice_cost_excl_vat) as sum_invoice_cost_excl_vat,\n        sum(sum_crmemo_amount_excl_vat_euro) as sum_crmemo_amount_excl_vat_euro,\n        sum(sum_crmemo_cost_excl_vat) as sum_crmemo_cost_excl_vat,\n        sum(umsatz_netto) as sum_umsatz_netto,\n        sum(db_1) as sum_db_1,\n        avg(sum_invoice_amount_excl_vat_euro) as avg_invoice_amount_excl_vat_euro,\n        avg(umsatz_netto) as avg_umsatz_netto,\n        avg(db_1) as avg_db1\n\n    from cust_club_data\n    /* take full months only */\n    where T_order_date < DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 0 MONTH), MONTH)\n    group by 1,2,3\n\n),\n\nclub_and_cost as (\n    select \n        * except (year_month_order_date, indikator_club_member_cost)\n    from aggregated_club_data as ad\n    left join cost_overall_by_month_and_club_status as ac\n        on ad.year_month = ac.year_month_order_date\n        and ad.indikator_club_member = ac.indikator_club_member_cost\n),\n\nnew_metrics as (\n    select \n        *,\n        sum_db_1 - ads_cost_assigned as sum_db_1_abzgl_perf_cost,\n        (sum_db_1 - ads_cost_assigned)/nr_transactions as avg_db_1_abzgl_perf_cost\n    from club_and_cost\n)\n\nselect * from new_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_customer`.`cust_club_margin_calculation`"}, "model.sql_repository_bz.budget_plan_ga_and_markov_data": {"raw_sql": "with markov_data as (\r\n\r\n    select\r\n        year_month_markov,\r\n        country_grouping,\r\n        channel_name,\r\n        total_conversion_value,\r\n        order_value_gesamt,\r\n        channelanteil_markov\r\n    from {{ ref('int_attribution_markov_path_level_monthly') }}\r\n\r\n ),\r\n\r\n ga_data as (\r\n\r\n     select\r\n        ga_year_month,\r\n        ga_country_grouped,\r\n        ga_acquisition_channel,\r\n        sum_order_value,\r\n        order_value_total_last_click,\r\n        channelanteil_last_click\r\n     from {{ ref('int_ga_order_value_by_month_channel') }}\r\n\r\n ),\r\n\r\n joined_data as (\r\n\r\n    select\r\n        * except (year_month_markov, country_grouping, channel_name),\r\n        ((channelanteil_markov - channelanteil_last_click) / 100) as unterschied_markov_zu_last_click, --round(((total_conversion_value - sum_order_value) / sum_order_value),2) \r\n    from ga_data as ga\r\n    left join markov_data as md\r\n        on ga.ga_year_month = md.year_month_markov\r\n        and ga.ga_country_grouped = md.country_grouping\r\n        and ga.ga_acquisition_channel = md.channel_name\r\n )\r\n\r\n select\r\n    *,\r\n    ifnull (order_value_total_last_click *  channelanteil_markov, 0) as ga_order_value_markov_corrected,\r\n    --sum_order_value + (((channelanteil_markov - channelanteil_last_click)/100) * sum_order_value) as test2,\r\n    sum_order_value + (sum_order_value * unterschied_markov_zu_last_click) as test\r\n from joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_attribution_markov_path_level_monthly", "model.sql_repository_bz.int_ga_order_value_by_month_channel"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "budget_planning", "budget_plan_ga_and_markov_data"], "unique_id": "model.sql_repository_bz.budget_plan_ga_and_markov_data", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/budget_planning/budget_plan_ga_and_markov_data.sql", "original_file_path": "models/03_marts/sea_analytics/budget_planning/budget_plan_ga_and_markov_data.sql", "name": "budget_plan_ga_and_markov_data", "alias": "budget_plan_ga_and_markov_data", "checksum": {"name": "sha256", "checksum": "eb06844aa341fd9625a52e76e7c200c3f8a7e814344143358ba0e1d36feb2585"}, "tags": [], "refs": [["int_attribution_markov_path_level_monthly"], ["int_ga_order_value_by_month_channel"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/budget_planning/budget_plan_ga_and_markov_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750848.6066413, "compiled_sql": "with markov_data as (\n\n    select\n        year_month_markov,\n        country_grouping,\n        channel_name,\n        total_conversion_value,\n        order_value_gesamt,\n        channelanteil_markov\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_attribution_markov_path_level_monthly`\n\n ),\n\n ga_data as (\n\n     select\n        ga_year_month,\n        ga_country_grouped,\n        ga_acquisition_channel,\n        sum_order_value,\n        order_value_total_last_click,\n        channelanteil_last_click\n     from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_order_value_by_month_channel`\n\n ),\n\n joined_data as (\n\n    select\n        * except (year_month_markov, country_grouping, channel_name),\n        ((channelanteil_markov - channelanteil_last_click) / 100) as unterschied_markov_zu_last_click, --round(((total_conversion_value - sum_order_value) / sum_order_value),2) \n    from ga_data as ga\n    left join markov_data as md\n        on ga.ga_year_month = md.year_month_markov\n        and ga.ga_country_grouped = md.country_grouping\n        and ga.ga_acquisition_channel = md.channel_name\n )\n\n select\n    *,\n    ifnull (order_value_total_last_click *  channelanteil_markov, 0) as ga_order_value_markov_corrected,\n    --sum_order_value + (((channelanteil_markov - channelanteil_last_click)/100) * sum_order_value) as test2,\n    sum_order_value + (sum_order_value * unterschied_markov_zu_last_click) as test\n from joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`budget_plan_ga_and_markov_data`"}, "model.sql_repository_bz.budget_plan_actual_metrics": {"raw_sql": "with ga_data_markov_corrected as (\r\n\r\n    select\r\n        ga_year_month as year_month,\r\n        ga_country_grouped as country_grouped,\r\n        ga_acquisition_channel as acquisition_channel,\r\n        sum_order_value,\r\n        order_value_total_last_click,\r\n        channelanteil_last_click,\r\n        channelanteil_markov,\r\n        ga_order_value_markov_corrected\r\n    from {{ ref('budget_plan_ga_and_markov_data') }}\r\n),\r\n\r\nperf_cost as (\r\n\r\n    select\r\n        year_month,\r\n        {{ apply_country_grouping('country') }} as country_grouped,\r\n        custom_channel_grouping as acquisition_channel,\r\n        sum(sum_gads_cost) as sum_gads_cost\r\n    from {{ ref('int_ga_performance_cost_monthly_by_channel') }}\r\n    group by 1,2,3\r\n),\r\n\r\njoined_data as (\r\n\r\n    select *\r\n    from ga_data_markov_corrected\r\n    left join perf_cost\r\n        using(year_month, country_grouped, acquisition_channel)\r\n\r\n)\r\n\r\nselect \r\n    *,\r\n    (safe_divide(cast(sum_gads_cost as numeric), cast(ga_order_value_markov_corrected as numeric)))*100 as kur_ist\r\nfrom joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.apply_country_grouping"], "nodes": ["model.sql_repository_bz.budget_plan_ga_and_markov_data", "model.sql_repository_bz.int_ga_performance_cost_monthly_by_channel"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "budget_planning", "budget_plan_actual_metrics"], "unique_id": "model.sql_repository_bz.budget_plan_actual_metrics", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/budget_planning/budget_plan_actual_metrics.sql", "original_file_path": "models/03_marts/sea_analytics/budget_planning/budget_plan_actual_metrics.sql", "name": "budget_plan_actual_metrics", "alias": "budget_plan_actual_metrics", "checksum": {"name": "sha256", "checksum": "dc96fecedbc2174279d1ba2595963c8b32be8f8898f03905a76b6ec832c501a4"}, "tags": [], "refs": [["budget_plan_ga_and_markov_data"], ["int_ga_performance_cost_monthly_by_channel"]], "sources": [], "description": "this model lists the actual metrics for the budget plan", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/sea_analytics/budget_planning/_models_soll_ist.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/budget_planning/budget_plan_actual_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750853.813333, "compiled_sql": "with ga_data_markov_corrected as (\n\n    select\n        ga_year_month as year_month,\n        ga_country_grouped as country_grouped,\n        ga_acquisition_channel as acquisition_channel,\n        sum_order_value,\n        order_value_total_last_click,\n        channelanteil_last_click,\n        channelanteil_markov,\n        ga_order_value_markov_corrected\n    from `bergzeit`.`dbt_sea_analytics`.`budget_plan_ga_and_markov_data`\n),\n\nperf_cost as (\n\n    select\n        year_month,\n        \n    case\n        when country in ('de', 'at', 'ch', 'nl', 'uk', 'it') then country\n        else 'int'\n    end\n\n as country_grouped,\n        custom_channel_grouping as acquisition_channel,\n        sum(sum_gads_cost) as sum_gads_cost\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_performance_cost_monthly_by_channel`\n    group by 1,2,3\n),\n\njoined_data as (\n\n    select *\n    from ga_data_markov_corrected\n    left join perf_cost\n        using(year_month, country_grouped, acquisition_channel)\n\n)\n\nselect \n    *,\n    (safe_divide(cast(sum_gads_cost as numeric), cast(ga_order_value_markov_corrected as numeric)))*100 as kur_ist\nfrom joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`budget_plan_actual_metrics`"}, "model.sql_repository_bz.budget_plan_markov_channel_level": {"raw_sql": "with markov_channel_level_data as (\r\n    select * except (data_quality_index, sk_id)\r\n    from {{ ref('stg_channelattribution_channel_level') }}\r\n    where \r\n        date = last_day(date)\r\n        /* we currently use the previous month for the markov correction of the current month */\r\n        and date >= date_sub(parse_date('%Y-%m-%d', '{{ var(\"start_date_fy\") }}'), interval 1 month)\r\n)\r\n\r\nselect * from markov_channel_level_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_channelattribution_channel_level"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "budget_planning", "budget_plan_markov_channel_level"], "unique_id": "model.sql_repository_bz.budget_plan_markov_channel_level", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/budget_planning/budget_plan_markov_channel_level.sql", "original_file_path": "models/03_marts/sea_analytics/budget_planning/budget_plan_markov_channel_level.sql", "name": "budget_plan_markov_channel_level", "alias": "budget_plan_markov_channel_level", "checksum": {"name": "sha256", "checksum": "201e5ed7b7fc008b11656a35b63ace4562ba639b5acb6b1aee8f7f267f72757b"}, "tags": [], "refs": [["stg_channelattribution_channel_level"]], "sources": [], "description": "this model lists markov (channel level) monthly data (uses last day of month that is calculated) for OLD (current) soll-ist reporting", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/sea_analytics/budget_planning/_models_soll_ist.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/budget_planning/budget_plan_markov_channel_level.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750853.809909, "compiled_sql": "with markov_channel_level_data as (\n    select * except (data_quality_index, sk_id)\n    from `bergzeit`.`dbt_analytics_staging`.`stg_channelattribution_channel_level`\n    where \n        date = last_day(date)\n        /* we currently use the previous month for the markov correction of the current month */\n        and date >= date_sub(parse_date('%Y-%m-%d', '2022-03-01'), interval 1 month)\n)\n\nselect * from markov_channel_level_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`budget_plan_markov_channel_level`"}, "model.sql_repository_bz.consentless_datadiff_ga": {"raw_sql": "with consentless_transactions as (\r\n    \r\n    select \r\n\r\n    extract(year from date) ||'-'|| cast(date as string format('MM')) AS year_month,\r\n    {{ extract_country_from_hostname('host') }} as consentless_country,\r\n    transaction_id,\r\n    transaction_value_eur as transaction_value,\r\n    'EUR' as transaction_currency\r\n    \r\n    from {{ ref('int_consentless_transactions_eur') }}\r\n\r\n    where date between {{ get_financial_year_to_yesterday_date_range() }}\r\n    \r\n    -- start ishop\r\n    and date > '2022-03-18'\r\n\r\n),\r\n\r\nga_data_bz as (\r\n\r\n    select *\r\n    from {{ ref('int_ga_order_value_by_month_channel') }}\r\n\r\n),\r\n\r\nagg_consentless_data as (\r\n\r\nselect\r\n    year_month,\r\n    {{apply_country_grouping('consentless_country')}} as consentless_country_grouped,\r\n    sum(transaction_value) as order_value_consentless\r\nfrom consentless_transactions\r\ngroup by 1,2\r\n\r\n),\r\n\r\nagg_ga_data as (\r\n\r\n    select \r\n    \r\n        ga_year_month,\r\n        ga_country_grouped,\r\n        sum(sum_order_value) as order_value_ga\r\n        \r\n    from ga_data_bz\r\n    group by 1,2\r\n\r\n),\r\n\r\njoined_data as (\r\n\r\nselect \r\n    *\r\nfrom agg_consentless_data as ac\r\nleft join agg_ga_data as ag\r\non ac.year_month = ag.ga_year_month\r\nand ac.consentless_country_grouped = ag.ga_country_grouped\r\n\r\n)\r\n\r\nselect \r\n    year_month,\r\n    consentless_country_grouped as country,\r\n    order_value_consentless,\r\n    order_value_ga,\r\n    safe_divide (order_value_ga , order_value_consentless ) as order_share_ga\r\nfrom joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.extract_country_from_hostname", "macro.sql_repository_bz.get_financial_year_to_yesterday_date_range", "macro.sql_repository_bz.apply_country_grouping"], "nodes": ["model.sql_repository_bz.int_consentless_transactions_eur", "model.sql_repository_bz.int_ga_order_value_by_month_channel"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "budget_planning", "consentless_datadiff_ga"], "unique_id": "model.sql_repository_bz.consentless_datadiff_ga", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/budget_planning/consentless_datadiff_ga.sql", "original_file_path": "models/03_marts/sea_analytics/budget_planning/consentless_datadiff_ga.sql", "name": "consentless_datadiff_ga", "alias": "consentless_datadiff_ga", "checksum": {"name": "sha256", "checksum": "d66b3a07cadd67097e6a64786e34a44fb6c91a880c0856a345ef82178b056f04"}, "tags": [], "refs": [["int_consentless_transactions_eur"], ["int_ga_order_value_by_month_channel"]], "sources": [], "description": "this model calculates the order value difference between consentless and google analytics", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/sea_analytics/budget_planning/_models_soll_ist.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/budget_planning/consentless_datadiff_ga.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750853.8239667, "compiled_sql": "with consentless_transactions as (\n    \n    select \n\n    extract(year from date) ||'-'|| cast(date as string format('MM')) AS year_month,\n    \n    case\n        when host like '%co.uk%' then split(host, '.')[ offset (3)] \n        else split(host, '.')[offset(2)] \n    end\n\n as consentless_country,\n    transaction_id,\n    transaction_value_eur as transaction_value,\n    'EUR' as transaction_currency\n    \n    from `bergzeit`.`dbt_analytics_intermediate`.`int_consentless_transactions_eur`\n\n    where date between \n    '2022-03-01' and date_sub(current_date(), interval 1 day)\n\n    \n    -- start ishop\n    and date > '2022-03-18'\n\n),\n\nga_data_bz as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_order_value_by_month_channel`\n\n),\n\nagg_consentless_data as (\n\nselect\n    year_month,\n    \n    case\n        when consentless_country in ('de', 'at', 'ch', 'nl', 'uk', 'it') then consentless_country\n        else 'int'\n    end\n\n as consentless_country_grouped,\n    sum(transaction_value) as order_value_consentless\nfrom consentless_transactions\ngroup by 1,2\n\n),\n\nagg_ga_data as (\n\n    select \n    \n        ga_year_month,\n        ga_country_grouped,\n        sum(sum_order_value) as order_value_ga\n        \n    from ga_data_bz\n    group by 1,2\n\n),\n\njoined_data as (\n\nselect \n    *\nfrom agg_consentless_data as ac\nleft join agg_ga_data as ag\non ac.year_month = ag.ga_year_month\nand ac.consentless_country_grouped = ag.ga_country_grouped\n\n)\n\nselect \n    year_month,\n    consentless_country_grouped as country,\n    order_value_consentless,\n    order_value_ga,\n    safe_divide (order_value_ga , order_value_consentless ) as order_share_ga\nfrom joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`consentless_datadiff_ga`"}, "model.sql_repository_bz.budget_plan_target_metrics": {"raw_sql": "with budgetplan_soll as (\r\n\r\n    select\r\n        country_soll,\r\n        month_soll,\r\n        cast(concat(month_soll, '-01') as date) as first_day,\r\n        channel_soll,\r\n        order_value_soll,\r\n        kur_soll\r\n    from {{ ref('budget_plan_planned_input') }}\r\n),\r\n\r\nanalytics_correction as (\r\n\r\n    select\r\n        year_month,\r\n        country,\r\n        order_share_ga\r\n    from {{ ref('consentless_datadiff_ga') }}\r\n),\r\n\r\njoined_data as (\r\n\r\n    select *\r\n    from budgetplan_soll as bs\r\n    left join analytics_correction as corr\r\n        on bs.country_soll = corr.country\r\n        and bs.month_soll = corr.year_month\r\n),\r\n\r\nnew_vars as (\r\n\r\n    select\r\n        * except (year_month, country),     \r\n        case when last_day(first_day, month) > current_date() then current_date()-1\r\n            else last_day(first_day, month) end as last_day\r\n    from joined_data\r\n\r\n),\r\n\r\ndate_vars as (\r\n\r\n    select\r\n        *,\r\n        date_diff(last_day(first_day), first_day, day) as nr_days_total,\r\n        date_diff(last_day, first_day, day) as nr_days_current\r\n    from new_vars\r\n\r\n),\r\n\r\ndays_factor_added as (\r\n\r\n    select\r\n        *,\r\n        nr_days_current/nr_days_total as days_factor\r\n    from date_vars\r\n\r\n)\r\n\r\nselect\r\n    *,\r\n    (order_value_soll * order_share_ga) * days_factor as order_value_soll_ga_corrected,\r\n    ((order_value_soll * order_share_ga ) * kur_soll) * days_factor as perf_cost_soll\r\nfrom days_factor_added", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.budget_plan_planned_input", "model.sql_repository_bz.consentless_datadiff_ga"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "budget_planning", "budget_plan_target_metrics"], "unique_id": "model.sql_repository_bz.budget_plan_target_metrics", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/budget_planning/budget_plan_target_metrics.sql", "original_file_path": "models/03_marts/sea_analytics/budget_planning/budget_plan_target_metrics.sql", "name": "budget_plan_target_metrics", "alias": "budget_plan_target_metrics", "checksum": {"name": "sha256", "checksum": "818853c6cd3fc32102ad4f434e0ed310df590b02b1c66e8ec9fbb31c530e8854"}, "tags": [], "refs": [["budget_plan_planned_input"], ["consentless_datadiff_ga"]], "sources": [], "description": "this model lists the target metrics for the budget plan", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/sea_analytics/budget_planning/_models_soll_ist.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/budget_planning/budget_plan_target_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750853.8204992, "compiled_sql": "with budgetplan_soll as (\n\n    select\n        country_soll,\n        month_soll,\n        cast(concat(month_soll, '-01') as date) as first_day,\n        channel_soll,\n        order_value_soll,\n        kur_soll\n    from `bergzeit`.`dbt_sea_analytics`.`budget_plan_planned_input`\n),\n\nanalytics_correction as (\n\n    select\n        year_month,\n        country,\n        order_share_ga\n    from `bergzeit`.`dbt_sea_analytics`.`consentless_datadiff_ga`\n),\n\njoined_data as (\n\n    select *\n    from budgetplan_soll as bs\n    left join analytics_correction as corr\n        on bs.country_soll = corr.country\n        and bs.month_soll = corr.year_month\n),\n\nnew_vars as (\n\n    select\n        * except (year_month, country),     \n        case when last_day(first_day, month) > current_date() then current_date()-1\n            else last_day(first_day, month) end as last_day\n    from joined_data\n\n),\n\ndate_vars as (\n\n    select\n        *,\n        date_diff(last_day(first_day), first_day, day) as nr_days_total,\n        date_diff(last_day, first_day, day) as nr_days_current\n    from new_vars\n\n),\n\ndays_factor_added as (\n\n    select\n        *,\n        nr_days_current/nr_days_total as days_factor\n    from date_vars\n\n)\n\nselect\n    *,\n    (order_value_soll * order_share_ga) * days_factor as order_value_soll_ga_corrected,\n    ((order_value_soll * order_share_ga ) * kur_soll) * days_factor as perf_cost_soll\nfrom days_factor_added", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`budget_plan_target_metrics`"}, "model.sql_repository_bz.budget_plan_planned_input": {"raw_sql": "with budgetplan_soll as (\r\n    select \r\n        country_soll,\r\n        month_soll,\r\n        order_value_soll_overall\r\n    from {{ ref('stg_gsheets_order_value_planned') }}\r\n),\r\n\r\nchannel_soll as (\r\n    select \r\n        country_sollc,\r\n        channel_soll,\r\n        order_value_channel_share_soll,\r\n        kur_soll\r\n    from {{ ref('stg_gsheets_channel_shares_planned') }}\r\n),\r\n\r\njoined_data as (\r\n    select * except (country_sollc)\r\n    from budgetplan_soll as bs\r\n    left join channel_soll as cs\r\n        on bs.country_soll = cs.country_sollc\r\n)\r\n\r\nselect \r\n    *,\r\n    order_value_soll_overall *  order_value_channel_share_soll as order_value_soll\r\nfrom joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_gsheets_order_value_planned", "model.sql_repository_bz.stg_gsheets_channel_shares_planned"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "budget_planning", "budget_plan_planned_input"], "unique_id": "model.sql_repository_bz.budget_plan_planned_input", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/budget_planning/budget_plan_planned_input.sql", "original_file_path": "models/03_marts/sea_analytics/budget_planning/budget_plan_planned_input.sql", "name": "budget_plan_planned_input", "alias": "budget_plan_planned_input", "checksum": {"name": "sha256", "checksum": "32142316e15b056654e1897eb5fd25c54598c5cd2028b572ec12645071dbfd54"}, "tags": [], "refs": [["stg_gsheets_order_value_planned"], ["stg_gsheets_channel_shares_planned"]], "sources": [], "description": "this model combindes planned values from google sheets", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/sea_analytics/budget_planning/_models_soll_ist.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/budget_planning/budget_plan_planned_input.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750853.817157, "compiled_sql": "with budgetplan_soll as (\n    select \n        country_soll,\n        month_soll,\n        order_value_soll_overall\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_order_value_planned`\n),\n\nchannel_soll as (\n    select \n        country_sollc,\n        channel_soll,\n        order_value_channel_share_soll,\n        kur_soll\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_channel_shares_planned`\n),\n\njoined_data as (\n    select * except (country_sollc)\n    from budgetplan_soll as bs\n    left join channel_soll as cs\n        on bs.country_soll = cs.country_sollc\n)\n\nselect \n    *,\n    order_value_soll_overall *  order_value_channel_share_soll as order_value_soll\nfrom joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`budget_plan_planned_input`"}, "model.sql_repository_bz.budget_plan_output_metrics": {"raw_sql": "with soll_part as (\r\n\r\n    select\r\n        country_soll,\r\n        month_soll,\r\n        channel_soll,\r\n        order_value_soll_ga_corrected as order_value_plan,\r\n        perf_cost_soll as perf_cost_plan,\r\n        kur_soll*100 as kur_plan\r\n    from {{ ref('budget_plan_target_metrics') }}\r\n\r\n),\r\n\r\nist_part as (\r\n    \r\n    select\r\n        country_grouped,\r\n        year_month,\r\n        acquisition_channel,\r\n        ga_order_value_markov_corrected as order_value_ist,\r\n        sum_gads_cost as perf_cost_ist,\r\n        kur_ist\r\n    from {{ ref('budget_plan_actual_metrics') }}\r\n\r\n),\r\n\r\njoined_data as (\r\n\r\n    select * except (country_soll, month_soll, channel_soll)\r\n    from ist_part\r\n    left join soll_part\r\n        on ist_part.country_grouped = soll_part.country_soll\r\n        and ist_part.year_month = soll_part.month_soll\r\n        and ist_part.acquisition_channel = soll_part.channel_soll\r\n)\r\n\r\nselect\r\n    country_grouped,\r\n    year_month,\r\n    acquisition_channel,\r\n    order_value_plan,\r\n    order_value_ist,\r\n    -(1-(order_value_ist/order_value_plan)) as order_value_diff,\r\n    perf_cost_plan,\r\n    perf_cost_ist,\r\n    -(1-(perf_cost_ist/perf_cost_plan)) as perf_cost_diff,\r\n    kur_plan,\r\n    kur_ist,\r\n    -(1-(kur_ist/kur_plan)) as kur_diff\r\nfrom joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.budget_plan_target_metrics", "model.sql_repository_bz.budget_plan_actual_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "budget_planning", "budget_plan_output_metrics"], "unique_id": "model.sql_repository_bz.budget_plan_output_metrics", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/budget_planning/budget_plan_output_metrics.sql", "original_file_path": "models/03_marts/sea_analytics/budget_planning/budget_plan_output_metrics.sql", "name": "budget_plan_output_metrics", "alias": "budget_plan_output_metrics", "checksum": {"name": "sha256", "checksum": "fc832175a6ffb6d53d3349d01fff010443072d5ed7ab9ad5038cf59d7dcc11a2"}, "tags": [], "refs": [["budget_plan_target_metrics"], ["budget_plan_actual_metrics"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/budget_planning/budget_plan_output_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750848.710712, "compiled_sql": "with soll_part as (\n\n    select\n        country_soll,\n        month_soll,\n        channel_soll,\n        order_value_soll_ga_corrected as order_value_plan,\n        perf_cost_soll as perf_cost_plan,\n        kur_soll*100 as kur_plan\n    from `bergzeit`.`dbt_sea_analytics`.`budget_plan_target_metrics`\n\n),\n\nist_part as (\n    \n    select\n        country_grouped,\n        year_month,\n        acquisition_channel,\n        ga_order_value_markov_corrected as order_value_ist,\n        sum_gads_cost as perf_cost_ist,\n        kur_ist\n    from `bergzeit`.`dbt_sea_analytics`.`budget_plan_actual_metrics`\n\n),\n\njoined_data as (\n\n    select * except (country_soll, month_soll, channel_soll)\n    from ist_part\n    left join soll_part\n        on ist_part.country_grouped = soll_part.country_soll\n        and ist_part.year_month = soll_part.month_soll\n        and ist_part.acquisition_channel = soll_part.channel_soll\n)\n\nselect\n    country_grouped,\n    year_month,\n    acquisition_channel,\n    order_value_plan,\n    order_value_ist,\n    -(1-(order_value_ist/order_value_plan)) as order_value_diff,\n    perf_cost_plan,\n    perf_cost_ist,\n    -(1-(perf_cost_ist/perf_cost_plan)) as perf_cost_diff,\n    kur_plan,\n    kur_ist,\n    -(1-(kur_ist/kur_plan)) as kur_diff\nfrom joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`budget_plan_output_metrics`"}, "model.sql_repository_bz.budget_plan_daily_adcost_validation": {"raw_sql": "select * from {{ ref('int_ga_performance_cost_daily_validation') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_performance_cost_daily_validation"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "budget_planning", "budget_plan_daily_adcost_validation"], "unique_id": "model.sql_repository_bz.budget_plan_daily_adcost_validation", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/budget_planning/budget_plan_daily_adcost_validation.sql", "original_file_path": "models/03_marts/sea_analytics/budget_planning/budget_plan_daily_adcost_validation.sql", "name": "budget_plan_daily_adcost_validation", "alias": "budget_plan_daily_adcost_validation", "checksum": {"name": "sha256", "checksum": "6b2035e8f9b8eb6fc0a8fe920a880b3e05e9c4e94519bb55cfbf9a1a7b63db32"}, "tags": [], "refs": [["int_ga_performance_cost_daily_validation"]], "sources": [], "description": "this model calculates the difference between the daily adcost export from the analytics api and the adcost data stored in BQ", "columns": {}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/sea_analytics/budget_planning/_models_soll_ist.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/budget_planning/budget_plan_daily_adcost_validation.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750853.8277533, "compiled_sql": "select * from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_performance_cost_daily_validation`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`budget_plan_daily_adcost_validation`"}, "model.sql_repository_bz.gads_ads_for_url_check": {"raw_sql": "/* Grouped by url per adgroup to reduce number of urls */ \r\nwith ads_for_url_check as (\r\n\r\n    select\r\n        account,\r\n        account_id,\r\n        campaign_id,\r\n        campaign_name,\r\n        campaign_status,\r\n        adgroup_id,\r\n        adgroup_name,\r\n        adgroup_status,\r\n        ad_type,\r\n        final_url,\r\n        split(final_url, '/')[safe_offset(3)] as final_url_slug,\r\n        /* Normalize all DACH URLs to DE to avoid duplicate crawling */\r\n        case\r\n            when final_url like '%/search/%' then concat('https://www.bergzeit.de/search', split(final_url, '/search')[safe_offset(1)])\r\n            else concat('https://www.bergzeit.de/', split(final_url, '/')[safe_offset(3)])\r\n        end as final_url_de_normalized,\r\n        case\r\n            when final_url like '%/search/%' then 'search'\r\n            else 'category'\r\n        end as url_type,\t\t\t\r\n        sum(Impressions) as impressions,\r\n        sum(Clicks) as clicks,\r\n        round(safe_divide(sum(clicks),sum(impressions)),4) as ctr,\r\n        sum(Conversions) as conversions\r\n    from {{ ref('int_gads_de_adstats_and_attributes') }}\r\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\r\n\r\n),\r\n\r\nfeed_adgroups as (\r\n\r\n    select target_ad_group as target_ad_group_feed\r\n    from {{ ref('int_gads_all_feedadgroups') }}\r\n\r\n),\r\n\r\n/* Ads from feed adgroups are removed because the adgroup state is synchronized by the product feed */\r\nads_to_check_without_feed_adgroups as (\r\n\r\n    select *\r\n    from ads_for_url_check as ads\r\n    left join feed_adgroups as feed on\r\n        ads.adgroup_name = feed.target_ad_group_feed\r\n    where target_ad_group_feed is null\r\n\r\n)\r\n\r\nselect * from ads_to_check_without_feed_adgroups", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gads_de_adstats_and_attributes", "model.sql_repository_bz.int_gads_all_feedadgroups"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "link_checker", "gads_ads_for_url_check"], "unique_id": "model.sql_repository_bz.gads_ads_for_url_check", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/link_checker/gads_ads_for_url_check.sql", "original_file_path": "models/03_marts/sea_analytics/link_checker/gads_ads_for_url_check.sql", "name": "gads_ads_for_url_check", "alias": "gads_ads_for_url_check", "checksum": {"name": "sha256", "checksum": "e35f83ca6842f7d6f4d4c823d815d64db967a25b8094c5f5a7ef862886d88a9a"}, "tags": [], "refs": [["int_gads_de_adstats_and_attributes"], ["int_gads_all_feedadgroups"]], "sources": [], "description": "this model prepares a list of all relevant ads to checkly weekly by a Python link checker", "columns": {"final_url": {"name": "final_url", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/sea_analytics/link_checker/_models_sea_link_checker.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/link_checker/gads_ads_for_url_check.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750853.840382, "compiled_sql": "/* Grouped by url per adgroup to reduce number of urls */ \nwith ads_for_url_check as (\n\n    select\n        account,\n        account_id,\n        campaign_id,\n        campaign_name,\n        campaign_status,\n        adgroup_id,\n        adgroup_name,\n        adgroup_status,\n        ad_type,\n        final_url,\n        split(final_url, '/')[safe_offset(3)] as final_url_slug,\n        /* Normalize all DACH URLs to DE to avoid duplicate crawling */\n        case\n            when final_url like '%/search/%' then concat('https://www.bergzeit.de/search', split(final_url, '/search')[safe_offset(1)])\n            else concat('https://www.bergzeit.de/', split(final_url, '/')[safe_offset(3)])\n        end as final_url_de_normalized,\n        case\n            when final_url like '%/search/%' then 'search'\n            else 'category'\n        end as url_type,\t\t\t\n        sum(Impressions) as impressions,\n        sum(Clicks) as clicks,\n        round(safe_divide(sum(clicks),sum(impressions)),4) as ctr,\n        sum(Conversions) as conversions\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gads_de_adstats_and_attributes`\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n\n),\n\nfeed_adgroups as (\n\n    select target_ad_group as target_ad_group_feed\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gads_all_feedadgroups`\n\n),\n\n/* Ads from feed adgroups are removed because the adgroup state is synchronized by the product feed */\nads_to_check_without_feed_adgroups as (\n\n    select *\n    from ads_for_url_check as ads\n    left join feed_adgroups as feed on\n        ads.adgroup_name = feed.target_ad_group_feed\n    where target_ad_group_feed is null\n\n)\n\nselect * from ads_to_check_without_feed_adgroups", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`gads_ads_for_url_check`"}, "model.sql_repository_bz.gads_crawled_urls_with_status": {"raw_sql": "with crawled_urls_with_status as (\r\n\r\n    select * \r\n    from {{ref('int_gads_all_crawled_ads_urls_classified')}}\r\n    -- filter URLs that contain errors or a result count of only 1\r\n    where result_type != 'Erfolg' or result_count = '1'\r\n\r\n)\r\n\r\nselect * from crawled_urls_with_status", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gads_all_crawled_ads_urls_classified"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "link_checker", "gads_crawled_urls_with_status"], "unique_id": "model.sql_repository_bz.gads_crawled_urls_with_status", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/link_checker/gads_crawled_urls_with_status.sql", "original_file_path": "models/03_marts/sea_analytics/link_checker/gads_crawled_urls_with_status.sql", "name": "gads_crawled_urls_with_status", "alias": "gads_crawled_urls_with_status", "checksum": {"name": "sha256", "checksum": "767d9b1ad09457ff68dbc0c72f28d5a0c3868491955056f1bef34d3699cb9251"}, "tags": [], "refs": [["int_gads_all_crawled_ads_urls_classified"]], "sources": [], "description": "this model lists all urls crawled by the Python link checker with relevant crawl information", "columns": {"final_url": {"name": "final_url", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/sea_analytics/link_checker/_models_sea_link_checker.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/link_checker/gads_crawled_urls_with_status.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750853.8424416, "compiled_sql": "with crawled_urls_with_status as (\n\n    select * \n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gads_all_crawled_ads_urls_classified`\n    -- filter URLs that contain errors or a result count of only 1\n    where result_type != 'Erfolg' or result_count = '1'\n\n)\n\nselect * from crawled_urls_with_status", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`gads_crawled_urls_with_status`"}, "model.sql_repository_bz.gads_adstats_and_attributes": {"raw_sql": "with gads_adstats_and_attributes as (\r\n\r\n    select {{ dbt_utils.star(ref('int_gads_de_adstats_and_attributes')) }}\r\n    from {{ ref('int_gads_de_adstats_and_attributes') }}\r\n\r\n)\r\n\r\nselect * from gads_adstats_and_attributes", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.sql_repository_bz.int_gads_de_adstats_and_attributes", "model.sql_repository_bz.int_gads_de_adstats_and_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "feed_campaign_input", "gads_adstats_and_attributes"], "unique_id": "model.sql_repository_bz.gads_adstats_and_attributes", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/feed_campaign_input/gads_adstats_and_attributes.sql", "original_file_path": "models/03_marts/sea_analytics/feed_campaign_input/gads_adstats_and_attributes.sql", "name": "gads_adstats_and_attributes", "alias": "gads_adstats_and_attributes", "checksum": {"name": "sha256", "checksum": "3aafdff5bcc070f53a2999579352a9398b7a6dcbbe8062a8061799b66f45fc08"}, "tags": [], "refs": [["int_gads_de_adstats_and_attributes"], ["int_gads_de_adstats_and_attributes"]], "sources": [], "description": "this model combines all structural ad group information (names, IDs, status) and performance data of the defined period", "columns": {"adgroup_id": {"name": "adgroup_id", "description": "the id of the adgroup", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/sea_analytics/feed_campaign_input/_models_sea_feed_campaign_input.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/feed_campaign_input/gads_adstats_and_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750853.854259, "compiled_sql": "with gads_adstats_and_attributes as (\n\n    select \n\n    `adgroup_id`,\n  `campaign_id`,\n  `creative_id`,\n  `account`,\n  `account_id`,\n  `impressions`,\n  `clicks`,\n  `ctr`,\n  `conversions`,\n  `ad_type`,\n  `final_url`,\n  `ad_status`,\n  `campaign_name`,\n  `campaign_status`,\n  `adgroup_name`,\n  `adgroup_status`\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gads_de_adstats_and_attributes`\n\n)\n\nselect * from gads_adstats_and_attributes", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`gads_adstats_and_attributes`"}, "model.sql_repository_bz.gads_backfill_consentless_transactions": {"raw_sql": "with consentless_data as (\r\n    \r\n    select \r\n        date,\r\n        date_time,\r\n        session_id,\r\n        concat('https://', host) as host,\r\n        gclid,\r\n        consentPurpose_cc4,\r\n        transaction_id,\r\n        transaction_value,\r\n        transaction_currency\r\n    from {{ ref('stg_consentless_transactions') }}\r\n    /* only identify load yesterday's missing conversions */\r\n    where date between {{ get_last_n_days_date_range(1) }}\r\n\r\n),\r\n\r\nga_data as (\r\n\r\n    select {{ dbt_utils.star(ref('stg_ga_transactions_conversion_backfill')) }} \r\n    from {{ ref('stg_ga_transactions_conversion_backfill') }}\r\n    where ga_date between {{ get_last_n_days_date_range(1) }}\r\n\r\n),\r\n\r\nall_data as (\r\n\r\n    select * \r\n    from consentless_data as consentless\r\n    full outer join ga_data as ga on \r\n        consentless.date = ga.ga_date\r\n        and consentless.transaction_id = ga.ga_transaction_id\r\n    where \r\n        /* es gibt noch F\u00e4lle f\u00fcr die eine ga_transaction_id vorhanden ist, \r\n           aber die ga_gclid null ist, die sind \r\n           \u00fcber das aktuelle where statement raus genommen */\r\n        gclid is not null\r\n        and ga_transaction_id is null\r\n\r\n),\r\n\r\nconversion_upload_format as (\r\n\r\n    select\r\n        gclid as google_click_id,\r\n        case\r\n            when host = 'https://www.bergzeit.at' then 'Sale_PB_AT_Import' \r\n            when host = 'https://www.bergzeit.nl' then 'Sale_PB_NL_Import'\r\n            when host = 'https://www.bergzeit.it' then 'Sale_PB_IT_Import'\r\n            when host = 'https://www.bergzeit.co.uk' then 'Sale_PB_UK_Import'\r\n            when host = 'https://www.bergzeit.de' then 'Sale_DE_Import'\r\n            when host = 'https://www.bergzeit.ch' then 'Sale_CH_Import' \r\n            else 'Sale__Import'\r\n        end as conversion_name,\r\n\r\n        /* convert to specific timestamp format: https://support.google.com/google-ads/answer/7014069#prepare_data */\r\n        replace(\r\n            cast(timestamp_trunc(TIMESTAMP(date_time), minute, \"Europe/Berlin\") as string), \r\n            '+00', \r\n            ' Europe/Berlin'\r\n        ) as conversion_time,\r\n\r\n        /* hard coded profit bidding adjustment to enable faster conversion import prototyping (tbd)\r\n           values found here: https://tagmanager.google.com/#/container/accounts/39724/containers/55380496/workspaces/19/variables */\r\n        case\r\n            when host = 'https://www.bergzeit.at' then transaction_value * 0.5\r\n            when host = 'https://www.bergzeit.nl' then transaction_value * 0.32\r\n            when host = 'https://www.bergzeit.co.uk' then transaction_value * 0.46\r\n            when host = 'https://www.bergzeit.it' then transaction_value * 0.4\r\n            else transaction_value\r\n        end as conversion_value,\r\n        transaction_currency as conversion_currency\r\n    from all_data\r\n\r\n),\r\n\r\n/* For countries not yet migrated to profit bidding, import conversions are added as regular and import conversions */\r\nconversions_duplicated_for_profit_bidding as (\r\n\r\n    select \r\n        google_click_id,\r\n\r\n        /* replace regular import name with profit bidding import name */\r\n        case\r\n            when conversion_name = 'Sale_DE_Import' then 'Sale_PB_DE_Import'\r\n            when conversion_name = 'Sale_CH_Import' then 'Sale_PB_CH_Import'\r\n            when conversion_name = 'Sale__Import' then 'Sale_PB__Import'\r\n        end as conversion_name,\r\n        conversion_time,\r\n\r\n        /* adjust regular order value with average profit bidding adjusment */\r\n        case\r\n            when conversion_name = 'Sale_DE_Import' then conversion_value * 0.46\r\n            when conversion_name = 'Sale_CH_Import' then conversion_value * 0.45\r\n            else conversion_value * 0.32\r\n        end as conversion_value,\r\n        conversion_currency\r\n    from conversion_upload_format\r\n    where conversion_name not like '%_PB_%'\r\n\r\n),\r\n\r\n/* Add duplicate profit bidding import conversions for accounts yet to be transitioned */\r\nfinal_conversions_combined as (\r\n\r\n    select * \r\n    from conversion_upload_format\r\n\r\n    union all\r\n\r\n    select * \r\n    from conversions_duplicated_for_profit_bidding\r\n\r\n)\r\n\r\nselect * from final_conversions_combined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range", "macro.dbt_utils.star"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions", "model.sql_repository_bz.stg_ga_transactions_conversion_backfill", "model.sql_repository_bz.stg_ga_transactions_conversion_backfill"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "gads_backfill_consentless_transactions"], "unique_id": "model.sql_repository_bz.gads_backfill_consentless_transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/conversion_backfill/gads_backfill_consentless_transactions.sql", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/gads_backfill_consentless_transactions.sql", "name": "gads_backfill_consentless_transactions", "alias": "gads_backfill_consentless_transactions", "checksum": {"name": "sha256", "checksum": "e1a9483b43cb74cc5801d643c83c6afc9b1f0a114ff3a9f8d3609273f86e4864"}, "tags": [], "refs": [["stg_consentless_transactions"], ["stg_ga_transactions_conversion_backfill"], ["stg_ga_transactions_conversion_backfill"]], "sources": [], "description": "### Description\r\n\r\nAll consentless transactions with a gclid that were not found in the GA transactions are pushed to Google Ads via daily conversion import\r\n\r\n### What happens after dbt? Final data product and process from marts table\r\n\r\n* A [pubsub subscription](https://console.cloud.google.com/cloudpubsub/topic/detail/run-dbt-job?project=bergzeit) waits for the GA daily session table to be updated \r\n* This triggers a [cloud function](https://console.cloud.google.com/functions/details/europe-west3/write_table_to_csv_conv_backfill?env=gen1&project=bergzeit) which creates the export csv file in Cloud Storage\r\n* The [cloud storage file](https://console.cloud.google.com/storage/browser/bz_all_conversion_import;tab=objects?forceOnBucketsSortingFiltering=false&project=adsdataprediction&prefix=&forceOnObjectsSortingFiltering=false) is fetched from a [Google Ads Import schedule](https://ads.google.com/aw/conversions/uploads?ocid=100612924&euid=104065204&__u=5886578196&uscid=100612924&__c=2650192476&authuser=0&subid=de-de-et-g-aw-c-home-awhp_xin1_signin%21o2-awhp-hv-01-22)\r\n* The result of imported conversions can be seen in the [Google Ads Conversion Import summary](https://ads.google.com/aw/conversions?ocid=100612924&euid=104065204&__u=5886578196&uscid=100612924&__c=2650192476&authuser=0&subid=de-de-et-g-aw-c-home-awhp_xin1_signin%21o2-awhp-hv-01-22)\r\n\r\n### How oversees the data product and how? \r\n\r\nChristopher Gutknecht. \r\n* The daily GA table update is monitored with a dbt job message in teams\r\n* The marts table has several data quality test that would alert to teams before the import runs \r\n\r\n### Is there a visual flow chart for the entire data pipeline\r\n\r\nSee the [Confluence flow chart](https://bergzeit.atlassian.net/wiki/spaces/IPIM/pages/4067721274/Google+Ads+Import+fehlender+Conversions) in MEAS\r\n\r\n### Which branch and ticket does the feature refer to?\r\n\r\n[MEAS-367](https://bergzeit.atlassian.net/browse/MEAS-367)\r\n\r\n### Which further test coverage exists beyond dbt?\r\n\r\nNo.", "columns": {"conversion_name": {"name": "conversion_name", "description": "the MCC conversion name based on the setup in Google Ads", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion_value": {"name": "conversion_value", "description": "the net order value assigned to the google click id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "google_click_id": {"name": "google_click_id", "description": "the google click id fetched from the consentless transaction, compared against GA session data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion_time": {"name": "conversion_time", "description": "the timestamp based on the consentless transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/conversion_backfill/gads_backfill_consentless_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750853.8801033, "compiled_sql": "with consentless_data as (\n    \n    select \n        date,\n        date_time,\n        session_id,\n        concat('https://', host) as host,\n        gclid,\n        consentPurpose_cc4,\n        transaction_id,\n        transaction_value,\n        transaction_currency\n    from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions`\n    /* only identify load yesterday's missing conversions */\n    where date between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\nga_data as (\n\n    select \n\n    `ga_date`,\n  `ga_session_id`,\n  `ga_fullvisitor_id`,\n  `ga_hostname`,\n  `ga_gclid`,\n  `ga_acquisition_channel`,\n  `ga_campaign`,\n  `ga_device_category`,\n  `ga_transaction_id`,\n  `ga_transaction_revenue`,\n  `ga_transaction_tax`,\n  `ga_transaction_shipping` \n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions_conversion_backfill`\n    where ga_date between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\nall_data as (\n\n    select * \n    from consentless_data as consentless\n    full outer join ga_data as ga on \n        consentless.date = ga.ga_date\n        and consentless.transaction_id = ga.ga_transaction_id\n    where \n        /* es gibt noch F\u00e4lle f\u00fcr die eine ga_transaction_id vorhanden ist, \n           aber die ga_gclid null ist, die sind \n           \u00fcber das aktuelle where statement raus genommen */\n        gclid is not null\n        and ga_transaction_id is null\n\n),\n\nconversion_upload_format as (\n\n    select\n        gclid as google_click_id,\n        case\n            when host = 'https://www.bergzeit.at' then 'Sale_PB_AT_Import' \n            when host = 'https://www.bergzeit.nl' then 'Sale_PB_NL_Import'\n            when host = 'https://www.bergzeit.it' then 'Sale_PB_IT_Import'\n            when host = 'https://www.bergzeit.co.uk' then 'Sale_PB_UK_Import'\n            when host = 'https://www.bergzeit.de' then 'Sale_DE_Import'\n            when host = 'https://www.bergzeit.ch' then 'Sale_CH_Import' \n            else 'Sale__Import'\n        end as conversion_name,\n\n        /* convert to specific timestamp format: https://support.google.com/google-ads/answer/7014069#prepare_data */\n        replace(\n            cast(timestamp_trunc(TIMESTAMP(date_time), minute, \"Europe/Berlin\") as string), \n            '+00', \n            ' Europe/Berlin'\n        ) as conversion_time,\n\n        /* hard coded profit bidding adjustment to enable faster conversion import prototyping (tbd)\n           values found here: https://tagmanager.google.com/#/container/accounts/39724/containers/55380496/workspaces/19/variables */\n        case\n            when host = 'https://www.bergzeit.at' then transaction_value * 0.5\n            when host = 'https://www.bergzeit.nl' then transaction_value * 0.32\n            when host = 'https://www.bergzeit.co.uk' then transaction_value * 0.46\n            when host = 'https://www.bergzeit.it' then transaction_value * 0.4\n            else transaction_value\n        end as conversion_value,\n        transaction_currency as conversion_currency\n    from all_data\n\n),\n\n/* For countries not yet migrated to profit bidding, import conversions are added as regular and import conversions */\nconversions_duplicated_for_profit_bidding as (\n\n    select \n        google_click_id,\n\n        /* replace regular import name with profit bidding import name */\n        case\n            when conversion_name = 'Sale_DE_Import' then 'Sale_PB_DE_Import'\n            when conversion_name = 'Sale_CH_Import' then 'Sale_PB_CH_Import'\n            when conversion_name = 'Sale__Import' then 'Sale_PB__Import'\n        end as conversion_name,\n        conversion_time,\n\n        /* adjust regular order value with average profit bidding adjusment */\n        case\n            when conversion_name = 'Sale_DE_Import' then conversion_value * 0.46\n            when conversion_name = 'Sale_CH_Import' then conversion_value * 0.45\n            else conversion_value * 0.32\n        end as conversion_value,\n        conversion_currency\n    from conversion_upload_format\n    where conversion_name not like '%_PB_%'\n\n),\n\n/* Add duplicate profit bidding import conversions for accounts yet to be transitioned */\nfinal_conversions_combined as (\n\n    select * \n    from conversion_upload_format\n\n    union all\n\n    select * \n    from conversions_duplicated_for_profit_bidding\n\n)\n\nselect * from final_conversions_combined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`gads_backfill_consentless_transactions`"}, "model.sql_repository_bz.gads_channel_pilot_feeds_with_errors": {"raw_sql": "with channelpilot_feeds_with_errors as (\r\n\r\n    select * \r\n    from {{ ref('int_cp_source_feeds_with_errors') }}\r\n\r\n)\r\n\r\nselect * from channelpilot_feeds_with_errors", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_cp_source_feeds_with_errors"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "feed_hygiene", "gads_channel_pilot_feeds_with_errors"], "unique_id": "model.sql_repository_bz.gads_channel_pilot_feeds_with_errors", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/feed_hygiene/gads_channel_pilot_feeds_with_errors.sql", "original_file_path": "models/03_marts/sea_analytics/feed_hygiene/gads_channel_pilot_feeds_with_errors.sql", "name": "gads_channel_pilot_feeds_with_errors", "alias": "gads_channel_pilot_feeds_with_errors", "checksum": {"name": "sha256", "checksum": "393f51decbce17617197bab59b7777b51aa1a068f77d810518c947b6ba3b2571"}, "tags": [], "refs": [["int_cp_source_feeds_with_errors"]], "sources": [], "description": "this model lists all channelpilot feed hygiene errors", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/sea_analytics/feed_hygiene/_models_sea_feed_hygiene.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/feed_hygiene/gads_channel_pilot_feeds_with_errors.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750853.9651034, "compiled_sql": "with channelpilot_feeds_with_errors as (\n\n    select * \n    from `bergzeit`.`dbt_analytics_intermediate`.`int_cp_source_feeds_with_errors`\n\n)\n\nselect * from channelpilot_feeds_with_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`gads_channel_pilot_feeds_with_errors`"}, "model.sql_repository_bz.gmc_missing_brands_per_country": {"raw_sql": "with missing_product_groups as (\r\n\r\n    select\r\n        country,\r\n        brand\r\n    from {{ ref('int_gmc_missing_product_groups') }}\r\n    /* removed DK as it has no smart shopping campaigns and no product partitions */ \r\n    where country != 'dk'\r\n    \r\n),\r\n\r\n/* fetch only the campaign and adgroup names, to be matched to new product groups */\r\nexisting_campaigns_and_adgroups as (\r\n\r\n    select distinct\r\n        country as c_country, \r\n        account_id,\r\n        campaign_name,\r\n        adgroup_name\r\n    from {{ ref('int_gads_all_shopping_criteria') }}\r\n\r\n),\r\n\r\n/* match acount_id, campaign and adgroup to new product groups */\r\nmissing_product_groups_with_campaign_info as (\r\n\r\n    select *\r\n    from missing_product_groups as products\r\n    left join existing_campaigns_and_adgroups as camps on\r\n        products.country = camps.c_country\r\n\r\n), \r\n\r\n-- convert to Google Ads upload format (except spaces in columns)\r\nfinal_upload_list as (\r\n\r\n    select\r\n        country,\r\n        account_id,\r\n        'ADD' as Action,\r\n        campaign_name as Campaign_Name,\r\n        adgroup_name as Adgroup_Name,\r\n        0.01 as max_cpc,\r\n        'UNIT' as partition_type,\r\n        concat('* / brand = \"', brand, '\"') as product_group\r\n    from missing_product_groups_with_campaign_info\r\n    order by brand, country\r\n\r\n)\r\n\r\nselect * from final_upload_list", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gmc_missing_product_groups", "model.sql_repository_bz.int_gads_all_shopping_criteria"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "smart_shopping_refresher", "gmc_missing_brands_per_country"], "unique_id": "model.sql_repository_bz.gmc_missing_brands_per_country", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/smart_shopping_refresher/gmc_missing_brands_per_country.sql", "original_file_path": "models/03_marts/sea_analytics/smart_shopping_refresher/gmc_missing_brands_per_country.sql", "name": "gmc_missing_brands_per_country", "alias": "gmc_missing_brands_per_country", "checksum": {"name": "sha256", "checksum": "0bc3eabada776bf73393d53878df15b52a71451de6628e62c4f873b251163d39"}, "tags": [], "refs": [["int_gmc_missing_product_groups"], ["int_gads_all_shopping_criteria"]], "sources": [], "description": "This table detects all brands missing in smart shopping as product groups", "columns": {"country": {"name": "country", "description": "The two-letter country of the performance account, e.g. de, at etc", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The numeric ic of the Google Ads account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "The name of the smart shopping campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_group": {"name": "product_group", "description": "The name of product group in the form \"* / brand = value\"", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/sea_analytics/smart_shopping_refresher/_models_smart_sho_refresh.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/smart_shopping_refresher/gmc_missing_brands_per_country.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750853.9697156, "compiled_sql": "with missing_product_groups as (\n\n    select\n        country,\n        brand\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_missing_product_groups`\n    /* removed DK as it has no smart shopping campaigns and no product partitions */ \n    where country != 'dk'\n    \n),\n\n/* fetch only the campaign and adgroup names, to be matched to new product groups */\nexisting_campaigns_and_adgroups as (\n\n    select distinct\n        country as c_country, \n        account_id,\n        campaign_name,\n        adgroup_name\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gads_all_shopping_criteria`\n\n),\n\n/* match acount_id, campaign and adgroup to new product groups */\nmissing_product_groups_with_campaign_info as (\n\n    select *\n    from missing_product_groups as products\n    left join existing_campaigns_and_adgroups as camps on\n        products.country = camps.c_country\n\n), \n\n-- convert to Google Ads upload format (except spaces in columns)\nfinal_upload_list as (\n\n    select\n        country,\n        account_id,\n        'ADD' as Action,\n        campaign_name as Campaign_Name,\n        adgroup_name as Adgroup_Name,\n        0.01 as max_cpc,\n        'UNIT' as partition_type,\n        concat('* / brand = \"', brand, '\"') as product_group\n    from missing_product_groups_with_campaign_info\n    order by brand, country\n\n)\n\nselect * from final_upload_list", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`gmc_missing_brands_per_country`"}, "model.sql_repository_bz.gads_all_cost_by_brand": {"raw_sql": "with dynamic_campaign_cost_by_brand as (\r\n\r\n    select\r\n        date,\r\n        account,\r\n        account_id,\r\n        'search' as campaign_type,\r\n        brand,\r\n        device,\r\n        impressions,\r\n        clicks,\r\n        cost,\r\n        conversions\r\n    from {{ ref('int_gads_all_dynamic_query_cost_by_brand') }}\r\n\r\n), \r\n\r\nshopping_cost_by_brand as (\r\n\r\n    select\r\n        date,\r\n        account,\r\n        account_id,\r\n        'shopping' as campaign_type,\r\n        brand,\r\n        device,\r\n        impressions,\r\n        clicks,\r\n        cost,\r\n        conversions\r\n    from {{ ref('int_gads_all_product_stats_by_brand') }}\r\n\r\n),\r\n\r\nsearch_cost_by_brand as (\r\n\r\n    select\r\n        date,\r\n        account,\r\n        account_id,\r\n        'search' as campaign_type,\r\n        brand,\r\n        device,\r\n        impressions,\r\n        clicks,\r\n        cost,\r\n        conversions\r\n    from {{ ref('int_gads_campaign_stats_by_brand') }}\r\n), \r\n\r\ncombined_cost_by_brand as (\r\n\r\n    -- all costs from DSA and SQA campaigns\r\n    select * from dynamic_campaign_cost_by_brand\r\n\r\n    union all\r\n\r\n    -- all costs from shopping products, using the brand attribute\r\n    select * from shopping_cost_by_brand\r\n\r\n    union all\r\n    \r\n    -- all costs from manufacturer search campaigns\r\n    select * from search_cost_by_brand\r\n\r\n)\r\n\r\nselect *\r\nfrom combined_cost_by_brand\r\nwhere brand is not null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gads_all_dynamic_query_cost_by_brand", "model.sql_repository_bz.int_gads_all_product_stats_by_brand", "model.sql_repository_bz.int_gads_campaign_stats_by_brand"]}, "config": {"enabled": true, "alias": null, "schema": "sea_analytics", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_sea_analytics", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "manufacturer_reports", "gads_all_cost_by_brand"], "unique_id": "model.sql_repository_bz.gads_all_cost_by_brand", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/manufacturer_reports/gads_all_cost_by_brand.sql", "original_file_path": "models/03_marts/sea_analytics/manufacturer_reports/gads_all_cost_by_brand.sql", "name": "gads_all_cost_by_brand", "alias": "gads_all_cost_by_brand", "checksum": {"name": "sha256", "checksum": "1d569deb7e18add19844f9cc41082da3c5946d7c7ade3fed36fa94416296897e"}, "tags": [], "refs": [["int_gads_all_dynamic_query_cost_by_brand"], ["int_gads_all_product_stats_by_brand"], ["int_gads_campaign_stats_by_brand"]], "sources": [], "description": "this view combines search and shopping cost by brand", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/sea_analytics/manufacturer_reports/_models_sea_manufacturer_reports.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/manufacturer_reports/gads_all_cost_by_brand.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "sea_analytics", "materialized": "view"}, "created_at": 1663750854.007415, "compiled_sql": "with dynamic_campaign_cost_by_brand as (\n\n    select\n        date,\n        account,\n        account_id,\n        'search' as campaign_type,\n        brand,\n        device,\n        impressions,\n        clicks,\n        cost,\n        conversions\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gads_all_dynamic_query_cost_by_brand`\n\n), \n\nshopping_cost_by_brand as (\n\n    select\n        date,\n        account,\n        account_id,\n        'shopping' as campaign_type,\n        brand,\n        device,\n        impressions,\n        clicks,\n        cost,\n        conversions\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gads_all_product_stats_by_brand`\n\n),\n\nsearch_cost_by_brand as (\n\n    select\n        date,\n        account,\n        account_id,\n        'search' as campaign_type,\n        brand,\n        device,\n        impressions,\n        clicks,\n        cost,\n        conversions\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gads_campaign_stats_by_brand`\n), \n\ncombined_cost_by_brand as (\n\n    -- all costs from DSA and SQA campaigns\n    select * from dynamic_campaign_cost_by_brand\n\n    union all\n\n    -- all costs from shopping products, using the brand attribute\n    select * from shopping_cost_by_brand\n\n    union all\n    \n    -- all costs from manufacturer search campaigns\n    select * from search_cost_by_brand\n\n)\n\nselect *\nfrom combined_cost_by_brand\nwhere brand is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_sea_analytics`.`gads_all_cost_by_brand`"}, "model.sql_repository_bz.awin_transactions_pending_with_returns": {"raw_sql": "with awin_transactions_pending as (\r\n\r\n    select\r\n        awin_date,\r\n        advertiser_country,\r\n        advertiser_id,\r\n        order_id_awin,\r\n        order_id,\r\n        publisher_id,\r\n        site_name,\r\n        sale_amount_awin,\r\n        sale_amount_currency,\r\n        commission_group_code\r\n    from {{ ref('int_awin_transactions_pending') }}\r\n    where\r\n        /* exclude last x days to ensure that all Nav orders have been processed */\r\n        awin_date not between {{ get_last_n_days_date_range(10) }}\r\n        /* exclude current date */\r\n        and awin_date != date_sub(current_date(), interval 0 day)\r\n\r\n),\r\n\r\nnav_transactions_with_credit_memo as (\r\n\r\n    select\r\n        inv_h_shop_order_id,\r\n        sum_invoice_amount_excl_vat,\r\n        sum_crmemo_amount_excl_vat,\r\n        /* awin uses local currency for CH and UK */\r\n        umsatz_netto_local_currency as umsatz_netto\r\n    from {{ ref('int_nav_invoice_crmemo_combined') }}\r\n    /* credit memo filter removed to identify fraudulent sales without Nav invoice */\r\n    where order_date between {{ get_last_n_days_date_range(90) }}\r\n    \r\n), \r\n\r\nawin_transactions_pending_with_credit_memo as (\r\n\r\n    select * \r\n    from awin_transactions_pending as awin\r\n    left join nav_transactions_with_credit_memo as nav\r\n        on awin.order_id = nav.inv_h_shop_order_id\r\n\r\n)\r\n\r\nselect * from awin_transactions_pending_with_credit_memo", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.int_awin_transactions_pending", "model.sql_repository_bz.int_nav_invoice_crmemo_combined"]}, "config": {"enabled": true, "alias": null, "schema": "affiliate", "database": null, "tags": ["analytics-alerts"], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_affiliate", "fqn": ["sql_repository_bz", "03_marts", "affiliate_awin", "awin_transactions_pending_with_returns"], "unique_id": "model.sql_repository_bz.awin_transactions_pending_with_returns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/affiliate_awin/awin_transactions_pending_with_returns.sql", "original_file_path": "models/03_marts/affiliate_awin/awin_transactions_pending_with_returns.sql", "name": "awin_transactions_pending_with_returns", "alias": "awin_transactions_pending_with_returns", "checksum": {"name": "sha256", "checksum": "e6360c1a8c7eab3b7896f44465c8f49dff852bad029ada02d5100d492b59d91f"}, "tags": ["analytics-alerts"], "refs": [["int_awin_transactions_pending"], ["int_nav_invoice_crmemo_combined"]], "sources": [], "description": "this model lists all open awin sales and joins Navision return and cancellation data", "columns": {"order_id_awin": {"name": "order_id_awin", "description": "the order id generated by Awin, not the ishop identifier. Used to directly amend the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sale_amount_awin": {"name": "sale_amount_awin", "description": "the current Awin order value per sale, which can be adjusted while the commission_status is pending", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inv_h_shop_order_id": {"name": "inv_h_shop_order_id", "description": "the shop order id from Navision. If null, then the order was cancelled and no Navision invoice created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "umsatz_netto": {"name": "umsatz_netto", "description": "the remaining order value after returns, as calculated from Navision tables", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/affiliate_awin/awin_transactions_pending_with_returns.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "affiliate", "materialized": "view"}, "created_at": 1663750854.0264533, "compiled_sql": "with awin_transactions_pending as (\n\n    select\n        awin_date,\n        advertiser_country,\n        advertiser_id,\n        order_id_awin,\n        order_id,\n        publisher_id,\n        site_name,\n        sale_amount_awin,\n        sale_amount_currency,\n        commission_group_code\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_awin_transactions_pending`\n    where\n        /* exclude last x days to ensure that all Nav orders have been processed */\n        awin_date not between \n    date_sub(current_date(), interval 10 day)\n    and date_sub(current_date(), interval 1 day)\n\n        /* exclude current date */\n        and awin_date != date_sub(current_date(), interval 0 day)\n\n),\n\nnav_transactions_with_credit_memo as (\n\n    select\n        inv_h_shop_order_id,\n        sum_invoice_amount_excl_vat,\n        sum_crmemo_amount_excl_vat,\n        /* awin uses local currency for CH and UK */\n        umsatz_netto_local_currency as umsatz_netto\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_invoice_crmemo_combined`\n    /* credit memo filter removed to identify fraudulent sales without Nav invoice */\n    where order_date between \n    date_sub(current_date(), interval 90 day)\n    and date_sub(current_date(), interval 1 day)\n\n    \n), \n\nawin_transactions_pending_with_credit_memo as (\n\n    select * \n    from awin_transactions_pending as awin\n    left join nav_transactions_with_credit_memo as nav\n        on awin.order_id = nav.inv_h_shop_order_id\n\n)\n\nselect * from awin_transactions_pending_with_credit_memo", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_affiliate`.`awin_transactions_pending_with_returns`"}, "model.sql_repository_bz.test_results_latest_errors": {"raw_sql": "with latest_test_errors_and_warnings as (\r\n    select\r\n        *\r\n    from {{ ref('stg_test_results_last_run') }}\r\n    where test_result in ('fail', 'warn', 'error')\r\n)\r\n\r\nselect * from latest_test_errors_and_warnings", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_test_results_last_run"]}, "config": {"enabled": true, "alias": null, "schema": "metadata", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_metadata", "fqn": ["sql_repository_bz", "03_marts", "_dbt_metadata", "test_results_latest_errors"], "unique_id": "model.sql_repository_bz.test_results_latest_errors", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_dbt_metadata/test_results_latest_errors.sql", "original_file_path": "models/03_marts/_dbt_metadata/test_results_latest_errors.sql", "name": "test_results_latest_errors", "alias": "test_results_latest_errors", "checksum": {"name": "sha256", "checksum": "e8a694ee8f520e1b30173ebd4967066c551709950eaa8e3b3ed5295a92cf4d95"}, "tags": [], "refs": [["stg_test_results_last_run"]], "sources": [], "description": "this model lists all test results with status error, fail or warning from the lastest dbt test run", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/_dbt_metadata/_models_metadata.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/_dbt_metadata/test_results_latest_errors.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "metadata", "materialized": "view"}, "created_at": 1663750854.0959158, "compiled_sql": "with latest_test_errors_and_warnings as (\n    select\n        *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_test_results_last_run`\n    where test_result in ('fail', 'warn', 'error')\n)\n\nselect * from latest_test_errors_and_warnings", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_metadata`.`test_results_latest_errors`"}, "model.sql_repository_bz.test_results_all_historic": {"raw_sql": "select * from {{ ref('stg_test_results_historic') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_test_results_historic"]}, "config": {"enabled": true, "alias": null, "schema": "metadata", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_metadata", "fqn": ["sql_repository_bz", "03_marts", "_dbt_metadata", "test_results_all_historic"], "unique_id": "model.sql_repository_bz.test_results_all_historic", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_dbt_metadata/test_results_all_historic.sql", "original_file_path": "models/03_marts/_dbt_metadata/test_results_all_historic.sql", "name": "test_results_all_historic", "alias": "test_results_all_historic", "checksum": {"name": "sha256", "checksum": "d75a0527bd90bcf3ab46593f42c030aa09fe2a2e23254fbd588cb47f879a82f4"}, "tags": [], "refs": [["stg_test_results_historic"]], "sources": [], "description": "this model lists a complete test history", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/_dbt_metadata/_models_metadata.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/_dbt_metadata/test_results_all_historic.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "metadata", "materialized": "view"}, "created_at": 1663750854.0972621, "compiled_sql": "select * from `bergzeit`.`dbt_analytics_staging`.`stg_test_results_historic`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_metadata`.`test_results_all_historic`"}, "model.sql_repository_bz.gcp_cost_export": {"raw_sql": "with gcp_cost_export as (\r\n\r\n    select {{ dbt_utils.star(ref('stg_gcp_cost_export')) }}\r\n    from {{ ref('stg_gcp_cost_export') }}\r\n\r\n)\r\n\r\nselect * from gcp_cost_export", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.sql_repository_bz.stg_gcp_cost_export", "model.sql_repository_bz.stg_gcp_cost_export"]}, "config": {"enabled": true, "alias": null, "schema": "cloud_platform", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_cloud_platform", "fqn": ["sql_repository_bz", "03_marts", "cloud_platform", "gcp_cost_export"], "unique_id": "model.sql_repository_bz.gcp_cost_export", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/cloud_platform/gcp_cost_export.sql", "original_file_path": "models/03_marts/cloud_platform/gcp_cost_export.sql", "name": "gcp_cost_export", "alias": "gcp_cost_export", "checksum": {"name": "sha256", "checksum": "5cd50366b524aa3a0ae4baf7b1dbbe1f99c4055c45833ac31295728ba3780dad"}, "tags": [], "refs": [["stg_gcp_cost_export"], ["stg_gcp_cost_export"]], "sources": [], "description": "Daily cost export of all GCP services", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/cloud_platform/_models_gcp.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/cloud_platform/gcp_cost_export.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "cloud_platform", "materialized": "view"}, "created_at": 1663750854.0985143, "compiled_sql": "with gcp_cost_export as (\n\n    select \n\n    `cost_entry_id`,\n  `billing_account_id`,\n  `service`,\n  `sku`,\n  `usage_start_time`,\n  `usage_end_time`,\n  `project`,\n  `labels`,\n  `system_labels`,\n  `location`,\n  `export_time`,\n  `cost`,\n  `currency`,\n  `currency_conversion_rate`,\n  `usage`,\n  `credits`,\n  `invoice`,\n  `cost_type`,\n  `adjustment_info`\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gcp_cost_export`\n\n)\n\nselect * from gcp_cost_export", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_cloud_platform`.`gcp_cost_export`"}, "model.sql_repository_bz.gcp_bigquery_job_cost": {"raw_sql": "with bigquery_jobs_with_gb_and_cost as (\r\n\r\n    select {{ dbt_utils.star(ref('stg_gcp_bigquery_job_cost')) }}\r\n    from {{ ref('stg_gcp_bigquery_job_cost') }}\r\n\r\n)\r\n\r\nselect * from bigquery_jobs_with_gb_and_cost", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.sql_repository_bz.stg_gcp_bigquery_job_cost", "model.sql_repository_bz.stg_gcp_bigquery_job_cost"]}, "config": {"enabled": true, "alias": null, "schema": "cloud_platform", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_cloud_platform", "fqn": ["sql_repository_bz", "03_marts", "cloud_platform", "gcp_bigquery_job_cost"], "unique_id": "model.sql_repository_bz.gcp_bigquery_job_cost", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/cloud_platform/gcp_bigquery_job_cost.sql", "original_file_path": "models/03_marts/cloud_platform/gcp_bigquery_job_cost.sql", "name": "gcp_bigquery_job_cost", "alias": "gcp_bigquery_job_cost", "checksum": {"name": "sha256", "checksum": "9e75e4d999915bef37d4c94d64a2b05bb1f1d29abb01d380fdf122497e06ef8d"}, "tags": [], "refs": [["stg_gcp_bigquery_job_cost"], ["stg_gcp_bigquery_job_cost"]], "sources": [], "description": "Bigquery execution log of all queries", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/cloud_platform/_models_gcp.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/cloud_platform/gcp_bigquery_job_cost.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "cloud_platform", "materialized": "view"}, "created_at": 1663750854.0993915, "compiled_sql": "with bigquery_jobs_with_gb_and_cost as (\n\n    select \n\n    `sk_id`,\n  `creation_time`,\n  `job_id`,\n  `user_email`,\n  `job_type`,\n  `statement_type`,\n  `cache_hit`,\n  `destination_project_id`,\n  `ref_tab_project_id`,\n  `dataset_id`,\n  `table_id`,\n  `query`,\n  `query_type`,\n  `bytes_processed_in_gb`\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gcp_bigquery_job_cost`\n\n)\n\nselect * from bigquery_jobs_with_gb_and_cost", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_cloud_platform`.`gcp_bigquery_job_cost`"}, "model.sql_repository_bz.product_sku_count_by_day": {"raw_sql": "with sku_count_of_current_parents_to_max_skus as (\r\n\r\n    select {{ dbt_utils.star(ref('int_gmc_sku_count_by_day')) }}\r\n    from {{ ref('int_gmc_sku_count_by_day') }}\r\n\r\n)\r\n\r\nselect * from sku_count_of_current_parents_to_max_skus", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.sql_repository_bz.int_gmc_sku_count_by_day", "model.sql_repository_bz.int_gmc_sku_count_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "product_sku_count_by_day"], "unique_id": "model.sql_repository_bz.product_sku_count_by_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/product_sku_count_by_day.sql", "original_file_path": "models/03_marts/product_inventory/product_sku_count_by_day.sql", "name": "product_sku_count_by_day", "alias": "product_sku_count_by_day", "checksum": {"name": "sha256", "checksum": "64c61ba5bb18d6815e0fa911f86c085e7fc7cf951e9140cd25c61a8dfca1097c"}, "tags": [], "refs": [["int_gmc_sku_count_by_day"], ["int_gmc_sku_count_by_day"]], "sources": [], "description": "see intermediate model", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/product_inventory/_models_product.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/product_sku_count_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750854.1439958, "compiled_sql": "with sku_count_of_current_parents_to_max_skus as (\n\n    select \n\n    `parent_id`,\n  `account`,\n  `p_date`,\n  `brand`,\n  `top_category`,\n  `category_l1_2`,\n  `category_l_2`,\n  `category_l_3`,\n  `sku_count`,\n  `max_sku_count`\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_sku_count_by_day`\n\n)\n\nselect * from sku_count_of_current_parents_to_max_skus", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_sku_count_by_day`"}, "model.sql_repository_bz.product_attributes_and_ga_data_by_day": {"raw_sql": "with product_attributes_and_ga_data_by_day as (\r\n\r\n    select *\r\n    from {{ ref('int_ga_product_attr_and_ga_data_by_day') }}\r\n\r\n)\r\n\r\nselect * from product_attributes_and_ga_data_by_day", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_product_attr_and_ga_data_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "product_attributes_and_ga_data_by_day"], "unique_id": "model.sql_repository_bz.product_attributes_and_ga_data_by_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/product_attributes_and_ga_data_by_day.sql", "original_file_path": "models/03_marts/product_inventory/product_attributes_and_ga_data_by_day.sql", "name": "product_attributes_and_ga_data_by_day", "alias": "product_attributes_and_ga_data_by_day", "checksum": {"name": "sha256", "checksum": "047ae8e402b08c2d699f90f4b78d0783297113d525b9b4d1eb207050e324bdeb"}, "tags": [], "refs": [["int_ga_product_attr_and_ga_data_by_day"]], "sources": [], "description": "this model shows mc product attributes combined with google analytics data by day, sku and hostname", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/product_inventory/_models_product.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/product_attributes_and_ga_data_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750854.1196938, "compiled_sql": "with product_attributes_and_ga_data_by_day as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_product_attr_and_ga_data_by_day`\n\n)\n\nselect * from product_attributes_and_ga_data_by_day", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_attributes_and_ga_data_by_day`"}, "model.sql_repository_bz.product_ga_data_and_adcost": {"raw_sql": "with ga_data as (\r\n\r\n    select\r\n        c_date as date,\r\n        hostname,\r\n        account,\r\n        c_offer_id as sku,\r\n        ga_brand as brand,\r\n        ga_productname as name,\r\n        add_to_cart_product_quantity as add_to_carts,\r\n        sum_product_revenue,\r\n        sum_product_quantity\r\n    from {{ ref('int_ga_eecactions_revenue') }}\r\n    where c_date between {{ get_last_n_days_date_range(14) }}\r\n\r\n),\r\n\r\nad_costs as (\r\n\r\n    select\r\n        gads_account,\r\n        gads_date,\r\n        gads_offer_id,\r\n        shopping_cost\r\n    from {{ ref('int_gads_product_stats_by_day') }}\r\n    where gads_date between {{ get_last_n_days_date_range(14) }}\r\n\r\n),\r\n\r\njoined_data as (\r\n\r\n    select * except (account, gads_account, gads_date, gads_offer_id)\r\n    from ga_data\r\n    left join ad_costs\r\n    on ga_data.date = ad_costs.gads_date\r\n    and ga_data.sku = ad_costs.gads_offer_id \r\n    and ga_data.account = ad_costs.gads_account\r\n\r\n)\r\n\r\nselect * from joined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.int_ga_eecactions_revenue", "model.sql_repository_bz.int_gads_product_stats_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "product_ga_data_and_adcost"], "unique_id": "model.sql_repository_bz.product_ga_data_and_adcost", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/product_ga_data_and_adcost.sql", "original_file_path": "models/03_marts/product_inventory/product_ga_data_and_adcost.sql", "name": "product_ga_data_and_adcost", "alias": "product_ga_data_and_adcost", "checksum": {"name": "sha256", "checksum": "c3b86c9f9e4cd804f3da54897d4301365b2169bd7e0dfb7735c696fbfa42a061"}, "tags": [], "refs": [["int_ga_eecactions_revenue"], ["int_gads_product_stats_by_day"]], "sources": [], "description": "this model shows ga data and ad cost by day, sku and hostname", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/product_inventory/_models_product.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/product_ga_data_and_adcost.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750854.1251616, "compiled_sql": "with ga_data as (\n\n    select\n        c_date as date,\n        hostname,\n        account,\n        c_offer_id as sku,\n        ga_brand as brand,\n        ga_productname as name,\n        add_to_cart_product_quantity as add_to_carts,\n        sum_product_revenue,\n        sum_product_quantity\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_eecactions_revenue`\n    where c_date between \n    date_sub(current_date(), interval 14 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\nad_costs as (\n\n    select\n        gads_account,\n        gads_date,\n        gads_offer_id,\n        shopping_cost\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gads_product_stats_by_day`\n    where gads_date between \n    date_sub(current_date(), interval 14 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\njoined_data as (\n\n    select * except (account, gads_account, gads_date, gads_offer_id)\n    from ga_data\n    left join ad_costs\n    on ga_data.date = ad_costs.gads_date\n    and ga_data.sku = ad_costs.gads_offer_id \n    and ga_data.account = ad_costs.gads_account\n\n)\n\nselect * from joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_ga_data_and_adcost`"}, "model.sql_repository_bz.product_brand_entrance_transactions": {"raw_sql": "with pdp_data as (\r\n\r\n    select\r\n        *,\r\n        if(substring(cd9_product_id,1,7) = substring(ga_productid,1,7),1,0) as same_parent_id,\r\n        if(entry_brand = lower(ga_brand),1,0) as same_brand\r\n    from {{ ref('int_ga_pdp_entrances_transactions') }}\r\n\r\n),\r\n\r\nnew_vars as (\r\n\r\n    select\r\n        --pv_date,\r\n        pv_hostname as hostname,\r\n        entry_brand,\r\n        count(distinct pv_session_id) as nr_sessions_overall,\r\n        count(distinct if(channel_grouping = 'Generic Paid Shopping Google',pv_session_id, null)) as nr_sessions_paid_shopping,\r\n        count(distinct if(channel_grouping = 'Generic Paid Search Google',pv_session_id, null)) as nr_sessions_paid_search,\r\n        count(distinct if(channel_grouping = 'Other',pv_session_id, null)) as nr_sessions_other,\r\n        sum(ifnull(ga_product_revenue,0)) as order_value_overall,\r\n        sum(if(channel_grouping = 'Generic Paid Shopping Google',ifnull(ga_product_revenue,0), 0)) as order_value_paid_shopping,\r\n        sum(if(channel_grouping = 'Generic Paid Search Google',ifnull(ga_product_revenue,0), 0)) as order_value_paid_search,\r\n        sum(if(channel_grouping = 'Other',ifnull(ga_product_revenue,0), 0)) as order_value_other,\r\n        sum(if(same_brand = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_brand_overall,\r\n        sum(if(channel_grouping = 'Generic Paid Shopping Google' and same_brand = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_brand_paid_shopping,\r\n        sum(if(channel_grouping = 'Generic Paid Search Google' and same_brand = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_brand_paid_search,\r\n        sum(if(channel_grouping = 'Other' and same_brand = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_brand_other,\r\n        sum(if(same_parent_id = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_parentid_overall,\r\n        sum(if(channel_grouping = 'Generic Paid Shopping Google' and same_parent_id = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_parentid_paid_shopping,\r\n        sum(if(channel_grouping = 'Generic Paid Search Google' and same_parent_id = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_parentid_paid_search,\r\n        sum(if(channel_grouping = 'Other' and same_parent_id = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_parentid_other\r\n\r\n    from pdp_data\r\n\r\n    group by 1,2\r\n\r\n)\r\n\r\nselect\r\n    *,\r\n    safe_divide(nr_sessions_paid_shopping, nr_sessions_overall) as share_sessions_paid_shopping,\r\n    safe_divide(nr_sessions_paid_search, nr_sessions_overall) as share_sessions_paid_search,\r\n    safe_divide(nr_sessions_other, nr_sessions_overall) as share_sessions_other,\r\n    safe_divide(order_value_paid_shopping, order_value_overall) as share_order_value_paid_shopping,\r\n    safe_divide(order_value_paid_search, order_value_overall) as share_order_value_paid_search,\r\n    safe_divide(order_value_other, order_value_overall) as share_order_value_other,\r\n    safe_divide(order_value_same_brand_paid_shopping, order_value_same_brand_overall) as share_order_value_same_brand_paid_shopping,\r\n    safe_divide(order_value_same_brand_paid_search, order_value_same_brand_overall) as share_order_value_same_brand_paid_search,\r\n    safe_divide(order_value_same_brand_other, order_value_same_brand_overall) as share_order_value_same_brand_other,\r\n    safe_divide(order_value_same_parentid_paid_shopping, order_value_same_parentid_overall) as share_order_value_same_parentid_paid_shopping,\r\n    safe_divide(order_value_same_parentid_paid_search, order_value_same_parentid_overall) as share_order_value_same_parentid_paid_search,\r\n    safe_divide(order_value_same_parentid_other, order_value_same_parentid_overall) as share_order_value_same_parentid_other\r\n\r\nfrom new_vars", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_pdp_entrances_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "product_brand_entrance_transactions"], "unique_id": "model.sql_repository_bz.product_brand_entrance_transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/product_brand_entrance_transactions.sql", "original_file_path": "models/03_marts/product_inventory/product_brand_entrance_transactions.sql", "name": "product_brand_entrance_transactions", "alias": "product_brand_entrance_transactions", "checksum": {"name": "sha256", "checksum": "4d4a73da311ee24824bd7efa1bf76bd38556af70b625357b30a72f69371f8078"}, "tags": [], "refs": [["int_ga_pdp_entrances_transactions"]], "sources": [], "description": "this model compare entry brand with brand in transaction by acquisition channel", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/product_inventory/_models_product.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/product_brand_entrance_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750854.1448727, "compiled_sql": "with pdp_data as (\n\n    select\n        *,\n        if(substring(cd9_product_id,1,7) = substring(ga_productid,1,7),1,0) as same_parent_id,\n        if(entry_brand = lower(ga_brand),1,0) as same_brand\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_pdp_entrances_transactions`\n\n),\n\nnew_vars as (\n\n    select\n        --pv_date,\n        pv_hostname as hostname,\n        entry_brand,\n        count(distinct pv_session_id) as nr_sessions_overall,\n        count(distinct if(channel_grouping = 'Generic Paid Shopping Google',pv_session_id, null)) as nr_sessions_paid_shopping,\n        count(distinct if(channel_grouping = 'Generic Paid Search Google',pv_session_id, null)) as nr_sessions_paid_search,\n        count(distinct if(channel_grouping = 'Other',pv_session_id, null)) as nr_sessions_other,\n        sum(ifnull(ga_product_revenue,0)) as order_value_overall,\n        sum(if(channel_grouping = 'Generic Paid Shopping Google',ifnull(ga_product_revenue,0), 0)) as order_value_paid_shopping,\n        sum(if(channel_grouping = 'Generic Paid Search Google',ifnull(ga_product_revenue,0), 0)) as order_value_paid_search,\n        sum(if(channel_grouping = 'Other',ifnull(ga_product_revenue,0), 0)) as order_value_other,\n        sum(if(same_brand = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_brand_overall,\n        sum(if(channel_grouping = 'Generic Paid Shopping Google' and same_brand = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_brand_paid_shopping,\n        sum(if(channel_grouping = 'Generic Paid Search Google' and same_brand = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_brand_paid_search,\n        sum(if(channel_grouping = 'Other' and same_brand = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_brand_other,\n        sum(if(same_parent_id = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_parentid_overall,\n        sum(if(channel_grouping = 'Generic Paid Shopping Google' and same_parent_id = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_parentid_paid_shopping,\n        sum(if(channel_grouping = 'Generic Paid Search Google' and same_parent_id = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_parentid_paid_search,\n        sum(if(channel_grouping = 'Other' and same_parent_id = 1,ifnull(ga_product_revenue,0), 0)) as order_value_same_parentid_other\n\n    from pdp_data\n\n    group by 1,2\n\n)\n\nselect\n    *,\n    safe_divide(nr_sessions_paid_shopping, nr_sessions_overall) as share_sessions_paid_shopping,\n    safe_divide(nr_sessions_paid_search, nr_sessions_overall) as share_sessions_paid_search,\n    safe_divide(nr_sessions_other, nr_sessions_overall) as share_sessions_other,\n    safe_divide(order_value_paid_shopping, order_value_overall) as share_order_value_paid_shopping,\n    safe_divide(order_value_paid_search, order_value_overall) as share_order_value_paid_search,\n    safe_divide(order_value_other, order_value_overall) as share_order_value_other,\n    safe_divide(order_value_same_brand_paid_shopping, order_value_same_brand_overall) as share_order_value_same_brand_paid_shopping,\n    safe_divide(order_value_same_brand_paid_search, order_value_same_brand_overall) as share_order_value_same_brand_paid_search,\n    safe_divide(order_value_same_brand_other, order_value_same_brand_overall) as share_order_value_same_brand_other,\n    safe_divide(order_value_same_parentid_paid_shopping, order_value_same_parentid_overall) as share_order_value_same_parentid_paid_shopping,\n    safe_divide(order_value_same_parentid_paid_search, order_value_same_parentid_overall) as share_order_value_same_parentid_paid_search,\n    safe_divide(order_value_same_parentid_other, order_value_same_parentid_overall) as share_order_value_same_parentid_other\n\nfrom new_vars", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_brand_entrance_transactions`"}, "model.sql_repository_bz.product_gmc_prices_chf_to_eur": {"raw_sql": "with gmc_prices_chf_to_eur as (\r\n\r\n    select *\r\n    from {{ ref('int_gmc_prices_chf_to_eur') }}\r\n\r\n)\r\n\r\nselect * from gmc_prices_chf_to_eur", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gmc_prices_chf_to_eur"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "product_gmc_prices_chf_to_eur"], "unique_id": "model.sql_repository_bz.product_gmc_prices_chf_to_eur", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/product_gmc_prices_chf_to_eur.sql", "original_file_path": "models/03_marts/product_inventory/product_gmc_prices_chf_to_eur.sql", "name": "product_gmc_prices_chf_to_eur", "alias": "product_gmc_prices_chf_to_eur", "checksum": {"name": "sha256", "checksum": "fc12c111569c63a948b5207f01ad63bbb1d0d1308d7fa3b6972f488e05daa918"}, "tags": [], "refs": [["int_gmc_prices_chf_to_eur"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/product_gmc_prices_chf_to_eur.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750848.8902886, "compiled_sql": "with gmc_prices_chf_to_eur as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_prices_chf_to_eur`\n\n)\n\nselect * from gmc_prices_chf_to_eur", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_gmc_prices_chf_to_eur`"}, "model.sql_repository_bz.product_source_feed_skus_with_errors": {"raw_sql": "with channel_pilot_feeds_ipim_with_errors as (\r\n\r\n    select *\r\n    from {{ ref('int_cp_source_feeds_with_errors') }}\r\n\r\n)\r\n\r\nselect * from channel_pilot_feeds_ipim_with_errors", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_cp_source_feeds_with_errors"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "product_source_feed_skus_with_errors"], "unique_id": "model.sql_repository_bz.product_source_feed_skus_with_errors", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/product_source_feed_skus_with_errors.sql", "original_file_path": "models/03_marts/product_inventory/product_source_feed_skus_with_errors.sql", "name": "product_source_feed_skus_with_errors", "alias": "product_source_feed_skus_with_errors", "checksum": {"name": "sha256", "checksum": "9dc9e449ed314775d93eda5289e2f91e4a265efd7ee516e4570894f549a7ade2"}, "tags": [], "refs": [["int_cp_source_feeds_with_errors"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/product_source_feed_skus_with_errors.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750848.8940454, "compiled_sql": "with channel_pilot_feeds_ipim_with_errors as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_cp_source_feeds_with_errors`\n\n)\n\nselect * from channel_pilot_feeds_ipim_with_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_source_feed_skus_with_errors`"}, "model.sql_repository_bz.product_cart_analysis_selective_orders_parentid": {"raw_sql": "with cart_products_and_prod_attr as (\r\n\r\n    select *\r\n    from {{ ref('int_ga_cart_products_and_prod_attr') }}\r\n\r\n),\r\n\r\n\r\ntransactions_pid as (\r\n\r\n    select\r\n        ga_date as date,\r\n        ga_hostname,\r\n        ga_transaction_id,\r\n        g_product_parent as parent_id,\r\n        min(ga_brand) as brand,\r\n        min(category) as category,\r\n        count (distinct ga_productid) as skus_per_parent_id_and_transaction,\r\n        count (distinct size) as no_different_sizes,\r\n        count (distinct color) as no_different_colors,\r\n    from cart_products_and_prod_attr\r\n    group by 1,2,3,4\r\n\r\n)\r\n\r\nselect\r\n    date,\r\n    ga_hostname,\r\n    parent_id,\r\n    min(brand) as brand,\r\n    min(category) as category,\r\n    count (distinct ga_transaction_id) as anzahl_transaktionen,\r\n    sum(if(skus_per_parent_id_and_transaction > 1, 1, 0)) as anzahl_auswahlbest,\r\n    sum(if(no_different_sizes > 1 , 1, 0)) as anzahl_versch_groessen,\r\n    sum(if(no_different_colors > 1 , 1, 0)) as anzahl_versch_farben\r\nfrom transactions_pid\r\ngroup by 1,2,3", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_cart_products_and_prod_attr"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "product_cart_analysis_selective_orders_parentid"], "unique_id": "model.sql_repository_bz.product_cart_analysis_selective_orders_parentid", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/product_cart_analysis_selective_orders_parentid.sql", "original_file_path": "models/03_marts/product_inventory/product_cart_analysis_selective_orders_parentid.sql", "name": "product_cart_analysis_selective_orders_parentid", "alias": "product_cart_analysis_selective_orders_parentid", "checksum": {"name": "sha256", "checksum": "fa1671da0b8c40c6a0d94a55c10df7b87fd2cfd08a7e23451fa97413a0090895"}, "tags": [], "refs": [["int_ga_cart_products_and_prod_attr"]], "sources": [], "description": "this model shows aggregated by date, hostname and parentid", "columns": {"date": {"name": "date", "description": "date of transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ga_hostname": {"name": "ga_hostname", "description": "hostname of transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "parent_id of product in cart, table ist aggregated by this column", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "product brand (related to parentid)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "product category (related to parentid)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "anzahl_transaktionen": {"name": "anzahl_transaktionen", "description": "number of transactions per date, hostname and product category", "meta": {}, "data_type": null, "quote": null, "tags": []}, "anzahl_auswahlbest": {"name": "anzahl_auswahlbest", "description": "number of transactions with selective order per date, hostname and product category", "meta": {}, "data_type": null, "quote": null, "tags": []}, "anzahl_versch_groessen": {"name": "anzahl_versch_groessen", "description": "number of selective orders with different sizes (for one parentid)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "anzahl_versch_farben": {"name": "anzahl_versch_farben", "description": "number of selective orders with different colors (for one parentid)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/product_inventory/_models_product.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/product_cart_analysis_selective_orders_parentid.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750854.1431048, "compiled_sql": "with cart_products_and_prod_attr as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_cart_products_and_prod_attr`\n\n),\n\n\ntransactions_pid as (\n\n    select\n        ga_date as date,\n        ga_hostname,\n        ga_transaction_id,\n        g_product_parent as parent_id,\n        min(ga_brand) as brand,\n        min(category) as category,\n        count (distinct ga_productid) as skus_per_parent_id_and_transaction,\n        count (distinct size) as no_different_sizes,\n        count (distinct color) as no_different_colors,\n    from cart_products_and_prod_attr\n    group by 1,2,3,4\n\n)\n\nselect\n    date,\n    ga_hostname,\n    parent_id,\n    min(brand) as brand,\n    min(category) as category,\n    count (distinct ga_transaction_id) as anzahl_transaktionen,\n    sum(if(skus_per_parent_id_and_transaction > 1, 1, 0)) as anzahl_auswahlbest,\n    sum(if(no_different_sizes > 1 , 1, 0)) as anzahl_versch_groessen,\n    sum(if(no_different_colors > 1 , 1, 0)) as anzahl_versch_farben\nfrom transactions_pid\ngroup by 1,2,3", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_cart_analysis_selective_orders_parentid`"}, "model.sql_repository_bz.product_sku_and_season": {"raw_sql": "with sku_and_current_season as (\r\n\r\n    select *\r\n    from {{ ref('int_gmc_current_season') }}\r\n\r\n)\r\n\r\nselect * from sku_and_current_season", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gmc_current_season"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "product_sku_and_season"], "unique_id": "model.sql_repository_bz.product_sku_and_season", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/product_sku_and_season.sql", "original_file_path": "models/03_marts/product_inventory/product_sku_and_season.sql", "name": "product_sku_and_season", "alias": "product_sku_and_season", "checksum": {"name": "sha256", "checksum": "2b7640400c003c8cf910568e98d9349b56074c87790bc947853d76dd418c4998"}, "tags": [], "refs": [["int_gmc_current_season"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/product_sku_and_season.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750848.901417, "compiled_sql": "with sku_and_current_season as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_current_season`\n\n)\n\nselect * from sku_and_current_season", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_sku_and_season`"}, "model.sql_repository_bz.product_nav_items_and_attributes": {"raw_sql": "with product_data as (\r\n\r\n    select\r\n        order_date, \r\n        inv_h_shop_order_id as shop_order_id,\r\n        sales_channel_description,\r\n        inv_l_product_sku as product_sku,\r\n        product_parent_id,\r\n        inv_l_quantity as product_quantity,\r\n        invoice_amount_excl_vat_euro as order_value,\r\n        crmemo_amount_excl_vat_euro as return_value,\r\n        revenue_after_return,\r\n        product_category,\r\n        product_brand,\r\n        product_description,\r\n        product_color,\r\n        product_gender\r\n    from {{ ref('int_nav_products_and_attributes') }}\r\n\r\n)\r\n\r\nselect * from product_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_nav_products_and_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "product_nav_items_and_attributes"], "unique_id": "model.sql_repository_bz.product_nav_items_and_attributes", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/product_nav_items_and_attributes.sql", "original_file_path": "models/03_marts/product_inventory/product_nav_items_and_attributes.sql", "name": "product_nav_items_and_attributes", "alias": "product_nav_items_and_attributes", "checksum": {"name": "sha256", "checksum": "23f8df53fddda87f7b41573a6fde0ea713b2b29fe205896672a167e68de2a064"}, "tags": [], "refs": [["int_nav_products_and_attributes"]], "sources": [], "description": "this model adds product attributes to the navision products", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/product_inventory/_models_product.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/product_nav_items_and_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750854.152004, "compiled_sql": "with product_data as (\n\n    select\n        order_date, \n        inv_h_shop_order_id as shop_order_id,\n        sales_channel_description,\n        inv_l_product_sku as product_sku,\n        product_parent_id,\n        inv_l_quantity as product_quantity,\n        invoice_amount_excl_vat_euro as order_value,\n        crmemo_amount_excl_vat_euro as return_value,\n        revenue_after_return,\n        product_category,\n        product_brand,\n        product_description,\n        product_color,\n        product_gender\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_products_and_attributes`\n\n)\n\nselect * from product_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_nav_items_and_attributes`"}, "model.sql_repository_bz.zz_product_price_benchmark_and_product_attr": {"raw_sql": "with latest_benchmarks as (\r\n\r\n  select\r\n    *\r\n  from {{ ref('zz_stg_gmc_price_benchmarks') }}\r\n\r\n)\r\n\r\nselect * from latest_benchmarks\r\n\r\n/*\r\nachtung - hier muss noch nachgebessert werden bevor das produktiv verwendet wird!!\r\n- account aufnehmen (de, ob, etc.)\r\n- Zeitr\u00e4ume?\r\n  \r\n    \r\n  product_data as (\r\n\r\n  select\r\n    *\r\n\r\n  from\r\n    {{ ref('stg_gmc_all_products') }}\r\n  where\r\n    p_date = date_sub(current_date(), interval 1 day)),\r\n    \r\n  product_margins as (\r\n  select\r\n    *\r\n  from\r\n    {{ ref('zz_stg_gmc_product_margins') }}\r\n  where\r\n    marge_date = date_sub(current_date(), interval 1 day) ),\r\n    \r\n  product_stock as (\r\n  select\r\n    *\r\n  from\r\n    {{ ref('stg_gmc_product_stock') }}\r\n  where\r\n    stock_date = date_sub(current_date(), interval 1 day)),\r\n    \r\n    \r\n  product_performance as (\r\n  select\r\n    *\r\n  from\r\n    {{ ref('int_gmc_product_attr_and_stock_by_day') }}\r\n\r\n    ),\r\n    \r\n    \r\n  full_data as (\r\n  select\r\n    *\r\n  from\r\n    latest_benchmarks\r\n  inner join product_data using (offer_id)\r\n  inner join product_performance using (offer_id)\r\n  inner join product_margins on latest_benchmarks.offer_id = product_margins.product_id\r\n  inner join product_stock on latest_benchmarks.offer_id = product_stock.product_id\r\n  order by\r\n    clicks_30d desc)\r\n    \r\n    \r\nselect\r\n\r\n  offer_id,\r\n  price,\r\n  stock,\r\n  bestands_marge,\r\n  price_benchmark_value,\r\n  round(price- price_benchmark_value,2) as benchmark_diff,\r\n  product_gtin,\r\n  product_title_short,\r\n  impressions_30d,\r\n  clicks_30d,\r\n  cost_30d,\r\n  conversions_30d,\r\n  conversionvalue_30d, \r\n  round(conversionvalue_30d * marge_relativ,2) as marginvalue_30d,\r\n  round(conversionvalue_30d/ cost_30d*100, 3) as roas_30d,\r\n  round(conversionvalue_30d * marge_relativ / cost_30d*100, 3) as mroas_30d\r\n  \r\nfrom\r\n  full_data\r\nwhere \r\n    stock > 4\r\norder by\r\n    cost_30d desc\r\n\r\n    */", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.zz_stg_gmc_price_benchmarks", "model.sql_repository_bz.stg_gmc_all_products", "model.sql_repository_bz.zz_stg_gmc_product_margins", "model.sql_repository_bz.stg_gmc_product_stock", "model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "zz_product_price_benchmark_and_product_attr"], "unique_id": "model.sql_repository_bz.zz_product_price_benchmark_and_product_attr", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/zz_product_price_benchmark_and_product_attr.sql", "original_file_path": "models/03_marts/product_inventory/zz_product_price_benchmark_and_product_attr.sql", "name": "zz_product_price_benchmark_and_product_attr", "alias": "zz_product_price_benchmark_and_product_attr", "checksum": {"name": "sha256", "checksum": "f30b33d9adc06099b744e3292ebeb641b6d4bd313972935627e77bdeb48de0cf"}, "tags": [], "refs": [["zz_stg_gmc_price_benchmarks"], ["stg_gmc_all_products"], ["zz_stg_gmc_product_margins"], ["stg_gmc_product_stock"], ["int_gmc_product_attr_and_stock_by_day"]], "sources": [], "description": "not in production yet", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/product_inventory/_models_product.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/zz_product_price_benchmark_and_product_attr.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750854.15288, "compiled_sql": "with latest_benchmarks as (\n\n  select\n    *\n  from `bergzeit`.`dbt_analytics_staging`.`zz_stg_gmc_price_benchmarks`\n\n)\n\nselect * from latest_benchmarks\n\n/*\nachtung - hier muss noch nachgebessert werden bevor das produktiv verwendet wird!!\n- account aufnehmen (de, ob, etc.)\n- Zeitr\u00e4ume?\n  \n    \n  product_data as (\n\n  select\n    *\n\n  from\n    `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n  where\n    p_date = date_sub(current_date(), interval 1 day)),\n    \n  product_margins as (\n  select\n    *\n  from\n    `bergzeit`.`dbt_analytics_staging`.`zz_stg_gmc_product_margins`\n  where\n    marge_date = date_sub(current_date(), interval 1 day) ),\n    \n  product_stock as (\n  select\n    *\n  from\n    `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_stock`\n  where\n    stock_date = date_sub(current_date(), interval 1 day)),\n    \n    \n  product_performance as (\n  select\n    *\n  from\n    `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_product_attr_and_stock_by_day`\n\n    ),\n    \n    \n  full_data as (\n  select\n    *\n  from\n    latest_benchmarks\n  inner join product_data using (offer_id)\n  inner join product_performance using (offer_id)\n  inner join product_margins on latest_benchmarks.offer_id = product_margins.product_id\n  inner join product_stock on latest_benchmarks.offer_id = product_stock.product_id\n  order by\n    clicks_30d desc)\n    \n    \nselect\n\n  offer_id,\n  price,\n  stock,\n  bestands_marge,\n  price_benchmark_value,\n  round(price- price_benchmark_value,2) as benchmark_diff,\n  product_gtin,\n  product_title_short,\n  impressions_30d,\n  clicks_30d,\n  cost_30d,\n  conversions_30d,\n  conversionvalue_30d, \n  round(conversionvalue_30d * marge_relativ,2) as marginvalue_30d,\n  round(conversionvalue_30d/ cost_30d*100, 3) as roas_30d,\n  round(conversionvalue_30d * marge_relativ / cost_30d*100, 3) as mroas_30d\n  \nfrom\n  full_data\nwhere \n    stock > 4\norder by\n    cost_30d desc\n\n    */", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`zz_product_price_benchmark_and_product_attr`"}, "model.sql_repository_bz.product_attributes_and_stock_by_day": {"raw_sql": "select \r\n    products_country,\r\n    date, \r\n    offer_id, \r\n    product_parent_id as parent_id,\r\n    top_category, \r\n    category_l1_2, \r\n    category_l_2, \r\n    category_l_3, \r\n    last_category,\r\n    product_brand as brand,\r\n    product_season as season_flag,\r\n    is_only_foreign_stock,\r\n    is_special_item,\r\n    stock_total,\r\n    stock_lvs,\r\n    stock_ghp, \r\n    stock_gmund,\r\n    stock_supplier,\r\n    indikator_fremdlager,\r\n    gmc_availability,\r\n    avg_discount_rounded,\r\n    avg_discount_groups_custom, \r\n    avg_price_groups_custom,\r\n    avg_price_groups_custom_sort_index\r\nfrom  {{ ref('int_gmc_product_attr_and_stock_by_day') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "product_attributes_and_stock_by_day"], "unique_id": "model.sql_repository_bz.product_attributes_and_stock_by_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/product_attributes_and_stock_by_day.sql", "original_file_path": "models/03_marts/product_inventory/product_attributes_and_stock_by_day.sql", "name": "product_attributes_and_stock_by_day", "alias": "product_attributes_and_stock_by_day", "checksum": {"name": "sha256", "checksum": "9ed6243fc9a01f8c5d49c6a27293d5fda33367c5b6981cd394e2a2e179a045d1"}, "tags": [], "refs": [["int_gmc_product_attr_and_stock_by_day"]], "sources": [], "description": "this model shows mc product attributes combined with stock data by day, sku", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/product_inventory/_models_product.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/product_attributes_and_stock_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750854.1238472, "compiled_sql": "select \n    products_country,\n    date, \n    offer_id, \n    product_parent_id as parent_id,\n    top_category, \n    category_l1_2, \n    category_l_2, \n    category_l_3, \n    last_category,\n    product_brand as brand,\n    product_season as season_flag,\n    is_only_foreign_stock,\n    is_special_item,\n    stock_total,\n    stock_lvs,\n    stock_ghp, \n    stock_gmund,\n    stock_supplier,\n    indikator_fremdlager,\n    gmc_availability,\n    avg_discount_rounded,\n    avg_discount_groups_custom, \n    avg_price_groups_custom,\n    avg_price_groups_custom_sort_index\nfrom  `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_product_attr_and_stock_by_day`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_attributes_and_stock_by_day`"}, "model.sql_repository_bz.product_parentid_stats_by_day": {"raw_sql": "with parent_id_data as (\r\n    select\r\n        products_country,\r\n        date as p_date,\r\n        offer_id,\r\n        product_parent_id as parent_id\r\n    from {{ ref('int_gmc_product_attr_and_stock_by_day') }}\r\n),\r\n\r\naggregated_data as (\r\n    select \r\n        products_country,\r\n        p_date,\r\n        parent_id,\r\n        count( distinct offer_id) as anzahl_skus_pro_parentid\r\n    from parent_id_data\r\n    group by 1,2,3\r\n)\r\n\r\nselect * from aggregated_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "product_parentid_stats_by_day"], "unique_id": "model.sql_repository_bz.product_parentid_stats_by_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/product_parentid_stats_by_day.sql", "original_file_path": "models/03_marts/product_inventory/product_parentid_stats_by_day.sql", "name": "product_parentid_stats_by_day", "alias": "product_parentid_stats_by_day", "checksum": {"name": "sha256", "checksum": "b000de33d0f8004fac0c4f2fc2620997830914874f8dd6b7dbb447f4a00893e5"}, "tags": [], "refs": [["int_gmc_product_attr_and_stock_by_day"]], "sources": [], "description": "this model list the number of skus per parent id", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/product_inventory/_models_product.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/product_parentid_stats_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750854.148301, "compiled_sql": "with parent_id_data as (\n    select\n        products_country,\n        date as p_date,\n        offer_id,\n        product_parent_id as parent_id\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gmc_product_attr_and_stock_by_day`\n),\n\naggregated_data as (\n    select \n        products_country,\n        p_date,\n        parent_id,\n        count( distinct offer_id) as anzahl_skus_pro_parentid\n    from parent_id_data\n    group by 1,2,3\n)\n\nselect * from aggregated_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_parentid_stats_by_day`"}, "model.sql_repository_bz.product_cart_analysis_selective_orders_category": {"raw_sql": "with cart_products_and_prod_attr as (\r\n\r\n    select *\r\n    from {{ ref('int_ga_cart_products_and_prod_attr') }}\r\n\r\n),\r\n\r\ntransactions_cat as (\r\n\r\n    select\r\n        ga_date as date,\r\n        ga_hostname,\r\n        ga_transaction_id,\r\n        category,\r\n        count (distinct ga_productid) as skus_per_category_and_transaction,\r\n        count (distinct color) as no_different_colors\r\n    from cart_products_and_prod_attr\r\n    group by 1,2,3,4\r\n\r\n)\r\n\r\nselect\r\n    date,\r\n    ga_hostname,\r\n    category,\r\n    count (distinct ga_transaction_id) as anzahl_transaktionen,\r\n    sum(if(skus_per_category_and_transaction > 1, 1, 0)) as anzahl_auswahlbest,\r\n    sum(if(no_different_colors > 1 , 1, 0)) as anzahl_versch_farben\r\nfrom transactions_cat\r\ngroup by 1,2,3", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_ga_cart_products_and_prod_attr"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "product_cart_analysis_selective_orders_category"], "unique_id": "model.sql_repository_bz.product_cart_analysis_selective_orders_category", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/product_cart_analysis_selective_orders_category.sql", "original_file_path": "models/03_marts/product_inventory/product_cart_analysis_selective_orders_category.sql", "name": "product_cart_analysis_selective_orders_category", "alias": "product_cart_analysis_selective_orders_category", "checksum": {"name": "sha256", "checksum": "170250aa53904db5f7796f0933c24f50ac38e18654a1e43b0fd6c300a0fbe988"}, "tags": [], "refs": [["int_ga_cart_products_and_prod_attr"]], "sources": [], "description": "this model shows aggregated by date, hostname and product category", "columns": {"date": {"name": "date", "description": "date of transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ga_hostname": {"name": "ga_hostname", "description": "hostname of transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "product category of product in cart, table ist aggregated by this column", "meta": {}, "data_type": null, "quote": null, "tags": []}, "anzahl_transaktionen": {"name": "anzahl_transaktionen", "description": "number of transactions per date, hostname and product category", "meta": {}, "data_type": null, "quote": null, "tags": []}, "anzahl_auswahlbest": {"name": "anzahl_auswahlbest", "description": "number of transactions with selective order per date, hostname and product category", "meta": {}, "data_type": null, "quote": null, "tags": []}, "anzahl_versch_farben": {"name": "anzahl_versch_farben", "description": "number of transactions with selective order due to different product colors per date, hostname and product category", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/product_inventory/_models_product.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/product_cart_analysis_selective_orders_category.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750854.1327934, "compiled_sql": "with cart_products_and_prod_attr as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_cart_products_and_prod_attr`\n\n),\n\ntransactions_cat as (\n\n    select\n        ga_date as date,\n        ga_hostname,\n        ga_transaction_id,\n        category,\n        count (distinct ga_productid) as skus_per_category_and_transaction,\n        count (distinct color) as no_different_colors\n    from cart_products_and_prod_attr\n    group by 1,2,3,4\n\n)\n\nselect\n    date,\n    ga_hostname,\n    category,\n    count (distinct ga_transaction_id) as anzahl_transaktionen,\n    sum(if(skus_per_category_and_transaction > 1, 1, 0)) as anzahl_auswahlbest,\n    sum(if(no_different_colors > 1 , 1, 0)) as anzahl_versch_farben\nfrom transactions_cat\ngroup by 1,2,3", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_cart_analysis_selective_orders_category`"}, "model.sql_repository_bz.product_attr_and_shopping_by_day": {"raw_sql": "select * from {{ ref('int_gads_product_data_and_shopping_by_day') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gads_product_data_and_shopping_by_day"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {"owner": "@Stephanie H"}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "product_attr_and_shopping_by_day"], "unique_id": "model.sql_repository_bz.product_attr_and_shopping_by_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/product_attr_and_shopping_by_day.sql", "original_file_path": "models/03_marts/product_inventory/product_attr_and_shopping_by_day.sql", "name": "product_attr_and_shopping_by_day", "alias": "product_attr_and_shopping_by_day", "checksum": {"name": "sha256", "checksum": "9be6907034de782c12af605e6249e73d9ad112179a6c29399cb678ed340d2fca"}, "tags": [], "refs": [["int_gads_product_data_and_shopping_by_day"]], "sources": [], "description": "this model shows mc product attributes combined with gads shopping clicks by day and sku", "columns": {}, "meta": {"owner": "@Stephanie H"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/product_inventory/_models_product.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/product_attr_and_shopping_by_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750854.1154044, "compiled_sql": "select * from `bergzeit`.`dbt_analytics_intermediate`.`int_gads_product_data_and_shopping_by_day`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_attr_and_shopping_by_day`"}, "model.sql_repository_bz.product_inventory_brand_aggregates": {"raw_sql": "/* Product data for the last 30 days is joined with product attributes and aggregated by day and brand \r\nForeign stock metrics are calculated \r\n\r\nThis table serves as input table for BQ dataset `bergzeit.product_inventory.bm_product_kpis_daily` and Fremdlager PBI Report*/\r\n\r\nwith ga_data as (\r\n\r\n    select\r\n        ga_date as g_date,\r\n        ga_productid as g_sku,\r\n        ga_brand as g_brand,\r\n        ga_product_category as top_category,\r\n        -- split(product.v2ProductCategory,' > ')[offset(0)] as top_category,\r\n        sum(sum_product_revenue) as product_revenue,\r\n        sum(sum_product_quantity) as product_quantity\r\n    from {{ ref('int_ga_product_checkouts_by_day') }}\r\n    where ga_date between {{ get_last_n_days_date_range(30) }}\r\n    group by 1,2,3,4\r\n\r\n),\r\n\r\nproduct_data as (\r\n\r\n    select * except (sk_id)\r\n    from {{ ref('stg_gmc_product_attributes_daily') }}\r\n    where date between {{ get_last_n_days_date_range(30) }}\r\n\r\n),\r\n\r\njoined_data as (\r\n\r\n    select *\r\n    from product_data as attributes\r\n    left outer join ga_data\r\n        on attributes.date = ga_data.g_date\r\n        and attributes.product_id = ga_data.g_sku\r\n    where attributes.date is not null\r\n\r\n),\r\n\r\n--aggregate on 'day' for easy extension and quota calculation\r\naggregates as (\r\n\r\n    select\r\n        date,\r\n        brand,\r\n        count(distinct product_id) as count_product_id,\r\n        count(distinct if(foreign_stock_flag = 1, product_id,null)) as count_fl_products,\r\n        sum(ifnull(product_revenue,0)) as revenue_total,\r\n        sum(if(foreign_stock_flag = 1, product_revenue,0)) as fl_revenue,\r\n        sum(product_revenue - price_purchase) as rohertrag_total,\r\n        sum(if(foreign_stock_flag = 1, product_revenue - price_purchase, 0)) as fl_rohertrag \r\n    from joined_data\r\n    group by 1,2\r\n\r\n),\r\n\r\n--calculate main KPIs\r\nmain_kpis as (\r\n\r\n    select\r\n        date,\r\n        brand,\r\n        count_product_id,\r\n        count_fl_products,\r\n        --count_fl_products / count_product_id as fl_quota,\r\n        round(revenue_total,2) as revenue_total,\r\n        round(fl_revenue,2) as fl_revenue,\r\n        --fl_revenue / revenue_total as fl_revenue_quota,\r\n        round(revenue_total - fl_revenue,2) as revenue_lvs,\r\n        round(rohertrag_total,2) as rohertrag_total,\r\n        --rohertrag_total / revenue_total as rohertragsquote_total,\r\n        round(fl_rohertrag,2) as fl_rohertrag,\r\n        safe_divide(fl_rohertrag , fl_revenue) as fl_rohertragsquote\r\n    from aggregates\r\n\r\n)\r\n\r\nselect * from main_kpis", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.int_ga_product_checkouts_by_day", "model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "buying_sales_powerbi", "product_inventory_brand_aggregates"], "unique_id": "model.sql_repository_bz.product_inventory_brand_aggregates", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/buying_sales_powerbi/product_inventory_brand_aggregates.sql", "original_file_path": "models/03_marts/product_inventory/buying_sales_powerbi/product_inventory_brand_aggregates.sql", "name": "product_inventory_brand_aggregates", "alias": "product_inventory_brand_aggregates", "checksum": {"name": "sha256", "checksum": "f0dde27e44a5c3ead44ccd79d0a14573f5bd195b7c127fb6fbe935ee34846d4c"}, "tags": [], "refs": [["int_ga_product_checkouts_by_day"], ["stg_gmc_product_attributes_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/buying_sales_powerbi/product_inventory_brand_aggregates.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750848.9285207, "compiled_sql": "/* Product data for the last 30 days is joined with product attributes and aggregated by day and brand \nForeign stock metrics are calculated \n\nThis table serves as input table for BQ dataset `bergzeit.product_inventory.bm_product_kpis_daily` and Fremdlager PBI Report*/\n\nwith ga_data as (\n\n    select\n        ga_date as g_date,\n        ga_productid as g_sku,\n        ga_brand as g_brand,\n        ga_product_category as top_category,\n        -- split(product.v2ProductCategory,' > ')[offset(0)] as top_category,\n        sum(sum_product_revenue) as product_revenue,\n        sum(sum_product_quantity) as product_quantity\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_product_checkouts_by_day`\n    where ga_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1,2,3,4\n\n),\n\nproduct_data as (\n\n    select * except (sk_id)\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\n    where date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\njoined_data as (\n\n    select *\n    from product_data as attributes\n    left outer join ga_data\n        on attributes.date = ga_data.g_date\n        and attributes.product_id = ga_data.g_sku\n    where attributes.date is not null\n\n),\n\n--aggregate on 'day' for easy extension and quota calculation\naggregates as (\n\n    select\n        date,\n        brand,\n        count(distinct product_id) as count_product_id,\n        count(distinct if(foreign_stock_flag = 1, product_id,null)) as count_fl_products,\n        sum(ifnull(product_revenue,0)) as revenue_total,\n        sum(if(foreign_stock_flag = 1, product_revenue,0)) as fl_revenue,\n        sum(product_revenue - price_purchase) as rohertrag_total,\n        sum(if(foreign_stock_flag = 1, product_revenue - price_purchase, 0)) as fl_rohertrag \n    from joined_data\n    group by 1,2\n\n),\n\n--calculate main KPIs\nmain_kpis as (\n\n    select\n        date,\n        brand,\n        count_product_id,\n        count_fl_products,\n        --count_fl_products / count_product_id as fl_quota,\n        round(revenue_total,2) as revenue_total,\n        round(fl_revenue,2) as fl_revenue,\n        --fl_revenue / revenue_total as fl_revenue_quota,\n        round(revenue_total - fl_revenue,2) as revenue_lvs,\n        round(rohertrag_total,2) as rohertrag_total,\n        --rohertrag_total / revenue_total as rohertragsquote_total,\n        round(fl_rohertrag,2) as fl_rohertrag,\n        safe_divide(fl_rohertrag , fl_revenue) as fl_rohertragsquote\n    from aggregates\n\n)\n\nselect * from main_kpis", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_inventory_brand_aggregates`"}, "model.sql_repository_bz.product_inventory_product_performance_metrics": {"raw_sql": "with ga_data as (\r\n\r\n    select\r\n        ga_date as g_date,\r\n        ga_productid as g_sku,\r\n        ga_brand as g_brand,\r\n        ga_product_category as top_category,\r\n        -- split(product.v2ProductCategory,' > ')[offset(0)] as top_category,\r\n        sum(sum_product_revenue) as product_revenue,\r\n        sum(sum_product_quantity) as product_quantity\r\n    from {{ ref('int_ga_product_checkouts_by_day') }}\r\n    where ga_date between {{ get_last_n_days_date_range(30) }}\r\n    group by 1,2,3,4\r\n\r\n),\r\n\r\nproduct_data as (\r\n\r\n  select * except (sk_id)\r\n  from {{ ref('stg_gmc_product_attributes_daily') }}\r\n  where date between {{ get_last_n_days_date_range(30) }}\r\n\r\n),\r\n\r\njoined_data as (\r\n\r\n    select *\r\n    from product_data as attributes\r\n    left outer join ga_data \r\n        on date = g_date\r\n        and product_id = g_sku\r\n    where date is not null\r\n\r\n),\r\n\r\nnew_metrics as (\r\n\r\n    select distinct\r\n        date,\r\n        extract(isoweek from date) as weeknr, --isoweek for week beginning on monday\r\n        extract(month from date) as monthnr,\r\n        extract(year from date) as yearnr,\r\n        parent_id,\r\n        /*Stylelogik: Die Konvention ist 'parent_id + Herstellerfarbe'; wird im Einkauf genutzt */\r\n        case \r\n            when\r\n                product_id is not null and \r\n                product_id <> '' and \r\n                color_manufacturer is not null and \r\n                color_manufacturer <> ''\r\n            then\r\n                concat(substr(product_id,1,7), '-',color_manufacturer)\r\n            else null\r\n        end as style,\r\n        product_id,\r\n        category,\r\n        brand,\r\n        parent_title,\r\n        description,\r\n        season,\r\n        color_manufacturer,\r\n        color,\r\n        gender,\r\n        price_net, -- price without VAT!\r\n        price_purchase, -- Einstandspreis, nicht UVP!\r\n        is_foreign_stock,\r\n        stock_total,\r\n        stock_lvs,\r\n        stock_gmund,\r\n        stock_ghp,\r\n        stock_supplier,\r\n        is_special_item,\r\n        manufacturer_size,\r\n        /*Fremdlagerlogik: Nur wenn alle Bedingungen erf\u00fcllt sind, wird eine EDI-Bestellugn ausgel\u00f6st*/\r\n        case\r\n            when\r\n                is_foreign_stock = true and\r\n                stock_lvs <= 0 and\r\n                stock_supplier > 0 \r\n            then true\r\n            else null\r\n            end as _fl_item,\r\n        product_quantity,\r\n        product_revenue,\r\n        --Test\r\n        case\r\n        when\r\n            price_purchase > 1 and\r\n            category != 'Gutscheinboxen'\r\n        then\r\n            product_revenue - (price_purchase * product_quantity)\r\n        end as rohertrag,\r\n        case\r\n        when\r\n            price_purchase > 1 and\r\n            category != 'Gutscheinboxen'\r\n        then\r\n            (product_revenue - (price_purchase * product_quantity)) / product_revenue\r\n        end as rohertragsquote\r\n    from joined_data\r\n)\r\n\r\nselect * from new_metrics", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.int_ga_product_checkouts_by_day", "model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": null, "schema": "product_inventory", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_product_inventory", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "buying_sales_powerbi", "product_inventory_product_performance_metrics"], "unique_id": "model.sql_repository_bz.product_inventory_product_performance_metrics", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/buying_sales_powerbi/product_inventory_product_performance_metrics.sql", "original_file_path": "models/03_marts/product_inventory/buying_sales_powerbi/product_inventory_product_performance_metrics.sql", "name": "product_inventory_product_performance_metrics", "alias": "product_inventory_product_performance_metrics", "checksum": {"name": "sha256", "checksum": "4cd3d23d17aef14bc333702a4ac0046de5975f8be9c5dd57d999ba72e0a5c4d0"}, "tags": [], "refs": [["int_ga_product_checkouts_by_day"], ["stg_gmc_product_attributes_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/buying_sales_powerbi/product_inventory_product_performance_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "product_inventory", "materialized": "view"}, "created_at": 1663750848.9409857, "compiled_sql": "with ga_data as (\n\n    select\n        ga_date as g_date,\n        ga_productid as g_sku,\n        ga_brand as g_brand,\n        ga_product_category as top_category,\n        -- split(product.v2ProductCategory,' > ')[offset(0)] as top_category,\n        sum(sum_product_revenue) as product_revenue,\n        sum(sum_product_quantity) as product_quantity\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_product_checkouts_by_day`\n    where ga_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n    group by 1,2,3,4\n\n),\n\nproduct_data as (\n\n  select * except (sk_id)\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\n  where date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\njoined_data as (\n\n    select *\n    from product_data as attributes\n    left outer join ga_data \n        on date = g_date\n        and product_id = g_sku\n    where date is not null\n\n),\n\nnew_metrics as (\n\n    select distinct\n        date,\n        extract(isoweek from date) as weeknr, --isoweek for week beginning on monday\n        extract(month from date) as monthnr,\n        extract(year from date) as yearnr,\n        parent_id,\n        /*Stylelogik: Die Konvention ist 'parent_id + Herstellerfarbe'; wird im Einkauf genutzt */\n        case \n            when\n                product_id is not null and \n                product_id <> '' and \n                color_manufacturer is not null and \n                color_manufacturer <> ''\n            then\n                concat(substr(product_id,1,7), '-',color_manufacturer)\n            else null\n        end as style,\n        product_id,\n        category,\n        brand,\n        parent_title,\n        description,\n        season,\n        color_manufacturer,\n        color,\n        gender,\n        price_net, -- price without VAT!\n        price_purchase, -- Einstandspreis, nicht UVP!\n        is_foreign_stock,\n        stock_total,\n        stock_lvs,\n        stock_gmund,\n        stock_ghp,\n        stock_supplier,\n        is_special_item,\n        manufacturer_size,\n        /*Fremdlagerlogik: Nur wenn alle Bedingungen erf\u00fcllt sind, wird eine EDI-Bestellugn ausgel\u00f6st*/\n        case\n            when\n                is_foreign_stock = true and\n                stock_lvs <= 0 and\n                stock_supplier > 0 \n            then true\n            else null\n            end as _fl_item,\n        product_quantity,\n        product_revenue,\n        --Test\n        case\n        when\n            price_purchase > 1 and\n            category != 'Gutscheinboxen'\n        then\n            product_revenue - (price_purchase * product_quantity)\n        end as rohertrag,\n        case\n        when\n            price_purchase > 1 and\n            category != 'Gutscheinboxen'\n        then\n            (product_revenue - (price_purchase * product_quantity)) / product_revenue\n        end as rohertragsquote\n    from joined_data\n)\n\nselect * from new_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_product_inventory`.`product_inventory_product_performance_metrics`"}, "model.sql_repository_bz.seo_crawl_lp_in_sitemap": {"raw_sql": "select *\r\nfrom {{ ref('int_crawl_de_lp_in_sitemap') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_crawl_de_lp_in_sitemap"]}, "config": {"enabled": true, "alias": null, "schema": "seo_analytics", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_seo_analytics", "fqn": ["sql_repository_bz", "03_marts", "seo_analytics", "seo_crawl_lp_in_sitemap"], "unique_id": "model.sql_repository_bz.seo_crawl_lp_in_sitemap", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/seo_analytics/seo_crawl_lp_in_sitemap.sql", "original_file_path": "models/03_marts/seo_analytics/seo_crawl_lp_in_sitemap.sql", "name": "seo_crawl_lp_in_sitemap", "alias": "seo_crawl_lp_in_sitemap", "checksum": {"name": "sha256", "checksum": "df0e81fcd1ef75d85c835b2bd1917c2faf9959e959c2d1e63b8a97eb5e7d19ed"}, "tags": [], "refs": [["int_crawl_de_lp_in_sitemap"]], "sources": [], "description": "shows the daily distinct count of /lp/ pages in the de sitemap", "columns": {"crawl_date": {"name": "crawl_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url_count": {"name": "url_count", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/seo_analytics/_models_seo_analytics.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/seo_analytics/seo_crawl_lp_in_sitemap.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "seo_analytics", "materialized": "view"}, "created_at": 1663750854.2310767, "compiled_sql": "select *\nfrom `bergzeit`.`dbt_analytics_intermediate`.`int_crawl_de_lp_in_sitemap`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_seo_analytics`.`seo_crawl_lp_in_sitemap`"}, "model.sql_repository_bz.seo_ga_pagespeed_sessions_transactions": {"raw_sql": "with daily_pagespeed_per_pagetype_data as (\r\n\r\n    select *\r\n    from {{ ref('stg_ga_pagespeed_per_pagetype') }}\r\n    where ga_date between {{ get_last_n_days_date_range(30) }}\r\n\r\n),\r\n\r\ndaily_session_and_transaction_data as (\r\n\r\n    select *\r\n    from {{ ref('int_ga_sessions_transactions') }}\r\n\r\n),\r\n\r\ncombined_pagespeed_sessions_and_transactions as (\r\n\r\n    select *\r\n    from daily_pagespeed_per_pagetype_data\r\n    left join daily_session_and_transaction_data using(ga_date,ga_device_category,ga_acquisition_channel)\r\n\r\n)\r\n\r\nselect * from combined_pagespeed_sessions_and_transactions", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["model.sql_repository_bz.stg_ga_pagespeed_per_pagetype", "model.sql_repository_bz.int_ga_sessions_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "seo_analytics", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_seo_analytics", "fqn": ["sql_repository_bz", "03_marts", "seo_analytics", "seo_ga_pagespeed_sessions_transactions"], "unique_id": "model.sql_repository_bz.seo_ga_pagespeed_sessions_transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/seo_analytics/seo_ga_pagespeed_sessions_transactions.sql", "original_file_path": "models/03_marts/seo_analytics/seo_ga_pagespeed_sessions_transactions.sql", "name": "seo_ga_pagespeed_sessions_transactions", "alias": "seo_ga_pagespeed_sessions_transactions", "checksum": {"name": "sha256", "checksum": "dd9bf61149c2d8e1be824a56750a3e72e8e56768fa765d62b6030a091be9491d"}, "tags": [], "refs": [["stg_ga_pagespeed_per_pagetype"], ["int_ga_sessions_transactions"]], "sources": [], "description": "joins the daily pagespeed information per pagetype with daily session and transaction data", "columns": {}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/seo_analytics/_models_seo_analytics.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/seo_analytics/seo_ga_pagespeed_sessions_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "seo_analytics", "materialized": "view"}, "created_at": 1663750854.2346265, "compiled_sql": "with daily_pagespeed_per_pagetype_data as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_pagespeed_per_pagetype`\n    where ga_date between \n    date_sub(current_date(), interval 30 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n),\n\ndaily_session_and_transaction_data as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_sessions_transactions`\n\n),\n\ncombined_pagespeed_sessions_and_transactions as (\n\n    select *\n    from daily_pagespeed_per_pagetype_data\n    left join daily_session_and_transaction_data using(ga_date,ga_device_category,ga_acquisition_channel)\n\n)\n\nselect * from combined_pagespeed_sessions_and_transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_seo_analytics`.`seo_ga_pagespeed_sessions_transactions`"}, "model.sql_repository_bz.seo_crawl_data_advertools": {"raw_sql": "with weekly_advertools_crawl_data as (\r\n\r\n    select *\r\n    from {{ ref('stg_crawl_advertools_logs') }}\r\n\r\n)\r\n\r\nselect * from weekly_advertools_crawl_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_crawl_advertools_logs"]}, "config": {"enabled": true, "alias": null, "schema": "seo_analytics", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_seo_analytics", "fqn": ["sql_repository_bz", "03_marts", "seo_analytics", "seo_crawl_data_advertools"], "unique_id": "model.sql_repository_bz.seo_crawl_data_advertools", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/seo_analytics/seo_crawl_data_advertools.sql", "original_file_path": "models/03_marts/seo_analytics/seo_crawl_data_advertools.sql", "name": "seo_crawl_data_advertools", "alias": "seo_crawl_data_advertools", "checksum": {"name": "sha256", "checksum": "b6d346298037d9b9004b47bdd5c0f6f88bca81bc9015ebebc2a29a653ef465af"}, "tags": [], "refs": [["stg_crawl_advertools_logs"]], "sources": [], "description": "this model lists a tabular output of an exploratory weekly custom crawl with the Python advertools library", "columns": {"url_crawl_id": {"name": "url_crawl_id", "description": "", "meta": {"primary-key": true}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/seo_analytics/_models_seo_analytics.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/seo_analytics/seo_crawl_data_advertools.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "seo_analytics", "materialized": "view"}, "created_at": 1663750854.2255864, "compiled_sql": "with weekly_advertools_crawl_data as (\n\n    select *\n    from `bergzeit`.`dbt_analytics_staging`.`stg_crawl_advertools_logs`\n\n)\n\nselect * from weekly_advertools_crawl_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_seo_analytics`.`seo_crawl_data_advertools`"}, "model.sql_repository_bz.seo_jira_finished_ifront_tickets": {"raw_sql": "select * from {{ ref('stg_jira_finished_seo_tickets') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_jira_finished_seo_tickets"]}, "config": {"enabled": true, "alias": null, "schema": "seo_analytics", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_seo_analytics", "fqn": ["sql_repository_bz", "03_marts", "seo_analytics", "seo_jira_finished_ifront_tickets"], "unique_id": "model.sql_repository_bz.seo_jira_finished_ifront_tickets", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/seo_analytics/seo_jira_finished_ifront_tickets.sql", "original_file_path": "models/03_marts/seo_analytics/seo_jira_finished_ifront_tickets.sql", "name": "seo_jira_finished_ifront_tickets", "alias": "seo_jira_finished_ifront_tickets", "checksum": {"name": "sha256", "checksum": "210def6de85e32ccc1ec0a3c79a6c2c6b141fe0a4f0cdd56a939225d5971d482"}, "tags": [], "refs": [["stg_jira_finished_seo_tickets"]], "sources": [], "description": "this models provides all finished IFRONT Tickets with SEO content", "columns": {}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/seo_analytics/_models_seo_analytics.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/seo_analytics/seo_jira_finished_ifront_tickets.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "seo_analytics", "materialized": "view"}, "created_at": 1663750854.257994, "compiled_sql": "select * from `bergzeit`.`dbt_analytics_staging`.`stg_jira_finished_seo_tickets`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_seo_analytics`.`seo_jira_finished_ifront_tickets`"}, "model.sql_repository_bz.seo_gsc_ga_data_for_mag_reworked": {"raw_sql": "select * from {{ ref('int_gsc_data_mag_reworked') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gsc_data_mag_reworked"]}, "config": {"enabled": true, "alias": null, "schema": "seo_analytics", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_seo_analytics", "fqn": ["sql_repository_bz", "03_marts", "seo_analytics", "seo_gsc_ga_data_for_mag_reworked"], "unique_id": "model.sql_repository_bz.seo_gsc_ga_data_for_mag_reworked", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/seo_analytics/seo_gsc_ga_data_for_mag_reworked.sql", "original_file_path": "models/03_marts/seo_analytics/seo_gsc_ga_data_for_mag_reworked.sql", "name": "seo_gsc_ga_data_for_mag_reworked", "alias": "seo_gsc_ga_data_for_mag_reworked", "checksum": {"name": "sha256", "checksum": "47037be3122016dc454a8b41f072c50ff873fe360037fc234778a86ff83f1138"}, "tags": [], "refs": [["int_gsc_data_mag_reworked"]], "sources": [], "description": "shows gsc clicks, impressions, position and the last publication date for a manually curated list of reworked magazin posts", "columns": {}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/seo_analytics/_models_seo_analytics.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/seo_analytics/seo_gsc_ga_data_for_mag_reworked.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "seo_analytics", "materialized": "view"}, "created_at": 1663750854.2413912, "compiled_sql": "select * from `bergzeit`.`dbt_analytics_intermediate`.`int_gsc_data_mag_reworked`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_seo_analytics`.`seo_gsc_ga_data_for_mag_reworked`"}, "model.sql_repository_bz.seo_sitemap_efficiency": {"raw_sql": "with aggregated_metrics_by_sitemap as (\r\n\r\n    select\r\n        sitemap_name,\r\n        count(url) as url_count,\r\n        count(crawl_count) as crawl_count,\r\n        sum(clicks) as clicks,\r\n        sum(impressions) as impressions\r\n    from {{ ref('int_sitemap_and_crawl_and_gsc_data') }}\r\n    group by 1\r\n\r\n),\r\n\r\ncalculated_metrics_by_sitemap as (\r\n\r\n    select\r\n        *,\r\n        round(crawl_count / url_count,4) as crawl_to_url_count,\r\n        round(clicks / url_count,4) as clicks_to_url_count,\r\n        round(impressions / url_count,4) as impressions_to_url_count,\r\n    from aggregated_metrics_by_sitemap\r\n\r\n)\r\n\r\nselect * from calculated_metrics_by_sitemap", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_sitemap_and_crawl_and_gsc_data"]}, "config": {"enabled": true, "alias": null, "schema": "seo_analytics", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_seo_analytics", "fqn": ["sql_repository_bz", "03_marts", "seo_analytics", "seo_sitemap_efficiency"], "unique_id": "model.sql_repository_bz.seo_sitemap_efficiency", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/seo_analytics/seo_sitemap_efficiency.sql", "original_file_path": "models/03_marts/seo_analytics/seo_sitemap_efficiency.sql", "name": "seo_sitemap_efficiency", "alias": "seo_sitemap_efficiency", "checksum": {"name": "sha256", "checksum": "937363d43209bc59cc4d1a0755c75cf6f662325d4b79cf328df878c28eb64fc8"}, "tags": [], "refs": [["int_sitemap_and_crawl_and_gsc_data"]], "sources": [], "description": "this models compares crawl count and GSC impressions and clicks and aggreates to sitemap level", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/seo_analytics/_models_seo_analytics.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/seo_analytics/seo_sitemap_efficiency.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "seo_analytics", "materialized": "view"}, "created_at": 1663750854.2546191, "compiled_sql": "with aggregated_metrics_by_sitemap as (\n\n    select\n        sitemap_name,\n        count(url) as url_count,\n        count(crawl_count) as crawl_count,\n        sum(clicks) as clicks,\n        sum(impressions) as impressions\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_sitemap_and_crawl_and_gsc_data`\n    group by 1\n\n),\n\ncalculated_metrics_by_sitemap as (\n\n    select\n        *,\n        round(crawl_count / url_count,4) as crawl_to_url_count,\n        round(clicks / url_count,4) as clicks_to_url_count,\n        round(impressions / url_count,4) as impressions_to_url_count,\n    from aggregated_metrics_by_sitemap\n\n)\n\nselect * from calculated_metrics_by_sitemap", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_seo_analytics`.`seo_sitemap_efficiency`"}, "model.sql_repository_bz.seo_gsc_data_for_top_pages": {"raw_sql": "select * from {{ ref('int_gsc_data_for_top_pages') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gsc_data_for_top_pages"]}, "config": {"enabled": true, "alias": null, "schema": "seo_analytics", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_seo_analytics", "fqn": ["sql_repository_bz", "03_marts", "seo_analytics", "seo_gsc_data_for_top_pages"], "unique_id": "model.sql_repository_bz.seo_gsc_data_for_top_pages", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/seo_analytics/seo_gsc_data_for_top_pages.sql", "original_file_path": "models/03_marts/seo_analytics/seo_gsc_data_for_top_pages.sql", "name": "seo_gsc_data_for_top_pages", "alias": "seo_gsc_data_for_top_pages", "checksum": {"name": "sha256", "checksum": "ba8a3086e62002bfd9285a5171c11dbac41205e3a5ae4d00abdb4073d93a56c0"}, "tags": [], "refs": [["int_gsc_data_for_top_pages"]], "sources": [], "description": "shows gsc clicks, impressions, ctr and position for a manually curated list of top shop and magazin pages", "columns": {}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/seo_analytics/_models_seo_analytics.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/seo_analytics/seo_gsc_data_for_top_pages.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "seo_analytics", "materialized": "view"}, "created_at": 1663750854.2380052, "compiled_sql": "select * from `bergzeit`.`dbt_analytics_intermediate`.`int_gsc_data_for_top_pages`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_seo_analytics`.`seo_gsc_data_for_top_pages`"}, "model.sql_repository_bz.seo_gsc_url_age": {"raw_sql": "select * from {{ ref('int_gsc_ga_urlage_def') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gsc_ga_urlage_def"]}, "config": {"enabled": true, "alias": null, "schema": "seo_analytics", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_seo_analytics", "fqn": ["sql_repository_bz", "03_marts", "seo_analytics", "seo_gsc_url_age"], "unique_id": "model.sql_repository_bz.seo_gsc_url_age", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/seo_analytics/seo_gsc_url_age.sql", "original_file_path": "models/03_marts/seo_analytics/seo_gsc_url_age.sql", "name": "seo_gsc_url_age", "alias": "seo_gsc_url_age", "checksum": {"name": "sha256", "checksum": "83404b6769fe1e88b0d2f12642ad26b2af5abd2c97eec695bcc9b8588772a83d"}, "tags": [], "refs": [["int_gsc_ga_urlage_def"]], "sources": [], "description": "classifies all crawl urls as old (oxid) or new (iShop) and assigns a pagetype based on sitemap and ga data", "columns": {}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/seo_analytics/_models_seo_analytics.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/seo_analytics/seo_gsc_url_age.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "seo_analytics", "materialized": "view"}, "created_at": 1663750854.2451923, "compiled_sql": "select * from `bergzeit`.`dbt_analytics_intermediate`.`int_gsc_ga_urlage_def`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_seo_analytics`.`seo_gsc_url_age`"}, "model.sql_repository_bz.seo_pagespeed_web_vitals_data": {"raw_sql": "with pagespeed_web_vitals_data as (\r\n\r\n    select * \r\n    from {{ ref('stg_pagespeed_url_data') }}\r\n)\r\n\r\nselect * from pagespeed_web_vitals_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_pagespeed_url_data"]}, "config": {"enabled": true, "alias": null, "schema": "seo_analytics", "database": null, "tags": [], "meta": {"owner": "@Chris G"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_seo_analytics", "fqn": ["sql_repository_bz", "03_marts", "seo_analytics", "seo_pagespeed_web_vitals_data"], "unique_id": "model.sql_repository_bz.seo_pagespeed_web_vitals_data", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/seo_analytics/seo_pagespeed_web_vitals_data.sql", "original_file_path": "models/03_marts/seo_analytics/seo_pagespeed_web_vitals_data.sql", "name": "seo_pagespeed_web_vitals_data", "alias": "seo_pagespeed_web_vitals_data", "checksum": {"name": "sha256", "checksum": "f498c28f1e157d290ca6711201e65d2ed763893cecb26e0703cf17bdf416fa23"}, "tags": [], "refs": [["stg_pagespeed_url_data"]], "sources": [], "description": "", "columns": {}, "meta": {"owner": "@Chris G"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/seo_analytics/_models_seo_analytics.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/seo_analytics/seo_pagespeed_web_vitals_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "seo_analytics", "materialized": "view"}, "created_at": 1663750854.2613053, "compiled_sql": "with pagespeed_web_vitals_data as (\n\n    select * \n    from `bergzeit`.`dbt_analytics_staging`.`stg_pagespeed_url_data`\n)\n\nselect * from pagespeed_web_vitals_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_seo_analytics`.`seo_pagespeed_web_vitals_data`"}, "model.sql_repository_bz.seo_search_query_by_brand": {"raw_sql": "with gsc_query_with_brand as (\r\n\r\n    select\r\n        gsc_date,\r\n        device,\r\n        query,\r\n        brand,\r\n        last_category_short,\r\n        gsc_country,\r\n        total_impressions,\r\n        magazin_impressions,\r\n        shop_impressions,\r\n        total_clicks,\r\n        magazin_clicks,\r\n        shop_clicks\r\n    from {{ ref('int_gsc_query_by_brand') }}\r\n\r\n),\r\n\r\nquery_by_keyword_type as (\r\n\r\n    select\r\n        *,\r\n        sum(if(brand is null, null, if(query = lower(brand), total_impressions, 0))) as brand_keyword_impressions,\r\n        sum(if(brand is null, null, if(query = lower(brand), 0, total_impressions))) as brand_kombi_keyword_impressions\r\n    from gsc_query_with_brand\r\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\r\n\r\n)\r\n\r\n\r\nselect * from query_by_keyword_type", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_gsc_query_by_brand"]}, "config": {"enabled": true, "alias": null, "schema": "seo_analytics", "database": null, "tags": [], "meta": {"owner": "@Helena S"}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "required_docs": true, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt_seo_analytics", "fqn": ["sql_repository_bz", "03_marts", "seo_analytics", "seo_search_query_by_brand"], "unique_id": "model.sql_repository_bz.seo_search_query_by_brand", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/seo_analytics/seo_search_query_by_brand.sql", "original_file_path": "models/03_marts/seo_analytics/seo_search_query_by_brand.sql", "name": "seo_search_query_by_brand", "alias": "seo_search_query_by_brand", "checksum": {"name": "sha256", "checksum": "6ae584e36b721b080aff776af609595cdbe36f07741ad023539b0b1b8516c147"}, "tags": [], "refs": [["int_gsc_query_by_brand"]], "sources": [], "description": "classifies the daily seo search keywords by brand and product category", "columns": {"query": {"name": "query", "description": "seo search query", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "brand name found in the seo search query", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_category_short": {"name": "last_category_short", "description": "product category found in the seo search query", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"owner": "@Helena S"}, "docs": {"show": true}, "patch_path": "sql_repository_bz://models/03_marts/seo_analytics/_models_seo_analytics.yml", "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/seo_analytics/seo_search_query_by_brand.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}, "required_docs": true, "schema": "seo_analytics", "materialized": "view"}, "created_at": 1663750854.2507389, "compiled_sql": "with gsc_query_with_brand as (\n\n    select\n        gsc_date,\n        device,\n        query,\n        brand,\n        last_category_short,\n        gsc_country,\n        total_impressions,\n        magazin_impressions,\n        shop_impressions,\n        total_clicks,\n        magazin_clicks,\n        shop_clicks\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_gsc_query_by_brand`\n\n),\n\nquery_by_keyword_type as (\n\n    select\n        *,\n        sum(if(brand is null, null, if(query = lower(brand), total_impressions, 0))) as brand_keyword_impressions,\n        sum(if(brand is null, null, if(query = lower(brand), 0, total_impressions))) as brand_kombi_keyword_impressions\n    from gsc_query_with_brand\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n\n)\n\n\nselect * from query_by_keyword_type", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt_seo_analytics`.`seo_search_query_by_brand`"}, "model.sql_repository_bz.zoovu_sessions_and_direct_product_revenue": {"raw_sql": "-- find full user ids with zoovu interaction and subsequent detail impression\r\nWITH zoovu_users AS (\r\n  select\r\n    fullVisitorId AS full_visitor_id,\r\n    visitId,\r\n    hits.time AS time_stamp,\r\n    LAG(hits.page.pagePath, 2) OVER (PARTITION BY fullvisitorId, visitStartTime ORDER BY hits.hitNumber ASC) AS prev_prev_page,\r\n    LAG(hits.page.pagePath, 1) OVER (PARTITION BY fullvisitorId, visitStartTime ORDER BY hits.hitNumber ASC) AS previous_page,\r\n    hits.page.pagePath AS page_path,\r\n    hits.eCommerceAction.action_type AS eec_action_type,            \r\n    FROM  \r\n        `bergzeit.79472326.ga_sessions_*`,         \r\n        UNNEST(hits) AS hits\r\n    WHERE\r\n        _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)) and     \r\n        FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)) \r\n),\r\n\r\nvisitors_and_detail_views as (\r\n    select \r\n        distinct split(hits.page.pagePath,'?')[offset(0)] AS d_page_path,\r\n        split(product.productSKU,'-')[offset(0)] as product_parent_id,\r\n    from  \r\n        `bergzeit.79472326.ga_sessions_*`,         \r\n        unnest(hits) AS hits,         \r\n        UNNEST(hits.product) as product  \r\n    WHERE\r\n        _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)) and     \r\n        FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)) and \r\n        hits.eCommerceAction.action_type = '2'\r\n),\r\n\r\nvisitors_and_item_value as (\r\n    select \r\n        fullVisitorId AS v_full_visitor_id,\r\n        split(product.productSKU,'-')[offset(0)] as v_product_parent_id,\r\n        concat(fullVisitorId,'|', split(product.productSKU,'-')[offset(0)]) as v_visitor_id_product_sku,\r\n        round(sum(product.productRevenue / 1000000),3) as product_order_value,\r\n    from  \r\n        `bergzeit.79472326.ga_sessions_*`,         \r\n        unnest(hits) AS hits,         \r\n        unnest(hits.product) as product  \r\n    where\r\n        _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)) and     \r\n        FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)) and \r\n        hits.item.transactionId IS NOT NULL AND productRevenue > 0\r\n    group by 1,2,3\r\n),\r\n\r\n\r\nusers_and_item_ids as (\r\n    select      \r\n        *,      \r\n        --concat(previous_page, ' | ', eec_action_type, ' | ', product_sku ) as prev_page_detail_click \r\n    from zoovu_users as users\r\n    left join visitors_and_detail_views as dv\r\n        on users.page_path = dv.d_page_path\r\n    where      \r\n        eec_action_type like '2' and      \r\n        (regexp_contains(previous_page, '-berater/')  or regexp_contains(prev_prev_page, '-berater/'))\r\n)\r\n\r\nselect * except (v_product_parent_id)\r\nfrom users_and_item_ids as users\r\nleft join visitors_and_item_value iv\r\n    on users.full_visitor_id = iv.v_full_visitor_id \r\n    and users.product_parent_id = v_product_parent_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "legacy", "zoovu_sessions_and_direct_product_revenue"], "unique_id": "model.sql_repository_bz.zoovu_sessions_and_direct_product_revenue", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "legacy/zoovu_sessions_and_direct_product_revenue.sql", "original_file_path": "models/legacy/zoovu_sessions_and_direct_product_revenue.sql", "name": "zoovu_sessions_and_direct_product_revenue", "alias": "zoovu_sessions_and_direct_product_revenue", "checksum": {"name": "sha256", "checksum": "530e4c2050a60181b3f1530dababc78a69128b63373c535ff439e51a2372fd81"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/legacy/zoovu_sessions_and_direct_product_revenue.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750848.9989119, "compiled_sql": "-- find full user ids with zoovu interaction and subsequent detail impression\r\nWITH zoovu_users AS (\r\n  select\r\n    fullVisitorId AS full_visitor_id,\r\n    visitId,\r\n    hits.time AS time_stamp,\r\n    LAG(hits.page.pagePath, 2) OVER (PARTITION BY fullvisitorId, visitStartTime ORDER BY hits.hitNumber ASC) AS prev_prev_page,\r\n    LAG(hits.page.pagePath, 1) OVER (PARTITION BY fullvisitorId, visitStartTime ORDER BY hits.hitNumber ASC) AS previous_page,\r\n    hits.page.pagePath AS page_path,\r\n    hits.eCommerceAction.action_type AS eec_action_type,            \r\n    FROM  \r\n        `bergzeit.79472326.ga_sessions_*`,         \r\n        UNNEST(hits) AS hits\r\n    WHERE\r\n        _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)) and     \r\n        FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)) \r\n),\r\n\r\nvisitors_and_detail_views as (\r\n    select \r\n        distinct split(hits.page.pagePath,'?')[offset(0)] AS d_page_path,\r\n        split(product.productSKU,'-')[offset(0)] as product_parent_id,\r\n    from  \r\n        `bergzeit.79472326.ga_sessions_*`,         \r\n        unnest(hits) AS hits,         \r\n        UNNEST(hits.product) as product  \r\n    WHERE\r\n        _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)) and     \r\n        FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)) and \r\n        hits.eCommerceAction.action_type = '2'\r\n),\r\n\r\nvisitors_and_item_value as (\r\n    select \r\n        fullVisitorId AS v_full_visitor_id,\r\n        split(product.productSKU,'-')[offset(0)] as v_product_parent_id,\r\n        concat(fullVisitorId,'|', split(product.productSKU,'-')[offset(0)]) as v_visitor_id_product_sku,\r\n        round(sum(product.productRevenue / 1000000),3) as product_order_value,\r\n    from  \r\n        `bergzeit.79472326.ga_sessions_*`,         \r\n        unnest(hits) AS hits,         \r\n        unnest(hits.product) as product  \r\n    where\r\n        _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)) and     \r\n        FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)) and \r\n        hits.item.transactionId IS NOT NULL AND productRevenue > 0\r\n    group by 1,2,3\r\n),\r\n\r\n\r\nusers_and_item_ids as (\r\n    select      \r\n        *,      \r\n        --concat(previous_page, ' | ', eec_action_type, ' | ', product_sku ) as prev_page_detail_click \r\n    from zoovu_users as users\r\n    left join visitors_and_detail_views as dv\r\n        on users.page_path = dv.d_page_path\r\n    where      \r\n        eec_action_type like '2' and      \r\n        (regexp_contains(previous_page, '-berater/')  or regexp_contains(prev_prev_page, '-berater/'))\r\n)\r\n\r\nselect * except (v_product_parent_id)\r\nfrom users_and_item_ids as users\r\nleft join visitors_and_item_value iv\r\n    on users.full_visitor_id = iv.v_full_visitor_id \r\n    and users.product_parent_id = v_product_parent_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`zoovu_sessions_and_direct_product_revenue`"}, "model.sql_repository_bz.avg_temp_by_country_day": {"raw_sql": "WITH\r\n  temps_by_day AS (\r\n  SELECT\r\n    CAST(date AS string) AS date,\r\n    weekday_Index,\r\n    weekday_Name,\r\n    country,\r\n    CONCAT(EXTRACT(YEAR\r\n      FROM\r\n        date), '_', EXTRACT(MONTH\r\n      FROM\r\n        date)) AS year_month,\r\n    ROUND(AVG(temperature),2) AS avgTemp\r\n  FROM\r\n    `bergzeit.weatherData.weatherData_Current`\r\n  WHERE\r\n    date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)\r\n    AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\r\n  GROUP BY\r\n    1,2,3,4,5),\r\n    \r\n  -- calculate averages by month  \r\n  temps_by_month AS (\r\n  SELECT\r\n    country AS m_country,\r\n    CONCAT(EXTRACT(YEAR\r\n      FROM\r\n        date), '_', EXTRACT(MONTH\r\n      FROM\r\n        date)) AS m_year_month,\r\n    ROUND(AVG(temperature),2) AS m_avgTemp\r\n  FROM\r\n    `bergzeit.weatherData.weatherData_Current`\r\n  WHERE\r\n    date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)\r\n    AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\r\n  GROUP BY\r\n    1,\r\n    2),\r\n    \r\n   \r\n  revenue_by_day AS (SELECT\r\n    FORMAT_DATE('%Y-%m-%d', PARSE_DATE('%Y%m%d', date)) as r_date,\r\n    UPPER(SPLIT(hits.page.hostname,\"bergzeit.\")[OFFSET(1)]) AS r_country,\r\n    COUNT(hits.transaction.transactionId) AS transactions,\r\n    ROUND(SUM(hits.transaction.transactionRevenue)/1000000,4) AS revenue\r\n  FROM\r\n    `bergzeit.79472326.ga_sessions_*`, UNNEST (hits) as hits\r\n  WHERE\r\n    _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY))\r\n    AND FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n    AND hits.page.hostname IN (\"www.bergzeit.ch\", \"www.bergzeit.at\", \"www.bergzeit.de\")\r\n    AND hits.transaction.transactionId IS NOT NULL\r\n  GROUP BY\r\n    1,2)\r\n    \r\n   \r\nSELECT\r\n  * EXCEPT (m_country, m_year_month, r_date, r_country),\r\n  CASE \r\n    WHEN weekday_Index IN ('6','7') THEN 1\r\n    ELSE 0\r\n  END AS is_weekend,\r\n  ROUND(avgTemp - m_avgTemp, 4) AS temp_diff_to_m_avg\r\nFROM\r\n  temps_by_day\r\nJOIN temps_by_month ON\r\n  temps_by_day.country = temps_by_month.m_country\r\n  AND temps_by_day.year_month = temps_by_month.m_year_month\r\n  \r\nJOIN revenue_by_day ON\r\n  temps_by_day.country = revenue_by_day.r_country\r\n  AND temps_by_day.date = revenue_by_day.r_date\r\nORDER BY\r\n  date,\r\n  country ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "legacy", "avg_temp_by_country_day"], "unique_id": "model.sql_repository_bz.avg_temp_by_country_day", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "legacy/avg_temp_by_country_day.sql", "original_file_path": "models/legacy/avg_temp_by_country_day.sql", "name": "avg_temp_by_country_day", "alias": "avg_temp_by_country_day", "checksum": {"name": "sha256", "checksum": "eba071552eb0a3bfdf4500e69fc67d03fb70462c0ff4ba89471c5f2aa26a04be"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/legacy/avg_temp_by_country_day.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.0019782, "compiled_sql": "WITH\r\n  temps_by_day AS (\r\n  SELECT\r\n    CAST(date AS string) AS date,\r\n    weekday_Index,\r\n    weekday_Name,\r\n    country,\r\n    CONCAT(EXTRACT(YEAR\r\n      FROM\r\n        date), '_', EXTRACT(MONTH\r\n      FROM\r\n        date)) AS year_month,\r\n    ROUND(AVG(temperature),2) AS avgTemp\r\n  FROM\r\n    `bergzeit.weatherData.weatherData_Current`\r\n  WHERE\r\n    date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)\r\n    AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\r\n  GROUP BY\r\n    1,2,3,4,5),\r\n    \r\n  -- calculate averages by month  \r\n  temps_by_month AS (\r\n  SELECT\r\n    country AS m_country,\r\n    CONCAT(EXTRACT(YEAR\r\n      FROM\r\n        date), '_', EXTRACT(MONTH\r\n      FROM\r\n        date)) AS m_year_month,\r\n    ROUND(AVG(temperature),2) AS m_avgTemp\r\n  FROM\r\n    `bergzeit.weatherData.weatherData_Current`\r\n  WHERE\r\n    date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)\r\n    AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\r\n  GROUP BY\r\n    1,\r\n    2),\r\n    \r\n   \r\n  revenue_by_day AS (SELECT\r\n    FORMAT_DATE('%Y-%m-%d', PARSE_DATE('%Y%m%d', date)) as r_date,\r\n    UPPER(SPLIT(hits.page.hostname,\"bergzeit.\")[OFFSET(1)]) AS r_country,\r\n    COUNT(hits.transaction.transactionId) AS transactions,\r\n    ROUND(SUM(hits.transaction.transactionRevenue)/1000000,4) AS revenue\r\n  FROM\r\n    `bergzeit.79472326.ga_sessions_*`, UNNEST (hits) as hits\r\n  WHERE\r\n    _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY))\r\n    AND FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n    AND hits.page.hostname IN (\"www.bergzeit.ch\", \"www.bergzeit.at\", \"www.bergzeit.de\")\r\n    AND hits.transaction.transactionId IS NOT NULL\r\n  GROUP BY\r\n    1,2)\r\n    \r\n   \r\nSELECT\r\n  * EXCEPT (m_country, m_year_month, r_date, r_country),\r\n  CASE \r\n    WHEN weekday_Index IN ('6','7') THEN 1\r\n    ELSE 0\r\n  END AS is_weekend,\r\n  ROUND(avgTemp - m_avgTemp, 4) AS temp_diff_to_m_avg\r\nFROM\r\n  temps_by_day\r\nJOIN temps_by_month ON\r\n  temps_by_day.country = temps_by_month.m_country\r\n  AND temps_by_day.year_month = temps_by_month.m_year_month\r\n  \r\nJOIN revenue_by_day ON\r\n  temps_by_day.country = revenue_by_day.r_country\r\n  AND temps_by_day.date = revenue_by_day.r_date\r\nORDER BY\r\n  date,\r\n  country ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`avg_temp_by_country_day`"}, "model.sql_repository_bz.daily_diff_consentless_to_ga": {"raw_sql": "with ga_data as (\r\n\r\n  SELECT   \r\n    PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) AS date,\r\n    SUM(totals.transactionRevenue)/1000000 AS ga_value,\r\n  FROM\r\n    `bergzeit.215925936.ga_sessions_*`\r\n  WHERE\r\n    _TABLE_SUFFIX BETWEEN \"20210701\" AND cast(format_date('%Y%m%d', date_sub(current_date(), interval 1 day)) as string)\r\n  GROUP BY\r\n    1\r\n\r\n),\r\n\r\n\r\nshop_data as (\r\n  -- oxid data\r\n  SELECT\r\n    cast(Date as string) as o_date,\r\n    round(sum(Amount/1.19),4) as shop_value_net\r\n  FROM\r\n    `bergzeit.OXID_RevenueDaily.OB_RevenueDaily`\r\n  where date between \"2021-07-01\" and \"2021-07-20\"\r\n  group by 1\r\n\r\n  union all\r\n\r\n  -- ishop data\r\n  SELECT\r\n    split(cast(order_orderPlacedTime as string),' ')[safe_offset(0)] as o_date,\r\n    round(sum(order_totalProductPrice),4) as shop_value_net\r\n    FROM `bergzeit.transactions.ob_ishop_orders`\r\n  group by 1\r\n  order by o_date asc\r\n),\r\n\r\n\r\n\r\nconsentless_data as (\r\n  select\r\n    date as c_date, \r\n    round(SUM(transaction_value),4) as consentless_value\r\n  from\r\n    `bergzeit.consentless_tracking.tracking_hits_all`\r\n  WHERE\r\n    date between \"2021-07-01\" and \"2021-07-20\" and\r\n    site like '%outdoor%'\r\n  group by 1\r\n\r\n  union all \r\n\r\n  SELECT\r\n    date as c_date,\r\n    round(SUM(transaction_value/1.19),3) as consentless_value\r\n  FROM\r\n    `bergzeit.consentless_tracking.hits_prod`\r\n  WHERE\r\n    date between \"2021-07-21\" and  date_sub(current_date(), interval 1 day)\r\n  group by 1\r\n\r\n)\r\n\r\nselect \r\n  * except (o_date, c_date),\r\n  round((consentless_value-ga_value)/consentless_value,4) as diff_ga_to_consentless,\r\n  round((shop_value_net - consentless_value)/shop_value_net,4) as diff_shop_to_consentless,\r\n  round((shop_value_net - ga_value)/shop_value_net,4) as diff_ga_to_shop\r\nfrom ga_data as ga\r\nleft join shop_data as shop on\r\n  cast(ga.date as string) = shop.o_date\r\nleft join consentless_data consentless on\r\n  ga.date = consentless.c_date\r\norder by date asc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "legacy", "consentless", "daily_diff_consentless_to_ga"], "unique_id": "model.sql_repository_bz.daily_diff_consentless_to_ga", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "legacy/consentless/daily_diff_consentless_to_ga.sql", "original_file_path": "models/legacy/consentless/daily_diff_consentless_to_ga.sql", "name": "daily_diff_consentless_to_ga", "alias": "daily_diff_consentless_to_ga", "checksum": {"name": "sha256", "checksum": "a70887e31ebfb70e6448f0da00b0ed2547fb27c684d884dba6ca3c15bd5ab418"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/legacy/consentless/daily_diff_consentless_to_ga.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.0050573, "compiled_sql": "with ga_data as (\r\n\r\n  SELECT   \r\n    PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) AS date,\r\n    SUM(totals.transactionRevenue)/1000000 AS ga_value,\r\n  FROM\r\n    `bergzeit.215925936.ga_sessions_*`\r\n  WHERE\r\n    _TABLE_SUFFIX BETWEEN \"20210701\" AND cast(format_date('%Y%m%d', date_sub(current_date(), interval 1 day)) as string)\r\n  GROUP BY\r\n    1\r\n\r\n),\r\n\r\n\r\nshop_data as (\r\n  -- oxid data\r\n  SELECT\r\n    cast(Date as string) as o_date,\r\n    round(sum(Amount/1.19),4) as shop_value_net\r\n  FROM\r\n    `bergzeit.OXID_RevenueDaily.OB_RevenueDaily`\r\n  where date between \"2021-07-01\" and \"2021-07-20\"\r\n  group by 1\r\n\r\n  union all\r\n\r\n  -- ishop data\r\n  SELECT\r\n    split(cast(order_orderPlacedTime as string),' ')[safe_offset(0)] as o_date,\r\n    round(sum(order_totalProductPrice),4) as shop_value_net\r\n    FROM `bergzeit.transactions.ob_ishop_orders`\r\n  group by 1\r\n  order by o_date asc\r\n),\r\n\r\n\r\n\r\nconsentless_data as (\r\n  select\r\n    date as c_date, \r\n    round(SUM(transaction_value),4) as consentless_value\r\n  from\r\n    `bergzeit.consentless_tracking.tracking_hits_all`\r\n  WHERE\r\n    date between \"2021-07-01\" and \"2021-07-20\" and\r\n    site like '%outdoor%'\r\n  group by 1\r\n\r\n  union all \r\n\r\n  SELECT\r\n    date as c_date,\r\n    round(SUM(transaction_value/1.19),3) as consentless_value\r\n  FROM\r\n    `bergzeit.consentless_tracking.hits_prod`\r\n  WHERE\r\n    date between \"2021-07-21\" and  date_sub(current_date(), interval 1 day)\r\n  group by 1\r\n\r\n)\r\n\r\nselect \r\n  * except (o_date, c_date),\r\n  round((consentless_value-ga_value)/consentless_value,4) as diff_ga_to_consentless,\r\n  round((shop_value_net - consentless_value)/shop_value_net,4) as diff_shop_to_consentless,\r\n  round((shop_value_net - ga_value)/shop_value_net,4) as diff_ga_to_shop\r\nfrom ga_data as ga\r\nleft join shop_data as shop on\r\n  cast(ga.date as string) = shop.o_date\r\nleft join consentless_data consentless on\r\n  ga.date = consentless.c_date\r\norder by date asc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`daily_diff_consentless_to_ga`"}, "model.sql_repository_bz.oxid_consentless_tracking_consentrate": {"raw_sql": "SELECT\r\n -- date,\r\n -- site,\r\n  COUNTIF(cd_consent_given) as consent_given,\r\n  COUNT(cd_consent_given) consent_events, \r\n  ROUND(COUNTIF(cd_consent_given) / COUNT(cd_consent_given),4) AS consent_rate,\r\n\r\nFROM\r\n  `bergzeit.consentless_tracking.tracking_hits_all`\r\nWHERE\r\n  date BETWEEN \"2020-08-04\"\r\n  AND \"2023-08-05\"\r\n  AND hit_type = \"event\" AND hit_type = \"event\" AND site LIKE \"%www.bergzeit.%\"\r\n--GROUP BY 1\r\n--ORDER BY date ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "legacy", "consentless", "oxid_consentless_tracking_consentrate"], "unique_id": "model.sql_repository_bz.oxid_consentless_tracking_consentrate", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "legacy/consentless/oxid_consentless_tracking_consentrate.sql", "original_file_path": "models/legacy/consentless/oxid_consentless_tracking_consentrate.sql", "name": "oxid_consentless_tracking_consentrate", "alias": "oxid_consentless_tracking_consentrate", "checksum": {"name": "sha256", "checksum": "283e68786c4a2c5836fed49c004d1a892a813558edc5c53ebc98162113e73e15"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/legacy/consentless/oxid_consentless_tracking_consentrate.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.008485, "compiled_sql": "SELECT\r\n -- date,\r\n -- site,\r\n  COUNTIF(cd_consent_given) as consent_given,\r\n  COUNT(cd_consent_given) consent_events, \r\n  ROUND(COUNTIF(cd_consent_given) / COUNT(cd_consent_given),4) AS consent_rate,\r\n\r\nFROM\r\n  `bergzeit.consentless_tracking.tracking_hits_all`\r\nWHERE\r\n  date BETWEEN \"2020-08-04\"\r\n  AND \"2023-08-05\"\r\n  AND hit_type = \"event\" AND hit_type = \"event\" AND site LIKE \"%www.bergzeit.%\"\r\n--GROUP BY 1\r\n--ORDER BY date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`oxid_consentless_tracking_consentrate`"}, "model.sql_repository_bz.oxid_consentless_tracking_date": {"raw_sql": "SELECT\r\n  date,\r\n -- site,\r\n  COUNTIF(cd_consent_given) as consent_given,\r\n  COUNT(cd_consent_given) consent_events, \r\n  ROUND(COUNTIF(cd_consent_given) / COUNT(cd_consent_given),4) AS consent_rate,\r\n  COUNTIF( cd_consent_purpose1) as notwendigeCookies,\r\n  COUNTIF( cd_consent_purpose2) as einfacheInteraktionenCookies,\r\n  COUNTIF( cd_consent_purpose3) as verbesserteNutzererfahrungCookies,\r\n  COUNTIF(cd_consent_purpose4) as trackingCookies,\r\n  COUNTIF( cd_consent_purpose5) as werbeCookies,\r\nFROM\r\n  `bergzeit.consentless_tracking.tracking_hits_all`\r\nWHERE\r\n  date BETWEEN \"2020-08-04\"\r\n  AND \"2023-08-05\"\r\n  AND hit_type = \"event\" AND hit_type = \"event\" AND site LIKE \"%www.bergzeit.%\"\r\nGROUP BY 1\r\nORDER BY date ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "legacy", "consentless", "oxid_consentless_tracking_date"], "unique_id": "model.sql_repository_bz.oxid_consentless_tracking_date", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "legacy/consentless/oxid_consentless_tracking_date.sql", "original_file_path": "models/legacy/consentless/oxid_consentless_tracking_date.sql", "name": "oxid_consentless_tracking_date", "alias": "oxid_consentless_tracking_date", "checksum": {"name": "sha256", "checksum": "aae893240370d543f658666472085dd35edbf3d121c98d7cc93bdddd70f13700"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/legacy/consentless/oxid_consentless_tracking_date.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.0115051, "compiled_sql": "SELECT\r\n  date,\r\n -- site,\r\n  COUNTIF(cd_consent_given) as consent_given,\r\n  COUNT(cd_consent_given) consent_events, \r\n  ROUND(COUNTIF(cd_consent_given) / COUNT(cd_consent_given),4) AS consent_rate,\r\n  COUNTIF( cd_consent_purpose1) as notwendigeCookies,\r\n  COUNTIF( cd_consent_purpose2) as einfacheInteraktionenCookies,\r\n  COUNTIF( cd_consent_purpose3) as verbesserteNutzererfahrungCookies,\r\n  COUNTIF(cd_consent_purpose4) as trackingCookies,\r\n  COUNTIF( cd_consent_purpose5) as werbeCookies,\r\nFROM\r\n  `bergzeit.consentless_tracking.tracking_hits_all`\r\nWHERE\r\n  date BETWEEN \"2020-08-04\"\r\n  AND \"2023-08-05\"\r\n  AND hit_type = \"event\" AND hit_type = \"event\" AND site LIKE \"%www.bergzeit.%\"\r\nGROUP BY 1\r\nORDER BY date ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`oxid_consentless_tracking_date`"}, "model.sql_repository_bz.oxid_consentless_tracking_site": {"raw_sql": "SELECT\r\n -- date,\r\n  site,\r\n  COUNTIF(cd_consent_given) as consent_given,\r\n  COUNT(cd_consent_given) consent_events, \r\n  ROUND(COUNTIF(cd_consent_given) / COUNT(cd_consent_given),4) AS consent_rate,\r\n  COUNTIF( cd_consent_purpose1) as notwendigeCookies,\r\n  COUNTIF( cd_consent_purpose2) as einfacheInteraktionenCookies,\r\n  COUNTIF( cd_consent_purpose3) as verbesserteNutzererfahrungCookies,\r\n  COUNTIF(cd_consent_purpose4) as trackingCookies,\r\n  COUNTIF( cd_consent_purpose5) as werbeCookies,\r\nFROM\r\n  `bergzeit.consentless_tracking.tracking_hits_all`\r\nWHERE\r\ndate BETWEEN \"2020-08-04\"\r\n AND \"2023-08-05\"\r\n AND\r\n  hit_type = \"event\" AND hit_type = \"event\" AND site LIKE \"%www.bergzeit.%\"\r\nGROUP BY 1\r\nORDER BY site ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "legacy", "consentless", "oxid_consentless_tracking_site"], "unique_id": "model.sql_repository_bz.oxid_consentless_tracking_site", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "legacy/consentless/oxid_consentless_tracking_site.sql", "original_file_path": "models/legacy/consentless/oxid_consentless_tracking_site.sql", "name": "oxid_consentless_tracking_site", "alias": "oxid_consentless_tracking_site", "checksum": {"name": "sha256", "checksum": "bfb21eaad17ef085559944e5d9f9dea597e19137194b6166a18078c97681a9eb"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/legacy/consentless/oxid_consentless_tracking_site.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.0144126, "compiled_sql": "SELECT\r\n -- date,\r\n  site,\r\n  COUNTIF(cd_consent_given) as consent_given,\r\n  COUNT(cd_consent_given) consent_events, \r\n  ROUND(COUNTIF(cd_consent_given) / COUNT(cd_consent_given),4) AS consent_rate,\r\n  COUNTIF( cd_consent_purpose1) as notwendigeCookies,\r\n  COUNTIF( cd_consent_purpose2) as einfacheInteraktionenCookies,\r\n  COUNTIF( cd_consent_purpose3) as verbesserteNutzererfahrungCookies,\r\n  COUNTIF(cd_consent_purpose4) as trackingCookies,\r\n  COUNTIF( cd_consent_purpose5) as werbeCookies,\r\nFROM\r\n  `bergzeit.consentless_tracking.tracking_hits_all`\r\nWHERE\r\ndate BETWEEN \"2020-08-04\"\r\n AND \"2023-08-05\"\r\n AND\r\n  hit_type = \"event\" AND hit_type = \"event\" AND site LIKE \"%www.bergzeit.%\"\r\nGROUP BY 1\r\nORDER BY site ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`oxid_consentless_tracking_site`"}, "analysis.sql_repository_bz.pbid_return_data": {"raw_sql": "with grouped_data as (\r\n    SELECT\r\nshipment_country_id,\r\nbrand,\r\ntop_category,\r\nsum(inv_l_quantity) as purchase_quantity,\r\nsum(if(inv_l_set_item_id = 'SET-ARTIKEL', inv_l_set_base_amount, inv_l_amount_incl_vat)) as sum_inv_amount_incl_vat,\r\nifnull (sum(cred_l_quantity),0)  as return_quantity\r\nfrom {{ref('int_nav_products_and_attributes')}}\r\nwhere responsibility_center_id = 'BZ' and\r\n-- exclude Erlebnisse, other line items that do not refer to a product sku (Text,...)\r\nlength(inv_l_product_sku) = 11 and inv_l_product_sku != 'SET-ARTIKEL' and substr(inv_l_product_sku,1,1) not in ('7') and \r\nbrand is not null and top_category is not null\r\ngroup by 1,2,3\r\n),\r\n\r\nsum_values as (\r\nselect *,\r\nreturn_quantity  / purchase_quantity as Country_Brand_TopCat_Return_Rate,\r\nsum(purchase_quantity) over (partition by top_category) as top_cat_purchase_q,\r\nsum(return_quantity ) over (partition by top_category) as top_cat_return_q,\r\nsum(purchase_quantity) over (partition by shipment_country_id, top_category) as country_top_cat_purchase_q,\r\nsum(return_quantity ) over (partition by shipment_country_id, top_category) as country_top_cat_return_q,\r\nsum(purchase_quantity) over (partition by Brand, top_category) as brand_top_cat_purchase_q,\r\nsum(return_quantity ) over (partition by Brand, top_category) as brand_top_cat_return_q,\r\nsum(purchase_quantity) over () as overall_purchase_q,\r\nsum(return_quantity ) over ()  as overall_return_q\r\nfrom grouped_data\r\nwhere purchase_quantity > 0 and sum_inv_amount_incl_vat >= 30000\r\n\r\n)\r\n\r\n\r\nselect \r\nlower(shipment_country_id) as country,\r\nbrand,\r\ntop_category,\r\n    round(top_cat_return_q / top_cat_purchase_q,4) AS TopCat_Return_Rate,\r\n    round(country_top_cat_return_q / country_top_cat_purchase_q,4) AS Country_TopCat_Return_Rate,\r\n    round(brand_top_cat_return_q / brand_top_cat_purchase_q,4) AS Brand_TopCat_Return_Rate,\r\n    round(return_quantity  / purchase_quantity,4)  AS Country_Brand_TopCat_Return_Rate,\r\n    round(overall_return_q / overall_purchase_q,4) AS Return_Rate_overall\r\n from sum_values\r\n --where Country_Brand_TopCat_Return_Rate > 0", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_nav_products_and_attributes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "pbid_return_data"], "unique_id": "analysis.sql_repository_bz.pbid_return_data", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/pbid_return_data.sql", "original_file_path": "analysis/pbid_return_data.sql", "name": "pbid_return_data", "alias": "pbid_return_data", "checksum": {"name": "sha256", "checksum": "fd909d977dc94cd66094a82130d079c8d08618051d1f3a6841d851284027cf84"}, "tags": [], "refs": [["int_nav_products_and_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/pbid_return_data.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.0337656, "compiled_sql": "with grouped_data as (\n    SELECT\nshipment_country_id,\nbrand,\ntop_category,\nsum(inv_l_quantity) as purchase_quantity,\nsum(if(inv_l_set_item_id = 'SET-ARTIKEL', inv_l_set_base_amount, inv_l_amount_incl_vat)) as sum_inv_amount_incl_vat,\nifnull (sum(cred_l_quantity),0)  as return_quantity\nfrom `bergzeit`.`dbt_analytics_intermediate`.`int_nav_products_and_attributes`\nwhere responsibility_center_id = 'BZ' and\n-- exclude Erlebnisse, other line items that do not refer to a product sku (Text,...)\nlength(inv_l_product_sku) = 11 and inv_l_product_sku != 'SET-ARTIKEL' and substr(inv_l_product_sku,1,1) not in ('7') and \nbrand is not null and top_category is not null\ngroup by 1,2,3\n),\n\nsum_values as (\nselect *,\nreturn_quantity  / purchase_quantity as Country_Brand_TopCat_Return_Rate,\nsum(purchase_quantity) over (partition by top_category) as top_cat_purchase_q,\nsum(return_quantity ) over (partition by top_category) as top_cat_return_q,\nsum(purchase_quantity) over (partition by shipment_country_id, top_category) as country_top_cat_purchase_q,\nsum(return_quantity ) over (partition by shipment_country_id, top_category) as country_top_cat_return_q,\nsum(purchase_quantity) over (partition by Brand, top_category) as brand_top_cat_purchase_q,\nsum(return_quantity ) over (partition by Brand, top_category) as brand_top_cat_return_q,\nsum(purchase_quantity) over () as overall_purchase_q,\nsum(return_quantity ) over ()  as overall_return_q\nfrom grouped_data\nwhere purchase_quantity > 0 and sum_inv_amount_incl_vat >= 30000\n\n)\n\n\nselect \nlower(shipment_country_id) as country,\nbrand,\ntop_category,\n    round(top_cat_return_q / top_cat_purchase_q,4) AS TopCat_Return_Rate,\n    round(country_top_cat_return_q / country_top_cat_purchase_q,4) AS Country_TopCat_Return_Rate,\n    round(brand_top_cat_return_q / brand_top_cat_purchase_q,4) AS Brand_TopCat_Return_Rate,\n    round(return_quantity  / purchase_quantity,4)  AS Country_Brand_TopCat_Return_Rate,\n    round(overall_return_q / overall_purchase_q,4) AS Return_Rate_overall\n from sum_values\n --where Country_Brand_TopCat_Return_Rate > 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.attribution_model_comparison": {"raw_sql": "with new_data_ges as (\r\n    select \r\n        date as n_date,\r\n        channel as n_channel,\r\n        country_grouping,\r\n        sum(total_conversion_value_attribution_korr) as conv_value_path_level\r\n    from `bergzeit.channel_attribution.markov_attribution_path_level_daily`\r\n    group by 1,2,3\r\n),\r\n\r\nold as (\r\n    select \r\n        date,\r\n        country_grouping as country,\r\n        channel_name as channel,\r\n        total_conversion_value as conv_value_channel_level,\r\n        total_conversion_value_last_click conv_value_last_click\r\n    from `bergzeit.channel_attribution.markov_attribution_daily_updates`\r\n)\r\n\r\n\r\n--all_data as (\r\nselect * except(n_channel, country_grouping, n_date), \r\nfrom old\r\nfull outer join new_data_ges \r\non new_data_ges.n_channel = old.channel\r\nand new_data_ges.country_grouping = old.country\r\nand new_data_ges.n_date = old.date\r\n\r\n--)\r\n\r\n/*\r\nselect \r\nSUM(conv_value), sum(total_conversion_value)\r\nfrom all_data\r\n*/", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "channel_attribution", "attribution_model_comparison"], "unique_id": "analysis.sql_repository_bz.attribution_model_comparison", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/channel_attribution/attribution_model_comparison.sql", "original_file_path": "analysis/channel_attribution/attribution_model_comparison.sql", "name": "attribution_model_comparison", "alias": "attribution_model_comparison", "checksum": {"name": "sha256", "checksum": "9b62afb482af30add3820e17156245f36a01cc0eb26f26ddeb21cd98c572a9e9"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/channel_attribution/attribution_model_comparison.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.0419946, "compiled_sql": "with new_data_ges as (\r\n    select \r\n        date as n_date,\r\n        channel as n_channel,\r\n        country_grouping,\r\n        sum(total_conversion_value_attribution_korr) as conv_value_path_level\r\n    from `bergzeit.channel_attribution.markov_attribution_path_level_daily`\r\n    group by 1,2,3\r\n),\r\n\r\nold as (\r\n    select \r\n        date,\r\n        country_grouping as country,\r\n        channel_name as channel,\r\n        total_conversion_value as conv_value_channel_level,\r\n        total_conversion_value_last_click conv_value_last_click\r\n    from `bergzeit.channel_attribution.markov_attribution_daily_updates`\r\n)\r\n\r\n\r\n--all_data as (\r\nselect * except(n_channel, country_grouping, n_date), \r\nfrom old\r\nfull outer join new_data_ges \r\non new_data_ges.n_channel = old.channel\r\nand new_data_ges.country_grouping = old.country\r\nand new_data_ges.n_date = old.date\r\n\r\n--)\r\n\r\n/*\r\nselect \r\nSUM(conv_value), sum(total_conversion_value)\r\nfrom all_data\r\n*/", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.sitemap_crawl_and_gsc_data_by_url_path": {"raw_sql": "with sitemap_urls as (\r\n\r\n    select distinct \r\n        sitemap_name, \r\n        replace(url, 'https://www.bergzeit.de', '') as url_path,\r\n    from `bergzeit.dbt_analytics_staging.stg_crawl_sitemap_urls_all`\r\n    where \r\n        -- default to German sitemap\r\n        sitemap_country = 'de'\r\n        and crawl_date between \r\n            date_sub(current_date(), interval 90 day)\r\n            and date_sub(current_date(), interval 1 day)\r\n\r\n), \r\n\r\ncrawled_urls as (\r\n\r\n    select \r\n        -- domain,\t\r\n        -- url_noutm,\r\n        case\r\n             -- remove hostname and extract url path\r\n            when domain = 'www.bergzeit.de' then replace(url_noutm, 'https://www.bergzeit.de', '') \r\n            when domain = 'www.bergzeit.at' then replace(url_noutm, 'https://www.bergzeit.at', '')\r\n            when domain = 'www.bergzeit.ch' then replace(url_noutm, 'https://www.bergzeit.ch', '') \r\n        end as crawl_url_path,\r\n        status_code,\r\n        count(url) as crawl_count\r\n    from `bergzeit.dbt_analytics_staging.stg_crawl_gbot_logfiles`\r\n    where gbot_date between \r\n        date_sub(current_date(), interval 2 day)\r\n        and date_sub(current_date(), interval 1 day)\r\n        and domain in ('https://www.bergzeit.de/', 'https://www.bergzeit.ch/', 'https://www.bergzeit.at/')\r\n    group by 1,2\r\n\r\n),\r\n\r\ngsc_urls_with_data as ( \r\n\r\n    select \r\n        -- remove hostname and extract url path\r\n        case\r\n            when gsc_country = 'https://www.bergzeit.de/' then replace(page, 'https://www.bergzeit.de', '') \r\n            when gsc_country = 'https://www.bergzeit.at/' then replace(page, 'https://www.bergzeit.at', '')\r\n            when gsc_country = 'https://www.bergzeit.ch/' then replace(page, 'https://www.bergzeit.ch', '') \r\n        end as gsc_url_path_noutm,\r\n        sum(impressions) as impressions, \r\n        sum(clicks) as clicks\r\n    from `bergzeit.dbt_analytics_staging.stg_gsc_data`\r\n    where \r\n        gsc_date between \r\n            date_sub(current_date(), interval 9 day)\r\n            and date_sub(current_date(), interval 1 day)\r\n        and gsc_country in ('https://www.bergzeit.de/', 'https://www.bergzeit.ch/', 'https://www.bergzeit.at/')\r\n    group by 1\r\n\r\n),\r\n\r\nsitemap_urls_with_crawl_count_and_gsc_data as (\r\n\r\n    select *\r\n    from sitemap_urls as sitemap\r\n    left join crawled_urls as crawled on\r\n        sitemap.url_path = crawled.crawl_url_path\r\n    left join gsc_urls_with_data as gsc on\r\n        sitemap.url_path = gsc.gsc_url_path_noutm\r\n        \r\n)\r\n\r\nselect * from sitemap_urls_with_crawl_count_and_gsc_data", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "seo", "sitemap_crawl_and_gsc_data_by_url_path"], "unique_id": "analysis.sql_repository_bz.sitemap_crawl_and_gsc_data_by_url_path", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/seo/sitemap_crawl_and_gsc_data_by_url_path.sql", "original_file_path": "analysis/seo/sitemap_crawl_and_gsc_data_by_url_path.sql", "name": "sitemap_crawl_and_gsc_data_by_url_path", "alias": "sitemap_crawl_and_gsc_data_by_url_path", "checksum": {"name": "sha256", "checksum": "a725dedc5f4d8e4b2e657feeb71d57c3a3cf539e1c8d1fb226fa6cb4858ad2cf"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/seo/sitemap_crawl_and_gsc_data_by_url_path.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.0493731, "compiled_sql": "with sitemap_urls as (\r\n\r\n    select distinct \r\n        sitemap_name, \r\n        replace(url, 'https://www.bergzeit.de', '') as url_path,\r\n    from `bergzeit.dbt_analytics_staging.stg_crawl_sitemap_urls_all`\r\n    where \r\n        -- default to German sitemap\r\n        sitemap_country = 'de'\r\n        and crawl_date between \r\n            date_sub(current_date(), interval 90 day)\r\n            and date_sub(current_date(), interval 1 day)\r\n\r\n), \r\n\r\ncrawled_urls as (\r\n\r\n    select \r\n        -- domain,\t\r\n        -- url_noutm,\r\n        case\r\n             -- remove hostname and extract url path\r\n            when domain = 'www.bergzeit.de' then replace(url_noutm, 'https://www.bergzeit.de', '') \r\n            when domain = 'www.bergzeit.at' then replace(url_noutm, 'https://www.bergzeit.at', '')\r\n            when domain = 'www.bergzeit.ch' then replace(url_noutm, 'https://www.bergzeit.ch', '') \r\n        end as crawl_url_path,\r\n        status_code,\r\n        count(url) as crawl_count\r\n    from `bergzeit.dbt_analytics_staging.stg_crawl_gbot_logfiles`\r\n    where gbot_date between \r\n        date_sub(current_date(), interval 2 day)\r\n        and date_sub(current_date(), interval 1 day)\r\n        and domain in ('https://www.bergzeit.de/', 'https://www.bergzeit.ch/', 'https://www.bergzeit.at/')\r\n    group by 1,2\r\n\r\n),\r\n\r\ngsc_urls_with_data as ( \r\n\r\n    select \r\n        -- remove hostname and extract url path\r\n        case\r\n            when gsc_country = 'https://www.bergzeit.de/' then replace(page, 'https://www.bergzeit.de', '') \r\n            when gsc_country = 'https://www.bergzeit.at/' then replace(page, 'https://www.bergzeit.at', '')\r\n            when gsc_country = 'https://www.bergzeit.ch/' then replace(page, 'https://www.bergzeit.ch', '') \r\n        end as gsc_url_path_noutm,\r\n        sum(impressions) as impressions, \r\n        sum(clicks) as clicks\r\n    from `bergzeit.dbt_analytics_staging.stg_gsc_data`\r\n    where \r\n        gsc_date between \r\n            date_sub(current_date(), interval 9 day)\r\n            and date_sub(current_date(), interval 1 day)\r\n        and gsc_country in ('https://www.bergzeit.de/', 'https://www.bergzeit.ch/', 'https://www.bergzeit.at/')\r\n    group by 1\r\n\r\n),\r\n\r\nsitemap_urls_with_crawl_count_and_gsc_data as (\r\n\r\n    select *\r\n    from sitemap_urls as sitemap\r\n    left join crawled_urls as crawled on\r\n        sitemap.url_path = crawled.crawl_url_path\r\n    left join gsc_urls_with_data as gsc on\r\n        sitemap.url_path = gsc.gsc_url_path_noutm\r\n        \r\n)\r\n\r\nselect * from sitemap_urls_with_crawl_count_and_gsc_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.oxid_product_ratings": {"raw_sql": "select\r\n    cast(date as string) as r_date,\t\r\n    product_id as r_sku,\t\r\n    rating_count,\r\n    rating_value,\r\n    CASE\r\n      WHEN rating_count = 0 THEN \"0\"\r\n      WHEN rating_count >= 1 AND rating_count < 3 THEN \"1-2\"\r\n      WHEN rating_count >= 3 AND rating_count < 5 THEN \"3-5\"\r\n      WHEN rating_count >= 5 AND rating_count < 10 THEN \"5-9\"\r\n      WHEN rating_count >= 10 AND rating_count < 20 THEN \"10-19\"\r\n    ELSE \"\u00fcber 20\"\r\n    end as ratings_grouped\r\n  from `adsdataprediction.MerchantCenterTransfer_DE.product_ratings_DE`\r\n  where\r\n    date between date_sub(current_date(), interval 31 DAY) and\r\n    date_sub(current_date(), interval 1 DAY)", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "onsite", "oxid_product_ratings"], "unique_id": "analysis.sql_repository_bz.oxid_product_ratings", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/onsite/oxid_product_ratings.sql", "original_file_path": "analysis/onsite/oxid_product_ratings.sql", "name": "oxid_product_ratings", "alias": "oxid_product_ratings", "checksum": {"name": "sha256", "checksum": "d31cd571110ad6df99288da0be43b40e5addc670333314d7e6e1adc8d9b6f8f5"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/onsite/oxid_product_ratings.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.0565996, "compiled_sql": "select\r\n    cast(date as string) as r_date,\t\r\n    product_id as r_sku,\t\r\n    rating_count,\r\n    rating_value,\r\n    CASE\r\n      WHEN rating_count = 0 THEN \"0\"\r\n      WHEN rating_count >= 1 AND rating_count < 3 THEN \"1-2\"\r\n      WHEN rating_count >= 3 AND rating_count < 5 THEN \"3-5\"\r\n      WHEN rating_count >= 5 AND rating_count < 10 THEN \"5-9\"\r\n      WHEN rating_count >= 10 AND rating_count < 20 THEN \"10-19\"\r\n    ELSE \"\u00fcber 20\"\r\n    end as ratings_grouped\r\n  from `adsdataprediction.MerchantCenterTransfer_DE.product_ratings_DE`\r\n  where\r\n    date between date_sub(current_date(), interval 31 DAY) and\r\n    date_sub(current_date(), interval 1 DAY)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.shopping_data_product_info_daily": {"raw_sql": "/*\r\n# @author: stephanie.hubert\r\n# @description: combine shopping, onsite and product data for BZ and OB (de) to identify overlap\r\n# @ticket: PERF-391\r\n# @dbt-managed: yes\r\n# @styleguide_v: 0.9\r\n*/\r\n\r\n-- shopping data bz\r\nwith\r\n  product_performance_bz as(\r\n  select\r\n    date(_partitiontime) as date,\r\n    offerid,\r\n    sum(clicks) as clicks_bz,\r\n    sum(impressions) as impressions_bz\r\n  from\r\n    `adsdataprediction.GoogleAdsTransfer_DE.p_ShoppingProductStats_7844181130`\r\n  where\r\n    _partitiondate between date_sub(current_date(), interval 30 day) and \r\n    date_sub(current_date(), interval 1 day)\r\n    --_partitiondate between parse_date('%y%m%d', @ds_start_date) and parse_date('%y%m%d', @ds_end_date)\r\n  group by 1,2\r\n    ),\r\n\r\n-- shopping data ob\r\n    product_performance_ob as(\r\n  select\r\n    date(_partitiontime) as ob_date,\r\n    offerid as ob_offerid,\r\n    sum(clicks) as clicks_ob,\r\n    sum(impressions) as impressions_ob,\r\n  from\r\n    `adsdataprediction.GoogleAdsTransfer_OB.p_ShoppingProductStats_9680683267`\r\n  where\r\n    _partitiondate between date_sub(current_date(), interval 30 day) and \r\n    date_sub(current_date(), interval 1 day)\r\n    --_partitiondate between parse_date('%y%m%d', @ds_start_date) and parse_date('%y%m%d', @ds_end_date)\r\n    and offerid is not null\r\n     --and offerid = '1001080-038'\r\n   group by 1,2\r\n     ),\r\n\r\n-- join shopping data bz and ob\r\n  performance_bz_and_ob as (\r\n    SELECT * EXCEPT (ob_offerid, ob_date) from product_performance_BZ\r\nLEFT JOIN\r\n  product_performance_OB\r\nON \r\nproduct_performance_BZ.OfferId = product_performance_OB.ob_offerid\r\nAND product_performance_BZ.date = product_performance_OB.ob_date\r\n ),\r\n \r\n\r\n -- product information\r\n product_info_all as (\r\n  select\r\n    date as s_date,\r\n    product_id as product_id,\r\n    description,\r\n    category,\r\n    brand,\r\n    gender,\r\n    season,\r\n    stock_total,\r\n    is_special_item\r\n  from\r\n    `bergzeit.product_inventory.product_attributes_daily`\r\n  where\r\n    date between date_sub(current_date(), interval 30 day)\r\n    and date_sub(current_date(), interval 1 day) )\r\n\r\n-- join shopping data and product infos\r\n  select * from performance_bz_and_ob \r\n  full outer join product_info_all\r\n  on performance_bz_and_ob.date = product_info_all.s_date\r\n  and performance_bz_and_ob.offerid = product_info_all.product_id \r\n -- full outer join transactions \r\n  --on performance_bz_and_ob.date = transactions.date \r\n  --and product_info_daily.productsku = transactions.productsku", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "onsite", "shopping_data_product_info_daily"], "unique_id": "analysis.sql_repository_bz.shopping_data_product_info_daily", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/onsite/shopping_data_product_info_daily.sql", "original_file_path": "analysis/onsite/shopping_data_product_info_daily.sql", "name": "shopping_data_product_info_daily", "alias": "shopping_data_product_info_daily", "checksum": {"name": "sha256", "checksum": "e2e42dba3ae3728dd008ba73cd918e91027910f8f41fe27f4cb7a1594cb23700"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/onsite/shopping_data_product_info_daily.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.062613, "compiled_sql": "/*\r\n# @author: stephanie.hubert\r\n# @description: combine shopping, onsite and product data for BZ and OB (de) to identify overlap\r\n# @ticket: PERF-391\r\n# @dbt-managed: yes\r\n# @styleguide_v: 0.9\r\n*/\r\n\r\n-- shopping data bz\r\nwith\r\n  product_performance_bz as(\r\n  select\r\n    date(_partitiontime) as date,\r\n    offerid,\r\n    sum(clicks) as clicks_bz,\r\n    sum(impressions) as impressions_bz\r\n  from\r\n    `adsdataprediction.GoogleAdsTransfer_DE.p_ShoppingProductStats_7844181130`\r\n  where\r\n    _partitiondate between date_sub(current_date(), interval 30 day) and \r\n    date_sub(current_date(), interval 1 day)\r\n    --_partitiondate between parse_date('%y%m%d', @ds_start_date) and parse_date('%y%m%d', @ds_end_date)\r\n  group by 1,2\r\n    ),\r\n\r\n-- shopping data ob\r\n    product_performance_ob as(\r\n  select\r\n    date(_partitiontime) as ob_date,\r\n    offerid as ob_offerid,\r\n    sum(clicks) as clicks_ob,\r\n    sum(impressions) as impressions_ob,\r\n  from\r\n    `adsdataprediction.GoogleAdsTransfer_OB.p_ShoppingProductStats_9680683267`\r\n  where\r\n    _partitiondate between date_sub(current_date(), interval 30 day) and \r\n    date_sub(current_date(), interval 1 day)\r\n    --_partitiondate between parse_date('%y%m%d', @ds_start_date) and parse_date('%y%m%d', @ds_end_date)\r\n    and offerid is not null\r\n     --and offerid = '1001080-038'\r\n   group by 1,2\r\n     ),\r\n\r\n-- join shopping data bz and ob\r\n  performance_bz_and_ob as (\r\n    SELECT * EXCEPT (ob_offerid, ob_date) from product_performance_BZ\r\nLEFT JOIN\r\n  product_performance_OB\r\nON \r\nproduct_performance_BZ.OfferId = product_performance_OB.ob_offerid\r\nAND product_performance_BZ.date = product_performance_OB.ob_date\r\n ),\r\n \r\n\r\n -- product information\r\n product_info_all as (\r\n  select\r\n    date as s_date,\r\n    product_id as product_id,\r\n    description,\r\n    category,\r\n    brand,\r\n    gender,\r\n    season,\r\n    stock_total,\r\n    is_special_item\r\n  from\r\n    `bergzeit.product_inventory.product_attributes_daily`\r\n  where\r\n    date between date_sub(current_date(), interval 30 day)\r\n    and date_sub(current_date(), interval 1 day) )\r\n\r\n-- join shopping data and product infos\r\n  select * from performance_bz_and_ob \r\n  full outer join product_info_all\r\n  on performance_bz_and_ob.date = product_info_all.s_date\r\n  and performance_bz_and_ob.offerid = product_info_all.product_id \r\n -- full outer join transactions \r\n  --on performance_bz_and_ob.date = transactions.date \r\n  --and product_info_daily.productsku = transactions.productsku", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.sessions_by_channel_with_true_direct": {"raw_sql": "WITH channel_sessions AS (SELECT\r\n    channelgrouping,\r\n    SUM(IF(trafficSource.isTrueDirect = TRUE, 1,0)) as true_directs,\r\n    COUNT(visitId) as sessions,\r\nFROM\r\n    `bergzeit.79472326.ga_sessions_*`\r\nWHERE\r\n    _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 10 DAY))\r\nAND FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\nGROUP BY 1)\r\n\r\nSELECT *, ROUND(true_directs/sessions,3) as share_true_directs FROM channel_sessions ORDER BY sessions DESC", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "onsite", "sessions_by_channel_with_true_direct"], "unique_id": "analysis.sql_repository_bz.sessions_by_channel_with_true_direct", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/onsite/sessions_by_channel_with_true_direct.sql", "original_file_path": "analysis/onsite/sessions_by_channel_with_true_direct.sql", "name": "sessions_by_channel_with_true_direct", "alias": "sessions_by_channel_with_true_direct", "checksum": {"name": "sha256", "checksum": "9a3d1746005d8a26b3411009f9597c5a8c827d498c13b54acd67fecdd90a0ee5"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/onsite/sessions_by_channel_with_true_direct.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.0682428, "compiled_sql": "WITH channel_sessions AS (SELECT\r\n    channelgrouping,\r\n    SUM(IF(trafficSource.isTrueDirect = TRUE, 1,0)) as true_directs,\r\n    COUNT(visitId) as sessions,\r\nFROM\r\n    `bergzeit.79472326.ga_sessions_*`\r\nWHERE\r\n    _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 10 DAY))\r\nAND FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\nGROUP BY 1)\r\n\r\nSELECT *, ROUND(true_directs/sessions,3) as share_true_directs FROM channel_sessions ORDER BY sessions DESC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.zoovu_wirksamkeitsanalyse": {"raw_sql": "with all_sessions as (\r\n        SELECT\r\n    PARSE_DATE('%Y%m%d', date) AS date,\r\n    TIMESTAMP_TRUNC(TIMESTAMP_ADD(TIMESTAMP_SECONDS(visitStartTime), INTERVAL hits.time MILLISECOND), second) AS timestamp,\r\n    fullVisitorId,\r\n    clientId,\r\n    visitId,\r\n    channelGrouping,\r\n    hits.page.hostname AS hostname,\r\n    hits.hitNumber AS hitnumber,\r\ndevice.deviceCategory,\r\nhits.page.pagepath,\r\nif(regexp_contains(hits.page.pagepath, 'section=RESULTS_PAGE'),1,0) as zoovu_done,\r\nif(value = 'zoovuBerater' and hits.page.pagepath != '/jacken-berater/',1,0) as zoovu_engagement,\r\nLEAD(cd.value, 1) OVER (PARTITION BY fullvisitorId, visitStartTime ORDER BY hits.hitNumber ASC) AS Next_Page,\r\nLEAD(hits.page.pagepath, 1) OVER (PARTITION BY fullvisitorId, visitStartTime ORDER BY hits.hitNumber ASC) AS Next_Pagepath,\r\nLAG(cd.value, 1) OVER (PARTITION BY fullvisitorId, visitStartTime ORDER BY hits.hitNumber ASC) AS previous_Page,\r\nLAG(hits.page.pagepath, 1) OVER (PARTITION BY fullvisitorId, visitStartTime ORDER BY hits.hitNumber ASC) AS previous_Pagepath,\r\nhits.eventInfo.eventlabel,\r\ncd.value,\r\nCASE WHEN hits.eCommerceAction.action_type = '3' THEN 1 ELSE 0 END AS Indikator_addtocart,\r\nCASE WHEN hits.eCommerceAction.action_type = '6' THEN 1 ELSE 0 END AS Indikator_kauf,\r\n    totals.transactions AS totals_transactions, \r\n    #MAX(hits.transaction.transactionId) AS transactionId, # transactionId,\r\n    #(SUM(hits.transaction.transactionRevenue)/1000000) AS revenue,\r\n    FROM\r\n    `bergzeit.79472326.ga_sessions_*` as outside, UNNEST(hits) AS hits, UNNEST( hits.customDimensions ) AS cd\r\n    WHERE \r\n    _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY))\r\n    AND FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n    AND cd.index = 4\r\n    AND hits.page.hostname IN ('www.bergzeit.de', 'www.bergzeit.at')\r\n    and type = 'PAGE'\r\n    ) \r\n    ,\r\n\r\nzoovu_sessions as (\r\n        select distinct \r\n        PARSE_DATE('%Y%m%d', date) AS zs_date,\r\n        fullVisitorId as zs_fvid,\r\n        visitId as zs_vid\r\n        FROM\r\n    `bergzeit.79472326.ga_sessions_*` as outside, UNNEST(hits) AS hits, UNNEST( hits.customDimensions ) AS cd\r\n    WHERE \r\n    _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY))\r\n    AND FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n    and hits.page.hostname in ('www.bergzeit.de', 'www.bergzeit.at')\r\n    AND cd.index = 4\r\n    and cd.value = 'zoovuBerater'\r\n\r\n    )\r\n,\r\n\r\nall_zoovu_sessions as (\r\n    select * except (zs_date, zs_fvid , zs_vid ),\r\n    if (zoovu_engagement = 1 and Next_Page = 'Produktdetail',1,0) as zoovu_pdp,\r\n    if (value = 'zoovuBerater' and Next_Page = 'Produktdetail' and zoovu_done = 1,1,0) as zoovu_abgeschl_pdp\r\n    from all_sessions as al\r\n    inner join zoovu_sessions zs\r\n    on al.date = zs.zs_date \r\n    and al.fullvisitorid = zs.zs_fvid \r\n    and al.visitid = zs.zs_vid \r\n    ORDER BY\r\n    clientId,\r\n    date\r\n)\r\n\r\nselect \r\nnext_page,\r\n--previous_Page,\r\ncount(distinct visitid) as anzahl_sessions\r\nfrom all_zoovu_sessions \r\nwhere pagepath = '/jacken-berater/'\r\ngroup by 1\r\n\r\n/*,\r\n\r\nhits_grouped as (\r\nselect \r\nfullvisitorid,\r\nvisitid,\r\nif(sum(zoovu_engagement) > 0, 1, 0) as berater_engagement,\r\nif(sum(zoovu_done) > 0, 1, 0) as berater_abgeschlossen,\r\nif(sum(zoovu_pdp) > 0, 1, 0) as berater_pdp,\r\nif(sum(zoovu_abgeschl_pdp) > 0, 1, 0) as berater_abgeschl_pdp,\r\nif(sum(Indikator_addtocart)> 0, 1, 0) as add_to_cart,\r\nif(sum(Indikator_kauf)> 0, 1, 0) as kauf\r\nfrom all_zoovu_sessions\r\ngroup by 1,2\r\n)\r\n\r\nselect \r\ncount(*) as anzahl_sessions,\r\nsum(berater_engagement) as anzahl_engaged_sessions,\r\nsum(berater_abgeschlossen) as berater_abgeschlossen,\r\nsum(berater_pdp) as berater_pdp,\r\nsum(berater_abgeschl_pdp) as berater_abgeschlossen_pdp,\r\nsum(add_to_cart) as sessions_mit_warenkorbbefuellung,\r\nsum(kauf) as sessions_mit_transaktion\r\nfrom hits_grouped\r\n\r\n*/", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "onsite", "zoovu_wirksamkeitsanalyse"], "unique_id": "analysis.sql_repository_bz.zoovu_wirksamkeitsanalyse", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/onsite/zoovu_wirksamkeitsanalyse.sql", "original_file_path": "analysis/onsite/zoovu_wirksamkeitsanalyse.sql", "name": "zoovu_wirksamkeitsanalyse", "alias": "zoovu_wirksamkeitsanalyse", "checksum": {"name": "sha256", "checksum": "0a7a339d3e967e8190c0a44d77d2af2204dbe1dd16bbdb799766fc4de4da231c"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/onsite/zoovu_wirksamkeitsanalyse.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.073984, "compiled_sql": "with all_sessions as (\r\n        SELECT\r\n    PARSE_DATE('%Y%m%d', date) AS date,\r\n    TIMESTAMP_TRUNC(TIMESTAMP_ADD(TIMESTAMP_SECONDS(visitStartTime), INTERVAL hits.time MILLISECOND), second) AS timestamp,\r\n    fullVisitorId,\r\n    clientId,\r\n    visitId,\r\n    channelGrouping,\r\n    hits.page.hostname AS hostname,\r\n    hits.hitNumber AS hitnumber,\r\ndevice.deviceCategory,\r\nhits.page.pagepath,\r\nif(regexp_contains(hits.page.pagepath, 'section=RESULTS_PAGE'),1,0) as zoovu_done,\r\nif(value = 'zoovuBerater' and hits.page.pagepath != '/jacken-berater/',1,0) as zoovu_engagement,\r\nLEAD(cd.value, 1) OVER (PARTITION BY fullvisitorId, visitStartTime ORDER BY hits.hitNumber ASC) AS Next_Page,\r\nLEAD(hits.page.pagepath, 1) OVER (PARTITION BY fullvisitorId, visitStartTime ORDER BY hits.hitNumber ASC) AS Next_Pagepath,\r\nLAG(cd.value, 1) OVER (PARTITION BY fullvisitorId, visitStartTime ORDER BY hits.hitNumber ASC) AS previous_Page,\r\nLAG(hits.page.pagepath, 1) OVER (PARTITION BY fullvisitorId, visitStartTime ORDER BY hits.hitNumber ASC) AS previous_Pagepath,\r\nhits.eventInfo.eventlabel,\r\ncd.value,\r\nCASE WHEN hits.eCommerceAction.action_type = '3' THEN 1 ELSE 0 END AS Indikator_addtocart,\r\nCASE WHEN hits.eCommerceAction.action_type = '6' THEN 1 ELSE 0 END AS Indikator_kauf,\r\n    totals.transactions AS totals_transactions, \r\n    #MAX(hits.transaction.transactionId) AS transactionId, # transactionId,\r\n    #(SUM(hits.transaction.transactionRevenue)/1000000) AS revenue,\r\n    FROM\r\n    `bergzeit.79472326.ga_sessions_*` as outside, UNNEST(hits) AS hits, UNNEST( hits.customDimensions ) AS cd\r\n    WHERE \r\n    _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY))\r\n    AND FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n    AND cd.index = 4\r\n    AND hits.page.hostname IN ('www.bergzeit.de', 'www.bergzeit.at')\r\n    and type = 'PAGE'\r\n    ) \r\n    ,\r\n\r\nzoovu_sessions as (\r\n        select distinct \r\n        PARSE_DATE('%Y%m%d', date) AS zs_date,\r\n        fullVisitorId as zs_fvid,\r\n        visitId as zs_vid\r\n        FROM\r\n    `bergzeit.79472326.ga_sessions_*` as outside, UNNEST(hits) AS hits, UNNEST( hits.customDimensions ) AS cd\r\n    WHERE \r\n    _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY))\r\n    AND FORMAT_DATE('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n    and hits.page.hostname in ('www.bergzeit.de', 'www.bergzeit.at')\r\n    AND cd.index = 4\r\n    and cd.value = 'zoovuBerater'\r\n\r\n    )\r\n,\r\n\r\nall_zoovu_sessions as (\r\n    select * except (zs_date, zs_fvid , zs_vid ),\r\n    if (zoovu_engagement = 1 and Next_Page = 'Produktdetail',1,0) as zoovu_pdp,\r\n    if (value = 'zoovuBerater' and Next_Page = 'Produktdetail' and zoovu_done = 1,1,0) as zoovu_abgeschl_pdp\r\n    from all_sessions as al\r\n    inner join zoovu_sessions zs\r\n    on al.date = zs.zs_date \r\n    and al.fullvisitorid = zs.zs_fvid \r\n    and al.visitid = zs.zs_vid \r\n    ORDER BY\r\n    clientId,\r\n    date\r\n)\r\n\r\nselect \r\nnext_page,\r\n--previous_Page,\r\ncount(distinct visitid) as anzahl_sessions\r\nfrom all_zoovu_sessions \r\nwhere pagepath = '/jacken-berater/'\r\ngroup by 1\r\n\r\n/*,\r\n\r\nhits_grouped as (\r\nselect \r\nfullvisitorid,\r\nvisitid,\r\nif(sum(zoovu_engagement) > 0, 1, 0) as berater_engagement,\r\nif(sum(zoovu_done) > 0, 1, 0) as berater_abgeschlossen,\r\nif(sum(zoovu_pdp) > 0, 1, 0) as berater_pdp,\r\nif(sum(zoovu_abgeschl_pdp) > 0, 1, 0) as berater_abgeschl_pdp,\r\nif(sum(Indikator_addtocart)> 0, 1, 0) as add_to_cart,\r\nif(sum(Indikator_kauf)> 0, 1, 0) as kauf\r\nfrom all_zoovu_sessions\r\ngroup by 1,2\r\n)\r\n\r\nselect \r\ncount(*) as anzahl_sessions,\r\nsum(berater_engagement) as anzahl_engaged_sessions,\r\nsum(berater_abgeschlossen) as berater_abgeschlossen,\r\nsum(berater_pdp) as berater_pdp,\r\nsum(berater_abgeschl_pdp) as berater_abgeschlossen_pdp,\r\nsum(add_to_cart) as sessions_mit_warenkorbbefuellung,\r\nsum(kauf) as sessions_mit_transaktion\r\nfrom hits_grouped\r\n\r\n*/", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.teaser_grouping_old_names": {"raw_sql": "CASE\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'c_.*') THEN \"Coverflow\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name, 'co_.*') THEN \"COOP/MAG\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name, 'mag_.*') THEN \"MAG\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'st_.*') THEN \"Stage\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'p_.*')THEN \"Promotion\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'ls_.*')THEN \"Listenst\u00f6rer\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'dk_.*')THEN \"Doppelkachel\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'msh_.*')THEN \"Markenshop Header\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'msp_.*')THEN \"Markenshop Teaser\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'banner_.*')THEN \"Magazin\"\r\n\r\n\r\nELSE 'Other'\r\nEND", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "onsite", "teaser_grouping_old_names"], "unique_id": "analysis.sql_repository_bz.teaser_grouping_old_names", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/onsite/teaser_grouping_old_names.sql", "original_file_path": "analysis/onsite/teaser_grouping_old_names.sql", "name": "teaser_grouping_old_names", "alias": "teaser_grouping_old_names", "checksum": {"name": "sha256", "checksum": "ff744dce4d7d9ea68c5e71861dc435fa4d19620574bf41d7e6cee43c7657a802"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/onsite/teaser_grouping_old_names.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.0813284, "compiled_sql": "CASE\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'c_.*') THEN \"Coverflow\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name, 'co_.*') THEN \"COOP/MAG\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name, 'mag_.*') THEN \"MAG\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'st_.*') THEN \"Stage\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'p_.*')THEN \"Promotion\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'ls_.*')THEN \"Listenst\u00f6rer\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'dk_.*')THEN \"Doppelkachel\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'msh_.*')THEN \"Markenshop Header\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'msp_.*')THEN \"Markenshop Teaser\"\r\nWHEN REGEXP_MATCH(Interne Werbung \u2013 Name,'banner_.*')THEN \"Magazin\"\r\n\r\n\r\nELSE 'Other'\r\nEND", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.onsite_acquisition_channel_structure": {"raw_sql": "with journeys_with_ga_channel as (\r\n    select  \r\n    T_order_date,\r\n    T_shop_order_id, \r\n    customer_id,\r\n  T_responsiblity_center_id,\r\n  T_shop_channel_id,\r\n  ga_acquisition_channel,\r\n  ifnull(ga_acquisition_channel, 'unbekannt') as ga_acquisition_channel_neu,\r\n  transaction_no_per_shop_channel,\r\n  if(transaction_no_per_shop_channel = 1, 1, 0) as indikator_erste_Transaktion\r\n    FROM {{ref('transaction_ga_nav_attributes')}}\r\n    where T_shop_channel_id = 'Webshop 102' \r\n),\r\n\r\nrelev_journeys as (\r\n    select *,\r\n    sum(indikator_erste_Transaktion) over ( partition by customer_id order by T_order_date) as erste_Transaktion_im_Zeitraum,\r\n    if(transaction_no_per_shop_channel = 1, ga_acquisition_channel_neu, NULL) as channel_1,\r\n    if(transaction_no_per_shop_channel = 2, ga_acquisition_channel_neu, NULL) as channel_2,\r\n    if(transaction_no_per_shop_channel = 3, ga_acquisition_channel_neu, NULL) as channel_3,\r\n    if(transaction_no_per_shop_channel = 4, ga_acquisition_channel_neu, NULL) as channel_4,\r\n    if(transaction_no_per_shop_channel = 5, ga_acquisition_channel_neu, NULL) as channel_5,\r\n    if(transaction_no_per_shop_channel = 6, ga_acquisition_channel_neu, NULL) as channel_6,\r\n    if(transaction_no_per_shop_channel = 7, ga_acquisition_channel_neu, NULL) as channel_7\r\n     from journeys_with_ga_channel \r\n)\r\n\r\nselect * except(Indikator_behalten) from (\r\nSELECT \r\n  customer_id,\r\n  T_responsiblity_center_id,\r\n  T_shop_channel_id,\r\n  min(erste_Transaktion_im_Zeitraum) as Indikator_behalten,\r\n  STRING_AGG(channel_1 ORDER BY T_order_date) AS channel_1,\r\n  STRING_AGG(channel_2 ORDER BY T_order_date) AS channel_2,\r\n  STRING_AGG(channel_3 ORDER BY T_order_date) AS channel_3,\r\n  STRING_AGG(channel_4 ORDER BY T_order_date) AS channel_4,\r\n  STRING_AGG(channel_5 ORDER BY T_order_date) AS channel_5,\r\n  STRING_AGG(channel_6 ORDER BY T_order_date) AS channel_6,\r\n  STRING_AGG(channel_7 ORDER BY T_order_date) AS channel_7,\r\n  STRING_AGG(ga_acquisition_channel_neu ORDER BY T_order_date) AS channels\r\nFROM relev_journeys \r\nGROUP BY 1,2,3 \r\n)\r\nwhere channels is not null and Indikator_behalten = 1", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.transaction_ga_nav_attributes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "onsite", "onsite_acquisition_channel_structure"], "unique_id": "analysis.sql_repository_bz.onsite_acquisition_channel_structure", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/onsite/onsite_acquisition_channel_structure.sql", "original_file_path": "analysis/onsite/onsite_acquisition_channel_structure.sql", "name": "onsite_acquisition_channel_structure", "alias": "onsite_acquisition_channel_structure", "checksum": {"name": "sha256", "checksum": "5085dfd59b2be711744f0998100ddcaeba8716ee2fea6c16d6dd147da732b181"}, "tags": [], "refs": [["transaction_ga_nav_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/onsite/onsite_acquisition_channel_structure.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.0937295, "compiled_sql": "with journeys_with_ga_channel as (\n    select  \n    T_order_date,\n    T_shop_order_id, \n    customer_id,\n  T_responsiblity_center_id,\n  T_shop_channel_id,\n  ga_acquisition_channel,\n  ifnull(ga_acquisition_channel, 'unbekannt') as ga_acquisition_channel_neu,\n  transaction_no_per_shop_channel,\n  if(transaction_no_per_shop_channel = 1, 1, 0) as indikator_erste_Transaktion\n    FROM `bergzeit`.`dbt_transaction`.`transaction_ga_nav_attributes`\n    where T_shop_channel_id = 'Webshop 102' \n),\n\nrelev_journeys as (\n    select *,\n    sum(indikator_erste_Transaktion) over ( partition by customer_id order by T_order_date) as erste_Transaktion_im_Zeitraum,\n    if(transaction_no_per_shop_channel = 1, ga_acquisition_channel_neu, NULL) as channel_1,\n    if(transaction_no_per_shop_channel = 2, ga_acquisition_channel_neu, NULL) as channel_2,\n    if(transaction_no_per_shop_channel = 3, ga_acquisition_channel_neu, NULL) as channel_3,\n    if(transaction_no_per_shop_channel = 4, ga_acquisition_channel_neu, NULL) as channel_4,\n    if(transaction_no_per_shop_channel = 5, ga_acquisition_channel_neu, NULL) as channel_5,\n    if(transaction_no_per_shop_channel = 6, ga_acquisition_channel_neu, NULL) as channel_6,\n    if(transaction_no_per_shop_channel = 7, ga_acquisition_channel_neu, NULL) as channel_7\n     from journeys_with_ga_channel \n)\n\nselect * except(Indikator_behalten) from (\nSELECT \n  customer_id,\n  T_responsiblity_center_id,\n  T_shop_channel_id,\n  min(erste_Transaktion_im_Zeitraum) as Indikator_behalten,\n  STRING_AGG(channel_1 ORDER BY T_order_date) AS channel_1,\n  STRING_AGG(channel_2 ORDER BY T_order_date) AS channel_2,\n  STRING_AGG(channel_3 ORDER BY T_order_date) AS channel_3,\n  STRING_AGG(channel_4 ORDER BY T_order_date) AS channel_4,\n  STRING_AGG(channel_5 ORDER BY T_order_date) AS channel_5,\n  STRING_AGG(channel_6 ORDER BY T_order_date) AS channel_6,\n  STRING_AGG(channel_7 ORDER BY T_order_date) AS channel_7,\n  STRING_AGG(ga_acquisition_channel_neu ORDER BY T_order_date) AS channels\nFROM relev_journeys \nGROUP BY 1,2,3 \n)\nwhere channels is not null and Indikator_behalten = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.auswertung_pws_202012_retouren": {"raw_sql": "with pws_customers as (\r\n    SELECT distinct inv_h_order_id, inv_h_id, inv_l_product_attributes\r\n    --lower(trim(replace(replace(inv_l_product_description, \"Gutschein:\" , \"\"), \"Voucher\", \"\"))) as voucher\r\nFROM `bergzeit.dbt_shubert_clv.position_level_invoice_credit_combined` \r\nwhere order_date > '2020-12-01' and order_date < '2021-02-01' and \r\ninv_l_product_attributes in ('2012_PWS_Kundensegment_aktiveKunden', '2012_PWS_Kundensegment_abtruennigeKunden',\r\n'2012_PWS_Kundensegment_Erstk\u00e4ufer', '2012_PWS_Kundensegment_inaktiveKunden')\r\n),\r\n\r\norders as (\r\nselect *,\r\nif(T_invoice_amount_incl_vat = T_crmemo_amount_incl_vat, \"Komplettretoure\", if(T_crmemo_amount_incl_vat = 0, \"Keine Retoure\", \"Teilretoure\")) as Art_der_Retoure\r\nfrom pws_customers \r\nleft join `bergzeit.azure_dwh_discovery.transactions`\r\non inv_h_id = T_nav_invoice_id\r\n)\r\n\r\n\r\nselect \r\ninv_l_product_attributes, \r\nArt_der_Retoure, \r\ncount(*) as Anzahl_Transaktionen,\r\nround(sum(T_invoice_amount_excl_vat),2) as Summe_Rechnungswert_excl_vat,\r\nround(sum(T_crmemo_amount_excl_vat),2) as Summe_Gutschriftswert_excl_vat\r\nfrom orders\r\ngroup by 1,2", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "crm", "auswertung_pws_202012_retouren"], "unique_id": "analysis.sql_repository_bz.auswertung_pws_202012_retouren", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/crm/auswertung_pws_202012_retouren.sql", "original_file_path": "analysis/crm/auswertung_pws_202012_retouren.sql", "name": "auswertung_pws_202012_retouren", "alias": "auswertung_pws_202012_retouren", "checksum": {"name": "sha256", "checksum": "a03451d719e3c46bbde55d0d43993ef640cd9d5d350790429ec7dcb1c554a133"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/crm/auswertung_pws_202012_retouren.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.1119726, "compiled_sql": "with pws_customers as (\r\n    SELECT distinct inv_h_order_id, inv_h_id, inv_l_product_attributes\r\n    --lower(trim(replace(replace(inv_l_product_description, \"Gutschein:\" , \"\"), \"Voucher\", \"\"))) as voucher\r\nFROM `bergzeit.dbt_shubert_clv.position_level_invoice_credit_combined` \r\nwhere order_date > '2020-12-01' and order_date < '2021-02-01' and \r\ninv_l_product_attributes in ('2012_PWS_Kundensegment_aktiveKunden', '2012_PWS_Kundensegment_abtruennigeKunden',\r\n'2012_PWS_Kundensegment_Erstk\u00e4ufer', '2012_PWS_Kundensegment_inaktiveKunden')\r\n),\r\n\r\norders as (\r\nselect *,\r\nif(T_invoice_amount_incl_vat = T_crmemo_amount_incl_vat, \"Komplettretoure\", if(T_crmemo_amount_incl_vat = 0, \"Keine Retoure\", \"Teilretoure\")) as Art_der_Retoure\r\nfrom pws_customers \r\nleft join `bergzeit.azure_dwh_discovery.transactions`\r\non inv_h_id = T_nav_invoice_id\r\n)\r\n\r\n\r\nselect \r\ninv_l_product_attributes, \r\nArt_der_Retoure, \r\ncount(*) as Anzahl_Transaktionen,\r\nround(sum(T_invoice_amount_excl_vat),2) as Summe_Rechnungswert_excl_vat,\r\nround(sum(T_crmemo_amount_excl_vat),2) as Summe_Gutschriftswert_excl_vat\r\nfrom orders\r\ngroup by 1,2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.auswertung_pws_202012_folgekaeufe": {"raw_sql": "with pws_orders as (\r\n    SELECT distinct inv_h_id, inv_h_order_id, sale_customer_id, inv_l_product_attributes\r\nFROM `bergzeit.dbt_shubert_clv.invoice_header_and_lines` \r\nwhere order_date > '2020-12-01' and order_date < '2021-01-01' and \r\ninv_l_product_attributes in ('2012_PWS_Kundensegment_aktiveKunden', '2012_PWS_Kundensegment_abtruennigeKunden',\r\n'2012_PWS_Kundensegment_Erstk\u00e4ufer', '2012_PWS_Kundensegment_inaktiveKunden')\r\n),\r\n\r\norders as (\r\nselect * from pws_orders \r\nleft join `bergzeit.azure_dwh_discovery.transactions`\r\non sale_customer_id = T_customer_id\r\nwhere T_order_date > '2020-12-01'\r\n)\r\n\r\nselect \r\ninv_l_product_attributes,\r\nsum( if(inv_h_id = T_nav_invoice_id, 1, 0)) as pws_kaeufe,\r\ncount(*) - sum( if(inv_h_id = T_nav_invoice_id, 1, 0)) as folgekaeufe,\r\ncount(*) as kauefe_gesamt\r\nfrom orders\r\ngroup by 1", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "crm", "auswertung_pws_202012_folgekaeufe"], "unique_id": "analysis.sql_repository_bz.auswertung_pws_202012_folgekaeufe", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/crm/auswertung_pws_202012_folgekaeufe.sql", "original_file_path": "analysis/crm/auswertung_pws_202012_folgekaeufe.sql", "name": "auswertung_pws_202012_folgekaeufe", "alias": "auswertung_pws_202012_folgekaeufe", "checksum": {"name": "sha256", "checksum": "aebd5d769177b897dd442935eff803c1634c67588da63d4ca3ebc48823f3bb0c"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/crm/auswertung_pws_202012_folgekaeufe.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.1178007, "compiled_sql": "with pws_orders as (\r\n    SELECT distinct inv_h_id, inv_h_order_id, sale_customer_id, inv_l_product_attributes\r\nFROM `bergzeit.dbt_shubert_clv.invoice_header_and_lines` \r\nwhere order_date > '2020-12-01' and order_date < '2021-01-01' and \r\ninv_l_product_attributes in ('2012_PWS_Kundensegment_aktiveKunden', '2012_PWS_Kundensegment_abtruennigeKunden',\r\n'2012_PWS_Kundensegment_Erstk\u00e4ufer', '2012_PWS_Kundensegment_inaktiveKunden')\r\n),\r\n\r\norders as (\r\nselect * from pws_orders \r\nleft join `bergzeit.azure_dwh_discovery.transactions`\r\non sale_customer_id = T_customer_id\r\nwhere T_order_date > '2020-12-01'\r\n)\r\n\r\nselect \r\ninv_l_product_attributes,\r\nsum( if(inv_h_id = T_nav_invoice_id, 1, 0)) as pws_kaeufe,\r\ncount(*) - sum( if(inv_h_id = T_nav_invoice_id, 1, 0)) as folgekaeufe,\r\ncount(*) as kauefe_gesamt\r\nfrom orders\r\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.emarsys_stats_daily": {"raw_sql": "select\r\ndate,\r\n--ape_locale,\r\ncount(distinct oxid_customer_id) as total_no_contacts,\r\nsum(case when optin = 1 then 1 else 0 end ) as newsletter_optin,\r\nsum(case when antavo_opt_in = 1 then 1 else 0 end ) as antavo_optin,\r\nfrom `bergzeit.customer_analytics.emarsys_contacts_daily`\r\nwhere date >= '2020-03-01'\r\ngroup by 1--,2\r\norder by date desc", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "crm", "emarsys_stats_daily"], "unique_id": "analysis.sql_repository_bz.emarsys_stats_daily", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/crm/emarsys_stats_daily.sql", "original_file_path": "analysis/crm/emarsys_stats_daily.sql", "name": "emarsys_stats_daily", "alias": "emarsys_stats_daily", "checksum": {"name": "sha256", "checksum": "c58bf7c40365b833a14e3938c3501891bce1b7ec43b06f5c1497d064b578209a"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/crm/emarsys_stats_daily.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.124332, "compiled_sql": "select\r\ndate,\r\n--ape_locale,\r\ncount(distinct oxid_customer_id) as total_no_contacts,\r\nsum(case when optin = 1 then 1 else 0 end ) as newsletter_optin,\r\nsum(case when antavo_opt_in = 1 then 1 else 0 end ) as antavo_optin,\r\nfrom `bergzeit.customer_analytics.emarsys_contacts_daily`\r\nwhere date >= '2020-03-01'\r\ngroup by 1--,2\r\norder by date desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.product_attributes_daily_view": {"raw_sql": "with ga_data as (\r\n  select\r\n  PARSE_DATE('%Y%m%d',  date) AS g_date,\r\n  product.productSku g_sku,\r\n  product.productBrand as g_brand,\r\n  split(product.v2ProductCategory,' > ')[offset(0)] as top_category,\r\n  round(sum(product.productRevenue / 1000000),3) as product_revenue, \r\n  sum(product.productQuantity) as product_quantity\r\n  from\r\n    `bergzeit.79472326.ga_sessions_*`,\r\n  unnest(hits) as hits,\r\n  unnest(product) as product\r\n  where\r\n    _TABLE_SUFFIX between format_date('%Y%m%d',date_sub(current_date(), interval 60 DAY)) and\r\n    format_date('%Y%m%d', date_sub(current_date(), interval 1 DAY)) and\r\n  hits.item.transactionId is not null and \r\n  productRevenue > 0\r\ngroup by 1,2,3,4)\r\n\r\nselect distinct\r\n  attributes.date,\r\n  extract(isoweek from date) as weeknr, --isoweek for week beginning on monday\r\n  extract(month from date) as monthnr,\r\n  extract(year from date) as yearnr,\r\n  attributes.parent_id,\r\n  #Stylelogik: Die Konvention ist 'parent_id + Herstellerfarbe'; wird im Einkauf genutzt\r\n  case \r\n  when\r\n    attributes.product_id is not null and \r\n    attributes.product_id <> '' and \r\n    attributes.color_manufacturer is not null and \r\n    attributes.color_manufacturer <> ''\r\n  then\r\n    concat(substr(attributes.product_id,1,7), '-',attributes.color_manufacturer)\r\n  else null\r\n  end as style,\r\n  attributes.product_id,\r\n  attributes.category,\r\n  attributes.brand,\r\n  attributes.parent_title,\r\n  attributes.description,\r\n  attributes.season,\r\n  attributes.color_manufacturer,\r\n  attributes.color,\r\n  attributes.gender,\r\n  attributes.price_net, -- price without VAT!\r\n  attributes.price_purchase, -- Einstandspreis, nicht UVP!\r\n  attributes.is_foreign_stock,\r\n  attributes.stock_total,\r\n  attributes.stock_lvs,\r\n  attributes.stock_gmund,\r\n  attributes.stock_ghp,\r\n  attributes.stock_supplier,\r\n  attributes.is_special_item,\r\n  attributes.manufacturer_size,\r\n  #Fremdlagerlogik: Nur wenn alle Bedingungen erf\u00fcllt sind, wird eine EDI-Bestellugn ausgel\u00f6st\r\n  case\r\n  when\r\n    attributes.is_foreign_stock = true and\r\n    attributes.stock_lvs <= 0 and\r\n    attributes.stock_supplier > 0 \r\n  then true\r\n  else null\r\n  end as _fl_item,\r\n  ga_data.product_quantity,\r\n  ga_data.product_revenue,\r\n  --Test\r\n  case\r\n  when\r\n    attributes.price_purchase>1 and\r\n    attributes.category != 'Gutscheinboxen'\r\n  then\r\n    ga_data.product_revenue - (attributes.price_purchase * ga_data.product_quantity)\r\n  end as rohertrag,\r\n  case\r\n  when\r\n    attributes.price_purchase>1 and\r\n    attributes.category != 'Gutscheinboxen'\r\n  then\r\n    (ga_data.product_revenue - (attributes.price_purchase * ga_data.product_quantity)) / ga_data.product_revenue\r\n  end as rohertragsquote\r\nfrom \r\n  `bergzeit.product_inventory.product_attributes_daily` attributes\r\nleft outer join ga_data on attributes.date = ga_data.g_date and attributes.product_id = ga_data.g_sku\r\nwhere attributes.date between date_sub(current_date(), interval 30 DAY) and date_sub(current_date(), interval 1 DAY)", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "products", "product_attributes_daily_view"], "unique_id": "analysis.sql_repository_bz.product_attributes_daily_view", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/products/product_attributes_daily_view.sql", "original_file_path": "analysis/products/product_attributes_daily_view.sql", "name": "product_attributes_daily_view", "alias": "product_attributes_daily_view", "checksum": {"name": "sha256", "checksum": "6842b56debfd954b1e171ff7fef001d9d462a19cb12f1d7ab3869c7854a45220"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/products/product_attributes_daily_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.4594588, "compiled_sql": "with ga_data as (\r\n  select\r\n  PARSE_DATE('%Y%m%d',  date) AS g_date,\r\n  product.productSku g_sku,\r\n  product.productBrand as g_brand,\r\n  split(product.v2ProductCategory,' > ')[offset(0)] as top_category,\r\n  round(sum(product.productRevenue / 1000000),3) as product_revenue, \r\n  sum(product.productQuantity) as product_quantity\r\n  from\r\n    `bergzeit.79472326.ga_sessions_*`,\r\n  unnest(hits) as hits,\r\n  unnest(product) as product\r\n  where\r\n    _TABLE_SUFFIX between format_date('%Y%m%d',date_sub(current_date(), interval 60 DAY)) and\r\n    format_date('%Y%m%d', date_sub(current_date(), interval 1 DAY)) and\r\n  hits.item.transactionId is not null and \r\n  productRevenue > 0\r\ngroup by 1,2,3,4)\r\n\r\nselect distinct\r\n  attributes.date,\r\n  extract(isoweek from date) as weeknr, --isoweek for week beginning on monday\r\n  extract(month from date) as monthnr,\r\n  extract(year from date) as yearnr,\r\n  attributes.parent_id,\r\n  #Stylelogik: Die Konvention ist 'parent_id + Herstellerfarbe'; wird im Einkauf genutzt\r\n  case \r\n  when\r\n    attributes.product_id is not null and \r\n    attributes.product_id <> '' and \r\n    attributes.color_manufacturer is not null and \r\n    attributes.color_manufacturer <> ''\r\n  then\r\n    concat(substr(attributes.product_id,1,7), '-',attributes.color_manufacturer)\r\n  else null\r\n  end as style,\r\n  attributes.product_id,\r\n  attributes.category,\r\n  attributes.brand,\r\n  attributes.parent_title,\r\n  attributes.description,\r\n  attributes.season,\r\n  attributes.color_manufacturer,\r\n  attributes.color,\r\n  attributes.gender,\r\n  attributes.price_net, -- price without VAT!\r\n  attributes.price_purchase, -- Einstandspreis, nicht UVP!\r\n  attributes.is_foreign_stock,\r\n  attributes.stock_total,\r\n  attributes.stock_lvs,\r\n  attributes.stock_gmund,\r\n  attributes.stock_ghp,\r\n  attributes.stock_supplier,\r\n  attributes.is_special_item,\r\n  attributes.manufacturer_size,\r\n  #Fremdlagerlogik: Nur wenn alle Bedingungen erf\u00fcllt sind, wird eine EDI-Bestellugn ausgel\u00f6st\r\n  case\r\n  when\r\n    attributes.is_foreign_stock = true and\r\n    attributes.stock_lvs <= 0 and\r\n    attributes.stock_supplier > 0 \r\n  then true\r\n  else null\r\n  end as _fl_item,\r\n  ga_data.product_quantity,\r\n  ga_data.product_revenue,\r\n  --Test\r\n  case\r\n  when\r\n    attributes.price_purchase>1 and\r\n    attributes.category != 'Gutscheinboxen'\r\n  then\r\n    ga_data.product_revenue - (attributes.price_purchase * ga_data.product_quantity)\r\n  end as rohertrag,\r\n  case\r\n  when\r\n    attributes.price_purchase>1 and\r\n    attributes.category != 'Gutscheinboxen'\r\n  then\r\n    (ga_data.product_revenue - (attributes.price_purchase * ga_data.product_quantity)) / ga_data.product_revenue\r\n  end as rohertragsquote\r\nfrom \r\n  `bergzeit.product_inventory.product_attributes_daily` attributes\r\nleft outer join ga_data on attributes.date = ga_data.g_date and attributes.product_id = ga_data.g_sku\r\nwhere attributes.date between date_sub(current_date(), interval 30 DAY) and date_sub(current_date(), interval 1 DAY)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.bm_product_kpis_daily": {"raw_sql": "# @description: daily KPIs based of product_attributes_daily table\r\n\r\n--fetch revenue data\r\nwith ga_data as (\r\n  select\r\n  PARSE_DATE('%Y%m%d',  date) AS g_date,\r\n  product.productSku g_sku,\r\n  product.productBrand as g_brand,\r\n  split(product.v2ProductCategory,' > ')[offset(0)] as top_category,\r\n  round(sum(product.productRevenue / 1000000),3) as product_revenue, \r\n  sum(product.productQuantity) as product_quantity\r\n  from\r\n    `bergzeit.79472326.ga_sessions_*`,\r\n  unnest(hits) as hits,\r\n  unnest(product) as product\r\n  where\r\n    _TABLE_SUFFIX between format_date('%Y%m%d',date_sub(current_date(), interval 30 DAY)) and\r\n    format_date('%Y%m%d', date_sub(current_date(), interval 1 DAY)) and\r\n  hits.item.transactionId is not null and \r\n  productRevenue > 0\r\ngroup by 1,2,3,4)\r\n,\r\n\r\n--distinguish Fremdlager\r\nfl_products as (\r\n  select *,\r\n  ga_data.product_quantity as fl_product_quantity,\r\n  ga_data.product_revenue as fl_product_revenue\r\n  from `bergzeit.product_inventory.product_attributes_daily` attributes\r\n  left outer join ga_data on attributes.date = ga_data.g_date and attributes.product_id = ga_data.g_sku\r\n  where \r\n    attributes.is_foreign_stock = true and\r\n    attributes.stock_lvs <= 0 and\r\n    attributes.stock_supplier > 0 and\r\n    attributes.date is not null\r\n),\r\n\r\n--aggregate on 'day' for easy extension and quota calculation | no temp table is constructed!!\r\naggregates as (\r\n  select distinct \r\n    attributes.date,\r\n    attributes.brand,\r\n    count(attributes.product_id) over (partition by attributes.date, attributes.brand) as count_product_id,\r\n    count(fl.product_id) over (partition by attributes.date, attributes.brand) as count_fl_products,\r\n    sum(ga_data.product_revenue) over (partition by attributes.date, attributes.brand) as revenue_total,\r\n    sum(fl.fl_product_revenue) over (partition by attributes.date, attributes.brand) as fl_revenue,\r\n    sum(ga_data.product_revenue - attributes.price_purchase) over (partition by attributes.date, attributes.brand) as rohertrag_total,\r\n    sum(fl.fl_product_revenue - attributes.price_purchase) over (partition by attributes.date, attributes.brand) as fl_rohertrag \r\n  from \r\n    `bergzeit.product_inventory.product_attributes_daily` attributes\r\n  left outer join ga_data on attributes.date = ga_data.g_date and attributes.product_id = ga_data.g_sku\r\n  left outer join fl_products fl  on attributes.date = fl.date and attributes.product_id = fl.product_id\r\n  where attributes.date is not null\r\n)\r\n\r\n--calculate main KPIs\r\nselect\r\n  date,\r\n  brand,\r\n  count_product_id,\r\n  count_fl_products,\r\n  --count_fl_products / count_product_id as fl_quota,\r\n  round(revenue_total,2) as revenue_total,\r\n  round(fl_revenue,2) as fl_revenue,\r\n  --fl_revenue / revenue_total as fl_revenue_quota,\r\n  round(revenue_total - fl_revenue,2) as revenue_lvs,\r\n  round(rohertrag_total,2) as rohertrag_total,\r\n  --rohertrag_total / revenue_total as rohertragsquote_total,\r\n  round(fl_rohertrag,2) as fl_rohertrag,\r\n  fl_rohertrag / fl_revenue as fl_rohertragsquote\r\nfrom \r\n  aggregates", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "products", "bm_product_kpis_daily"], "unique_id": "analysis.sql_repository_bz.bm_product_kpis_daily", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/products/bm_product_kpis_daily.sql", "original_file_path": "analysis/products/bm_product_kpis_daily.sql", "name": "bm_product_kpis_daily", "alias": "bm_product_kpis_daily", "checksum": {"name": "sha256", "checksum": "decb401923bac59957acae51100ea13876105286444cac4716e28d14610dc361"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/products/bm_product_kpis_daily.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.480586, "compiled_sql": "# @description: daily KPIs based of product_attributes_daily table\r\n\r\n--fetch revenue data\r\nwith ga_data as (\r\n  select\r\n  PARSE_DATE('%Y%m%d',  date) AS g_date,\r\n  product.productSku g_sku,\r\n  product.productBrand as g_brand,\r\n  split(product.v2ProductCategory,' > ')[offset(0)] as top_category,\r\n  round(sum(product.productRevenue / 1000000),3) as product_revenue, \r\n  sum(product.productQuantity) as product_quantity\r\n  from\r\n    `bergzeit.79472326.ga_sessions_*`,\r\n  unnest(hits) as hits,\r\n  unnest(product) as product\r\n  where\r\n    _TABLE_SUFFIX between format_date('%Y%m%d',date_sub(current_date(), interval 30 DAY)) and\r\n    format_date('%Y%m%d', date_sub(current_date(), interval 1 DAY)) and\r\n  hits.item.transactionId is not null and \r\n  productRevenue > 0\r\ngroup by 1,2,3,4)\r\n,\r\n\r\n--distinguish Fremdlager\r\nfl_products as (\r\n  select *,\r\n  ga_data.product_quantity as fl_product_quantity,\r\n  ga_data.product_revenue as fl_product_revenue\r\n  from `bergzeit.product_inventory.product_attributes_daily` attributes\r\n  left outer join ga_data on attributes.date = ga_data.g_date and attributes.product_id = ga_data.g_sku\r\n  where \r\n    attributes.is_foreign_stock = true and\r\n    attributes.stock_lvs <= 0 and\r\n    attributes.stock_supplier > 0 and\r\n    attributes.date is not null\r\n),\r\n\r\n--aggregate on 'day' for easy extension and quota calculation | no temp table is constructed!!\r\naggregates as (\r\n  select distinct \r\n    attributes.date,\r\n    attributes.brand,\r\n    count(attributes.product_id) over (partition by attributes.date, attributes.brand) as count_product_id,\r\n    count(fl.product_id) over (partition by attributes.date, attributes.brand) as count_fl_products,\r\n    sum(ga_data.product_revenue) over (partition by attributes.date, attributes.brand) as revenue_total,\r\n    sum(fl.fl_product_revenue) over (partition by attributes.date, attributes.brand) as fl_revenue,\r\n    sum(ga_data.product_revenue - attributes.price_purchase) over (partition by attributes.date, attributes.brand) as rohertrag_total,\r\n    sum(fl.fl_product_revenue - attributes.price_purchase) over (partition by attributes.date, attributes.brand) as fl_rohertrag \r\n  from \r\n    `bergzeit.product_inventory.product_attributes_daily` attributes\r\n  left outer join ga_data on attributes.date = ga_data.g_date and attributes.product_id = ga_data.g_sku\r\n  left outer join fl_products fl  on attributes.date = fl.date and attributes.product_id = fl.product_id\r\n  where attributes.date is not null\r\n)\r\n\r\n--calculate main KPIs\r\nselect\r\n  date,\r\n  brand,\r\n  count_product_id,\r\n  count_fl_products,\r\n  --count_fl_products / count_product_id as fl_quota,\r\n  round(revenue_total,2) as revenue_total,\r\n  round(fl_revenue,2) as fl_revenue,\r\n  --fl_revenue / revenue_total as fl_revenue_quota,\r\n  round(revenue_total - fl_revenue,2) as revenue_lvs,\r\n  round(rohertrag_total,2) as rohertrag_total,\r\n  --rohertrag_total / revenue_total as rohertragsquote_total,\r\n  round(fl_rohertrag,2) as fl_rohertrag,\r\n  fl_rohertrag / fl_revenue as fl_rohertragsquote\r\nfrom \r\n  aggregates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.available_products_by_country": {"raw_sql": "-- fetch merchant center data\r\n{% set countries =  ['de', 'ch', 'at', 'uk', 'nl', 'it'] %}\r\n\r\n  {% for country in countries %}\r\n\r\n  {% set source_country = 'mc_products_' + country %}\r\n\r\n  select\r\n    '{{ country }}' as products_country,\r\n    count(distinct offer_id) as nr_products\r\n\r\n  from\r\n    {{ source('merchant_center_transfer_de', source_country)}}\r\n    \r\n  where\r\n    channel = \"online\"\r\n    and price.value > 0 \r\n    and date(_partitiontime) between {{ get_last_n_days_date_range(1) }}\r\n\r\n  group by 1\r\n\r\n    {% if not loop.last -%} union all {%- endif %}\r\n    {% endfor %}", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": ["macro.sql_repository_bz.get_last_n_days_date_range"], "nodes": ["source.sql_repository_bz.merchant_center_transfer_de.mc_products_de", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_ch", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_at", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_uk", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_nl", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_it"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "products", "available_products_by_country"], "unique_id": "analysis.sql_repository_bz.available_products_by_country", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/products/available_products_by_country.sql", "original_file_path": "analysis/products/available_products_by_country.sql", "name": "available_products_by_country", "alias": "available_products_by_country", "checksum": {"name": "sha256", "checksum": "8bf08f1da16a0a4ff38e6df2079d7340af8c0605eff745c13fe12811fb6aefe9"}, "tags": [], "refs": [], "sources": [["merchant_center_transfer_de", "mc_products_de"], ["merchant_center_transfer_de", "mc_products_ch"], ["merchant_center_transfer_de", "mc_products_at"], ["merchant_center_transfer_de", "mc_products_uk"], ["merchant_center_transfer_de", "mc_products_nl"], ["merchant_center_transfer_de", "mc_products_it"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/products/available_products_by_country.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.4956994, "compiled_sql": "-- fetch merchant center data\n\n\n  \n\n  \n\n  select\n    'de' as products_country,\n    count(distinct offer_id) as nr_products\n\n  from\n    `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_4410479`\n    \n  where\n    channel = \"online\"\n    and price.value > 0 \n    and date(_partitiontime) between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n  group by 1\n\n    union all\n    \n\n  \n\n  select\n    'ch' as products_country,\n    count(distinct offer_id) as nr_products\n\n  from\n    `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_100453093`\n    \n  where\n    channel = \"online\"\n    and price.value > 0 \n    and date(_partitiontime) between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n  group by 1\n\n    union all\n    \n\n  \n\n  select\n    'at' as products_country,\n    count(distinct offer_id) as nr_products\n\n  from\n    `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_10150175`\n    \n  where\n    channel = \"online\"\n    and price.value > 0 \n    and date(_partitiontime) between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n  group by 1\n\n    union all\n    \n\n  \n\n  select\n    'uk' as products_country,\n    count(distinct offer_id) as nr_products\n\n  from\n    `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_100198987`\n    \n  where\n    channel = \"online\"\n    and price.value > 0 \n    and date(_partitiontime) between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n  group by 1\n\n    union all\n    \n\n  \n\n  select\n    'nl' as products_country,\n    count(distinct offer_id) as nr_products\n\n  from\n    `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_103272233`\n    \n  where\n    channel = \"online\"\n    and price.value > 0 \n    and date(_partitiontime) between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n  group by 1\n\n    union all\n    \n\n  \n\n  select\n    'it' as products_country,\n    count(distinct offer_id) as nr_products\n\n  from\n    `adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_135253248`\n    \n  where\n    channel = \"online\"\n    and price.value > 0 \n    and date(_partitiontime) between \n    date_sub(current_date(), interval 1 day)\n    and date_sub(current_date(), interval 1 day)\n\n\n  group by 1\n\n    \n    ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.ga_prudsys_export_eecevents": {"raw_sql": "with ga_data as (\r\nselect\r\n    hits.page.hostname as ga_hostname,\r\n    parse_date('%Y%m%d', date) ga_date,\r\n    product.productsku as ga_sku,\r\n    substring(product.productsku,1,7) as ga_product_parent,\r\n    hits.ecommerceaction.action_type as ga_eec_action_type\r\n      \r\n  from \r\n      `bergzeit.79472326.ga_sessions_*`,\r\n      unnest(hits) as hits,\r\n      unnest(hits.product) as product\r\n\r\n  where \r\n  _TABLE_SUFFIX not like '%intraday%'\r\n    and hits.ecommerceaction.action_type is not null\r\n\r\n    and PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between '2020-03-01' and '2022-02-28'\r\n    and hits.page.hostname in ('www.bergzeit.de', 'www.bergzeit.at', 'www.bergzeit.ch')\r\n\r\n),\r\n\r\nagg_data as (\r\n\r\n    select\r\n    \r\n    ga_date,\r\n    ga_hostname,\r\n    ga_sku,\r\n    ga_product_parent,\r\n    countif(ga_eec_action_type ='2') as detail_views,\r\n    countif(ga_eec_action_type ='3') as add_to_carts_sku,\r\n    countif(ga_eec_action_type ='4') as remove_from_carts_sku\r\n\r\n  from ga_data\r\n\r\n  where\r\n    ga_eec_action_type in ('2', '3', '4')\r\n    \r\n  group by 1,2,3,4\r\n\r\n)\r\n\r\nselect \r\n    ga_hostname,\r\n    ga_date,\r\n    ga_sku,\r\n    ga_product_parent,\r\n    sum(detail_views) over (partition by ga_date, ga_hostname, ga_product_parent) as detail_views_parent,\r\n    add_to_carts_sku,\r\n    remove_from_carts_sku\r\n\r\nfrom agg_data", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "google_analytics", "ga_prudsys_export_eecevents"], "unique_id": "analysis.sql_repository_bz.ga_prudsys_export_eecevents", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/google_analytics/ga_prudsys_export_eecevents.sql", "original_file_path": "analysis/google_analytics/ga_prudsys_export_eecevents.sql", "name": "ga_prudsys_export_eecevents", "alias": "ga_prudsys_export_eecevents", "checksum": {"name": "sha256", "checksum": "6bdf0bc9017cf0d2c1210795187891b463039dcfde311a1591f5207ead56207c"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/google_analytics/ga_prudsys_export_eecevents.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.5133822, "compiled_sql": "with ga_data as (\r\nselect\r\n    hits.page.hostname as ga_hostname,\r\n    parse_date('%Y%m%d', date) ga_date,\r\n    product.productsku as ga_sku,\r\n    substring(product.productsku,1,7) as ga_product_parent,\r\n    hits.ecommerceaction.action_type as ga_eec_action_type\r\n      \r\n  from \r\n      `bergzeit.79472326.ga_sessions_*`,\r\n      unnest(hits) as hits,\r\n      unnest(hits.product) as product\r\n\r\n  where \r\n  _TABLE_SUFFIX not like '%intraday%'\r\n    and hits.ecommerceaction.action_type is not null\r\n\r\n    and PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) between '2020-03-01' and '2022-02-28'\r\n    and hits.page.hostname in ('www.bergzeit.de', 'www.bergzeit.at', 'www.bergzeit.ch')\r\n\r\n),\r\n\r\nagg_data as (\r\n\r\n    select\r\n    \r\n    ga_date,\r\n    ga_hostname,\r\n    ga_sku,\r\n    ga_product_parent,\r\n    countif(ga_eec_action_type ='2') as detail_views,\r\n    countif(ga_eec_action_type ='3') as add_to_carts_sku,\r\n    countif(ga_eec_action_type ='4') as remove_from_carts_sku\r\n\r\n  from ga_data\r\n\r\n  where\r\n    ga_eec_action_type in ('2', '3', '4')\r\n    \r\n  group by 1,2,3,4\r\n\r\n)\r\n\r\nselect \r\n    ga_hostname,\r\n    ga_date,\r\n    ga_sku,\r\n    ga_product_parent,\r\n    sum(detail_views) over (partition by ga_date, ga_hostname, ga_product_parent) as detail_views_parent,\r\n    add_to_carts_sku,\r\n    remove_from_carts_sku\r\n\r\nfrom agg_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.extract_event_params_data_type": {"raw_sql": "with params_data as (\r\n        select distinct\r\n\r\n            event_name,\r\n            event_params.key as event_parameter,\r\n            case when value.string_value is not null then 'string'\r\n                when value.int_value is not null then 'int'\r\n                when value.float_value is not null then 'float'\r\n                when value.double_value is not null then 'double'\r\n                end as parameter_data_type,\r\n            count(distinct event_params.key) over (partition by event_name) as nr_parameter_by_event\r\n            \r\n        from\r\n            {{ source('ga4_bz_overall', 'ga4_bz_overall_events') }},\r\n            unnest(event_params) AS event_params\r\n            \r\n        where\r\n        event_name like('_custom%')\r\n        and _table_suffix between format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\r\n    )\r\n\r\n    select \r\n        *,\r\n        count(distinct parameter_data_type) over (partition by event_name, event_parameter) as nr_datatypes_by_param\r\n    from params_data\r\n    order by 1,2", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "google_analytics", "ga4", "extract_event_params_data_type"], "unique_id": "analysis.sql_repository_bz.extract_event_params_data_type", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/google_analytics/ga4/extract_event_params_data_type.sql", "original_file_path": "analysis/google_analytics/ga4/extract_event_params_data_type.sql", "name": "extract_event_params_data_type", "alias": "extract_event_params_data_type", "checksum": {"name": "sha256", "checksum": "685c5ce2ee65388687b2aa0e66e21ea1985069f37ab76eee7751f9960e70a186"}, "tags": [], "refs": [], "sources": [["ga4_bz_overall", "ga4_bz_overall_events"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/google_analytics/ga4/extract_event_params_data_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.5196016, "compiled_sql": "with params_data as (\n        select distinct\n\n            event_name,\n            event_params.key as event_parameter,\n            case when value.string_value is not null then 'string'\n                when value.int_value is not null then 'int'\n                when value.float_value is not null then 'float'\n                when value.double_value is not null then 'double'\n                end as parameter_data_type,\n            count(distinct event_params.key) over (partition by event_name) as nr_parameter_by_event\n            \n        from\n            `bergzeit`.`analytics_317045356`.`events_*`,\n            unnest(event_params) AS event_params\n            \n        where\n        event_name like('_custom%')\n        and _table_suffix between format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)) and format_date('%Y%m%d',DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY))\n    )\n\n    select \n        *,\n        count(distinct parameter_data_type) over (partition by event_name, event_parameter) as nr_datatypes_by_param\n    from params_data\n    order by 1,2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.return_data_by_sales_channel": {"raw_sql": "with return_data as (\r\nselect\r\nT_order_date,\r\nsales_channel_description,\r\nT_ship_country,\r\ncase when T_ship_country in ('CH', 'AT', 'DE', 'GB', 'IT', 'NL', 'BE', 'LU', 'PL', 'SE', 'CZ', 'DK', 'FI', 'FR', 'NO') then T_ship_country\r\nelse 'other' end as Lieferland, \r\ncase when T_ship_country in ('CH', 'AT', 'DE', 'GB', 'IT' ) then T_ship_country\r\n     when T_ship_country in ('NL', 'BE', 'LU') then 'Benelux'\r\nelse 'other' end as Lieferland_grouped, \r\nT_payment_method_code,\r\nT_invoice_amount_incl_vat,\r\nT_invoice_amount_excl_vat,\r\nT_crmemo_amount_incl_vat,\r\nT_crmemo_amount_excl_vat,\r\nif(T_crmemo_amount_incl_vat = 0,  1, 0) as ind_no_return,\r\nif(T_crmemo_amount_incl_vat > 0 and T_invoice_amount_incl_vat = T_crmemo_amount_incl_vat,  1, 0) as ind_total_return,\r\nif(T_crmemo_amount_incl_vat > 0 and T_invoice_amount_incl_vat != T_crmemo_amount_incl_vat,  1, 0) as ind_partial_return\r\nfrom {{ref('int_nav_transactions_and_customers')}}\r\nwhere T_order_date >= '2021-03-01'\r\nand sales_channel_description like 'Webshop%'\r\nand regexp_contains(lower(sales_channel_description), 'salewa|dynafit') = false\r\n)\r\n\r\nselect \r\nconcat(extract(year FROM T_order_date), '_', extract(month FROM T_order_date) ) as order_month,\r\nsales_channel_description,\r\nLieferland, \r\nLieferland_grouped, \r\nT_payment_method_code,\r\ncount(*) as Anzahl_Transaktionen,\r\nsum(T_invoice_amount_incl_vat) as Rechnungswert,\r\nsum(T_invoice_amount_excl_vat) as Rechnunswert_ohne_mwst,\r\nsum(T_crmemo_amount_incl_vat) as Gutschriftswert,\r\nsum(T_crmemo_amount_excl_vat) as Gutschriftswert_ohne_mwst,\r\nsum(ind_no_return) as Anzahl_keine_Retoure,\r\nsum(ind_partial_return) as Anzahl_Teilretoure,\r\nsum(ind_total_return) as Anzahl_Komplettretoure,\r\nsum(ind_partial_return) + sum(ind_total_return) as Anzahl_Retouren_ges\r\nfrom return_data\r\ngroup by 1,2,3,4,5", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.int_nav_transactions_and_customers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "nav", "return_data_by_sales_channel"], "unique_id": "analysis.sql_repository_bz.return_data_by_sales_channel", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/nav/return_data_by_sales_channel.sql", "original_file_path": "analysis/nav/return_data_by_sales_channel.sql", "name": "return_data_by_sales_channel", "alias": "return_data_by_sales_channel", "checksum": {"name": "sha256", "checksum": "2d13b5b296fc5bd0e716a8114e2b0e54185c25710df241c732dc6e0b9b806351"}, "tags": [], "refs": [["int_nav_transactions_and_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/nav/return_data_by_sales_channel.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.529786, "compiled_sql": "with return_data as (\nselect\nT_order_date,\nsales_channel_description,\nT_ship_country,\ncase when T_ship_country in ('CH', 'AT', 'DE', 'GB', 'IT', 'NL', 'BE', 'LU', 'PL', 'SE', 'CZ', 'DK', 'FI', 'FR', 'NO') then T_ship_country\nelse 'other' end as Lieferland, \ncase when T_ship_country in ('CH', 'AT', 'DE', 'GB', 'IT' ) then T_ship_country\n     when T_ship_country in ('NL', 'BE', 'LU') then 'Benelux'\nelse 'other' end as Lieferland_grouped, \nT_payment_method_code,\nT_invoice_amount_incl_vat,\nT_invoice_amount_excl_vat,\nT_crmemo_amount_incl_vat,\nT_crmemo_amount_excl_vat,\nif(T_crmemo_amount_incl_vat = 0,  1, 0) as ind_no_return,\nif(T_crmemo_amount_incl_vat > 0 and T_invoice_amount_incl_vat = T_crmemo_amount_incl_vat,  1, 0) as ind_total_return,\nif(T_crmemo_amount_incl_vat > 0 and T_invoice_amount_incl_vat != T_crmemo_amount_incl_vat,  1, 0) as ind_partial_return\nfrom `bergzeit`.`dbt_analytics_intermediate`.`int_nav_transactions_and_customers`\nwhere T_order_date >= '2021-03-01'\nand sales_channel_description like 'Webshop%'\nand regexp_contains(lower(sales_channel_description), 'salewa|dynafit') = false\n)\n\nselect \nconcat(extract(year FROM T_order_date), '_', extract(month FROM T_order_date) ) as order_month,\nsales_channel_description,\nLieferland, \nLieferland_grouped, \nT_payment_method_code,\ncount(*) as Anzahl_Transaktionen,\nsum(T_invoice_amount_incl_vat) as Rechnungswert,\nsum(T_invoice_amount_excl_vat) as Rechnunswert_ohne_mwst,\nsum(T_crmemo_amount_incl_vat) as Gutschriftswert,\nsum(T_crmemo_amount_excl_vat) as Gutschriftswert_ohne_mwst,\nsum(ind_no_return) as Anzahl_keine_Retoure,\nsum(ind_partial_return) as Anzahl_Teilretoure,\nsum(ind_total_return) as Anzahl_Komplettretoure,\nsum(ind_partial_return) + sum(ind_total_return) as Anzahl_Retouren_ges\nfrom return_data\ngroup by 1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.plausi": {"raw_sql": "with customers_all as (\r\n    select     \r\n        customer_id,\r\n        shop_customer_oxid_id,\r\n        shop_customer_source_id,\r\n        if(shop_customer_oxid_id != '0', shop_customer_oxid_id, shop_customer_source_id) as shop_customer_id\r\n    from `bergzeit`.`azure_dwh_discovery`.`customers`\r\n),\r\n\r\ncustomers_new_id as (\r\n    select \r\n        customer_id,\r\n        shop_customer_id as shop_id_new \r\n    from `bergzeit`.`azure_dwh_discovery`.`customers_new_id`\r\n),\r\n\r\njoined_data as (\r\n\r\n    select *\r\n    from customers_all\r\n    full outer join customers_new_id\r\n        using(customer_id) \r\n)\r\n\r\nselect * from joined_data", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "nav", "plausi"], "unique_id": "analysis.sql_repository_bz.plausi", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/nav/plausi.sql", "original_file_path": "analysis/nav/plausi.sql", "name": "plausi", "alias": "plausi", "checksum": {"name": "sha256", "checksum": "1d2b365e92d94f37e95229b9d37ea5211f22b9bbd226bc050906332295c82712"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/nav/plausi.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.5374956, "compiled_sql": "with customers_all as (\r\n    select     \r\n        customer_id,\r\n        shop_customer_oxid_id,\r\n        shop_customer_source_id,\r\n        if(shop_customer_oxid_id != '0', shop_customer_oxid_id, shop_customer_source_id) as shop_customer_id\r\n    from `bergzeit`.`azure_dwh_discovery`.`customers`\r\n),\r\n\r\ncustomers_new_id as (\r\n    select \r\n        customer_id,\r\n        shop_customer_id as shop_id_new \r\n    from `bergzeit`.`azure_dwh_discovery`.`customers_new_id`\r\n),\r\n\r\njoined_data as (\r\n\r\n    select *\r\n    from customers_all\r\n    full outer join customers_new_id\r\n        using(customer_id) \r\n)\r\n\r\nselect * from joined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.transactions_with_high_order_value": {"raw_sql": "/* Details in WEBA-859 */\r\n\r\nwith invoice_data as (\r\n    select *\r\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_invoice_line_aggregated`\r\n    where order_date > '2021-07-20'\r\n    and sum_invoice_amount_excl_vat_euro >= 150\r\n    and sales_channel_id = 'Webshop 102'\r\n), \r\n\r\ncustomers as (\r\n    \r\n    select distinct\r\n        customer_id,\r\n        shop_customer_id\r\n\r\n    from `bergzeit`.`dbt_analytics_staging`.`stg_nav_customers_new_id`\r\n\r\n    where shop_customer_id <> '0'\r\n\r\n)\r\n\r\n\r\n    select count(*)\r\n        /*order_date,\r\n        inv_h_shop_order_id as shop_order_id,\r\n        sale_customer_id as navision_customer_id,\r\n        shop_customer_id  ,\r\n        shipment_country_id,\r\n        sum_invoice_amount_excl_vat_euro as order_value*/\r\n    from invoice_data as it\r\n\r\n    left join customers as c\r\n        on it.sale_customer_id = c.customer_id\r\n\r\n    where inv_h_shop_order_id is not null\r\n\r\n    /* Query direkt im SQL Server (TEST)\r\n\r\nSELECT [T_order_date] as order_date\r\n      ,[T_shop_order_id] as shop_order_id\r\n      ,[T_customer_id] as navision_customer_id\r\n      ,[T_customer_email]\r\n      ,[T_invoice_amount_excl_vat] as order_value\r\n  FROM [Discovery].[dsc].[mkt_customer_transaction]\r\n    where [T_order_date] > '2021-07-20'\r\n    and [T_invoice_amount_excl_vat] >= 150\r\n    and T_shop_channel_id = 'Webshop 102'\r\n\tand [T_customer_id] <> '0'\r\norder by [T_order_date] desc\r\n*/", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "transactions", "transactions_with_high_order_value"], "unique_id": "analysis.sql_repository_bz.transactions_with_high_order_value", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/transactions/transactions_with_high_order_value.sql", "original_file_path": "analysis/transactions/transactions_with_high_order_value.sql", "name": "transactions_with_high_order_value", "alias": "transactions_with_high_order_value", "checksum": {"name": "sha256", "checksum": "0cc2af0fbe3c138ceee540ceb23446f4f65d45c0622ba9719ee344f9ededfb10"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/transactions/transactions_with_high_order_value.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.5434372, "compiled_sql": "/* Details in WEBA-859 */\r\n\r\nwith invoice_data as (\r\n    select *\r\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_nav_invoice_line_aggregated`\r\n    where order_date > '2021-07-20'\r\n    and sum_invoice_amount_excl_vat_euro >= 150\r\n    and sales_channel_id = 'Webshop 102'\r\n), \r\n\r\ncustomers as (\r\n    \r\n    select distinct\r\n        customer_id,\r\n        shop_customer_id\r\n\r\n    from `bergzeit`.`dbt_analytics_staging`.`stg_nav_customers_new_id`\r\n\r\n    where shop_customer_id <> '0'\r\n\r\n)\r\n\r\n\r\n    select count(*)\r\n        /*order_date,\r\n        inv_h_shop_order_id as shop_order_id,\r\n        sale_customer_id as navision_customer_id,\r\n        shop_customer_id  ,\r\n        shipment_country_id,\r\n        sum_invoice_amount_excl_vat_euro as order_value*/\r\n    from invoice_data as it\r\n\r\n    left join customers as c\r\n        on it.sale_customer_id = c.customer_id\r\n\r\n    where inv_h_shop_order_id is not null\r\n\r\n    /* Query direkt im SQL Server (TEST)\r\n\r\nSELECT [T_order_date] as order_date\r\n      ,[T_shop_order_id] as shop_order_id\r\n      ,[T_customer_id] as navision_customer_id\r\n      ,[T_customer_email]\r\n      ,[T_invoice_amount_excl_vat] as order_value\r\n  FROM [Discovery].[dsc].[mkt_customer_transaction]\r\n    where [T_order_date] > '2021-07-20'\r\n    and [T_invoice_amount_excl_vat] >= 150\r\n    and T_shop_channel_id = 'Webshop 102'\r\n\tand [T_customer_id] <> '0'\r\norder by [T_order_date] desc\r\n*/", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.transactions_oms_and_consentless": {"raw_sql": "with ishop_transactions as (\r\n\r\n    select  \r\n        ishop_order_date as date, \r\n        count(distinct order_id) as ishop_order_count\r\n    from `bergzeit.zz_dev_dbt_cgutknecht_analytics_staging.stg_ishop_oms_transactions_ob`\r\n    where ishop_order_date between \"2021-12-01\" and \"2022-01-31\"\r\n    group by 1\r\n\r\n), \r\n\r\nconsentless_transactions as (\r\n    select\r\n        date,\r\n            count(distinct transaction_id) as consentless_order_count\r\n    from `bergzeit.consentless_tracking.hits_prod`\r\n    where\r\n        date between '2021-12-01' and '2022-01-31'\r\n        and hittype = 'transaction'\r\n    group by 1\r\n)\r\n\r\nselect * \r\nfrom ishop_transactions\r\nleft join consentless_transactions using (date)\r\norder by 1 asc", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "transactions", "transactions_oms_and_consentless"], "unique_id": "analysis.sql_repository_bz.transactions_oms_and_consentless", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/transactions/transactions_oms_and_consentless.sql", "original_file_path": "analysis/transactions/transactions_oms_and_consentless.sql", "name": "transactions_oms_and_consentless", "alias": "transactions_oms_and_consentless", "checksum": {"name": "sha256", "checksum": "bb1775e8cb9366e350a9a14a374f7ea3ec85ec46e4917316b55a15ab8af698b7"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/transactions/transactions_oms_and_consentless.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.5492923, "compiled_sql": "with ishop_transactions as (\r\n\r\n    select  \r\n        ishop_order_date as date, \r\n        count(distinct order_id) as ishop_order_count\r\n    from `bergzeit.zz_dev_dbt_cgutknecht_analytics_staging.stg_ishop_oms_transactions_ob`\r\n    where ishop_order_date between \"2021-12-01\" and \"2022-01-31\"\r\n    group by 1\r\n\r\n), \r\n\r\nconsentless_transactions as (\r\n    select\r\n        date,\r\n            count(distinct transaction_id) as consentless_order_count\r\n    from `bergzeit.consentless_tracking.hits_prod`\r\n    where\r\n        date between '2021-12-01' and '2022-01-31'\r\n        and hittype = 'transaction'\r\n    group by 1\r\n)\r\n\r\nselect * \r\nfrom ishop_transactions\r\nleft join consentless_transactions using (date)\r\norder by 1 asc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.sql_repository_bz.transactions_voucher_grouping_logic": {"raw_sql": "select \r\n\r\n    *,\r\n    \r\n    case \r\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, 'Bergzeit_Club') then 'Bergzeit Club'\r\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, 'Family&Friends') then 'Family & Friends'\r\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, 'Newsletter Anmeldung') then 'Newsletter Anmeldung'\r\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, 'Rubellos') then 'Rubellose'\r\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, 'Geburtstagsmail') then 'Geburtstagsmail'\r\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, 'Treue_Rabatt_Online') then 'Treue_Rabatt_Online'\r\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, '%|Prozent') and \r\n        regexp_contains(inv_l_product_attributes, 'Rubellos|Bergzeit_Club|Family&Friends|Geburtstagsmail|Treue_Rabatt_Online' ) != true then 'Prozente'\r\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, '\u20ac|Euro|EUR') and \r\n        regexp_contains(inv_l_product_attributes, 'Rubellos|Bergzeit_Club|Family&Friends|Geburtstagsmail|Treue_Rabatt_Online' ) != true then 'Eurobetrag'\r\n        when indikator_voucher = 1 then 'Rest'\r\n     end as voucher_type\r\n\r\n    from {{ ref('stg_nav_invoice_header_and_lines') }}", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_nav_invoice_header_and_lines"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "analysis", "transactions", "transactions_voucher_grouping_logic"], "unique_id": "analysis.sql_repository_bz.transactions_voucher_grouping_logic", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "analysis/transactions/transactions_voucher_grouping_logic.sql", "original_file_path": "analysis/transactions/transactions_voucher_grouping_logic.sql", "name": "transactions_voucher_grouping_logic", "alias": "transactions_voucher_grouping_logic", "checksum": {"name": "sha256", "checksum": "3f03788d68de366391dd9c1c67a838c7f525f779c25024fcb8db3d32761e3d1a"}, "tags": [], "refs": [["stg_nav_invoice_header_and_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/analysis/transactions/transactions_voucher_grouping_logic.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.5550299, "compiled_sql": "select \n\n    *,\n    \n    case \n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, 'Bergzeit_Club') then 'Bergzeit Club'\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, 'Family&Friends') then 'Family & Friends'\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, 'Newsletter Anmeldung') then 'Newsletter Anmeldung'\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, 'Rubellos') then 'Rubellose'\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, 'Geburtstagsmail') then 'Geburtstagsmail'\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, 'Treue_Rabatt_Online') then 'Treue_Rabatt_Online'\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, '%|Prozent') and \n        regexp_contains(inv_l_product_attributes, 'Rubellos|Bergzeit_Club|Family&Friends|Geburtstagsmail|Treue_Rabatt_Online' ) != true then 'Prozente'\n        when indikator_voucher = 1 and regexp_contains(inv_l_product_attributes, '\u20ac|Euro|EUR') and \n        regexp_contains(inv_l_product_attributes, 'Rubellos|Bergzeit_Club|Family&Friends|Geburtstagsmail|Treue_Rabatt_Online' ) != true then 'Eurobetrag'\n        when indikator_voucher = 1 then 'Rest'\n     end as voucher_type\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_nav_invoice_header_and_lines`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "operation.sql_repository_bz.sql_repository_bz-on-run-end-0": {"raw_sql": "{{ store_test_results(results)}}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.sql_repository_bz.store_test_results"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["sql_repository_bz", "hooks", "sql_repository_bz-on-run-end-0"], "unique_id": "operation.sql_repository_bz.sql_repository_bz-on-run-end-0", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "hooks/sql_repository_bz-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "sql_repository_bz-on-run-end-0", "alias": "sql_repository_bz-on-run-end-0", "checksum": {"name": "sha256", "checksum": "572d9d0a87083f79a5e2a16fb35ee8c4eff17a8ddff7fbcbb67efa05b7295124"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true, "relation": true}}, "created_at": 1663750849.5876641, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "model.ga4.dim_ga4__sessions": {"raw_sql": "-- Dimension table for sessions based on the session_start event.\n\nwith session_start_dims as (\n    select \n        session_key,\n        traffic_source,\n        ga_session_number,\n        page_location as landing_page,\n        page_hostname as landing_page_hostname,\n        geo,\n        device,\n        row_number() over (partition by session_key order by session_event_number asc) as row_num\n    from {{ref('stg_ga4__event_session_start')}}\n),\n-- Arbitrarily pull the first session_start event to remove duplicates\nremove_dupes as \n(\n    select * from session_start_dims\n    where row_num = 1\n),\njoin_traffic_source as (\n    select \n        remove_dupes.*,\n        session_source as source,\n        session_medium as medium,\n        session_campaign as campaign,\n        session_default_channel_grouping as default_channel_grouping\n    from remove_dupes\n    left join {{ref('stg_ga4__sessions_traffic_sources')}} using (session_key)\n)\n\nselect * from join_traffic_source", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ga4.stg_ga4__event_session_start", "model.ga4.stg_ga4__sessions_traffic_sources"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "marts", "core", "dim_ga4__sessions"], "unique_id": "model.ga4.dim_ga4__sessions", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "marts/core/dim_ga4__sessions.sql", "original_file_path": "models/marts/core/dim_ga4__sessions.sql", "name": "dim_ga4__sessions", "alias": "dim_ga4__sessions", "checksum": {"name": "sha256", "checksum": "395cbfb7efd6efbae30beff99c878a2810aadce6528e0522e0fce964e3d541f4"}, "tags": [], "refs": [["stg_ga4__event_session_start"], ["stg_ga4__sessions_traffic_sources"]], "sources": [], "description": "Dimension table for sessions containing context useful for filtering. Each row represents a session. Unique on session_key", "columns": {"session_key": {"name": "session_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/marts/core/core.yml", "compiled_path": "target/compiled/ga4/models/marts/core/dim_ga4__sessions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1663750854.2976153, "compiled_sql": "-- Dimension table for sessions based on the session_start event.\n\nwith session_start_dims as (\n    select \n        session_key,\n        traffic_source,\n        ga_session_number,\n        page_location as landing_page,\n        page_hostname as landing_page_hostname,\n        geo,\n        device,\n        row_number() over (partition by session_key order by session_event_number asc) as row_num\n    from `bergzeit`.`dbt`.`stg_ga4__event_session_start`\n),\n-- Arbitrarily pull the first session_start event to remove duplicates\nremove_dupes as \n(\n    select * from session_start_dims\n    where row_num = 1\n),\njoin_traffic_source as (\n    select \n        remove_dupes.*,\n        session_source as source,\n        session_medium as medium,\n        session_campaign as campaign,\n        session_default_channel_grouping as default_channel_grouping\n    from remove_dupes\n    left join `bergzeit`.`dbt`.`stg_ga4__sessions_traffic_sources` using (session_key)\n)\n\nselect * from join_traffic_source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`dim_ga4__sessions`"}, "model.ga4.fct_ga4__pages": {"raw_sql": "with page_view as (\n    select\n        event_date_dt,\n        extract( hour from (select  timestamp_micros(event_timestamp))) as hour,\n        page_location,  -- includes query string parameters not listed in query_parameter_exclusions variable\n        concat( cast(event_date_dt as string), cast(extract( hour from (select  timestamp_micros(event_timestamp))) as string), page_location ) as page_key,\n        page_title,  -- would like to move this to dim_ga4__pages but need to think how to handle page_title changing over time\n        count(event_name) as page_views,\n        count(distinct user_key ) as users,\n        sum( if(ga_session_number = 1,1,0)) as new_users,\n        sum(entrances) as entrances,\n        sum(exits) as exits,\n        sum(engagement_time_msec) as total_time_on_page \nfrom {{ref('stg_ga4__event_page_view')}}\n    group by 1,2,3,4,5\n), scroll as (\n    select\n        event_date_dt,\n        extract( hour from (select timestamp_micros(event_timestamp))) as hour,\n        page_location, \n        page_title,\n        count(event_name) as scroll_events\n    from {{ref('stg_ga4__event_scroll')}}\n    group by 1,2,3,4\n)\n{% if var('conversion_events',false) %}\n,\njoin_conversions as (\n    select \n        *\n    from page_view\n    left join {{ ref('stg_ga4__page_conversions') }} using (page_key)\n)\nselect\n    join_conversions.*  except(page_key),\n    ifnull(scroll.scroll_events, 0) as scroll_events\nfrom join_conversions\nleft join scroll using (event_date_dt, hour, page_location, page_title)\n{% else %}\nselect\n    page_view.* except(page_key),\n    ifnull(scroll.scroll_events, 0) as scroll_events\nfrom page_view\nleft join scroll using (event_date_dt, hour, page_location, page_title)\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ga4.stg_ga4__event_page_view", "model.ga4.stg_ga4__event_scroll"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "marts", "core", "fct_ga4__pages"], "unique_id": "model.ga4.fct_ga4__pages", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "marts/core/fct_ga4__pages.sql", "original_file_path": "models/marts/core/fct_ga4__pages.sql", "name": "fct_ga4__pages", "alias": "fct_ga4__pages", "checksum": {"name": "sha256", "checksum": "2cfb0c26b4bcbbddf074f1ea288bb9609878729ca2c4ad318d7f637dd1589e11"}, "tags": [], "refs": [["stg_ga4__event_page_view"], ["stg_ga4__event_scroll"]], "sources": [], "description": "Metrics related to pages such as visits, users, new_users, entrances and exits as well as configurable conversion counts. Each row is grouped by page_location, event_date_dt, and hour.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/marts/core/core.yml", "compiled_path": "target/compiled/ga4/models/marts/core/fct_ga4__pages.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1663750854.3021662, "compiled_sql": "with page_view as (\n    select\n        event_date_dt,\n        extract( hour from (select  timestamp_micros(event_timestamp))) as hour,\n        page_location,  -- includes query string parameters not listed in query_parameter_exclusions variable\n        concat( cast(event_date_dt as string), cast(extract( hour from (select  timestamp_micros(event_timestamp))) as string), page_location ) as page_key,\n        page_title,  -- would like to move this to dim_ga4__pages but need to think how to handle page_title changing over time\n        count(event_name) as page_views,\n        count(distinct user_key ) as users,\n        sum( if(ga_session_number = 1,1,0)) as new_users,\n        sum(entrances) as entrances,\n        sum(exits) as exits,\n        sum(engagement_time_msec) as total_time_on_page \nfrom `bergzeit`.`dbt`.`stg_ga4__event_page_view`\n    group by 1,2,3,4,5\n), scroll as (\n    select\n        event_date_dt,\n        extract( hour from (select timestamp_micros(event_timestamp))) as hour,\n        page_location, \n        page_title,\n        count(event_name) as scroll_events\n    from `bergzeit`.`dbt`.`stg_ga4__event_scroll`\n    group by 1,2,3,4\n)\n\nselect\n    page_view.* except(page_key),\n    ifnull(scroll.scroll_events, 0) as scroll_events\nfrom page_view\nleft join scroll using (event_date_dt, hour, page_location, page_title)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`fct_ga4__pages`"}, "model.ga4.fct_ga4__sessions": {"raw_sql": "-- Fact table for sessions. Join on session_key\n\nwith session_metrics as \n(\n    select \n        session_key,\n        user_key,\n        min(event_date_dt) as session_start_date,\n        min(event_timestamp) as session_start_timestamp,\n        countif(event_name = 'page_view') as count_page_views,\n        sum(event_value_in_usd) as sum_event_value_in_usd,\n        ifnull(max(session_engaged), 0) as session_engaged,\n        sum(engagement_time_msec) as sum_engagement_time_msec\n    from {{ref('stg_ga4__events')}}\n    group by 1,2\n)\n{% if var('conversion_events',false) %}\n,\njoin_conversions as (\n    select \n        *\n    from session_metrics\n    left join {{ref('stg_ga4__session_conversions')}} using (session_key)\n)\nselect * from join_conversions\n{% else %}\nselect * from session_metrics\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "marts", "core", "fct_ga4__sessions"], "unique_id": "model.ga4.fct_ga4__sessions", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "marts/core/fct_ga4__sessions.sql", "original_file_path": "models/marts/core/fct_ga4__sessions.sql", "name": "fct_ga4__sessions", "alias": "fct_ga4__sessions", "checksum": {"name": "sha256", "checksum": "7e76468a05e5863cf4b497bf07505bf6293620310cc71fd05039a59cf8bb6308"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "Metrics related to sessions such as number of pageviews and event value accrued. Each row represents a single session.", "columns": {"session_key": {"name": "session_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/marts/core/core.yml", "compiled_path": "target/compiled/ga4/models/marts/core/fct_ga4__sessions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1663750854.3013115, "compiled_sql": "-- Fact table for sessions. Join on session_key\n\nwith session_metrics as \n(\n    select \n        session_key,\n        user_key,\n        min(event_date_dt) as session_start_date,\n        min(event_timestamp) as session_start_timestamp,\n        countif(event_name = 'page_view') as count_page_views,\n        sum(event_value_in_usd) as sum_event_value_in_usd,\n        ifnull(max(session_engaged), 0) as session_engaged,\n        sum(engagement_time_msec) as sum_engagement_time_msec\n    from `bergzeit`.`dbt`.`stg_ga4__events`\n    group by 1,2\n)\n\nselect * from session_metrics\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`fct_ga4__sessions`"}, "model.ga4.dim_ga4__users": {"raw_sql": "-- User dimensions: first geo, first device, last geo, last device, first seen, last seen\n\nwith users as (\n    select \n        user_key,\n        min(event_timestamp) as first_seen_timestamp,\n        min(event_date_dt) as first_seen_dt,\n        max(event_timestamp) as last_seen_timestamp,\n        max(event_date_dt) as last_seen_dt,\n        count(distinct session_key) as num_sessions,\n        sum(is_page_view) as num_page_views,\n        sum(is_purchase) as num_purchases\n    from {{ref('stg_ga4__events')}}\n    where user_key is not null -- Remove users with privacy settings enabled\n    group by 1\n\n),\ninclude_first_last_events as (\n    select \n        users.*,\n        first_last_events.first_geo,\n        first_last_events.first_device,\n        first_last_events.first_traffic_source,\n        first_last_events.last_geo,\n        first_last_events.last_device,\n        first_last_events.last_traffic_source,\n    from users \n    left join {{ref('stg_ga4__users_first_last_events')}} as first_last_events on\n        users.user_key = first_last_events.user_key\n),\ninclude_first_last_page_views as (\n    select \n        include_first_last_events.*,\n        first_last_page_views.first_page_location,\n        first_last_page_views.first_page_hostname,\n        first_last_page_views.first_page_referrer,\n        first_last_page_views.last_page_location,\n        first_last_page_views.last_page_hostname,\n        first_last_page_views.last_page_referrer\n    from include_first_last_events \n    left join {{ref('stg_ga4__users_first_last_pageviews')}} as first_last_page_views on\n        include_first_last_events.user_key = first_last_page_views.user_key\n),\ninclude_user_properties as (\n    \n\nselect * from include_first_last_page_views\n{% if var('derived_user_properties', false) %}\n-- If derived user properties have been assigned as variables, join them on the user_key\nleft join {{ref('stg_ga4__derived_user_properties')}} using (user_key)\n{% endif %}\n{% if var('user_properties', false) %}\n-- If user properties have been assigned as variables, join them on the user_key\nleft join {{ref('stg_ga4__user_properties')}} using (user_key)\n{% endif %}\n\n)\n\nselect * from include_user_properties", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ga4.stg_ga4__events", "model.ga4.stg_ga4__users_first_last_events", "model.ga4.stg_ga4__users_first_last_pageviews"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "marts", "core", "dim_ga4__users"], "unique_id": "model.ga4.dim_ga4__users", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "marts/core/dim_ga4__users.sql", "original_file_path": "models/marts/core/dim_ga4__users.sql", "name": "dim_ga4__users", "alias": "dim_ga4__users", "checksum": {"name": "sha256", "checksum": "7372cf0e90bdbfd090ae206439a087e517982eedbc024d6bbc5127c011c13fa4"}, "tags": [], "refs": [["stg_ga4__events"], ["stg_ga4__users_first_last_events"], ["stg_ga4__users_first_last_pageviews"]], "sources": [], "description": "Dimension table for users which includes data from the first and last event produced by the user. Unique on user_key", "columns": {"user_key": {"name": "user_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/marts/core/core.yml", "compiled_path": "target/compiled/ga4/models/marts/core/dim_ga4__users.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1663750854.2994137, "compiled_sql": "-- User dimensions: first geo, first device, last geo, last device, first seen, last seen\n\nwith users as (\n    select \n        user_key,\n        min(event_timestamp) as first_seen_timestamp,\n        min(event_date_dt) as first_seen_dt,\n        max(event_timestamp) as last_seen_timestamp,\n        max(event_date_dt) as last_seen_dt,\n        count(distinct session_key) as num_sessions,\n        sum(is_page_view) as num_page_views,\n        sum(is_purchase) as num_purchases\n    from `bergzeit`.`dbt`.`stg_ga4__events`\n    where user_key is not null -- Remove users with privacy settings enabled\n    group by 1\n\n),\ninclude_first_last_events as (\n    select \n        users.*,\n        first_last_events.first_geo,\n        first_last_events.first_device,\n        first_last_events.first_traffic_source,\n        first_last_events.last_geo,\n        first_last_events.last_device,\n        first_last_events.last_traffic_source,\n    from users \n    left join `bergzeit`.`dbt`.`stg_ga4__users_first_last_events` as first_last_events on\n        users.user_key = first_last_events.user_key\n),\ninclude_first_last_page_views as (\n    select \n        include_first_last_events.*,\n        first_last_page_views.first_page_location,\n        first_last_page_views.first_page_hostname,\n        first_last_page_views.first_page_referrer,\n        first_last_page_views.last_page_location,\n        first_last_page_views.last_page_hostname,\n        first_last_page_views.last_page_referrer\n    from include_first_last_events \n    left join `bergzeit`.`dbt`.`stg_ga4__users_first_last_pageviews` as first_last_page_views on\n        include_first_last_events.user_key = first_last_page_views.user_key\n),\ninclude_user_properties as (\n    \n\nselect * from include_first_last_page_views\n\n\n\n)\n\nselect * from include_user_properties", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`dim_ga4__users`"}, "model.ga4.stg_ga4__event_items": {"raw_sql": "with items_with_params as (\n    select\n        event_key,\n        event_name,\n        i.item_id,\n        i.item_name,\n        i.item_brand,\n        i.item_variant,\n        i.item_category,\n        i.item_category2,\n        i.item_category3,\n        i.item_category4,\n        i.item_category5,\n        i.price_in_usd,\n        i.price,\n        i.quantity,\n        i.item_revenue_in_usd,\n        i.item_revenue,\n        i.item_refund_in_usd,\n        i.item_refund,\n        i.coupon,\n        i.affiliation,\n        i.location_id,\n        i.item_list_id,\n        i.item_list_name,\n        i.item_list_index,\n        i.promotion_id,\n        i.promotion_name,\n        i.creative_name,\n        i.creative_slot\n    from {{ref('stg_ga4__events')}},\n        unnest(items) as i\n    where event_name in ('add_payment_info', 'add_shipping_info', 'add_to_cart','add_to_wishlist','begin_checkout' ,'purchase','refund', 'remove_from_cart','select_item', 'select_promotion','view_item_list','view_promotion')\n)\n\nselect * from items_with_params", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "stg_ga4__event_items"], "unique_id": "model.ga4.stg_ga4__event_items", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/stg_ga4__event_items.sql", "original_file_path": "models/staging/ga4/stg_ga4__event_items.sql", "name": "stg_ga4__event_items", "alias": "stg_ga4__event_items", "checksum": {"name": "sha256", "checksum": "4090ffcc495a45ce46f8a00d57aed25d94368e4a1865613faafc11e0db332e72"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "Flattens out the 'items' field for e-commerce events such as purchase and add_to_cart", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4__event_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750854.334055, "compiled_sql": "with items_with_params as (\n    select\n        event_key,\n        event_name,\n        i.item_id,\n        i.item_name,\n        i.item_brand,\n        i.item_variant,\n        i.item_category,\n        i.item_category2,\n        i.item_category3,\n        i.item_category4,\n        i.item_category5,\n        i.price_in_usd,\n        i.price,\n        i.quantity,\n        i.item_revenue_in_usd,\n        i.item_revenue,\n        i.item_refund_in_usd,\n        i.item_refund,\n        i.coupon,\n        i.affiliation,\n        i.location_id,\n        i.item_list_id,\n        i.item_list_name,\n        i.item_list_index,\n        i.promotion_id,\n        i.promotion_name,\n        i.creative_name,\n        i.creative_slot\n    from `bergzeit`.`dbt`.`stg_ga4__events`,\n        unnest(items) as i\n    where event_name in ('add_payment_info', 'add_shipping_info', 'add_to_cart','add_to_wishlist','begin_checkout' ,'purchase','refund', 'remove_from_cart','select_item', 'select_promotion','view_item_list','view_promotion')\n)\n\nselect * from items_with_params", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__event_items`"}, "model.ga4.stg_ga4__users_first_last_events": {"raw_sql": "{{\n    config(materialized = \"table\")\n}}\n\nwith first_last_event as (\n    select\n        user_key,\n        FIRST_VALUE(event_key) OVER (PARTITION BY user_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_event,\n        LAST_VALUE(event_key) OVER (PARTITION BY user_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_event\n    from {{ref('stg_ga4__events')}}\n    where user_key is not null --remove users with privacy settings enabled\n),\nevents_by_user_key as (\n    select distinct\n        user_key,\n        first_event,\n        last_event\n    from first_last_event\n),\nevents_joined as (\n    select\n        events_by_user_key.*,\n        events_first.geo as first_geo,\n        events_first.device as first_device,\n        events_first.traffic_source as first_traffic_source,\n        events_last.geo as last_geo,\n        events_last.device as last_device,\n        events_last.traffic_source as last_traffic_source\n    from events_by_user_key\n    left join {{ref('stg_ga4__events')}} events_first\n        on events_by_user_key.first_event = events_first.event_key\n    left join {{ref('stg_ga4__events')}} events_last\n        on events_by_user_key.last_event = events_last.event_key\n)\n\nselect * from events_joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ga4.stg_ga4__events", "model.ga4.stg_ga4__events", "model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "stg_ga4__users_first_last_events"], "unique_id": "model.ga4.stg_ga4__users_first_last_events", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/stg_ga4__users_first_last_events.sql", "original_file_path": "models/staging/ga4/stg_ga4__users_first_last_events.sql", "name": "stg_ga4__users_first_last_events", "alias": "stg_ga4__users_first_last_events", "checksum": {"name": "sha256", "checksum": "2eed2b79f147db01b298097e442bce2767791f36b354a22a30c271a16fa27a4e"}, "tags": [], "refs": [["stg_ga4__events"], ["stg_ga4__events"], ["stg_ga4__events"]], "sources": [], "description": "Captures the first and last event completed by the user in order to pull in the first and last geo, device, and traffic source seen from the user", "columns": {"user_key": {"name": "user_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4__users_first_last_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1663750854.3281107, "compiled_sql": "\n\nwith first_last_event as (\n    select\n        user_key,\n        FIRST_VALUE(event_key) OVER (PARTITION BY user_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_event,\n        LAST_VALUE(event_key) OVER (PARTITION BY user_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_event\n    from `bergzeit`.`dbt`.`stg_ga4__events`\n    where user_key is not null --remove users with privacy settings enabled\n),\nevents_by_user_key as (\n    select distinct\n        user_key,\n        first_event,\n        last_event\n    from first_last_event\n),\nevents_joined as (\n    select\n        events_by_user_key.*,\n        events_first.geo as first_geo,\n        events_first.device as first_device,\n        events_first.traffic_source as first_traffic_source,\n        events_last.geo as last_geo,\n        events_last.device as last_device,\n        events_last.traffic_source as last_traffic_source\n    from events_by_user_key\n    left join `bergzeit`.`dbt`.`stg_ga4__events` events_first\n        on events_by_user_key.first_event = events_first.event_key\n    left join `bergzeit`.`dbt`.`stg_ga4__events` events_last\n        on events_by_user_key.last_event = events_last.event_key\n)\n\nselect * from events_joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__users_first_last_events`"}, "model.ga4.stg_ga4__sessions_traffic_sources": {"raw_sql": "with session_events as (\n    select \n        session_key,\n        event_timestamp,\n        lower(source) as source,\n        medium,\n        campaign,\n        source_category\n    from {{ref('stg_ga4__events')}}\n    left join {{ref('ga4_source_categories')}} using (source)\n    --exclude the events session_start and first_visit because they are triggered first but never contain source, medium, campaign values\n    where not ( event_name = \"session_start\" or event_name = \"first_visit\")\n    and session_key is not null\n   ),\nset_default_channel_grouping as (\n    select\n        *,\n        {{ga4.default_channel_grouping('source','medium','source_category')}} as default_channel_grouping\n    from session_events\n),\nsession_source as (\n    select    \n        session_key,\n\n        (case\n          when FIRST_VALUE(source) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) is null then \"(direct)\"\n          else FIRST_VALUE(source) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) end\n        ) as session_source,\n\n        (case \n          when FIRST_VALUE(medium) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) is null then \"(none)\"\n          else FIRST_VALUE(medium) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) end\n        ) as session_medium,\n\n        (case \n          when FIRST_VALUE(campaign) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) is null then \"(direct)\"\n          else FIRST_VALUE(campaign) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) end\n        ) as session_campaign,\n\n        FIRST_VALUE(default_channel_grouping) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_default_channel_grouping\n    from set_default_channel_grouping\n)\n\nselect distinct  * from session_source", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ga4.default_channel_grouping"], "nodes": ["model.ga4.stg_ga4__events", "seed.ga4.ga4_source_categories"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "stg_ga4__sessions_traffic_sources"], "unique_id": "model.ga4.stg_ga4__sessions_traffic_sources", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/stg_ga4__sessions_traffic_sources.sql", "original_file_path": "models/staging/ga4/stg_ga4__sessions_traffic_sources.sql", "name": "stg_ga4__sessions_traffic_sources", "alias": "stg_ga4__sessions_traffic_sources", "checksum": {"name": "sha256", "checksum": "feebe1c8d3471c886898ce4f66a65c96191f35f4e36dacb5f65f10ff347386d8"}, "tags": [], "refs": [["stg_ga4__events"], ["ga4_source_categories"]], "sources": [], "description": "Finds the first session source, medium and campaign and adds the default channel grouping information. Aggregated by session_key.", "columns": {"session_key": {"name": "session_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_source": {"name": "session_source", "description": "source value of the first event of the session after session_start and first_visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_medium": {"name": "session_medium", "description": "medium value of the first event of the session after session_start and first_visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_campaign": {"name": "session_campaign", "description": "campaign value of the first event of the session after session_start and first_visit", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4__sessions_traffic_sources.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750854.3379304, "compiled_sql": "with session_events as (\n    select \n        session_key,\n        event_timestamp,\n        lower(source) as source,\n        medium,\n        campaign,\n        source_category\n    from `bergzeit`.`dbt`.`stg_ga4__events`\n    left join `bergzeit`.`dbt`.`ga4_source_categories` using (source)\n    --exclude the events session_start and first_visit because they are triggered first but never contain source, medium, campaign values\n    where not ( event_name = \"session_start\" or event_name = \"first_visit\")\n    and session_key is not null\n   ),\nset_default_channel_grouping as (\n    select\n        *,\n        \n\ncase \n  when source is null and medium is null \n    then 'Direct'\n  when source = '(direct)'\n    and (medium = '(none)' or medium = '(not set)')\n    then 'Direct'\n\n  when REGEXP_CONTAINS(source, r\"^(facebook|instagram|pinterest|reddit|twitter|linkedin)\") = true\n    and REGEXP_CONTAINS(medium, r\"^(cpc|ppc|paid)\") = true\n    then 'Paid Social'\n  when REGEXP_CONTAINS(source, r\"^(facebook|instagram|pinterest|reddit|twitter|linkedin)\") = true\n    or REGEXP_CONTAINS(medium, r\"^(social|social-network|social-media|sm|social network|social media)\") = true\n    or source_category = 'SOURCE_CATEGORY_SOCIAL' \n    then 'Organic Social'\n  when REGEXP_CONTAINS(medium, r\"email|e-mail|e_mail|e mail\") = true\n    or REGEXP_CONTAINS(source, r\"email|e-mail|e_mail|e mail\") = true\n    then 'Email'\n  when REGEXP_CONTAINS(medium, r\"affiliate|affiliates\") = true\n    then 'Affiliates'\n  when medium = 'referral'\n    then 'Referral'\n  when source_category = 'SOURCE_CATEGORY_SHOPPING' and REGEXP_CONTAINS(medium,r\"^(.*cp.*|ppc|paid.*)$\")\n    then 'Paid Shopping'\n  when REGEXP_CONTAINS(medium, r\"^(cpc|ppc|paidsearch)$\")\n    then 'Paid Search'\n  when REGEXP_CONTAINS(medium, r\"^(display|cpm|banner)$\")\n    then 'Display'\n  when REGEXP_CONTAINS(medium, r\"^(cpv|cpa|cpp|content-text)$\")\n    then 'Other Advertising'\n  when medium = 'organic' or source_category = 'SOURCE_CATEGORY_SEARCH'\n    then 'Organic Search'\n  when REGEXP_CONTAINS(medium, r\"^(.*video.*)$\") or source_category = 'SOURCE_CATEGORY_VIDEO'\n    then 'Organic Video'\n  when source_category = 'SOURCE_CATEGORY_SHOPPING'\n    then 'Organic Shopping'\n  when medium = 'audio'\n    then 'Audio'\n  when medium = 'sms'\n    then 'SMS'\n  else '(Other)' \nend \n\n as default_channel_grouping\n    from session_events\n),\nsession_source as (\n    select    \n        session_key,\n\n        (case\n          when FIRST_VALUE(source) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) is null then \"(direct)\"\n          else FIRST_VALUE(source) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) end\n        ) as session_source,\n\n        (case \n          when FIRST_VALUE(medium) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) is null then \"(none)\"\n          else FIRST_VALUE(medium) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) end\n        ) as session_medium,\n\n        (case \n          when FIRST_VALUE(campaign) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) is null then \"(direct)\"\n          else FIRST_VALUE(campaign) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) end\n        ) as session_campaign,\n\n        FIRST_VALUE(default_channel_grouping) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_default_channel_grouping\n    from set_default_channel_grouping\n)\n\nselect distinct  * from session_source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__sessions_traffic_sources`"}, "model.ga4.stg_ga4__event_to_query_string_params": {"raw_sql": "with event_and_query_string as \n(\n    select \n        event_key,\n        split(page_query_string, '&') as qs_split\n    from {{ref('stg_ga4__events')}}\n),\nflattened_qs as\n(\n    select \n        event_key, \n        params \n    from event_and_query_string, unnest(qs_split) as params\n),\nsplit_param_value as \n(\n    select \n        event_key, \n        split(params,'=')[SAFE_OFFSET(0)] as param, \n        NULLIF(split(params,'=')[SAFE_OFFSET(1)], '') as value \n    from flattened_qs\n)\n\nselect * from split_param_value", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "stg_ga4__event_to_query_string_params"], "unique_id": "model.ga4.stg_ga4__event_to_query_string_params", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/stg_ga4__event_to_query_string_params.sql", "original_file_path": "models/staging/ga4/stg_ga4__event_to_query_string_params.sql", "name": "stg_ga4__event_to_query_string_params", "alias": "stg_ga4__event_to_query_string_params", "checksum": {"name": "sha256", "checksum": "2dfb4ee3d78159862fc776de4cd878832af6355a6b3b26c084ab734b477e29ac"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "This model pivots the query string parameters contained within the event's page_location field to become rows. Each row is a single parameter/value combination contained in a single event's query string.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4__event_to_query_string_params.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750854.3208585, "compiled_sql": "with event_and_query_string as \n(\n    select \n        event_key,\n        split(page_query_string, '&') as qs_split\n    from `bergzeit`.`dbt`.`stg_ga4__events`\n),\nflattened_qs as\n(\n    select \n        event_key, \n        params \n    from event_and_query_string, unnest(qs_split) as params\n),\nsplit_param_value as \n(\n    select \n        event_key, \n        split(params,'=')[SAFE_OFFSET(0)] as param, \n        NULLIF(split(params,'=')[SAFE_OFFSET(1)], '') as value \n    from flattened_qs\n)\n\nselect * from split_param_value", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__event_to_query_string_params`"}, "model.ga4.stg_ga4__users_first_last_pageviews": {"raw_sql": "{{\n    config(materialized = \"table\")\n}}\n\nwith page_views_first_last as (\n    select\n        user_key,\n        FIRST_VALUE(event_key) OVER (PARTITION BY user_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_page_view_event_key,\n        LAST_VALUE(event_key) OVER (PARTITION BY user_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_page_view_event_key\n    from {{ref('stg_ga4__event_page_view')}}\n    where user_key is not null -- Remove users with privacy settings enabled\n),\npage_views_by_user_key as (\n    select distinct\n        user_key,\n        first_page_view_event_key,\n        last_page_view_event_key\n    from page_views_first_last\n),\npage_views_joined as (\n    select\n        page_views_by_user_key.*,\n        first_page_view.page_location as first_page_location,\n        first_page_view.page_hostname as first_page_hostname,\n        first_page_view.page_referrer as first_page_referrer, \n        last_page_view.page_location as last_page_location,\n        last_page_view.page_hostname as last_page_hostname,\n        last_page_view.page_referrer as last_page_referrer\n    from page_views_by_user_key\n    left join {{ref('stg_ga4__event_page_view')}} first_page_view\n        on page_views_by_user_key.first_page_view_event_key = first_page_view.event_key\n    left join {{ref('stg_ga4__event_page_view')}} last_page_view\n        on page_views_by_user_key.last_page_view_event_key = last_page_view.event_key\n)\n\nselect * from page_views_joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ga4.stg_ga4__event_page_view", "model.ga4.stg_ga4__event_page_view", "model.ga4.stg_ga4__event_page_view"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "stg_ga4__users_first_last_pageviews"], "unique_id": "model.ga4.stg_ga4__users_first_last_pageviews", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/stg_ga4__users_first_last_pageviews.sql", "original_file_path": "models/staging/ga4/stg_ga4__users_first_last_pageviews.sql", "name": "stg_ga4__users_first_last_pageviews", "alias": "stg_ga4__users_first_last_pageviews", "checksum": {"name": "sha256", "checksum": "bbd1a3d280b50144cad256a4c3b33efe57ba786910ad2633d4a2a326ab3337b0"}, "tags": [], "refs": [["stg_ga4__event_page_view"], ["stg_ga4__event_page_view"], ["stg_ga4__event_page_view"]], "sources": [], "description": "Captures data related to the first and last page view that each user has completed (by user_key).", "columns": {"user_key": {"name": "user_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4__users_first_last_pageviews.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1663750854.3264377, "compiled_sql": "\n\nwith page_views_first_last as (\n    select\n        user_key,\n        FIRST_VALUE(event_key) OVER (PARTITION BY user_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_page_view_event_key,\n        LAST_VALUE(event_key) OVER (PARTITION BY user_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_page_view_event_key\n    from `bergzeit`.`dbt`.`stg_ga4__event_page_view`\n    where user_key is not null -- Remove users with privacy settings enabled\n),\npage_views_by_user_key as (\n    select distinct\n        user_key,\n        first_page_view_event_key,\n        last_page_view_event_key\n    from page_views_first_last\n),\npage_views_joined as (\n    select\n        page_views_by_user_key.*,\n        first_page_view.page_location as first_page_location,\n        first_page_view.page_hostname as first_page_hostname,\n        first_page_view.page_referrer as first_page_referrer, \n        last_page_view.page_location as last_page_location,\n        last_page_view.page_hostname as last_page_hostname,\n        last_page_view.page_referrer as last_page_referrer\n    from page_views_by_user_key\n    left join `bergzeit`.`dbt`.`stg_ga4__event_page_view` first_page_view\n        on page_views_by_user_key.first_page_view_event_key = first_page_view.event_key\n    left join `bergzeit`.`dbt`.`stg_ga4__event_page_view` last_page_view\n        on page_views_by_user_key.last_page_view_event_key = last_page_view.event_key\n)\n\nselect * from page_views_joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__users_first_last_pageviews`"}, "model.ga4.stg_ga4__sessions_first_last_pageviews": {"raw_sql": "with page_views_first_last as (\n    select\n        session_key,\n        FIRST_VALUE(event_key) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_page_view_event_key,\n        LAST_VALUE(event_key) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_page_view_event_key\n    from {{ref('stg_ga4__events')}}\n    where event_name = 'page_view'\n),\npage_views_by_session_key as (\n    select distinct\n        session_key,\n        first_page_view_event_key,\n        last_page_view_event_key\n    from page_views_first_last\n)\n\nselect * from page_views_by_session_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "stg_ga4__sessions_first_last_pageviews"], "unique_id": "model.ga4.stg_ga4__sessions_first_last_pageviews", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/stg_ga4__sessions_first_last_pageviews.sql", "original_file_path": "models/staging/ga4/stg_ga4__sessions_first_last_pageviews.sql", "name": "stg_ga4__sessions_first_last_pageviews", "alias": "stg_ga4__sessions_first_last_pageviews", "checksum": {"name": "sha256", "checksum": "adfc0ac68918b31a24755b95d9f9dcdd797ec290e6a822d552f126e3a98cdf48"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4__sessions_first_last_pageviews.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750849.843662, "compiled_sql": "with page_views_first_last as (\n    select\n        session_key,\n        FIRST_VALUE(event_key) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_page_view_event_key,\n        LAST_VALUE(event_key) OVER (PARTITION BY session_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_page_view_event_key\n    from `bergzeit`.`dbt`.`stg_ga4__events`\n    where event_name = 'page_view'\n),\npage_views_by_session_key as (\n    select distinct\n        session_key,\n        first_page_view_event_key,\n        last_page_view_event_key\n    from page_views_first_last\n)\n\nselect * from page_views_by_session_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__sessions_first_last_pageviews`"}, "model.ga4.stg_ga4__events": {"raw_sql": "-- This staging model contains key creation and window functions. Keeping window functions outside of the base incremental model ensures that the incremental updates don't artificially limit the window partition sizes (ex: if a session spans 2 days, but only 1 day is in the incremental update)\n\nwith base_events as (\n    select * from {{ ref('base_ga4__events')}}\n    {% if var('frequency', 'daily') == 'daily+streaming' %}\n    union all\n    select * from {{ref('base_ga4__events_intraday')}}\n    {% endif %}\n),\n-- Add a unique key for the user that checks for user_id and then pseudo_user_id\nadd_user_key as (\n    select \n        *,\n        case\n            when user_id is not null then to_base64(md5(user_id))\n            when user_pseudo_id is not null then to_base64(md5(user_pseudo_id))\n            else null -- this case is reached when privacy settings are enabled\n        end as user_key\n    from base_events\n), \n-- Add unique keys for sessions and events\ninclude_session_key as (\n    select \n        *,\n        to_base64(md5(CONCAT(stream_id, CAST(user_key as STRING), cast(ga_session_id as STRING)))) as session_key -- Surrogate key to determine unique session across streams and users. Sessions do NOT reset after midnight in GA4\n    from add_user_key\n),\ninclude_event_number as (\n    select include_session_key.*,\n        row_number() over(partition by session_key) as session_event_number -- Number each event within a session to help generate a uniqu event key\n    from include_session_key\n),\ninclude_event_key as (\n    select \n        include_event_number.*,\n        to_base64(md5(CONCAT(CAST(session_key as STRING), CAST(session_event_number as STRING)))) as event_key -- Surrogate key for unique events\n    from include_event_number\n),\n-- Remove specific query strings from page_location field\nremove_query_params as (\n\n    select \n        * EXCEPT (page_location),\n        page_location as original_page_location,\n        -- If there are query parameters to exclude, exclude them using regex\n        {% if var('query_parameter_exclusions',none) is not none %}\n        {{remove_query_parameters('page_location',var('query_parameter_exclusions'))}} as page_location\n        {% else %}\n        page_location\n        {% endif %}\n    from include_event_key\n),\nenrich_params as (\n    select \n        *,\n        {{extract_hostname_from_url('page_location')}} as page_hostname,\n        {{extract_query_string_from_url('page_location')}} as page_query_string,\n    from remove_query_params\n)\n\n\nselect * from enrich_params", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ga4.extract_hostname_from_url", "macro.ga4.extract_query_string_from_url"], "nodes": ["model.ga4.base_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "stg_ga4__events"], "unique_id": "model.ga4.stg_ga4__events", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/stg_ga4__events.sql", "original_file_path": "models/staging/ga4/stg_ga4__events.sql", "name": "stg_ga4__events", "alias": "stg_ga4__events", "checksum": {"name": "sha256", "checksum": "65ed352bacf5d511cd7ff1df180323b8ea8f25f7ec9613ea69855294ed14f79c"}, "tags": [], "refs": [["base_ga4__events"]], "sources": [], "description": "Staging model that contains window functions used to generate unique keys", "columns": {"event_key": {"name": "event_key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4__events.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750854.3297746, "compiled_sql": "-- This staging model contains key creation and window functions. Keeping window functions outside of the base incremental model ensures that the incremental updates don't artificially limit the window partition sizes (ex: if a session spans 2 days, but only 1 day is in the incremental update)\n\nwith base_events as (\n    select * from `bergzeit`.`dbt`.`base_ga4__events`\n    \n),\n-- Add a unique key for the user that checks for user_id and then pseudo_user_id\nadd_user_key as (\n    select \n        *,\n        case\n            when user_id is not null then to_base64(md5(user_id))\n            when user_pseudo_id is not null then to_base64(md5(user_pseudo_id))\n            else null -- this case is reached when privacy settings are enabled\n        end as user_key\n    from base_events\n), \n-- Add unique keys for sessions and events\ninclude_session_key as (\n    select \n        *,\n        to_base64(md5(CONCAT(stream_id, CAST(user_key as STRING), cast(ga_session_id as STRING)))) as session_key -- Surrogate key to determine unique session across streams and users. Sessions do NOT reset after midnight in GA4\n    from add_user_key\n),\ninclude_event_number as (\n    select include_session_key.*,\n        row_number() over(partition by session_key) as session_event_number -- Number each event within a session to help generate a uniqu event key\n    from include_session_key\n),\ninclude_event_key as (\n    select \n        include_event_number.*,\n        to_base64(md5(CONCAT(CAST(session_key as STRING), CAST(session_event_number as STRING)))) as event_key -- Surrogate key for unique events\n    from include_event_number\n),\n-- Remove specific query strings from page_location field\nremove_query_params as (\n\n    select \n        * EXCEPT (page_location),\n        page_location as original_page_location,\n        -- If there are query parameters to exclude, exclude them using regex\n        \n        page_location\n        \n    from include_event_key\n),\nenrich_params as (\n    select \n        *,\n        \n    REGEXP_EXTRACT(page_location, '(?:http[s]?://)?(?:www\\\\.)?(.*?)(?:(?:/|:)(?:.)*|$)')\n as page_hostname,\n        \n    REGEXP_EXTRACT(page_location, '\\\\?(.+)')\n as page_query_string,\n    from remove_query_params\n)\n\n\nselect * from enrich_params", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__events`"}, "model.ga4.stg_ga4__event_session_start": {"raw_sql": "with session_start_with_params as (\n   select *,\n      {{ ga4.unnest_key('event_params', 'entrances',  'int_value') }},\n      {{ ga4.unnest_key('event_params', 'value', 'float_value') }}\n      {% if var(\"session_start_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"session_start_custom_parameters\") )}}\n      {% endif %}\n from {{ref('stg_ga4__events')}}    \n where event_name = 'session_start'\n)\n\nselect * from session_start_with_params", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "events", "stg_ga4__event_session_start"], "unique_id": "model.ga4.stg_ga4__event_session_start", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/events/stg_ga4__event_session_start.sql", "original_file_path": "models/staging/ga4/events/stg_ga4__event_session_start.sql", "name": "stg_ga4__event_session_start", "alias": "stg_ga4__event_session_start", "checksum": {"name": "sha256", "checksum": "df491243d1ad58186f314d74414f9430f3eec76ed61b5e09960497fbab2fe35b"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "GA4 events filtered to only show 'session_start' events. Pivots common event parameters into separate columns.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": "target/compiled/ga4/models/staging/ga4/events/stg_ga4__event_session_start.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750854.3235486, "compiled_sql": "with session_start_with_params as (\n   select *,\n      (select value.int_value from unnest(event_params) where key = 'entrances') as \n\n    entrances,\n      (select value.float_value from unnest(event_params) where key = 'value') as \n\n    value\n      \n from `bergzeit`.`dbt`.`stg_ga4__events`    \n where event_name = 'session_start'\n)\n\nselect * from session_start_with_params", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__event_session_start`"}, "model.ga4.stg_ga4__event_user_engagement": {"raw_sql": "-- Event defined as \"when the app is in the foreground or webpage is in focus for at least one second.\"\n \n with user_engagement_with_params as (\n   select *,\n      {% if var(\"user_engagement_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"user_engagement_custom_parameters\") )}}\n      {% endif %}\n from {{ref('stg_ga4__events')}}    \n where event_name = 'user_engagement'\n)\n\nselect * from user_engagement_with_params", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "events", "stg_ga4__event_user_engagement"], "unique_id": "model.ga4.stg_ga4__event_user_engagement", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/events/stg_ga4__event_user_engagement.sql", "original_file_path": "models/staging/ga4/events/stg_ga4__event_user_engagement.sql", "name": "stg_ga4__event_user_engagement", "alias": "stg_ga4__event_user_engagement", "checksum": {"name": "sha256", "checksum": "eafdb419be4fc7b38fe5c70737c19d03412be170dc922f271d997ec6540f2037"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/events/stg_ga4__event_user_engagement.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750850.0641832, "compiled_sql": "-- Event defined as \"when the app is in the foreground or webpage is in focus for at least one second.\"\n \n with user_engagement_with_params as (\n   select *,\n      \n from `bergzeit`.`dbt`.`stg_ga4__events`    \n where event_name = 'user_engagement'\n)\n\nselect * from user_engagement_with_params", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__event_user_engagement`"}, "model.ga4.stg_ga4__event_view_search_results": {"raw_sql": "-- reference here: https://support.google.com/analytics/answer/9216061?hl=en \n \n with event_with_params as (\n   select *,\n      {{ ga4.unnest_key('event_params', 'entrances',  'int_value') }},\n      {{ ga4.unnest_key('event_params', 'search_term') }},\n      {{ ga4.unnest_key('event_params', 'unique_search_term') }}\n      {% if var(\"view_search_results_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"view_search_results_custom_parameters\") )}}\n      {% endif %}\n from {{ref('stg_ga4__events')}}\n where event_name = 'view_search_results'\n)\n\nselect * from event_with_params", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "events", "stg_ga4__event_view_search_results"], "unique_id": "model.ga4.stg_ga4__event_view_search_results", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/events/stg_ga4__event_view_search_results.sql", "original_file_path": "models/staging/ga4/events/stg_ga4__event_view_search_results.sql", "name": "stg_ga4__event_view_search_results", "alias": "stg_ga4__event_view_search_results", "checksum": {"name": "sha256", "checksum": "8fdf7d709cc0ed9ac11ec2cfc0d2e1875fd8fad5a44453609a1b26fea8707e81"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/events/stg_ga4__event_view_search_results.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750850.0750248, "compiled_sql": "-- reference here: https://support.google.com/analytics/answer/9216061?hl=en \n \n with event_with_params as (\n   select *,\n      (select value.int_value from unnest(event_params) where key = 'entrances') as \n\n    entrances,\n      (select value.string_value from unnest(event_params) where key = 'search_term') as \n\n    search_term,\n      (select value.string_value from unnest(event_params) where key = 'unique_search_term') as \n\n    unique_search_term\n      \n from `bergzeit`.`dbt`.`stg_ga4__events`\n where event_name = 'view_search_results'\n)\n\nselect * from event_with_params", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__event_view_search_results`"}, "model.ga4.stg_ga4__event_video_start": {"raw_sql": "-- Defined as when the video starts playing. For embedded YouTube videos that have JS API support enabled. Collected by default via enhanced measurement.\n-- More info: https://support.google.com/firebase/answer/9234069?hl=en\n \n with video_start_with_params as (\n   select *,\n      {{ ga4.unnest_key('event_params', 'video_current_time', 'int_value') }},\n      {{ ga4.unnest_key('event_params', 'video_duration', 'int_value') }},\n      {{ ga4.unnest_key('event_params', 'video_percent', 'int_value') }},\n      {{ ga4.unnest_key('event_params', 'video_url') }},\n      {{ ga4.unnest_key('event_params', 'video_provider') }},\n      {{ ga4.unnest_key('event_params', 'vide_title') }},\n      {{ ga4.unnest_key('event_params', 'visible') }}\n      {% if var(\"video_start_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"video_start_custom_parameters\") )}}\n      {% endif %}\n from {{ref('stg_ga4__events')}}    \n where event_name = 'video_start'\n)\n\nselect * from video_start_with_params", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "events", "stg_ga4__event_video_start"], "unique_id": "model.ga4.stg_ga4__event_video_start", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/events/stg_ga4__event_video_start.sql", "original_file_path": "models/staging/ga4/events/stg_ga4__event_video_start.sql", "name": "stg_ga4__event_video_start", "alias": "stg_ga4__event_video_start", "checksum": {"name": "sha256", "checksum": "508d344e22076d82db95e414365de092018d20b0c4d638845d2ce4441d13cb08"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/events/stg_ga4__event_video_start.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750850.0872025, "compiled_sql": "-- Defined as when the video starts playing. For embedded YouTube videos that have JS API support enabled. Collected by default via enhanced measurement.\n-- More info: https://support.google.com/firebase/answer/9234069?hl=en\n \n with video_start_with_params as (\n   select *,\n      (select value.int_value from unnest(event_params) where key = 'video_current_time') as \n\n    video_current_time,\n      (select value.int_value from unnest(event_params) where key = 'video_duration') as \n\n    video_duration,\n      (select value.int_value from unnest(event_params) where key = 'video_percent') as \n\n    video_percent,\n      (select value.string_value from unnest(event_params) where key = 'video_url') as \n\n    video_url,\n      (select value.string_value from unnest(event_params) where key = 'video_provider') as \n\n    video_provider,\n      (select value.string_value from unnest(event_params) where key = 'vide_title') as \n\n    vide_title,\n      (select value.string_value from unnest(event_params) where key = 'visible') as \n\n    visible\n      \n from `bergzeit`.`dbt`.`stg_ga4__events`    \n where event_name = 'video_start'\n)\n\nselect * from video_start_with_params", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__event_video_start`"}, "model.ga4.stg_ga4__event_video_complete": {"raw_sql": "-- Defined as when the video ends. For embedded YouTube videos that have JS API support enabled. Collected by default via enhanced measurement.\n-- More info: https://support.google.com/firebase/answer/9234069?hl=en\n \n with video_complete_with_params as (\n   select *,\n      {{ ga4.unnest_key('event_params', 'video_current_time', 'int_value') }},\n      {{ ga4.unnest_key('event_params', 'video_duration', 'int_value') }},\n      {{ ga4.unnest_key('event_params', 'video_percent', 'int_value') }},\n      {{ ga4.unnest_key('event_params', 'video_url') }},\n      {{ ga4.unnest_key('event_params', 'video_provider') }},\n      {{ ga4.unnest_key('event_params', 'vide_title') }},\n      {{ ga4.unnest_key('event_params', 'visible') }}\n      {% if var(\"video_complete_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"video_complete_custom_parameters\") )}}\n      {% endif %}\n from {{ ref('stg_ga4__events') }}    \n where event_name = 'video_complete'\n)\n\nselect * from video_complete_with_params", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "events", "stg_ga4__event_video_complete"], "unique_id": "model.ga4.stg_ga4__event_video_complete", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/events/stg_ga4__event_video_complete.sql", "original_file_path": "models/staging/ga4/events/stg_ga4__event_video_complete.sql", "name": "stg_ga4__event_video_complete", "alias": "stg_ga4__event_video_complete", "checksum": {"name": "sha256", "checksum": "2829f86367415a38c81242eeadec74ef7969c20b62503b493bd211b5dddf9b32"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/events/stg_ga4__event_video_complete.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750850.1023035, "compiled_sql": "-- Defined as when the video ends. For embedded YouTube videos that have JS API support enabled. Collected by default via enhanced measurement.\n-- More info: https://support.google.com/firebase/answer/9234069?hl=en\n \n with video_complete_with_params as (\n   select *,\n      (select value.int_value from unnest(event_params) where key = 'video_current_time') as \n\n    video_current_time,\n      (select value.int_value from unnest(event_params) where key = 'video_duration') as \n\n    video_duration,\n      (select value.int_value from unnest(event_params) where key = 'video_percent') as \n\n    video_percent,\n      (select value.string_value from unnest(event_params) where key = 'video_url') as \n\n    video_url,\n      (select value.string_value from unnest(event_params) where key = 'video_provider') as \n\n    video_provider,\n      (select value.string_value from unnest(event_params) where key = 'vide_title') as \n\n    vide_title,\n      (select value.string_value from unnest(event_params) where key = 'visible') as \n\n    visible\n      \n from `bergzeit`.`dbt`.`stg_ga4__events`    \n where event_name = 'video_complete'\n)\n\nselect * from video_complete_with_params", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__event_video_complete`"}, "model.ga4.stg_ga4__event_first_visit": {"raw_sql": "-- TODO: Unclear why there are first_visit events firing when the ga_session_number is >1. This might cause confusion.\n\nwith first_visit_with_params as (\n select \n    *,\n    {{ ga4.unnest_key('event_params', 'page_location', 'string_value', 'landing_page') }} \n      {% if var(\"first_visit_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"first_visit_custom_parameters\") )}}\n      {% endif %}\n from {{ref('stg_ga4__events')}}    \n where event_name = 'first_visit'\n)\n\nselect * from first_visit_with_params", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "events", "stg_ga4__event_first_visit"], "unique_id": "model.ga4.stg_ga4__event_first_visit", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/events/stg_ga4__event_first_visit.sql", "original_file_path": "models/staging/ga4/events/stg_ga4__event_first_visit.sql", "name": "stg_ga4__event_first_visit", "alias": "stg_ga4__event_first_visit", "checksum": {"name": "sha256", "checksum": "32afc3d90a04670d1b17753f9e2e115e481cef68dbd93234bdc50f8ea8f20e5b"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/events/stg_ga4__event_first_visit.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750850.118146, "compiled_sql": "-- TODO: Unclear why there are first_visit events firing when the ga_session_number is >1. This might cause confusion.\n\nwith first_visit_with_params as (\n select \n    *,\n    (select value.string_value from unnest(event_params) where key = 'page_location') as \n\n    landing_page \n      \n from `bergzeit`.`dbt`.`stg_ga4__events`    \n where event_name = 'first_visit'\n)\n\nselect * from first_visit_with_params", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__event_first_visit`"}, "model.ga4.stg_ga4__event_scroll": {"raw_sql": "with scroll_with_params as (\n   select *,\n      {{ ga4.unnest_key('event_params', 'percent_scrolled', 'int_value') }}\n      {% if var(\"scroll_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"scroll_custom_parameters\") )}}\n      {% endif %}\n from {{ref('stg_ga4__events')}}    \n where event_name = 'scroll'\n)\n\nselect * from scroll_with_params", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "events", "stg_ga4__event_scroll"], "unique_id": "model.ga4.stg_ga4__event_scroll", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/events/stg_ga4__event_scroll.sql", "original_file_path": "models/staging/ga4/events/stg_ga4__event_scroll.sql", "name": "stg_ga4__event_scroll", "alias": "stg_ga4__event_scroll", "checksum": {"name": "sha256", "checksum": "24f176cb33621cb8de961c6e89a1d38f17553fe0dc40ba91c05cec26145dcc42"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "Staging model containing only 'scroll' events. Includes the 'percent_scrolled' parameter.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": "target/compiled/ga4/models/staging/ga4/events/stg_ga4__event_scroll.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750854.3306599, "compiled_sql": "with scroll_with_params as (\n   select *,\n      (select value.int_value from unnest(event_params) where key = 'percent_scrolled') as \n\n    percent_scrolled\n      \n from `bergzeit`.`dbt`.`stg_ga4__events`    \n where event_name = 'scroll'\n)\n\nselect * from scroll_with_params", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__event_scroll`"}, "model.ga4.stg_ga4__event_click": {"raw_sql": "-- reference here: https://support.google.com/analytics/answer/9216061?hl=en \n \n with click_with_params as (\n   select *,\n      {{ ga4.unnest_key('event_params', 'entrances',  'int_value') }},\n      {{ ga4.unnest_key('event_params', 'outbound') }},\n      {{ ga4.unnest_key('event_params', 'link_classes') }},\n      {{ ga4.unnest_key('event_params', 'link_domain') }},\n      {{ ga4.unnest_key('event_params', 'link_url') }},\n      {{ ga4.unnest_key('event_params', 'click_element') }},\n      {{ ga4.unnest_key('event_params', 'link_id') }},\n      {{ ga4.unnest_key('event_params', 'click_region') }},\n      {{ ga4.unnest_key('event_params', 'click_tag_name') }},\n      {{ ga4.unnest_key('event_params', 'click_url') }},\n      {{ ga4.unnest_key('event_params', 'file_name') }}\n      {% if var(\"click_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"click_custom_parameters\") )}}\n      {% endif %}\n from {{ref('stg_ga4__events')}}\n where event_name = 'click'\n)\n\nselect * from click_with_params", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "events", "stg_ga4__event_click"], "unique_id": "model.ga4.stg_ga4__event_click", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/events/stg_ga4__event_click.sql", "original_file_path": "models/staging/ga4/events/stg_ga4__event_click.sql", "name": "stg_ga4__event_click", "alias": "stg_ga4__event_click", "checksum": {"name": "sha256", "checksum": "4d77381bdd476b1119653a424d7b85a21ed51caa752ccc39fc9203eb2cd7c522"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/events/stg_ga4__event_click.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750850.1425922, "compiled_sql": "-- reference here: https://support.google.com/analytics/answer/9216061?hl=en \n \n with click_with_params as (\n   select *,\n      (select value.int_value from unnest(event_params) where key = 'entrances') as \n\n    entrances,\n      (select value.string_value from unnest(event_params) where key = 'outbound') as \n\n    outbound,\n      (select value.string_value from unnest(event_params) where key = 'link_classes') as \n\n    link_classes,\n      (select value.string_value from unnest(event_params) where key = 'link_domain') as \n\n    link_domain,\n      (select value.string_value from unnest(event_params) where key = 'link_url') as \n\n    link_url,\n      (select value.string_value from unnest(event_params) where key = 'click_element') as \n\n    click_element,\n      (select value.string_value from unnest(event_params) where key = 'link_id') as \n\n    link_id,\n      (select value.string_value from unnest(event_params) where key = 'click_region') as \n\n    click_region,\n      (select value.string_value from unnest(event_params) where key = 'click_tag_name') as \n\n    click_tag_name,\n      (select value.string_value from unnest(event_params) where key = 'click_url') as \n\n    click_url,\n      (select value.string_value from unnest(event_params) where key = 'file_name') as \n\n    file_name\n      \n from `bergzeit`.`dbt`.`stg_ga4__events`\n where event_name = 'click'\n)\n\nselect * from click_with_params", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__event_click`"}, "model.ga4.stg_ga4__event_file_download": {"raw_sql": "-- reference here: https://support.google.com/analytics/answer/9216061?hl=en&ref_topic=9756175\n \n with event_with_params as (\n   select *,\n      {{ ga4.unnest_key('event_params', 'entrances',  'int_value') }},\n      {{ ga4.unnest_key('event_params', 'value', 'float_value') }},\n      {{ ga4.unnest_key('event_params', 'file_extension') }},\n      {{ ga4.unnest_key('event_params', 'file_name') }},\n      {{ ga4.unnest_key('event_params', 'link_classes') }},\n      {{ ga4.unnest_key('event_params', 'link_domain') }},\n      {{ ga4.unnest_key('event_params', 'link_id') }},\n      {{ ga4.unnest_key('event_params', 'link_text') }},\n      {{ ga4.unnest_key('event_params', 'link_url') }}\n      {% if var(\"file_download_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"file_download_custom_parameters\") )}}\n      {% endif %}\n from {{ref('stg_ga4__events')}}    \n where event_name = 'file_download'\n)\n\nselect * from event_with_params", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "events", "stg_ga4__event_file_download"], "unique_id": "model.ga4.stg_ga4__event_file_download", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/events/stg_ga4__event_file_download.sql", "original_file_path": "models/staging/ga4/events/stg_ga4__event_file_download.sql", "name": "stg_ga4__event_file_download", "alias": "stg_ga4__event_file_download", "checksum": {"name": "sha256", "checksum": "5bf221117334fb3e1377e0110f57735c1e2ebe68273128812348f6af98592341"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/events/stg_ga4__event_file_download.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750850.1628141, "compiled_sql": "-- reference here: https://support.google.com/analytics/answer/9216061?hl=en&ref_topic=9756175\n \n with event_with_params as (\n   select *,\n      (select value.int_value from unnest(event_params) where key = 'entrances') as \n\n    entrances,\n      (select value.float_value from unnest(event_params) where key = 'value') as \n\n    value,\n      (select value.string_value from unnest(event_params) where key = 'file_extension') as \n\n    file_extension,\n      (select value.string_value from unnest(event_params) where key = 'file_name') as \n\n    file_name,\n      (select value.string_value from unnest(event_params) where key = 'link_classes') as \n\n    link_classes,\n      (select value.string_value from unnest(event_params) where key = 'link_domain') as \n\n    link_domain,\n      (select value.string_value from unnest(event_params) where key = 'link_id') as \n\n    link_id,\n      (select value.string_value from unnest(event_params) where key = 'link_text') as \n\n    link_text,\n      (select value.string_value from unnest(event_params) where key = 'link_url') as \n\n    link_url\n      \n from `bergzeit`.`dbt`.`stg_ga4__events`    \n where event_name = 'file_download'\n)\n\nselect * from event_with_params", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__event_file_download`"}, "model.ga4.stg_ga4__event_page_view": {"raw_sql": "with page_view_with_params as (\n   select *,\n      {{ ga4.unnest_key('event_params', 'entrances',  'int_value') }},\n      {{ ga4.unnest_key('event_params', 'value', 'float_value') }},\n      lag(page_location, 1) over (partition by (session_key) order by event_timestamp asc) as session_previous_page,\n      case when split(split(page_location,'/')[safe_ordinal(4)],'?')[safe_ordinal(1)] = '' then null else concat('/',split(split(page_location,'/')[safe_ordinal(4)],'?')[safe_ordinal(1)]) end as pagepath_level_1,\n      case when split(split(page_location,'/')[safe_ordinal(5)],'?')[safe_ordinal(1)] = '' then null else concat('/',split(split(page_location,'/')[safe_ordinal(5)],'?')[safe_ordinal(1)]) end as pagepath_level_2,\n      case when split(split(page_location,'/')[safe_ordinal(6)],'?')[safe_ordinal(1)] = '' then null else concat('/',split(split(page_location,'/')[safe_ordinal(6)],'?')[safe_ordinal(1)]) end as pagepath_level_3,\n      case when split(split(page_location,'/')[safe_ordinal(7)],'?')[safe_ordinal(1)] = '' then null else concat('/',split(split(page_location,'/')[safe_ordinal(7)],'?')[safe_ordinal(1)]) end as pagepath_level_4\n      {% if var(\"page_view_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"page_view_custom_parameters\") )}}\n      {% endif %}\n from {{ref('stg_ga4__events')}}    \n where event_name = 'page_view'\n),\nlast_pageview_joined as (\n  select \n    page_view_with_params.*,\n    case\n      when first_last_pageview_session.last_page_view_event_key is null then null\n      else 1\n    end as exits\n  from page_view_with_params\n    left join {{ref('stg_ga4__sessions_first_last_pageviews')}} first_last_pageview_session\n      on page_view_with_params.event_key = first_last_pageview_session.last_page_view_event_key\n)\n\nselect * from last_pageview_joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": ["model.ga4.stg_ga4__events", "model.ga4.stg_ga4__sessions_first_last_pageviews"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "events", "stg_ga4__event_page_view"], "unique_id": "model.ga4.stg_ga4__event_page_view", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/events/stg_ga4__event_page_view.sql", "original_file_path": "models/staging/ga4/events/stg_ga4__event_page_view.sql", "name": "stg_ga4__event_page_view", "alias": "stg_ga4__event_page_view", "checksum": {"name": "sha256", "checksum": "dd6d89471302c8695a922557f5dad9127b84463ec4a9246cd49fc41c2d9573ea"}, "tags": [], "refs": [["stg_ga4__events"], ["stg_ga4__sessions_first_last_pageviews"]], "sources": [], "description": "GA4 events filtered to only show 'page_view' events. Pivots common event parameters into separate columns. Identifies the first and last pageview in the 'is_entrance' and 'is_exit' columns.", "columns": {"page_location": {"name": "page_location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": "target/compiled/ga4/models/staging/ga4/events/stg_ga4__event_page_view.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1663750854.3226545, "compiled_sql": "with page_view_with_params as (\n   select *,\n      (select value.int_value from unnest(event_params) where key = 'entrances') as \n\n    entrances,\n      (select value.float_value from unnest(event_params) where key = 'value') as \n\n    value,\n      lag(page_location, 1) over (partition by (session_key) order by event_timestamp asc) as session_previous_page,\n      case when split(split(page_location,'/')[safe_ordinal(4)],'?')[safe_ordinal(1)] = '' then null else concat('/',split(split(page_location,'/')[safe_ordinal(4)],'?')[safe_ordinal(1)]) end as pagepath_level_1,\n      case when split(split(page_location,'/')[safe_ordinal(5)],'?')[safe_ordinal(1)] = '' then null else concat('/',split(split(page_location,'/')[safe_ordinal(5)],'?')[safe_ordinal(1)]) end as pagepath_level_2,\n      case when split(split(page_location,'/')[safe_ordinal(6)],'?')[safe_ordinal(1)] = '' then null else concat('/',split(split(page_location,'/')[safe_ordinal(6)],'?')[safe_ordinal(1)]) end as pagepath_level_3,\n      case when split(split(page_location,'/')[safe_ordinal(7)],'?')[safe_ordinal(1)] = '' then null else concat('/',split(split(page_location,'/')[safe_ordinal(7)],'?')[safe_ordinal(1)]) end as pagepath_level_4\n      \n from `bergzeit`.`dbt`.`stg_ga4__events`    \n where event_name = 'page_view'\n),\nlast_pageview_joined as (\n  select \n    page_view_with_params.*,\n    case\n      when first_last_pageview_session.last_page_view_event_key is null then null\n      else 1\n    end as exits\n  from page_view_with_params\n    left join `bergzeit`.`dbt`.`stg_ga4__sessions_first_last_pageviews` first_last_pageview_session\n      on page_view_with_params.event_key = first_last_pageview_session.last_page_view_event_key\n)\n\nselect * from last_pageview_joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`stg_ga4__event_page_view`"}, "model.ga4.base_ga4__events": {"raw_sql": "{% if var('static_incremental_days', false ) %}\n    {% set partitions_to_replace = [] %}\n    {% for i in range(var('static_incremental_days')) %}\n        {% set partitions_to_replace = partitions_to_replace.append('date_sub(current_date, interval ' + (i+1)|string + ' day)') %}\n    {% endfor %}\n    {{\n        config(\n            materialized = 'incremental',\n            incremental_strategy = 'insert_overwrite',\n            partition_by={\n                \"field\": \"event_date_dt\",\n                \"data_type\": \"date\",\n            },\n            partitions = partitions_to_replace,\n        )\n    }}\n{% else %}\n    {{\n        config(\n            materialized = 'incremental',\n            incremental_strategy = 'insert_overwrite',\n            partition_by={\n                \"field\": \"event_date_dt\",\n                \"data_type\": \"date\",\n            },\n        )\n    }}\n{% endif %}\n--BigQuery does not cache wildcard queries that scan across sharded tables which means it's best to materialize the raw event data as a partitioned table so that future queries benefit from caching\nwith source as (\n    select \n        parse_date('%Y%m%d',event_date) as event_date_dt,\n        event_timestamp,\n        event_name,\n        event_params,\n        event_previous_timestamp,\n        event_value_in_usd,\n        event_bundle_sequence_id,\n        event_server_timestamp_offset,\n        user_id,\n        user_pseudo_id,\n        privacy_info,\n        user_properties,\n        user_first_touch_timestamp,\n        user_ltv,\n        device,\n        geo,\n        app_info,\n        traffic_source,\n        stream_id,\n        platform,\n        ecommerce,\n        items,\n    {%  if var('frequency', 'daily') == 'streaming' %}\n        from {{ source('ga4', 'events_intraday') }}\n        where cast( _table_suffix as int64) >= {{var('start_date')}}\n    {% else %}\n        from {{ source('ga4', 'events') }}\n        where _table_suffix not like '%intraday%'\n        and cast( _table_suffix as int64) >= {{var('start_date')}}\n    {% endif %}\n    \n    {% if is_incremental() %}\n\n        {% if var('static_incremental_days', false ) %}\n            and parse_date('%Y%m%d', _TABLE_SUFFIX) in ({{ partitions_to_replace | join(',') }})\n        {% else %}\n            -- Incrementally add new events. Filters on _TABLE_SUFFIX using the max event_date_dt value found in {{this}}\n            -- See https://docs.getdbt.com/reference/resource-configs/bigquery-configs#the-insert_overwrite-strategy\n            and parse_date('%Y%m%d',_TABLE_SUFFIX) >= _dbt_max_partition\n        {% endif %}\n    {% endif %}\n),\nrenamed as (\n    select \n        event_date_dt,\n        event_timestamp,\n        lower(replace(trim(event_name), \" \", \"_\")) as event_name, -- Clean up all event names to be snake cased\n        event_params,\n        event_previous_timestamp,\n        event_value_in_usd,\n        event_bundle_sequence_id,\n        event_server_timestamp_offset,\n        user_id,\n        user_pseudo_id,\n        privacy_info,\n        user_properties,\n        user_first_touch_timestamp,\n        user_ltv,\n        device,\n        geo,\n        app_info,\n        traffic_source,\n        stream_id,\n        platform,\n        ecommerce,\n        items,\n        {{ ga4.unnest_key('event_params', 'ga_session_id', 'int_value') }},\n        {{ ga4.unnest_key('event_params', 'page_location') }},\n        {{ ga4.unnest_key('event_params', 'ga_session_number',  'int_value') }},\n        (case when (SELECT value.string_value FROM unnest(event_params) WHERE key = \"session_engaged\") = \"1\" then 1 end) as session_engaged,\n        {{ ga4.unnest_key('event_params', 'engagement_time_msec', 'int_value') }},\n        {{ ga4.unnest_key('event_params', 'page_title') }},\n        {{ ga4.unnest_key('event_params', 'page_referrer') }},\n        {{ ga4.unnest_key('event_params', 'source') }},\n        {{ ga4.unnest_key('event_params', 'medium') }},\n        {{ ga4.unnest_key('event_params', 'campaign') }},\n        CASE \n            WHEN event_name = 'page_view' THEN 1\n            ELSE 0\n        END AS is_page_view,\n        CASE \n            WHEN event_name = 'purchase' THEN 1\n            ELSE 0\n        END AS is_purchase,\n    from source\n)\n\nselect\n    *\nfrom renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.ga4.unnest_key"], "nodes": ["source.ga4.ga4.events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "event_date_dt", "data_type": "date"}, "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "base", "base_ga4__events"], "unique_id": "model.ga4.base_ga4__events", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/base/base_ga4__events.sql", "original_file_path": "models/staging/ga4/base/base_ga4__events.sql", "name": "base_ga4__events", "alias": "base_ga4__events", "checksum": {"name": "sha256", "checksum": "6e270c5cfb2d697254ef3717d406a03a3017b08c6b7afb6c773e2556c6f50197"}, "tags": [], "refs": [], "sources": [["ga4", "events"]], "description": "Base events model that pulls all fields from raw data. Resulting table is partitioned on event_date and is useful in that BQ queries can be cached against this table, but not against wildcard searches from the original tables which are sharded on date. Some light transformation and renaming beyond the base events model. Adds surrogate keys for sessions and events", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": "target/compiled/ga4/models/staging/ga4/base/base_ga4__events.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": {"field": "event_date_dt", "data_type": "date"}}, "created_at": 1663750854.3191326, "compiled_sql": "\n    \n\n--BigQuery does not cache wildcard queries that scan across sharded tables which means it's best to materialize the raw event data as a partitioned table so that future queries benefit from caching\nwith source as (\n    select \n        parse_date('%Y%m%d',event_date) as event_date_dt,\n        event_timestamp,\n        event_name,\n        event_params,\n        event_previous_timestamp,\n        event_value_in_usd,\n        event_bundle_sequence_id,\n        event_server_timestamp_offset,\n        user_id,\n        user_pseudo_id,\n        privacy_info,\n        user_properties,\n        user_first_touch_timestamp,\n        user_ltv,\n        device,\n        geo,\n        app_info,\n        traffic_source,\n        stream_id,\n        platform,\n        ecommerce,\n        items,\n    \n        from `bergzeit`.`analytics_317045356`.`events_*`\n        where _table_suffix not like '%intraday%'\n        and cast( _table_suffix as int64) >= 20220701\n    \n    \n    \n),\nrenamed as (\n    select \n        event_date_dt,\n        event_timestamp,\n        lower(replace(trim(event_name), \" \", \"_\")) as event_name, -- Clean up all event names to be snake cased\n        event_params,\n        event_previous_timestamp,\n        event_value_in_usd,\n        event_bundle_sequence_id,\n        event_server_timestamp_offset,\n        user_id,\n        user_pseudo_id,\n        privacy_info,\n        user_properties,\n        user_first_touch_timestamp,\n        user_ltv,\n        device,\n        geo,\n        app_info,\n        traffic_source,\n        stream_id,\n        platform,\n        ecommerce,\n        items,\n        (select value.int_value from unnest(event_params) where key = 'ga_session_id') as \n\n    ga_session_id,\n        (select value.string_value from unnest(event_params) where key = 'page_location') as \n\n    page_location,\n        (select value.int_value from unnest(event_params) where key = 'ga_session_number') as \n\n    ga_session_number,\n        (case when (SELECT value.string_value FROM unnest(event_params) WHERE key = \"session_engaged\") = \"1\" then 1 end) as session_engaged,\n        (select value.int_value from unnest(event_params) where key = 'engagement_time_msec') as \n\n    engagement_time_msec,\n        (select value.string_value from unnest(event_params) where key = 'page_title') as \n\n    page_title,\n        (select value.string_value from unnest(event_params) where key = 'page_referrer') as \n\n    page_referrer,\n        (select value.string_value from unnest(event_params) where key = 'source') as \n\n    source,\n        (select value.string_value from unnest(event_params) where key = 'medium') as \n\n    medium,\n        (select value.string_value from unnest(event_params) where key = 'campaign') as \n\n    campaign,\n        CASE \n            WHEN event_name = 'page_view' THEN 1\n            ELSE 0\n        END AS is_page_view,\n        CASE \n            WHEN event_name = 'purchase' THEN 1\n            ELSE 0\n        END AS is_purchase,\n    from source\n)\n\nselect\n    *\nfrom renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`base_ga4__events`"}, "seed.ga4.ga4_source_categories": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "ga4_source_categories"], "unique_id": "seed.ga4.ga4_source_categories", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "ga4_source_categories.csv", "original_file_path": "seeds/ga4_source_categories.csv", "name": "ga4_source_categories", "alias": "ga4_source_categories", "checksum": {"name": "sha256", "checksum": "7ec130962d6e8bd300f9e41d62d2a599e0659704ab3c3ef8eeb0fd39f4198a7e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.2709136, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bergzeit`.`dbt`.`ga4_source_categories`"}, "test.sql_repository_bz.not_null_int_ga_sessions_by_hit_count_bucket_hit_count_bucket.9e72d30e37": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hit_count_bucket", "model": "{{ get_where_subquery(ref('int_ga_sessions_by_hit_count_bucket')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.int_ga_sessions_by_hit_count_bucket"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "not_null_int_ga_sessions_by_hit_count_bucket_hit_count_bucket"], "unique_id": "test.sql_repository_bz.not_null_int_ga_sessions_by_hit_count_bucket_hit_count_bucket.9e72d30e37", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_int_ga_sessions_by_hit_count_bucket_hit_count_bucket.sql", "original_file_path": "models/02_intermediate/google_analytics/_models_int_ga.yml", "name": "not_null_int_ga_sessions_by_hit_count_bucket_hit_count_bucket", "alias": "not_null_int_ga_sessions_by_hit_count_bucket_hit_count_bucket", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_ga_sessions_by_hit_count_bucket"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/_models_int_ga.yml/not_null_int_ga_sessions_by_hit_count_bucket_hit_count_bucket.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.4372187, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_intermediate`.`int_ga_sessions_by_hit_count_bucket`\nwhere hit_count_bucket is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hit_count_bucket", "file_key_name": "models.int_ga_sessions_by_hit_count_bucket"}, "test.sql_repository_bz.dbt_utils_at_least_one_int_ga_sessions_by_hit_count_bucket_hit_count_bucket.735e0efb5d": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_at_least_one_int_ga__e592026b0281f1442a021f11b5523144\") }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "hit_count_bucket", "model": "{{ get_where_subquery(ref('int_ga_sessions_by_hit_count_bucket')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.int_ga_sessions_by_hit_count_bucket"]}, "config": {"enabled": true, "alias": "dbt_utils_at_least_one_int_ga__e592026b0281f1442a021f11b5523144", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "dbt_utils_at_least_one_int_ga_sessions_by_hit_count_bucket_hit_count_bucket"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_int_ga_sessions_by_hit_count_bucket_hit_count_bucket.735e0efb5d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_int_ga__e592026b0281f1442a021f11b5523144.sql", "original_file_path": "models/02_intermediate/google_analytics/_models_int_ga.yml", "name": "dbt_utils_at_least_one_int_ga_sessions_by_hit_count_bucket_hit_count_bucket", "alias": "dbt_utils_at_least_one_int_ga__e592026b0281f1442a021f11b5523144", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_ga_sessions_by_hit_count_bucket"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/_models_int_ga.yml/dbt_utils_at_least_one_int_ga__e592026b0281f1442a021f11b5523144.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_at_least_one_int_ga__e592026b0281f1442a021f11b5523144"}, "created_at": 1663750850.4393914, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(hit_count_bucket) as filler_column\n\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_sessions_by_hit_count_bucket`\n\n    having count(hit_count_bucket) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hit_count_bucket", "file_key_name": "models.int_ga_sessions_by_hit_count_bucket"}, "test.sql_repository_bz.accepted_values_int_ga_teaser_test_underscores_count__False__8.1d077d2f26": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">300\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [8], "quote": false, "column_name": "underscores_count", "model": "{{ get_where_subquery(ref('int_ga_teaser_test')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.int_ga_teaser_test"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">300", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "events", "accepted_values_int_ga_teaser_test_underscores_count__False__8"], "unique_id": "test.sql_repository_bz.accepted_values_int_ga_teaser_test_underscores_count__False__8.1d077d2f26", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "accepted_values_int_ga_teaser_test_underscores_count__False__8.sql", "original_file_path": "models/02_intermediate/google_analytics/events/_models_int_ga_events.yml", "name": "accepted_values_int_ga_teaser_test_underscores_count__False__8", "alias": "accepted_values_int_ga_teaser_test_underscores_count__False__8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_ga_teaser_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/events/_models_int_ga_events.yml/accepted_values_int_ga_teaser_test_underscores_count__False__8.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">300"}, "created_at": 1663750850.493068, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        underscores_count as value_field,\n        count(*) as n_records\n\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_teaser_test`\n    group by underscores_count\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    8\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "underscores_count", "file_key_name": "models.int_ga_teaser_test"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_match_regex_int_ga_teaser_test_promo_name_date__20_0_9_2_0_1_9_1_0_2_0_1_9_12_0_9_3_0_1_.692d2b6cbe": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_not_match_regex(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">500\",alias=\"dbt_expectations_expect_column_a8d1ece687eb0bd625f1ba3fc1b7d6ed\") }}", "test_metadata": {"name": "expect_column_values_to_not_match_regex", "kwargs": {"regex": "20[0-9]{2}(0[1-9]|1[0-2])0[1-9]|[12][0-9]|3[0-1]", "column_name": "promo_name_date", "model": "{{ get_where_subquery(ref('int_ga_teaser_test')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.int_ga_teaser_test"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a8d1ece687eb0bd625f1ba3fc1b7d6ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">500", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "events", "dbt_expectations_expect_column_values_to_not_match_regex_int_ga_teaser_test_promo_name_date__20_0_9_2_0_1_9_1_0_2_0_1_9_12_0_9_3_0_1_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_match_regex_int_ga_teaser_test_promo_name_date__20_0_9_2_0_1_9_1_0_2_0_1_9_12_0_9_3_0_1_.692d2b6cbe", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_a8d1ece687eb0bd625f1ba3fc1b7d6ed.sql", "original_file_path": "models/02_intermediate/google_analytics/events/_models_int_ga_events.yml", "name": "dbt_expectations_expect_column_values_to_not_match_regex_int_ga_teaser_test_promo_name_date__20_0_9_2_0_1_9_1_0_2_0_1_9_12_0_9_3_0_1_", "alias": "dbt_expectations_expect_column_a8d1ece687eb0bd625f1ba3fc1b7d6ed", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_ga_teaser_test"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/events/_models_int_ga_events.yml/dbt_expectations_expect_column_a8d1ece687eb0bd625f1ba3fc1b7d6ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">500", "alias": "dbt_expectations_expect_column_a8d1ece687eb0bd625f1ba3fc1b7d6ed"}, "created_at": 1663750850.5098758, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(promo_name_date, '20[0-9]{2}(0[1-9]|1[0-2])0[1-9]|[12][0-9]|3[0-1]', 1, 1)\n\n\n = 0\n as expression\n\n\n    from `bergzeit`.`dbt_analytics_intermediate`.`int_ga_teaser_test`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "promo_name_date", "file_key_name": "models.int_ga_teaser_test"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_average_hits_per_day_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_.e739dc0e22": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_cc704003983b407e9a7a7299f8a2399f\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 60 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('int_ga_average_hits_per_day')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.int_ga_average_hits_per_day"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_cc704003983b407e9a7a7299f8a2399f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "events", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_average_hits_per_day_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_average_hits_per_day_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_.e739dc0e22", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_cc704003983b407e9a7a7299f8a2399f.sql", "original_file_path": "models/02_intermediate/google_analytics/events/_models_int_ga_events.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_average_hits_per_day_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_cc704003983b407e9a7a7299f8a2399f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_ga_average_hits_per_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/events/_models_int_ga_events.yml/dbt_expectations_expect_row_va_cc704003983b407e9a7a7299f8a2399f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_cc704003983b407e9a7a7299f8a2399f"}, "created_at": 1663750850.539442, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 59\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-07-23' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_intermediate`.`int_ga_average_hits_per_day` f\n    \n    where date between date_sub(current_date(), interval 60 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.int_ga_average_hits_per_day"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_hits_by_property_and_day_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.753a2a3d4e": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_c2109739d2582030abc7b8d50e015a7a\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 30 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('int_ga_hits_by_property_and_day')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.int_ga_hits_by_property_and_day"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_c2109739d2582030abc7b8d50e015a7a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "02_intermediate", "google_analytics", "events", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_hits_by_property_and_day_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_hits_by_property_and_day_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.753a2a3d4e", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_c2109739d2582030abc7b8d50e015a7a.sql", "original_file_path": "models/02_intermediate/google_analytics/events/_models_int_ga_events.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_hits_by_property_and_day_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_c2109739d2582030abc7b8d50e015a7a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_ga_hits_by_property_and_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/02_intermediate/google_analytics/events/_models_int_ga_events.yml/dbt_expectations_expect_row_va_c2109739d2582030abc7b8d50e015a7a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_c2109739d2582030abc7b8d50e015a7a"}, "created_at": 1663750850.6065364, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 29\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-08-22' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_intermediate`.`int_ga_hits_by_property_and_day` f\n    \n    where date between date_sub(current_date(), interval 30 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.int_ga_hits_by_property_and_day"}, "test.sql_repository_bz.unique_stg_channelattribution_channel_level_sk_id.db1204caf4": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_channelattribution_channel_level')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channelattribution_channel_level"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channel_attribution", "unique_stg_channelattribution_channel_level_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_channelattribution_channel_level_sk_id.db1204caf4", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_channelattribution_channel_level_sk_id.sql", "original_file_path": "models/01_staging/channel_attribution/_models_attribution.yml", "name": "unique_stg_channelattribution_channel_level_sk_id", "alias": "unique_stg_channelattribution_channel_level_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channelattribution_channel_level"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channel_attribution/_models_attribution.yml/unique_stg_channelattribution_channel_level_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.656378, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_channelattribution_channel_level`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_channelattribution_channel_level"}, "test.sql_repository_bz.unique_stg_channelattribution_path_level_sk_id.3487d69530": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_channelattribution_path_level')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channelattribution_path_level"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channel_attribution", "unique_stg_channelattribution_path_level_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_channelattribution_path_level_sk_id.3487d69530", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_channelattribution_path_level_sk_id.sql", "original_file_path": "models/01_staging/channel_attribution/_models_attribution.yml", "name": "unique_stg_channelattribution_path_level_sk_id", "alias": "unique_stg_channelattribution_path_level_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channelattribution_path_level"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channel_attribution/_models_attribution.yml/unique_stg_channelattribution_path_level_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.6592405, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_channelattribution_path_level`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_channelattribution_path_level"}, "test.sql_repository_bz.unique_stg_weather_dach_7d_forecast_town_datetime_id.750831b756": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "town_datetime_id", "model": "{{ get_where_subquery(ref('stg_weather_dach_7d_forecast')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_weather_dach_7d_forecast"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "weather_data", "unique_stg_weather_dach_7d_forecast_town_datetime_id"], "unique_id": "test.sql_repository_bz.unique_stg_weather_dach_7d_forecast_town_datetime_id.750831b756", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_weather_dach_7d_forecast_town_datetime_id.sql", "original_file_path": "models/01_staging/weather_data/_models_stg_weather.yml", "name": "unique_stg_weather_dach_7d_forecast_town_datetime_id", "alias": "unique_stg_weather_dach_7d_forecast_town_datetime_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_weather_dach_7d_forecast"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/weather_data/_models_stg_weather.yml/unique_stg_weather_dach_7d_forecast_town_datetime_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.679083, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select town_datetime_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_weather_dach_7d_forecast`\n  where town_datetime_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "town_datetime_id", "file_key_name": "models.stg_weather_dach_7d_forecast"}, "test.sql_repository_bz.not_null_stg_weather_dach_7d_forecast_town_datetime_id.451adf1bbb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "town_datetime_id", "model": "{{ get_where_subquery(ref('stg_weather_dach_7d_forecast')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_weather_dach_7d_forecast"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "weather_data", "not_null_stg_weather_dach_7d_forecast_town_datetime_id"], "unique_id": "test.sql_repository_bz.not_null_stg_weather_dach_7d_forecast_town_datetime_id.451adf1bbb", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_weather_dach_7d_forecast_town_datetime_id.sql", "original_file_path": "models/01_staging/weather_data/_models_stg_weather.yml", "name": "not_null_stg_weather_dach_7d_forecast_town_datetime_id", "alias": "not_null_stg_weather_dach_7d_forecast_town_datetime_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_weather_dach_7d_forecast"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/weather_data/_models_stg_weather.yml/not_null_stg_weather_dach_7d_forecast_town_datetime_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.6826198, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_weather_dach_7d_forecast`\nwhere town_datetime_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "town_datetime_id", "file_key_name": "models.stg_weather_dach_7d_forecast"}, "test.sql_repository_bz.unique_stg_weather_dach_daily_town_datetime_id.6e81ec24a4": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "town_datetime_id", "model": "{{ get_where_subquery(ref('stg_weather_dach_daily')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_weather_dach_daily"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "weather_data", "unique_stg_weather_dach_daily_town_datetime_id"], "unique_id": "test.sql_repository_bz.unique_stg_weather_dach_daily_town_datetime_id.6e81ec24a4", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_weather_dach_daily_town_datetime_id.sql", "original_file_path": "models/01_staging/weather_data/_models_stg_weather.yml", "name": "unique_stg_weather_dach_daily_town_datetime_id", "alias": "unique_stg_weather_dach_daily_town_datetime_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_weather_dach_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/weather_data/_models_stg_weather.yml/unique_stg_weather_dach_daily_town_datetime_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.6854966, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select town_datetime_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_weather_dach_daily`\n  where town_datetime_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "town_datetime_id", "file_key_name": "models.stg_weather_dach_daily"}, "test.sql_repository_bz.not_null_stg_weather_dach_daily_town_datetime_id.7e0843fed4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "town_datetime_id", "model": "{{ get_where_subquery(ref('stg_weather_dach_daily')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_weather_dach_daily"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "weather_data", "not_null_stg_weather_dach_daily_town_datetime_id"], "unique_id": "test.sql_repository_bz.not_null_stg_weather_dach_daily_town_datetime_id.7e0843fed4", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_weather_dach_daily_town_datetime_id.sql", "original_file_path": "models/01_staging/weather_data/_models_stg_weather.yml", "name": "not_null_stg_weather_dach_daily_town_datetime_id", "alias": "not_null_stg_weather_dach_daily_town_datetime_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_weather_dach_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/weather_data/_models_stg_weather.yml/not_null_stg_weather_dach_daily_town_datetime_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.6884, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_weather_dach_daily`\nwhere town_datetime_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "town_datetime_id", "file_key_name": "models.stg_weather_dach_daily"}, "test.sql_repository_bz.not_null_stg_weather_dach_daily_date.ec486e9787": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_weather_dach_daily')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_weather_dach_daily"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "weather_data", "not_null_stg_weather_dach_daily_date"], "unique_id": "test.sql_repository_bz.not_null_stg_weather_dach_daily_date.ec486e9787", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_weather_dach_daily_date.sql", "original_file_path": "models/01_staging/weather_data/_models_stg_weather.yml", "name": "not_null_stg_weather_dach_daily_date", "alias": "not_null_stg_weather_dach_daily_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_weather_dach_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/weather_data/_models_stg_weather.yml/not_null_stg_weather_dach_daily_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.691281, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_weather_dach_daily`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.stg_weather_dach_daily"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_weather_dach_daily_date.48252d1406": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_weather_dach_daily')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_weather_dach_daily"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "weather_data", "dbt_utils_at_least_one_stg_weather_dach_daily_date"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_weather_dach_daily_date.48252d1406", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_weather_dach_daily_date.sql", "original_file_path": "models/01_staging/weather_data/_models_stg_weather.yml", "name": "dbt_utils_at_least_one_stg_weather_dach_daily_date", "alias": "dbt_utils_at_least_one_stg_weather_dach_daily_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_weather_dach_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/weather_data/_models_stg_weather.yml/dbt_utils_at_least_one_stg_weather_dach_daily_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.6944952, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(date) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_weather_dach_daily`\n\n    having count(date) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.stg_weather_dach_daily"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_weather_dach_daily_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_.8c82d80c49": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_5122214b9e8c2bddb079815861ba315c\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 90 day) and date_sub(current_date(), interval 0 day)", "model": "{{ get_where_subquery(ref('stg_weather_dach_daily')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_weather_dach_daily"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_5122214b9e8c2bddb079815861ba315c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "weather_data", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_weather_dach_daily_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_weather_dach_daily_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_.8c82d80c49", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_5122214b9e8c2bddb079815861ba315c.sql", "original_file_path": "models/01_staging/weather_data/_models_stg_weather.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_weather_dach_daily_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_", "alias": "dbt_expectations_expect_row_va_5122214b9e8c2bddb079815861ba315c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_weather_dach_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/weather_data/_models_stg_weather.yml/dbt_expectations_expect_row_va_5122214b9e8c2bddb079815861ba315c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_5122214b9e8c2bddb079815861ba315c"}, "created_at": 1663750850.7014282, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 89\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-06-23' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_weather_dach_daily` f\n    \n    where date between date_sub(current_date(), interval 90 day) and date_sub(current_date(), interval 0 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_weather_dach_daily"}, "test.sql_repository_bz.not_null_stg_gads_all_adgroups_info_current_AdGroupId.e206713d85": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AdGroupId", "model": "{{ get_where_subquery(ref('stg_gads_all_adgroups_info_current')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "not_null_stg_gads_all_adgroups_info_current_AdGroupId"], "unique_id": "test.sql_repository_bz.not_null_stg_gads_all_adgroups_info_current_AdGroupId.e206713d85", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gads_all_adgroups_info_current_AdGroupId.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "not_null_stg_gads_all_adgroups_info_current_AdGroupId", "alias": "not_null_stg_gads_all_adgroups_info_current_AdGroupId", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_adgroups_info_current"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/not_null_stg_gads_all_adgroups_info_current_AdGroupId.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.9713113, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_adgroups_info_current`\nwhere AdGroupId is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AdGroupId", "file_key_name": "models.stg_gads_all_adgroups_info_current"}, "test.sql_repository_bz.unique_stg_gads_all_adgroups_info_current_AdGroupId.6f372302b0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "AdGroupId", "model": "{{ get_where_subquery(ref('stg_gads_all_adgroups_info_current')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "unique_stg_gads_all_adgroups_info_current_AdGroupId"], "unique_id": "test.sql_repository_bz.unique_stg_gads_all_adgroups_info_current_AdGroupId.6f372302b0", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gads_all_adgroups_info_current_AdGroupId.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "unique_stg_gads_all_adgroups_info_current_AdGroupId", "alias": "unique_stg_gads_all_adgroups_info_current_AdGroupId", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_adgroups_info_current"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/unique_stg_gads_all_adgroups_info_current_AdGroupId.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1663750850.9750495, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select AdGroupId as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_adgroups_info_current`\n  where AdGroupId is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AdGroupId", "file_key_name": "models.stg_gads_all_adgroups_info_current"}, "test.sql_repository_bz.not_null_stg_gads_all_ads_info_current_sk_id.0ef72507fb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_ads_info_current')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_ads_info_current"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "not_null_stg_gads_all_ads_info_current_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gads_all_ads_info_current_sk_id.0ef72507fb", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gads_all_ads_info_current_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "not_null_stg_gads_all_ads_info_current_sk_id", "alias": "not_null_stg_gads_all_ads_info_current_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_ads_info_current"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/not_null_stg_gads_all_ads_info_current_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.977977, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_ads_info_current`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_ads_info_current"}, "test.sql_repository_bz.unique_stg_gads_all_ads_info_current_sk_id.01d3196c71": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_ads_info_current')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_ads_info_current"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "unique_stg_gads_all_ads_info_current_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_gads_all_ads_info_current_sk_id.01d3196c71", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gads_all_ads_info_current_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "unique_stg_gads_all_ads_info_current_sk_id", "alias": "unique_stg_gads_all_ads_info_current_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_ads_info_current"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/unique_stg_gads_all_ads_info_current_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1663750850.9823928, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_ads_info_current`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_ads_info_current"}, "test.sql_repository_bz.not_null_stg_gads_all_ads_stats_sk_id.d81f874bc8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_ads_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_ads_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "not_null_stg_gads_all_ads_stats_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gads_all_ads_stats_sk_id.d81f874bc8", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gads_all_ads_stats_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "not_null_stg_gads_all_ads_stats_sk_id", "alias": "not_null_stg_gads_all_ads_stats_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_ads_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/not_null_stg_gads_all_ads_stats_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.985225, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_ads_stats`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_ads_stats"}, "test.sql_repository_bz.unique_stg_gads_all_campaign_names_campaign_id.f84b6db6cc": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_gads_all_campaign_names')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_campaign_names"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "unique_stg_gads_all_campaign_names_campaign_id"], "unique_id": "test.sql_repository_bz.unique_stg_gads_all_campaign_names_campaign_id.f84b6db6cc", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gads_all_campaign_names_campaign_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "unique_stg_gads_all_campaign_names_campaign_id", "alias": "unique_stg_gads_all_campaign_names_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_campaign_names"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/unique_stg_gads_all_campaign_names_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1663750850.9893582, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select campaign_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaign_names`\n  where campaign_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_gads_all_campaign_names"}, "test.sql_repository_bz.not_null_stg_gads_all_campaign_names_campaign_id.82e2901272": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_gads_all_campaign_names')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_campaign_names"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "not_null_stg_gads_all_campaign_names_campaign_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gads_all_campaign_names_campaign_id.82e2901272", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gads_all_campaign_names_campaign_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "not_null_stg_gads_all_campaign_names_campaign_id", "alias": "not_null_stg_gads_all_campaign_names_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_campaign_names"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/not_null_stg_gads_all_campaign_names_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.9922101, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaign_names`\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_gads_all_campaign_names"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_campaign_names_campaign_id.500b398953": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "campaign_id", "model": "{{ get_where_subquery(ref('stg_gads_all_campaign_names')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_campaign_names"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "dbt_utils_at_least_one_stg_gads_all_campaign_names_campaign_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_campaign_names_campaign_id.500b398953", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_gads_all_campaign_names_campaign_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "dbt_utils_at_least_one_stg_gads_all_campaign_names_campaign_id", "alias": "dbt_utils_at_least_one_stg_gads_all_campaign_names_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_campaign_names"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/dbt_utils_at_least_one_stg_gads_all_campaign_names_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750850.9954772, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(campaign_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaign_names`\n\n    having count(campaign_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "campaign_id", "file_key_name": "models.stg_gads_all_campaign_names"}, "test.sql_repository_bz.not_null_stg_gads_all_campaign_stats_sk_id.9aa3c18eae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_campaign_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_campaign_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "not_null_stg_gads_all_campaign_stats_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gads_all_campaign_stats_sk_id.9aa3c18eae", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gads_all_campaign_stats_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "not_null_stg_gads_all_campaign_stats_sk_id", "alias": "not_null_stg_gads_all_campaign_stats_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_campaign_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/not_null_stg_gads_all_campaign_stats_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.0022776, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaign_stats`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_campaign_stats"}, "test.sql_repository_bz.unique_stg_gads_all_campaign_stats_sk_id.bf47b9bd4b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_campaign_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_campaign_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "unique_stg_gads_all_campaign_stats_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_gads_all_campaign_stats_sk_id.bf47b9bd4b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gads_all_campaign_stats_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "unique_stg_gads_all_campaign_stats_sk_id", "alias": "unique_stg_gads_all_campaign_stats_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_campaign_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/unique_stg_gads_all_campaign_stats_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1663750851.0064046, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaign_stats`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_campaign_stats"}, "test.sql_repository_bz.not_null_stg_gads_all_campaigns_info_current_sk_id.bb43587aaf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_campaigns_info_current')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_campaigns_info_current"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "not_null_stg_gads_all_campaigns_info_current_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gads_all_campaigns_info_current_sk_id.bb43587aaf", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gads_all_campaigns_info_current_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "not_null_stg_gads_all_campaigns_info_current_sk_id", "alias": "not_null_stg_gads_all_campaigns_info_current_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_campaigns_info_current"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/not_null_stg_gads_all_campaigns_info_current_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.0092044, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaigns_info_current`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_campaigns_info_current"}, "test.sql_repository_bz.unique_stg_gads_all_campaigns_info_current_sk_id.46b2aeea38": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_campaigns_info_current')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_campaigns_info_current"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "unique_stg_gads_all_campaigns_info_current_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_gads_all_campaigns_info_current_sk_id.46b2aeea38", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gads_all_campaigns_info_current_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "unique_stg_gads_all_campaigns_info_current_sk_id", "alias": "unique_stg_gads_all_campaigns_info_current_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_campaigns_info_current"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/unique_stg_gads_all_campaigns_info_current_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1663750851.012808, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaigns_info_current`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_campaigns_info_current"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_campaigns_info_current_sk_id.94c525a35d": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_at_least_one_stg_gad_53b4b6b3dfa2a631b20711c1bbe26d1c\") }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_campaigns_info_current')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_campaigns_info_current"]}, "config": {"enabled": true, "alias": "dbt_utils_at_least_one_stg_gad_53b4b6b3dfa2a631b20711c1bbe26d1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "dbt_utils_at_least_one_stg_gads_all_campaigns_info_current_sk_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_campaigns_info_current_sk_id.94c525a35d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_gad_53b4b6b3dfa2a631b20711c1bbe26d1c.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "dbt_utils_at_least_one_stg_gads_all_campaigns_info_current_sk_id", "alias": "dbt_utils_at_least_one_stg_gad_53b4b6b3dfa2a631b20711c1bbe26d1c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_campaigns_info_current"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/dbt_utils_at_least_one_stg_gad_53b4b6b3dfa2a631b20711c1bbe26d1c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_at_least_one_stg_gad_53b4b6b3dfa2a631b20711c1bbe26d1c"}, "created_at": 1663750851.0157137, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(sk_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_campaigns_info_current`\n\n    having count(sk_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_campaigns_info_current"}, "test.sql_repository_bz.unique_stg_gads_all_crawled_ads_urls_sk_id.6b8361d78a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_crawled_ads_urls')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_crawled_ads_urls"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "unique_stg_gads_all_crawled_ads_urls_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_gads_all_crawled_ads_urls_sk_id.6b8361d78a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gads_all_crawled_ads_urls_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "unique_stg_gads_all_crawled_ads_urls_sk_id", "alias": "unique_stg_gads_all_crawled_ads_urls_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_crawled_ads_urls"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/unique_stg_gads_all_crawled_ads_urls_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1663750851.0240986, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_crawled_ads_urls`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_crawled_ads_urls"}, "test.sql_repository_bz.not_null_stg_gads_all_crawled_ads_urls_sk_id.4b227b9a82": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_crawled_ads_urls')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_crawled_ads_urls"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "not_null_stg_gads_all_crawled_ads_urls_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gads_all_crawled_ads_urls_sk_id.4b227b9a82", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gads_all_crawled_ads_urls_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "not_null_stg_gads_all_crawled_ads_urls_sk_id", "alias": "not_null_stg_gads_all_crawled_ads_urls_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_crawled_ads_urls"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/not_null_stg_gads_all_crawled_ads_urls_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.026955, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_crawled_ads_urls`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_crawled_ads_urls"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_crawled_ads_urls_sk_id.40242bb775": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_crawled_ads_urls')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_crawled_ads_urls"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "dbt_utils_at_least_one_stg_gads_all_crawled_ads_urls_sk_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_crawled_ads_urls_sk_id.40242bb775", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_gads_all_crawled_ads_urls_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "dbt_utils_at_least_one_stg_gads_all_crawled_ads_urls_sk_id", "alias": "dbt_utils_at_least_one_stg_gads_all_crawled_ads_urls_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_crawled_ads_urls"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/dbt_utils_at_least_one_stg_gads_all_crawled_ads_urls_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.0302346, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(sk_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_crawled_ads_urls`\n\n    having count(sk_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_crawled_ads_urls"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_in_set_stg_gads_all_crawled_ads_urls_status__429__500.e3333a724f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_not_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">15000\",alias=\"dbt_expectations_expect_column_798cd59644c90686d9ed31f717e97da3\") }}", "test_metadata": {"name": "expect_column_values_to_not_be_in_set", "kwargs": {"value_set": ["429", "500"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_gads_all_crawled_ads_urls')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_crawled_ads_urls"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_798cd59644c90686d9ed31f717e97da3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">15000", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "dbt_expectations_expect_column_values_to_not_be_in_set_stg_gads_all_crawled_ads_urls_status__429__500"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_in_set_stg_gads_all_crawled_ads_urls_status__429__500.e3333a724f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_798cd59644c90686d9ed31f717e97da3.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "dbt_expectations_expect_column_values_to_not_be_in_set_stg_gads_all_crawled_ads_urls_status__429__500", "alias": "dbt_expectations_expect_column_798cd59644c90686d9ed31f717e97da3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_crawled_ads_urls"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/dbt_expectations_expect_column_798cd59644c90686d9ed31f717e97da3.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">15000", "alias": "dbt_expectations_expect_column_798cd59644c90686d9ed31f717e97da3"}, "created_at": 1663750851.0383537, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        status as value_field\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_crawled_ads_urls`\n    \n\n),\nset_values as (\n\n    select\n        cast('429' as \n    string\n) as value_field\n    union all\n    select\n        cast('500' as \n    string\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status", "file_key_name": "models.stg_gads_all_crawled_ads_urls"}, "test.sql_repository_bz.not_null_stg_gads_all_crawled_ads_urls_status.f06717230b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "status", "model": "{{ get_where_subquery(ref('stg_gads_all_crawled_ads_urls')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_crawled_ads_urls"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "not_null_stg_gads_all_crawled_ads_urls_status"], "unique_id": "test.sql_repository_bz.not_null_stg_gads_all_crawled_ads_urls_status.f06717230b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gads_all_crawled_ads_urls_status.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "not_null_stg_gads_all_crawled_ads_urls_status", "alias": "not_null_stg_gads_all_crawled_ads_urls_status", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_crawled_ads_urls"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/not_null_stg_gads_all_crawled_ads_urls_status.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.053032, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_crawled_ads_urls`\nwhere status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status", "file_key_name": "models.stg_gads_all_crawled_ads_urls"}, "test.sql_repository_bz.unique_stg_gads_all_criteria_info_current_sk_id.f99a0510c0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_criteria_info_current')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "unique_stg_gads_all_criteria_info_current_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_gads_all_criteria_info_current_sk_id.f99a0510c0", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gads_all_criteria_info_current_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "unique_stg_gads_all_criteria_info_current_sk_id", "alias": "unique_stg_gads_all_criteria_info_current_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_criteria_info_current"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/unique_stg_gads_all_criteria_info_current_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1663750851.0565863, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_criteria_info_current`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_criteria_info_current"}, "test.sql_repository_bz.not_null_stg_gads_all_criteria_info_current_sk_id.fbc40009ae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_criteria_info_current')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "not_null_stg_gads_all_criteria_info_current_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gads_all_criteria_info_current_sk_id.fbc40009ae", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gads_all_criteria_info_current_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "not_null_stg_gads_all_criteria_info_current_sk_id", "alias": "not_null_stg_gads_all_criteria_info_current_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_criteria_info_current"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/not_null_stg_gads_all_criteria_info_current_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.0600855, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_criteria_info_current`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_criteria_info_current"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_criteria_info_current_sk_id.3b91bc6d12": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_criteria_info_current')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "dbt_utils_at_least_one_stg_gads_all_criteria_info_current_sk_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_criteria_info_current_sk_id.3b91bc6d12", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_gads_all_criteria_info_current_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "dbt_utils_at_least_one_stg_gads_all_criteria_info_current_sk_id", "alias": "dbt_utils_at_least_one_stg_gads_all_criteria_info_current_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_criteria_info_current"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/dbt_utils_at_least_one_stg_gads_all_criteria_info_current_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.0669527, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(sk_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_criteria_info_current`\n\n    having count(sk_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_criteria_info_current"}, "test.sql_repository_bz.not_null_stg_gads_all_product_stats_sk_id.1df63efcb7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_product_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_product_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "not_null_stg_gads_all_product_stats_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gads_all_product_stats_sk_id.1df63efcb7", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gads_all_product_stats_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "not_null_stg_gads_all_product_stats_sk_id", "alias": "not_null_stg_gads_all_product_stats_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_product_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/not_null_stg_gads_all_product_stats_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.0766542, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_product_stats`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_product_stats"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gads_all_product_stats_date__day__date_current_date___2022_03_01.81d8651d1b": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_ce3ae80bb9453a705c21a003149214a9\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date != current_date()", "test_start_date": "2022-03-01", "model": "{{ get_where_subquery(ref('stg_gads_all_product_stats')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_product_stats"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_ce3ae80bb9453a705c21a003149214a9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gads_all_product_stats_date__day__date_current_date___2022_03_01"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gads_all_product_stats_date__day__date_current_date___2022_03_01.81d8651d1b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_ce3ae80bb9453a705c21a003149214a9.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gads_all_product_stats_date__day__date_current_date___2022_03_01", "alias": "dbt_expectations_expect_row_va_ce3ae80bb9453a705c21a003149214a9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_product_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/dbt_expectations_expect_row_va_ce3ae80bb9453a705c21a003149214a9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_ce3ae80bb9453a705c21a003149214a9"}, "created_at": 1663750851.0795848, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 203\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-03-01' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_product_stats` f\n    \n    where date != current_date()\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_gads_all_product_stats"}, "test.sql_repository_bz.not_null_stg_gads_all_query_stats_sk_id.bc3fb6fd52": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gads_all_query_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gads_all_query_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_ads", "not_null_stg_gads_all_query_stats_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gads_all_query_stats_sk_id.bc3fb6fd52", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gads_all_query_stats_sk_id.sql", "original_file_path": "models/01_staging/google_ads/_models_stg_gads.yml", "name": "not_null_stg_gads_all_query_stats_sk_id", "alias": "not_null_stg_gads_all_query_stats_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gads_all_query_stats"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_ads/_models_stg_gads.yml/not_null_stg_gads_all_query_stats_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.097417, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gads_all_query_stats`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gads_all_query_stats"}, "test.sql_repository_bz.unique_stg_test_results_last_run_test_run_id.05d5976f68": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "test_run_id", "model": "{{ get_where_subquery(ref('stg_test_results_last_run')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_test_results_last_run"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "dbt_metadata", "unique_stg_test_results_last_run_test_run_id"], "unique_id": "test.sql_repository_bz.unique_stg_test_results_last_run_test_run_id.05d5976f68", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_test_results_last_run_test_run_id.sql", "original_file_path": "models/01_staging/dbt_metadata/_models_dbt_metadata.yml", "name": "unique_stg_test_results_last_run_test_run_id", "alias": "unique_stg_test_results_last_run_test_run_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_test_results_last_run"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/dbt_metadata/_models_dbt_metadata.yml/unique_stg_test_results_last_run_test_run_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.1109226, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select test_run_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_test_results_last_run`\n  where test_run_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "test_run_id", "file_key_name": "models.stg_test_results_last_run"}, "test.sql_repository_bz.not_null_stg_test_results_last_run_test_run_id.db432a0868": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "test_run_id", "model": "{{ get_where_subquery(ref('stg_test_results_last_run')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_test_results_last_run"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "dbt_metadata", "not_null_stg_test_results_last_run_test_run_id"], "unique_id": "test.sql_repository_bz.not_null_stg_test_results_last_run_test_run_id.db432a0868", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_test_results_last_run_test_run_id.sql", "original_file_path": "models/01_staging/dbt_metadata/_models_dbt_metadata.yml", "name": "not_null_stg_test_results_last_run_test_run_id", "alias": "not_null_stg_test_results_last_run_test_run_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_test_results_last_run"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/dbt_metadata/_models_dbt_metadata.yml/not_null_stg_test_results_last_run_test_run_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.1137118, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_test_results_last_run`\nwhere test_run_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "test_run_id", "file_key_name": "models.stg_test_results_last_run"}, "test.sql_repository_bz.unique_stg_test_results_historic_test_run_id.1c6e8316cb": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "test_run_id", "model": "{{ get_where_subquery(ref('stg_test_results_historic')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_test_results_historic"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "dbt_metadata", "unique_stg_test_results_historic_test_run_id"], "unique_id": "test.sql_repository_bz.unique_stg_test_results_historic_test_run_id.1c6e8316cb", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_test_results_historic_test_run_id.sql", "original_file_path": "models/01_staging/dbt_metadata/_models_dbt_metadata.yml", "name": "unique_stg_test_results_historic_test_run_id", "alias": "unique_stg_test_results_historic_test_run_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_test_results_historic"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/dbt_metadata/_models_dbt_metadata.yml/unique_stg_test_results_historic_test_run_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.1164176, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select test_run_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_test_results_historic`\n  where test_run_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "test_run_id", "file_key_name": "models.stg_test_results_historic"}, "test.sql_repository_bz.not_null_stg_test_results_historic_test_run_id.271cb7516f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "test_run_id", "model": "{{ get_where_subquery(ref('stg_test_results_historic')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_test_results_historic"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "dbt_metadata", "not_null_stg_test_results_historic_test_run_id"], "unique_id": "test.sql_repository_bz.not_null_stg_test_results_historic_test_run_id.271cb7516f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_test_results_historic_test_run_id.sql", "original_file_path": "models/01_staging/dbt_metadata/_models_dbt_metadata.yml", "name": "not_null_stg_test_results_historic_test_run_id", "alias": "not_null_stg_test_results_historic_test_run_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_test_results_historic"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/dbt_metadata/_models_dbt_metadata.yml/not_null_stg_test_results_historic_test_run_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.119579, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_test_results_historic`\nwhere test_run_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "test_run_id", "file_key_name": "models.stg_test_results_historic"}, "test.sql_repository_bz.not_null_stg_gsc_data_page.0c6cad32c4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "page", "model": "{{ get_where_subquery(ref('stg_gsc_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsc_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_search_console", "not_null_stg_gsc_data_page"], "unique_id": "test.sql_repository_bz.not_null_stg_gsc_data_page.0c6cad32c4", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gsc_data_page.sql", "original_file_path": "models/01_staging/google_search_console/_models_gsc.yml", "name": "not_null_stg_gsc_data_page", "alias": "not_null_stg_gsc_data_page", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsc_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_search_console/_models_gsc.yml/not_null_stg_gsc_data_page.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.1352177, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\nwhere page is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "page", "file_key_name": "models.stg_gsc_data"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_gsc_data_page.6a172b3849": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "page", "model": "{{ get_where_subquery(ref('stg_gsc_data')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsc_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_search_console", "dbt_utils_at_least_one_stg_gsc_data_page"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_gsc_data_page.6a172b3849", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_gsc_data_page.sql", "original_file_path": "models/01_staging/google_search_console/_models_gsc.yml", "name": "dbt_utils_at_least_one_stg_gsc_data_page", "alias": "dbt_utils_at_least_one_stg_gsc_data_page", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsc_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_search_console/_models_gsc.yml/dbt_utils_at_least_one_stg_gsc_data_page.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.138036, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(page) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\n\n    having count(page) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "page", "file_key_name": "models.stg_gsc_data"}, "test.sql_repository_bz.accepted_values_stg_gsc_data_search_type__web__image.212c9832ed": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["web", "image"], "column_name": "search_type", "model": "{{ get_where_subquery(ref('stg_gsc_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsc_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_search_console", "accepted_values_stg_gsc_data_search_type__web__image"], "unique_id": "test.sql_repository_bz.accepted_values_stg_gsc_data_search_type__web__image.212c9832ed", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "accepted_values_stg_gsc_data_search_type__web__image.sql", "original_file_path": "models/01_staging/google_search_console/_models_gsc.yml", "name": "accepted_values_stg_gsc_data_search_type__web__image", "alias": "accepted_values_stg_gsc_data_search_type__web__image", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsc_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_search_console/_models_gsc.yml/accepted_values_stg_gsc_data_search_type__web__image.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.1447885, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        search_type as value_field,\n        count(*) as n_records\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\n    group by search_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'web','image'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "search_type", "file_key_name": "models.stg_gsc_data"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_gsc_data_impressions__0.6dd8a7d2f2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_79e95484cec7fe39aade7bfb055a9d7a\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "column_name": "impressions", "model": "{{ get_where_subquery(ref('stg_gsc_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsc_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_79e95484cec7fe39aade7bfb055a9d7a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_search_console", "dbt_expectations_expect_column_values_to_be_between_stg_gsc_data_impressions__0"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_gsc_data_impressions__0.6dd8a7d2f2", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_79e95484cec7fe39aade7bfb055a9d7a.sql", "original_file_path": "models/01_staging/google_search_console/_models_gsc.yml", "name": "dbt_expectations_expect_column_values_to_be_between_stg_gsc_data_impressions__0", "alias": "dbt_expectations_expect_column_79e95484cec7fe39aade7bfb055a9d7a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsc_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_search_console/_models_gsc.yml/dbt_expectations_expect_column_79e95484cec7fe39aade7bfb055a9d7a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_79e95484cec7fe39aade7bfb055a9d7a"}, "created_at": 1663750851.1527665, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and impressions >= 0\n)\n as expression\n\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "impressions", "file_key_name": "models.stg_gsc_data"}, "test.sql_repository_bz.unique_stg_gsc_data_sk_id.202e6087b9": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gsc_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsc_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_search_console", "unique_stg_gsc_data_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_gsc_data_sk_id.202e6087b9", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gsc_data_sk_id.sql", "original_file_path": "models/01_staging/google_search_console/_models_gsc.yml", "name": "unique_stg_gsc_data_sk_id", "alias": "unique_stg_gsc_data_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsc_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_search_console/_models_gsc.yml/unique_stg_gsc_data_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1663750851.1715734, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gsc_data"}, "test.sql_repository_bz.not_null_stg_gsc_data_sk_id.bbf442b1a0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gsc_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsc_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_search_console", "not_null_stg_gsc_data_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gsc_data_sk_id.bbf442b1a0", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gsc_data_sk_id.sql", "original_file_path": "models/01_staging/google_search_console/_models_gsc.yml", "name": "not_null_stg_gsc_data_sk_id", "alias": "not_null_stg_gsc_data_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsc_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_search_console/_models_gsc.yml/not_null_stg_gsc_data_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.1744177, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gsc_data"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gsc_data_gsc_date__day__gsc_date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_4_day_.d86929e308": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_3fccf0ca650cd9c75e2e093824e0b5de\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "gsc_date", "date_part": "day", "row_condition": "gsc_date between date_sub(current_date(), interval 60 day) and date_sub(current_date(), interval 4 day)", "model": "{{ get_where_subquery(ref('stg_gsc_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsc_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_3fccf0ca650cd9c75e2e093824e0b5de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_search_console", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gsc_data_gsc_date__day__gsc_date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_4_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gsc_data_gsc_date__day__gsc_date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_4_day_.d86929e308", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_3fccf0ca650cd9c75e2e093824e0b5de.sql", "original_file_path": "models/01_staging/google_search_console/_models_gsc.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gsc_data_gsc_date__day__gsc_date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_4_day_", "alias": "dbt_expectations_expect_row_va_3fccf0ca650cd9c75e2e093824e0b5de", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsc_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_search_console/_models_gsc.yml/dbt_expectations_expect_row_va_3fccf0ca650cd9c75e2e093824e0b5de.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_3fccf0ca650cd9c75e2e093824e0b5de"}, "created_at": 1663750851.1771655, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 56\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-07-23' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-17' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(gsc_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data` f\n    \n    where gsc_date between date_sub(current_date(), interval 60 day) and date_sub(current_date(), interval 4 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_gsc_data"}, "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gsc_data_gsc_date__gsc_country__query__page__device__search_type__time_stamp__clicks__impressions__ctr__position__False__gsc_date_current_date_60.22759fc007": {"raw_sql": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_5d935f6166c3f1526c3911440e4ef1f1\") }}", "test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["gsc_date", "gsc_country", "query", "page", "device", "search_type", "time_stamp", "clicks", "impressions", "ctr", "position"], "quote_columns": false, "row_condition": "gsc_date > current_date()-60", "model": "{{ get_where_subquery(ref('stg_gsc_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsc_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_5d935f6166c3f1526c3911440e4ef1f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_search_console", "dbt_expectations_expect_compound_columns_to_be_unique_stg_gsc_data_gsc_date__gsc_country__query__page__device__search_type__time_stamp__clicks__impressions__ctr__position__False__gsc_date_current_date_60"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gsc_data_gsc_date__gsc_country__query__page__device__search_type__time_stamp__clicks__impressions__ctr__position__False__gsc_date_current_date_60.22759fc007", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_compou_5d935f6166c3f1526c3911440e4ef1f1.sql", "original_file_path": "models/01_staging/google_search_console/_models_gsc.yml", "name": "dbt_expectations_expect_compound_columns_to_be_unique_stg_gsc_data_gsc_date__gsc_country__query__page__device__search_type__time_stamp__clicks__impressions__ctr__position__False__gsc_date_current_date_60", "alias": "dbt_expectations_expect_compou_5d935f6166c3f1526c3911440e4ef1f1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsc_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_search_console/_models_gsc.yml/dbt_expectations_expect_compou_5d935f6166c3f1526c3911440e4ef1f1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_5d935f6166c3f1526c3911440e4ef1f1"}, "created_at": 1663750851.1867914, "compiled_sql": "\n\n\nwith validation_errors as (\n\n    select\n        gsc_date,gsc_country,query,page,device,search_type,time_stamp,clicks,impressions,ctr,position\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsc_data`\n    where\n        1=1\n        and \n    gsc_date > current_date()-60 and\n\n        (\n            gsc_date is not null and \n            gsc_country is not null and \n            query is not null and \n            page is not null and \n            device is not null and \n            search_type is not null and \n            time_stamp is not null and \n            clicks is not null and \n            impressions is not null and \n            ctr is not null and \n            position is not null\n            \n        )\n    \n    group by\n        gsc_date,gsc_country,query,page,device,search_type,time_stamp,clicks,impressions,ctr,position\n    having count(*) > 1\n\n)\nselect * from validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_gsc_data"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_attributes_daily_product_id.63ff91169b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_55a4e8a6542d9bc1aa4e0e7313409678\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_gmc_product_attributes_daily')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_55a4e8a6542d9bc1aa4e0e7313409678", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_column_to_exist_stg_gmc_product_attributes_daily_product_id"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_attributes_daily_product_id.63ff91169b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_55a4e8a6542d9bc1aa4e0e7313409678.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_column_to_exist_stg_gmc_product_attributes_daily_product_id", "alias": "dbt_expectations_expect_column_55a4e8a6542d9bc1aa4e0e7313409678", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_attributes_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_column_55a4e8a6542d9bc1aa4e0e7313409678.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_55a4e8a6542d9bc1aa4e0e7313409678"}, "created_at": 1663750851.287819, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PRODUCT_ID' as \n    string\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "product_id", "file_key_name": "models.stg_gmc_product_attributes_daily"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_attributes_daily_product_id.178c7163e6": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_at_least_one_stg_gmc_9ad477b525db22d004bbb6caa2ffa4ad\") }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_gmc_product_attributes_daily')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": "dbt_utils_at_least_one_stg_gmc_9ad477b525db22d004bbb6caa2ffa4ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_utils_at_least_one_stg_gmc_product_attributes_daily_product_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_attributes_daily_product_id.178c7163e6", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_gmc_9ad477b525db22d004bbb6caa2ffa4ad.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_utils_at_least_one_stg_gmc_product_attributes_daily_product_id", "alias": "dbt_utils_at_least_one_stg_gmc_9ad477b525db22d004bbb6caa2ffa4ad", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_attributes_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_utils_at_least_one_stg_gmc_9ad477b525db22d004bbb6caa2ffa4ad.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_at_least_one_stg_gmc_9ad477b525db22d004bbb6caa2ffa4ad"}, "created_at": 1663750851.3023014, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(product_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\n\n    having count(product_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "product_id", "file_key_name": "models.stg_gmc_product_attributes_daily"}, "test.sql_repository_bz.not_null_stg_gmc_product_attributes_daily_product_id.deeed4d82d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_gmc_product_attributes_daily')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_gmc_product_attributes_daily_product_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gmc_product_attributes_daily_product_id.deeed4d82d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gmc_product_attributes_daily_product_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_gmc_product_attributes_daily_product_id", "alias": "not_null_stg_gmc_product_attributes_daily_product_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_attributes_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_gmc_product_attributes_daily_product_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.3095932, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "product_id", "file_key_name": "models.stg_gmc_product_attributes_daily"}, "test.sql_repository_bz.unique_stg_gmc_product_attributes_daily_sk_id.e0693e88d3": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gmc_product_attributes_daily')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "unique_stg_gmc_product_attributes_daily_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_gmc_product_attributes_daily_sk_id.e0693e88d3", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gmc_product_attributes_daily_sk_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "unique_stg_gmc_product_attributes_daily_sk_id", "alias": "unique_stg_gmc_product_attributes_daily_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_attributes_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/unique_stg_gmc_product_attributes_daily_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.3124435, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gmc_product_attributes_daily"}, "test.sql_repository_bz.not_null_stg_gmc_product_attributes_daily_sk_id.28d02641a8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gmc_product_attributes_daily')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_gmc_product_attributes_daily_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gmc_product_attributes_daily_sk_id.28d02641a8", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gmc_product_attributes_daily_sk_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_gmc_product_attributes_daily_sk_id", "alias": "not_null_stg_gmc_product_attributes_daily_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_attributes_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_gmc_product_attributes_daily_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.3152702, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gmc_product_attributes_daily"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_product_attributes_daily_date__day__2022_08_19.50cabb8518": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_733717185c89b8c731693451fdd47d97\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "test_start_date": "2022-08-19", "model": "{{ get_where_subquery(ref('stg_gmc_product_attributes_daily')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_733717185c89b8c731693451fdd47d97", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_product_attributes_daily_date__day__2022_08_19"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_product_attributes_daily_date__day__2022_08_19.50cabb8518", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_733717185c89b8c731693451fdd47d97.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_product_attributes_daily_date__day__2022_08_19", "alias": "dbt_expectations_expect_row_va_733717185c89b8c731693451fdd47d97", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_attributes_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_row_va_733717185c89b8c731693451fdd47d97.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_733717185c89b8c731693451fdd47d97"}, "created_at": 1663750851.3179576, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 33\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-08-19' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-21' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily` f\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_gmc_product_attributes_daily"}, "test.sql_repository_bz.max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_product_attributes_daily_50__date.d225ea8e3f": {"raw_sql": "{{ test_max_row_count_change_from_yesterday_to_today_in_percent(**_dbt_generic_test_kwargs) }}{{ config(alias=\"max_row_count_change_from_yest_77cfff62552c6060e0df3668b49aabd2\") }}", "test_metadata": {"name": "max_row_count_change_from_yesterday_to_today_in_percent", "kwargs": {"date_col": "date", "change_threshold_in_percent": 50, "model": "{{ get_where_subquery(ref('stg_gmc_product_attributes_daily')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.sql_repository_bz.test_max_row_count_change_from_yesterday_to_today_in_percent", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": "max_row_count_change_from_yest_77cfff62552c6060e0df3668b49aabd2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_product_attributes_daily_50__date"], "unique_id": "test.sql_repository_bz.max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_product_attributes_daily_50__date.d225ea8e3f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "max_row_count_change_from_yest_77cfff62552c6060e0df3668b49aabd2.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_product_attributes_daily_50__date", "alias": "max_row_count_change_from_yest_77cfff62552c6060e0df3668b49aabd2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_attributes_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/max_row_count_change_from_yest_77cfff62552c6060e0df3668b49aabd2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "max_row_count_change_from_yest_77cfff62552c6060e0df3668b49aabd2"}, "created_at": 1663750851.3276153, "compiled_sql": "\n \nwith data_today as (\n \n   select\n        'key' as key,\n        count(*) as row_count_today\n   from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\n   where date = date_sub(current_date(), interval 0 day)\n   group by 1\n \n),\n\ndata_yesterday as (\n \n   select\n        'key' as key,\n        count(*) as row_count_yesterday\n   from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\n   where date = date_sub(current_date(), interval 1 day)\n   group by 1\n \n),\n\ndate_values_joined_and_compared as (\n\n   /* Calculate the relative difference from previous day to yesterday */\n   /* Example: (2500 - 1500) / 1500 = 500 / 1500 = 0.33 */\n   select \n      abs(row_count_today - row_count_yesterday)/ row_count_yesterday * 100 as relative_difference_in_percent\n   from data_today\n   left join data_yesterday using (key)\n   \n),\n\n\nvalidation_error as (\n \n   select *\n   from date_values_joined_and_compared\n   /* if the observed difference is greater than the threshold, the query returns one row */\n   where relative_difference_in_percent > 50\n \n)\n \nselect * from validation_error\n \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_gmc_product_attributes_daily"}, "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_product_attributes_daily_date__product_id__any_value_is_missing__False__date_current_date_1.c4d572905f": {"raw_sql": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_0bec2e80b0f85b5d6d486bcde6b904fb\") }}", "test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["date", "product_id"], "ignore_row_if": "any_value_is_missing", "quote_columns": false, "row_condition": "date = current_date()-1", "model": "{{ get_where_subquery(ref('stg_gmc_product_attributes_daily')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_0bec2e80b0f85b5d6d486bcde6b904fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_product_attributes_daily_date__product_id__any_value_is_missing__False__date_current_date_1"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_product_attributes_daily_date__product_id__any_value_is_missing__False__date_current_date_1.c4d572905f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_compou_0bec2e80b0f85b5d6d486bcde6b904fb.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_product_attributes_daily_date__product_id__any_value_is_missing__False__date_current_date_1", "alias": "dbt_expectations_expect_compou_0bec2e80b0f85b5d6d486bcde6b904fb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_attributes_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_compou_0bec2e80b0f85b5d6d486bcde6b904fb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_0bec2e80b0f85b5d6d486bcde6b904fb"}, "created_at": 1663750851.3380468, "compiled_sql": "\n\n\nwith validation_errors as (\n\n    select\n        date,product_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_attributes_daily`\n    where\n        1=1\n        and \n    date = current_date()-1 and\n\n        (\n            date is not null or \n            product_id is not null\n            \n        )\n    \n    group by\n        date,product_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_gmc_product_attributes_daily"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_channel_pilot_profit_bidding_90d_product_id.27bcb103e9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1177eaaeb9c12c02b45450451823b39c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_channel_pilot_profit_bidding_90d')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1177eaaeb9c12c02b45450451823b39c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_column_to_exist_stg_channel_pilot_profit_bidding_90d_product_id"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_channel_pilot_profit_bidding_90d_product_id.27bcb103e9", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_1177eaaeb9c12c02b45450451823b39c.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_column_to_exist_stg_channel_pilot_profit_bidding_90d_product_id", "alias": "dbt_expectations_expect_column_1177eaaeb9c12c02b45450451823b39c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_profit_bidding_90d"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_column_1177eaaeb9c12c02b45450451823b39c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1177eaaeb9c12c02b45450451823b39c"}, "created_at": 1663750851.3479502, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PRODUCT_ID' as \n    string\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "product_id", "file_key_name": "models.stg_channel_pilot_profit_bidding_90d"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_channel_pilot_profit_bidding_90d_product_id.e693c05e3a": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_at_least_one_stg_cha_362ba86692d619cd0c3b718b9fcec7dd\") }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_channel_pilot_profit_bidding_90d')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"]}, "config": {"enabled": true, "alias": "dbt_utils_at_least_one_stg_cha_362ba86692d619cd0c3b718b9fcec7dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_utils_at_least_one_stg_channel_pilot_profit_bidding_90d_product_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_channel_pilot_profit_bidding_90d_product_id.e693c05e3a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_cha_362ba86692d619cd0c3b718b9fcec7dd.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_utils_at_least_one_stg_channel_pilot_profit_bidding_90d_product_id", "alias": "dbt_utils_at_least_one_stg_cha_362ba86692d619cd0c3b718b9fcec7dd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_profit_bidding_90d"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_utils_at_least_one_stg_cha_362ba86692d619cd0c3b718b9fcec7dd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_at_least_one_stg_cha_362ba86692d619cd0c3b718b9fcec7dd"}, "created_at": 1663750851.3552399, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(product_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_profit_bidding_90d`\n\n    having count(product_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "product_id", "file_key_name": "models.stg_channel_pilot_profit_bidding_90d"}, "test.sql_repository_bz.not_null_stg_channel_pilot_profit_bidding_90d_product_id.5e32943a74": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_channel_pilot_profit_bidding_90d')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_channel_pilot_profit_bidding_90d_product_id"], "unique_id": "test.sql_repository_bz.not_null_stg_channel_pilot_profit_bidding_90d_product_id.5e32943a74", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_channel_pilot_profit_bidding_90d_product_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_channel_pilot_profit_bidding_90d_product_id", "alias": "not_null_stg_channel_pilot_profit_bidding_90d_product_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_profit_bidding_90d"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_channel_pilot_profit_bidding_90d_product_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.3617003, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_profit_bidding_90d`\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "product_id", "file_key_name": "models.stg_channel_pilot_profit_bidding_90d"}, "test.sql_repository_bz.unique_stg_channel_pilot_profit_bidding_90d_sk_id.995d943cbe": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_channel_pilot_profit_bidding_90d')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "unique_stg_channel_pilot_profit_bidding_90d_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_channel_pilot_profit_bidding_90d_sk_id.995d943cbe", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_channel_pilot_profit_bidding_90d_sk_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "unique_stg_channel_pilot_profit_bidding_90d_sk_id", "alias": "unique_stg_channel_pilot_profit_bidding_90d_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_profit_bidding_90d"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/unique_stg_channel_pilot_profit_bidding_90d_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.3657641, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_profit_bidding_90d`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_channel_pilot_profit_bidding_90d"}, "test.sql_repository_bz.not_null_stg_channel_pilot_profit_bidding_90d_sk_id.265b2eb3d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_channel_pilot_profit_bidding_90d')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_channel_pilot_profit_bidding_90d_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_channel_pilot_profit_bidding_90d_sk_id.265b2eb3d7", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_channel_pilot_profit_bidding_90d_sk_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_channel_pilot_profit_bidding_90d_sk_id", "alias": "not_null_stg_channel_pilot_profit_bidding_90d_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_profit_bidding_90d"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_channel_pilot_profit_bidding_90d_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.368438, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_profit_bidding_90d`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_channel_pilot_profit_bidding_90d"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_channel_pilot_profit_bidding_90d_date__day__2022_08_19.60031b7aac": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0c8815fccc82c7b86642bada60ef550b\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "test_start_date": "2022-08-19", "model": "{{ get_where_subquery(ref('stg_channel_pilot_profit_bidding_90d')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0c8815fccc82c7b86642bada60ef550b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_channel_pilot_profit_bidding_90d_date__day__2022_08_19"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_channel_pilot_profit_bidding_90d_date__day__2022_08_19.60031b7aac", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_0c8815fccc82c7b86642bada60ef550b.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_channel_pilot_profit_bidding_90d_date__day__2022_08_19", "alias": "dbt_expectations_expect_row_va_0c8815fccc82c7b86642bada60ef550b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_profit_bidding_90d"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_row_va_0c8815fccc82c7b86642bada60ef550b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_0c8815fccc82c7b86642bada60ef550b"}, "created_at": 1663750851.3711195, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 32\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-08-19' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_profit_bidding_90d` f\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_channel_pilot_profit_bidding_90d"}, "test.sql_repository_bz.unique_stg_gmc_all_products_sk_id.1d7ee0d57d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gmc_all_products')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "unique_stg_gmc_all_products_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_gmc_all_products_sk_id.1d7ee0d57d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gmc_all_products_sk_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "unique_stg_gmc_all_products_sk_id", "alias": "unique_stg_gmc_all_products_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/unique_stg_gmc_all_products_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.3803468, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gmc_all_products"}, "test.sql_repository_bz.not_null_stg_gmc_all_products_sk_id.0ea44e4472": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gmc_all_products')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_gmc_all_products_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gmc_all_products_sk_id.0ea44e4472", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gmc_all_products_sk_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_gmc_all_products_sk_id", "alias": "not_null_stg_gmc_all_products_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_gmc_all_products_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.3833282, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gmc_all_products"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_p_date.59bfafd202": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_30774e076b8f1102a254a43f38426ca5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "p_date", "model": "{{ get_where_subquery(ref('stg_gmc_all_products')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_30774e076b8f1102a254a43f38426ca5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_column_to_exist_stg_gmc_all_products_p_date"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_p_date.59bfafd202", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_30774e076b8f1102a254a43f38426ca5.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_column_to_exist_stg_gmc_all_products_p_date", "alias": "dbt_expectations_expect_column_30774e076b8f1102a254a43f38426ca5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_column_30774e076b8f1102a254a43f38426ca5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_30774e076b8f1102a254a43f38426ca5"}, "created_at": 1663750851.3864596, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('P_DATE' as \n    string\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "p_date", "file_key_name": "models.stg_gmc_all_products"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_all_products_p_date.63890ebb46": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "p_date", "model": "{{ get_where_subquery(ref('stg_gmc_all_products')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_utils_at_least_one_stg_gmc_all_products_p_date"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_all_products_p_date.63890ebb46", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_gmc_all_products_p_date.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_utils_at_least_one_stg_gmc_all_products_p_date", "alias": "dbt_utils_at_least_one_stg_gmc_all_products_p_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_utils_at_least_one_stg_gmc_all_products_p_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.3973525, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(p_date) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n\n    having count(p_date) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "p_date", "file_key_name": "models.stg_gmc_all_products"}, "test.sql_repository_bz.not_null_stg_gmc_all_products_p_date.7cca799e9b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "p_date", "model": "{{ get_where_subquery(ref('stg_gmc_all_products')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_gmc_all_products_p_date"], "unique_id": "test.sql_repository_bz.not_null_stg_gmc_all_products_p_date.7cca799e9b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gmc_all_products_p_date.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_gmc_all_products_p_date", "alias": "not_null_stg_gmc_all_products_p_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_gmc_all_products_p_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.4042306, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\nwhere p_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "p_date", "file_key_name": "models.stg_gmc_all_products"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_offer_id.f963ef99ea": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_29cc71302bb50b115b8706d9734a2444\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "offer_id", "model": "{{ get_where_subquery(ref('stg_gmc_all_products')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_29cc71302bb50b115b8706d9734a2444", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_column_to_exist_stg_gmc_all_products_offer_id"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_offer_id.f963ef99ea", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_29cc71302bb50b115b8706d9734a2444.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_column_to_exist_stg_gmc_all_products_offer_id", "alias": "dbt_expectations_expect_column_29cc71302bb50b115b8706d9734a2444", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_column_29cc71302bb50b115b8706d9734a2444.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_29cc71302bb50b115b8706d9734a2444"}, "created_at": 1663750851.407035, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('OFFER_ID' as \n    string\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "offer_id", "file_key_name": "models.stg_gmc_all_products"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_all_products_offer_id.3f83de7e64": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "offer_id", "model": "{{ get_where_subquery(ref('stg_gmc_all_products')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_utils_at_least_one_stg_gmc_all_products_offer_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_all_products_offer_id.3f83de7e64", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_gmc_all_products_offer_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_utils_at_least_one_stg_gmc_all_products_offer_id", "alias": "dbt_utils_at_least_one_stg_gmc_all_products_offer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_utils_at_least_one_stg_gmc_all_products_offer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.4141245, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(offer_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n\n    having count(offer_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "offer_id", "file_key_name": "models.stg_gmc_all_products"}, "test.sql_repository_bz.not_null_stg_gmc_all_products_offer_id.9de99eaf8b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "offer_id", "model": "{{ get_where_subquery(ref('stg_gmc_all_products')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_gmc_all_products_offer_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gmc_all_products_offer_id.9de99eaf8b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gmc_all_products_offer_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_gmc_all_products_offer_id", "alias": "not_null_stg_gmc_all_products_offer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_gmc_all_products_offer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.4204252, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\nwhere offer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "offer_id", "file_key_name": "models.stg_gmc_all_products"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_top_category.443c1ce984": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e7b521cf69c4954666ce39fe77fd8acf\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "top_category", "model": "{{ get_where_subquery(ref('stg_gmc_all_products')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e7b521cf69c4954666ce39fe77fd8acf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_column_to_exist_stg_gmc_all_products_top_category"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_top_category.443c1ce984", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_e7b521cf69c4954666ce39fe77fd8acf.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_column_to_exist_stg_gmc_all_products_top_category", "alias": "dbt_expectations_expect_column_e7b521cf69c4954666ce39fe77fd8acf", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_column_e7b521cf69c4954666ce39fe77fd8acf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e7b521cf69c4954666ce39fe77fd8acf"}, "created_at": 1663750851.423573, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TOP_CATEGORY' as \n    string\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "top_category", "file_key_name": "models.stg_gmc_all_products"}, "test.sql_repository_bz.not_null_stg_gmc_all_products_top_category.f00aad3a5c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "top_category", "model": "{{ get_where_subquery(ref('stg_gmc_all_products')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_gmc_all_products_top_category"], "unique_id": "test.sql_repository_bz.not_null_stg_gmc_all_products_top_category.f00aad3a5c", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gmc_all_products_top_category.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_gmc_all_products_top_category", "alias": "not_null_stg_gmc_all_products_top_category", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_gmc_all_products_top_category.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.4302912, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\nwhere top_category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "top_category", "file_key_name": "models.stg_gmc_all_products"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_all_products_p_date__day__p_date_current_date_180.5c5e20286a": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_674db13af537dbc168513d2ed93e3b0a\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "p_date", "date_part": "day", "row_condition": "p_date >= current_date()-180", "model": "{{ get_where_subquery(ref('stg_gmc_all_products')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_674db13af537dbc168513d2ed93e3b0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_all_products_p_date__day__p_date_current_date_180"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_all_products_p_date__day__p_date_current_date_180.5c5e20286a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_674db13af537dbc168513d2ed93e3b0a.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_all_products_p_date__day__p_date_current_date_180", "alias": "dbt_expectations_expect_row_va_674db13af537dbc168513d2ed93e3b0a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_row_va_674db13af537dbc168513d2ed93e3b0a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_674db13af537dbc168513d2ed93e3b0a"}, "created_at": 1663750851.4334304, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 180\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-03-25' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-21' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(p_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products` f\n    \n    where p_date >= current_date()-180\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_gmc_all_products"}, "test.sql_repository_bz.max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_all_products_50__p_date.6cab71d571": {"raw_sql": "{{ test_max_row_count_change_from_yesterday_to_today_in_percent(**_dbt_generic_test_kwargs) }}{{ config(alias=\"max_row_count_change_from_yest_2905b86244347c9cb297882ca50e981a\") }}", "test_metadata": {"name": "max_row_count_change_from_yesterday_to_today_in_percent", "kwargs": {"date_col": "p_date", "change_threshold_in_percent": 50, "model": "{{ get_where_subquery(ref('stg_gmc_all_products')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.sql_repository_bz.test_max_row_count_change_from_yesterday_to_today_in_percent", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": "max_row_count_change_from_yest_2905b86244347c9cb297882ca50e981a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_all_products_50__p_date"], "unique_id": "test.sql_repository_bz.max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_all_products_50__p_date.6cab71d571", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "max_row_count_change_from_yest_2905b86244347c9cb297882ca50e981a.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_all_products_50__p_date", "alias": "max_row_count_change_from_yest_2905b86244347c9cb297882ca50e981a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/max_row_count_change_from_yest_2905b86244347c9cb297882ca50e981a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "max_row_count_change_from_yest_2905b86244347c9cb297882ca50e981a"}, "created_at": 1663750851.4428296, "compiled_sql": "\n \nwith data_today as (\n \n   select\n        'key' as key,\n        count(*) as row_count_today\n   from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n   where p_date = date_sub(current_date(), interval 0 day)\n   group by 1\n \n),\n\ndata_yesterday as (\n \n   select\n        'key' as key,\n        count(*) as row_count_yesterday\n   from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n   where p_date = date_sub(current_date(), interval 1 day)\n   group by 1\n \n),\n\ndate_values_joined_and_compared as (\n\n   /* Calculate the relative difference from previous day to yesterday */\n   /* Example: (2500 - 1500) / 1500 = 500 / 1500 = 0.33 */\n   select \n      abs(row_count_today - row_count_yesterday)/ row_count_yesterday * 100 as relative_difference_in_percent\n   from data_today\n   left join data_yesterday using (key)\n   \n),\n\n\nvalidation_error as (\n \n   select *\n   from date_values_joined_and_compared\n   /* if the observed difference is greater than the threshold, the query returns one row */\n   where relative_difference_in_percent > 50\n \n)\n \nselect * from validation_error\n \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_gmc_all_products"}, "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_all_products_p_date__offer_id__all_values_are_missing__False__products_country_de_and_p_date_2022_04_09_.5a02919780": {"raw_sql": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_9fdf7de9d1aa41197e35b91d82a9341c\") }}", "test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["p_date", "offer_id"], "ignore_row_if": "all_values_are_missing", "quote_columns": false, "row_condition": "products_country = 'de' and p_date > '2022-04-09'", "model": "{{ get_where_subquery(ref('stg_gmc_all_products')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_all_products"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_9fdf7de9d1aa41197e35b91d82a9341c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_all_products_p_date__offer_id__all_values_are_missing__False__products_country_de_and_p_date_2022_04_09_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_all_products_p_date__offer_id__all_values_are_missing__False__products_country_de_and_p_date_2022_04_09_.5a02919780", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_compou_9fdf7de9d1aa41197e35b91d82a9341c.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_all_products_p_date__offer_id__all_values_are_missing__False__products_country_de_and_p_date_2022_04_09_", "alias": "dbt_expectations_expect_compou_9fdf7de9d1aa41197e35b91d82a9341c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_all_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_compou_9fdf7de9d1aa41197e35b91d82a9341c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_9fdf7de9d1aa41197e35b91d82a9341c"}, "created_at": 1663750851.4501538, "compiled_sql": "\n\n\nwith validation_errors as (\n\n    select\n        p_date,offer_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_all_products`\n    where\n        1=1\n        and \n    products_country = 'de' and p_date > '2022-04-09' and\n\n        (\n            p_date is not null and \n            offer_id is not null\n            \n        )\n    \n    group by\n        p_date,offer_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_gmc_all_products"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_issues_offer_id.65f05265df": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4aaa080db592195d78121de107bd03dd\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "offer_id", "model": "{{ get_where_subquery(ref('stg_gmc_product_issues')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_issues"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4aaa080db592195d78121de107bd03dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_column_to_exist_stg_gmc_product_issues_offer_id"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_issues_offer_id.65f05265df", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_4aaa080db592195d78121de107bd03dd.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_column_to_exist_stg_gmc_product_issues_offer_id", "alias": "dbt_expectations_expect_column_4aaa080db592195d78121de107bd03dd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_issues"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_column_4aaa080db592195d78121de107bd03dd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4aaa080db592195d78121de107bd03dd"}, "created_at": 1663750851.459998, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('OFFER_ID' as \n    string\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "offer_id", "file_key_name": "models.stg_gmc_product_issues"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_issues_offer_id.1e69f3a871": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "offer_id", "model": "{{ get_where_subquery(ref('stg_gmc_product_issues')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_issues"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_utils_at_least_one_stg_gmc_product_issues_offer_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_issues_offer_id.1e69f3a871", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_gmc_product_issues_offer_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_utils_at_least_one_stg_gmc_product_issues_offer_id", "alias": "dbt_utils_at_least_one_stg_gmc_product_issues_offer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_issues"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_utils_at_least_one_stg_gmc_product_issues_offer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.4670057, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(offer_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_issues`\n\n    having count(offer_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "offer_id", "file_key_name": "models.stg_gmc_product_issues"}, "test.sql_repository_bz.not_null_stg_gmc_product_issues_offer_id.ea3a032de0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "offer_id", "model": "{{ get_where_subquery(ref('stg_gmc_product_issues')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_issues"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_gmc_product_issues_offer_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gmc_product_issues_offer_id.ea3a032de0", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gmc_product_issues_offer_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_gmc_product_issues_offer_id", "alias": "not_null_stg_gmc_product_issues_offer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_issues"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_gmc_product_issues_offer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.4736779, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_issues`\nwhere offer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "offer_id", "file_key_name": "models.stg_gmc_product_issues"}, "test.sql_repository_bz.unique_stg_qlik_return_rates_sk_id.c01170b5d2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_qlik_return_rates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_qlik_return_rates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "unique_stg_qlik_return_rates_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_qlik_return_rates_sk_id.c01170b5d2", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_qlik_return_rates_sk_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "unique_stg_qlik_return_rates_sk_id", "alias": "unique_stg_qlik_return_rates_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_qlik_return_rates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/unique_stg_qlik_return_rates_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.4764335, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_qlik_return_rates`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_qlik_return_rates"}, "test.sql_repository_bz.not_null_stg_qlik_return_rates_sk_id.e224007779": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_qlik_return_rates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_qlik_return_rates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_qlik_return_rates_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_qlik_return_rates_sk_id.e224007779", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_qlik_return_rates_sk_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_qlik_return_rates_sk_id", "alias": "not_null_stg_qlik_return_rates_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_qlik_return_rates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_qlik_return_rates_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.479301, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_qlik_return_rates`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_qlik_return_rates"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_qlik_return_rates_brand.9f3e8adba5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a4c88539f8ccdc90ac2611f0cb805a2e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "brand", "model": "{{ get_where_subquery(ref('stg_qlik_return_rates')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_qlik_return_rates"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a4c88539f8ccdc90ac2611f0cb805a2e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_column_to_exist_stg_qlik_return_rates_brand"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_qlik_return_rates_brand.9f3e8adba5", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_a4c88539f8ccdc90ac2611f0cb805a2e.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_column_to_exist_stg_qlik_return_rates_brand", "alias": "dbt_expectations_expect_column_a4c88539f8ccdc90ac2611f0cb805a2e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_qlik_return_rates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_column_a4c88539f8ccdc90ac2611f0cb805a2e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a4c88539f8ccdc90ac2611f0cb805a2e"}, "created_at": 1663750851.4821374, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BRAND' as \n    string\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "brand", "file_key_name": "models.stg_qlik_return_rates"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_qlik_return_rates_brand.a1363e28e5": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "brand", "model": "{{ get_where_subquery(ref('stg_qlik_return_rates')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_qlik_return_rates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_utils_at_least_one_stg_qlik_return_rates_brand"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_qlik_return_rates_brand.a1363e28e5", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_qlik_return_rates_brand.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_utils_at_least_one_stg_qlik_return_rates_brand", "alias": "dbt_utils_at_least_one_stg_qlik_return_rates_brand", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_qlik_return_rates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_utils_at_least_one_stg_qlik_return_rates_brand.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.4897892, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(brand) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_qlik_return_rates`\n\n    having count(brand) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "brand", "file_key_name": "models.stg_qlik_return_rates"}, "test.sql_repository_bz.not_null_stg_qlik_return_rates_brand.0e6dc5c9d5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "brand", "model": "{{ get_where_subquery(ref('stg_qlik_return_rates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_qlik_return_rates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_qlik_return_rates_brand"], "unique_id": "test.sql_repository_bz.not_null_stg_qlik_return_rates_brand.0e6dc5c9d5", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_qlik_return_rates_brand.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_qlik_return_rates_brand", "alias": "not_null_stg_qlik_return_rates_brand", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_qlik_return_rates"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_qlik_return_rates_brand.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.4982657, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_qlik_return_rates`\nwhere brand is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "brand", "file_key_name": "models.stg_qlik_return_rates"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_stock_stock_product_id.ef77ca4d90": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_938792b5b21d4fc138498545ffd4359b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "stock_product_id", "model": "{{ get_where_subquery(ref('stg_gmc_product_stock')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_stock"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_938792b5b21d4fc138498545ffd4359b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_column_to_exist_stg_gmc_product_stock_stock_product_id"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_stock_stock_product_id.ef77ca4d90", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_938792b5b21d4fc138498545ffd4359b.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_column_to_exist_stg_gmc_product_stock_stock_product_id", "alias": "dbt_expectations_expect_column_938792b5b21d4fc138498545ffd4359b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_stock"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_column_938792b5b21d4fc138498545ffd4359b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_938792b5b21d4fc138498545ffd4359b"}, "created_at": 1663750851.501108, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('STOCK_PRODUCT_ID' as \n    string\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stock_product_id", "file_key_name": "models.stg_gmc_product_stock"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_stock_stock_product_id.6ef41bbbc2": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "stock_product_id", "model": "{{ get_where_subquery(ref('stg_gmc_product_stock')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_stock"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_utils_at_least_one_stg_gmc_product_stock_stock_product_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_stock_stock_product_id.6ef41bbbc2", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_gmc_product_stock_stock_product_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_utils_at_least_one_stg_gmc_product_stock_stock_product_id", "alias": "dbt_utils_at_least_one_stg_gmc_product_stock_stock_product_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_stock"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_utils_at_least_one_stg_gmc_product_stock_stock_product_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.508472, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(stock_product_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_stock`\n\n    having count(stock_product_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stock_product_id", "file_key_name": "models.stg_gmc_product_stock"}, "test.sql_repository_bz.not_null_stg_gmc_product_stock_stock_product_id.28086e6f00": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "stock_product_id", "model": "{{ get_where_subquery(ref('stg_gmc_product_stock')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_stock"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_gmc_product_stock_stock_product_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gmc_product_stock_stock_product_id.28086e6f00", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gmc_product_stock_stock_product_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_gmc_product_stock_stock_product_id", "alias": "not_null_stg_gmc_product_stock_stock_product_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_stock"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_gmc_product_stock_stock_product_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.5147078, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_stock`\nwhere stock_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "stock_product_id", "file_key_name": "models.stg_gmc_product_stock"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_brands_brand.524479c5dc": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_55386c298390d80a3e0aa866c9918a59\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "brand", "model": "{{ get_where_subquery(ref('stg_gmc_product_brands')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_brands"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_55386c298390d80a3e0aa866c9918a59", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_expectations_expect_column_to_exist_stg_gmc_product_brands_brand"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_brands_brand.524479c5dc", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_55386c298390d80a3e0aa866c9918a59.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_expectations_expect_column_to_exist_stg_gmc_product_brands_brand", "alias": "dbt_expectations_expect_column_55386c298390d80a3e0aa866c9918a59", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_brands"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_expectations_expect_column_55386c298390d80a3e0aa866c9918a59.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_55386c298390d80a3e0aa866c9918a59"}, "created_at": 1663750851.5175536, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BRAND' as \n    string\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "brand", "file_key_name": "models.stg_gmc_product_brands"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_brands_brand.20946638eb": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "brand", "model": "{{ get_where_subquery(ref('stg_gmc_product_brands')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_brands"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "dbt_utils_at_least_one_stg_gmc_product_brands_brand"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_brands_brand.20946638eb", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_gmc_product_brands_brand.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "dbt_utils_at_least_one_stg_gmc_product_brands_brand", "alias": "dbt_utils_at_least_one_stg_gmc_product_brands_brand", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_brands"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/dbt_utils_at_least_one_stg_gmc_product_brands_brand.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.5246, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(brand) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_brands`\n\n    having count(brand) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "brand", "file_key_name": "models.stg_gmc_product_brands"}, "test.sql_repository_bz.not_null_stg_gmc_product_brands_brand.ab3c6ef00c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "brand", "model": "{{ get_where_subquery(ref('stg_gmc_product_brands')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_brands"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_gmc_product_brands_brand"], "unique_id": "test.sql_repository_bz.not_null_stg_gmc_product_brands_brand.ab3c6ef00c", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gmc_product_brands_brand.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_gmc_product_brands_brand", "alias": "not_null_stg_gmc_product_brands_brand", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_brands"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_gmc_product_brands_brand.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.5311823, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_brands`\nwhere brand is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "brand", "file_key_name": "models.stg_gmc_product_brands"}, "test.sql_repository_bz.unique_stg_gmc_product_brands_brand.2cd4635233": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "brand", "model": "{{ get_where_subquery(ref('stg_gmc_product_brands')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_product_brands"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "unique_stg_gmc_product_brands_brand"], "unique_id": "test.sql_repository_bz.unique_stg_gmc_product_brands_brand.2cd4635233", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gmc_product_brands_brand.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "unique_stg_gmc_product_brands_brand", "alias": "unique_stg_gmc_product_brands_brand", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_product_brands"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/unique_stg_gmc_product_brands_brand.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.5339563, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select brand as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_product_brands`\n  where brand is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "brand", "file_key_name": "models.stg_gmc_product_brands"}, "test.sql_repository_bz.unique_stg_gmc_margins_all_sk_id.236d6ee406": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gmc_margins_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_margins_all"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "unique_stg_gmc_margins_all_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_gmc_margins_all_sk_id.236d6ee406", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gmc_margins_all_sk_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "unique_stg_gmc_margins_all_sk_id", "alias": "unique_stg_gmc_margins_all_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_margins_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/unique_stg_gmc_margins_all_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.5367832, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gmc_margins_all`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gmc_margins_all"}, "test.sql_repository_bz.not_null_stg_gmc_margins_all_sk_id.0cecb41021": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gmc_margins_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gmc_margins_all"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "not_null_stg_gmc_margins_all_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gmc_margins_all_sk_id.0cecb41021", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gmc_margins_all_sk_id.sql", "original_file_path": "models/01_staging/google_merchant_center/_models_stg_gmc.yml", "name": "not_null_stg_gmc_margins_all_sk_id", "alias": "not_null_stg_gmc_margins_all_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gmc_margins_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_merchant_center/_models_stg_gmc.yml/not_null_stg_gmc_margins_all_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.5399652, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gmc_margins_all`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gmc_margins_all"}, "test.sql_repository_bz.not_null_stg_jira_finished_seo_tickets_ticket_number.0b2925852b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticket_number", "model": "{{ get_where_subquery(ref('stg_jira_finished_seo_tickets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_jira_finished_seo_tickets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "jira", "not_null_stg_jira_finished_seo_tickets_ticket_number"], "unique_id": "test.sql_repository_bz.not_null_stg_jira_finished_seo_tickets_ticket_number.0b2925852b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_jira_finished_seo_tickets_ticket_number.sql", "original_file_path": "models/01_staging/jira/_models_stg_jira.yml", "name": "not_null_stg_jira_finished_seo_tickets_ticket_number", "alias": "not_null_stg_jira_finished_seo_tickets_ticket_number", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira_finished_seo_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/jira/_models_stg_jira.yml/not_null_stg_jira_finished_seo_tickets_ticket_number.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.5477366, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_jira_finished_seo_tickets`\nwhere ticket_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ticket_number", "file_key_name": "models.stg_jira_finished_seo_tickets"}, "test.sql_repository_bz.unique_stg_jira_finished_seo_tickets_ticket_number.3e097897e1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ticket_number", "model": "{{ get_where_subquery(ref('stg_jira_finished_seo_tickets')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_jira_finished_seo_tickets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "jira", "unique_stg_jira_finished_seo_tickets_ticket_number"], "unique_id": "test.sql_repository_bz.unique_stg_jira_finished_seo_tickets_ticket_number.3e097897e1", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_jira_finished_seo_tickets_ticket_number.sql", "original_file_path": "models/01_staging/jira/_models_stg_jira.yml", "name": "unique_stg_jira_finished_seo_tickets_ticket_number", "alias": "unique_stg_jira_finished_seo_tickets_ticket_number", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira_finished_seo_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/jira/_models_stg_jira.yml/unique_stg_jira_finished_seo_tickets_ticket_number.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.5506647, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select ticket_number as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_jira_finished_seo_tickets`\n  where ticket_number is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ticket_number", "file_key_name": "models.stg_jira_finished_seo_tickets"}, "test.sql_repository_bz.dbt_utils_recency_stg_jira_finished_seo_tickets_day__load_timestamp__1.1c81e510ae": {"raw_sql": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_stg_jira_fin_2f0839cded261374f5143d65ad0abccb\") }}", "test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "load_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('stg_jira_finished_seo_tickets')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_jira_finished_seo_tickets"]}, "config": {"enabled": true, "alias": "dbt_utils_recency_stg_jira_fin_2f0839cded261374f5143d65ad0abccb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "jira", "dbt_utils_recency_stg_jira_finished_seo_tickets_day__load_timestamp__1"], "unique_id": "test.sql_repository_bz.dbt_utils_recency_stg_jira_finished_seo_tickets_day__load_timestamp__1.1c81e510ae", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_recency_stg_jira_fin_2f0839cded261374f5143d65ad0abccb.sql", "original_file_path": "models/01_staging/jira/_models_stg_jira.yml", "name": "dbt_utils_recency_stg_jira_finished_seo_tickets_day__load_timestamp__1", "alias": "dbt_utils_recency_stg_jira_fin_2f0839cded261374f5143d65ad0abccb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira_finished_seo_tickets"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/jira/_models_stg_jira.yml/dbt_utils_recency_stg_jira_fin_2f0839cded261374f5143d65ad0abccb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_stg_jira_fin_2f0839cded261374f5143d65ad0abccb"}, "created_at": 1663750851.5534668, "compiled_sql": "\n\n\n\nwith recency as (\n\n    select max(load_timestamp) as most_recent\n    from `bergzeit`.`dbt_analytics_staging`.`stg_jira_finished_seo_tickets`\n\n)\n\nselect\n\n    most_recent,\n    \n\n        datetime_add(\n            cast( \n    current_timestamp\n as datetime),\n        interval -1 day\n        )\n\n as threshold\n\nfrom recency\nwhere most_recent < \n\n        datetime_add(\n            cast( \n    current_timestamp\n as datetime),\n        interval -1 day\n        )\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_jira_finished_seo_tickets"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_date.6d82b037c0": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_293dda11152fe831dfa65b38fe783a1e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "minubo_ga_date", "model": "{{ get_where_subquery(ref('stg_minubo_ga_kpis_daily')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_293dda11152fe831dfa65b38fe783a1e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "minubo", "dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_date"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_date.6d82b037c0", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_293dda11152fe831dfa65b38fe783a1e.sql", "original_file_path": "models/01_staging/minubo/_models_minubo.yml", "name": "dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_date", "alias": "dbt_expectations_expect_column_293dda11152fe831dfa65b38fe783a1e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_minubo_ga_kpis_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/minubo/_models_minubo.yml/dbt_expectations_expect_column_293dda11152fe831dfa65b38fe783a1e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_293dda11152fe831dfa65b38fe783a1e"}, "created_at": 1663750851.5883226, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MINUBO_GA_DATE' as \n    string\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "minubo_ga_date", "file_key_name": "models.stg_minubo_ga_kpis_daily"}, "test.sql_repository_bz.not_null_stg_minubo_ga_kpis_daily_minubo_ga_date.bdfd966551": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "minubo_ga_date", "model": "{{ get_where_subquery(ref('stg_minubo_ga_kpis_daily')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "minubo", "not_null_stg_minubo_ga_kpis_daily_minubo_ga_date"], "unique_id": "test.sql_repository_bz.not_null_stg_minubo_ga_kpis_daily_minubo_ga_date.bdfd966551", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_minubo_ga_kpis_daily_minubo_ga_date.sql", "original_file_path": "models/01_staging/minubo/_models_minubo.yml", "name": "not_null_stg_minubo_ga_kpis_daily_minubo_ga_date", "alias": "not_null_stg_minubo_ga_kpis_daily_minubo_ga_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_minubo_ga_kpis_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/minubo/_models_minubo.yml/not_null_stg_minubo_ga_kpis_daily_minubo_ga_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.5964746, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_minubo_ga_kpis_daily`\nwhere minubo_ga_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "minubo_ga_date", "file_key_name": "models.stg_minubo_ga_kpis_daily"}, "test.sql_repository_bz.unique_stg_minubo_ga_kpis_daily_minubo_ga_date.e30f85f645": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "minubo_ga_date", "model": "{{ get_where_subquery(ref('stg_minubo_ga_kpis_daily')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "minubo", "unique_stg_minubo_ga_kpis_daily_minubo_ga_date"], "unique_id": "test.sql_repository_bz.unique_stg_minubo_ga_kpis_daily_minubo_ga_date.e30f85f645", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_minubo_ga_kpis_daily_minubo_ga_date.sql", "original_file_path": "models/01_staging/minubo/_models_minubo.yml", "name": "unique_stg_minubo_ga_kpis_daily_minubo_ga_date", "alias": "unique_stg_minubo_ga_kpis_daily_minubo_ga_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_minubo_ga_kpis_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/minubo/_models_minubo.yml/unique_stg_minubo_ga_kpis_daily_minubo_ga_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.5994594, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select minubo_ga_date as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_minubo_ga_kpis_daily`\n  where minubo_ga_date is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "minubo_ga_date", "file_key_name": "models.stg_minubo_ga_kpis_daily"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_sessions.c6d114792d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d85c0ff8e2acf68c7c276ff4ca07de94\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "minubo_ga_sessions", "model": "{{ get_where_subquery(ref('stg_minubo_ga_kpis_daily')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d85c0ff8e2acf68c7c276ff4ca07de94", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "minubo", "dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_sessions"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_sessions.c6d114792d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_d85c0ff8e2acf68c7c276ff4ca07de94.sql", "original_file_path": "models/01_staging/minubo/_models_minubo.yml", "name": "dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_sessions", "alias": "dbt_expectations_expect_column_d85c0ff8e2acf68c7c276ff4ca07de94", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_minubo_ga_kpis_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/minubo/_models_minubo.yml/dbt_expectations_expect_column_d85c0ff8e2acf68c7c276ff4ca07de94.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d85c0ff8e2acf68c7c276ff4ca07de94"}, "created_at": 1663750851.6029015, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MINUBO_GA_SESSIONS' as \n    string\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "minubo_ga_sessions", "file_key_name": "models.stg_minubo_ga_kpis_daily"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_minubo_ga_kpis_daily_minubo_ga_sessions.73742e66cc": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_at_least_one_stg_min_8fbfe46c71f616dc206fe6231ac087eb\") }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "minubo_ga_sessions", "model": "{{ get_where_subquery(ref('stg_minubo_ga_kpis_daily')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"]}, "config": {"enabled": true, "alias": "dbt_utils_at_least_one_stg_min_8fbfe46c71f616dc206fe6231ac087eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "minubo", "dbt_utils_at_least_one_stg_minubo_ga_kpis_daily_minubo_ga_sessions"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_minubo_ga_kpis_daily_minubo_ga_sessions.73742e66cc", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_min_8fbfe46c71f616dc206fe6231ac087eb.sql", "original_file_path": "models/01_staging/minubo/_models_minubo.yml", "name": "dbt_utils_at_least_one_stg_minubo_ga_kpis_daily_minubo_ga_sessions", "alias": "dbt_utils_at_least_one_stg_min_8fbfe46c71f616dc206fe6231ac087eb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_minubo_ga_kpis_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/minubo/_models_minubo.yml/dbt_utils_at_least_one_stg_min_8fbfe46c71f616dc206fe6231ac087eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_at_least_one_stg_min_8fbfe46c71f616dc206fe6231ac087eb"}, "created_at": 1663750851.6102424, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(minubo_ga_sessions) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_minubo_ga_kpis_daily`\n\n    having count(minubo_ga_sessions) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "minubo_ga_sessions", "file_key_name": "models.stg_minubo_ga_kpis_daily"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_page_views.c232337fa3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d4d4ee3eacd835443eb96990d6e26c6e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "minubo_ga_page_views", "model": "{{ get_where_subquery(ref('stg_minubo_ga_kpis_daily')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d4d4ee3eacd835443eb96990d6e26c6e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "minubo", "dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_page_views"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_page_views.c232337fa3", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_d4d4ee3eacd835443eb96990d6e26c6e.sql", "original_file_path": "models/01_staging/minubo/_models_minubo.yml", "name": "dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_page_views", "alias": "dbt_expectations_expect_column_d4d4ee3eacd835443eb96990d6e26c6e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_minubo_ga_kpis_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/minubo/_models_minubo.yml/dbt_expectations_expect_column_d4d4ee3eacd835443eb96990d6e26c6e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d4d4ee3eacd835443eb96990d6e26c6e"}, "created_at": 1663750851.6174781, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MINUBO_GA_PAGE_VIEWS' as \n    string\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "minubo_ga_page_views", "file_key_name": "models.stg_minubo_ga_kpis_daily"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_detail_views.ddbbe3e43d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ee500c00fbfdf992b229d47fdf8af364\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "minubo_ga_detail_views", "model": "{{ get_where_subquery(ref('stg_minubo_ga_kpis_daily')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ee500c00fbfdf992b229d47fdf8af364", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "minubo", "dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_detail_views"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_detail_views.ddbbe3e43d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_ee500c00fbfdf992b229d47fdf8af364.sql", "original_file_path": "models/01_staging/minubo/_models_minubo.yml", "name": "dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_detail_views", "alias": "dbt_expectations_expect_column_ee500c00fbfdf992b229d47fdf8af364", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_minubo_ga_kpis_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/minubo/_models_minubo.yml/dbt_expectations_expect_column_ee500c00fbfdf992b229d47fdf8af364.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ee500c00fbfdf992b229d47fdf8af364"}, "created_at": 1663750851.6247926, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MINUBO_GA_DETAIL_VIEWS' as \n    string\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "minubo_ga_detail_views", "file_key_name": "models.stg_minubo_ga_kpis_daily"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_add_to_carts.eed43303f2": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9cb3db68fba1fec1eaa0ad60788ff86c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "minubo_ga_add_to_carts", "model": "{{ get_where_subquery(ref('stg_minubo_ga_kpis_daily')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9cb3db68fba1fec1eaa0ad60788ff86c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "minubo", "dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_add_to_carts"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_add_to_carts.eed43303f2", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_9cb3db68fba1fec1eaa0ad60788ff86c.sql", "original_file_path": "models/01_staging/minubo/_models_minubo.yml", "name": "dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_add_to_carts", "alias": "dbt_expectations_expect_column_9cb3db68fba1fec1eaa0ad60788ff86c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_minubo_ga_kpis_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/minubo/_models_minubo.yml/dbt_expectations_expect_column_9cb3db68fba1fec1eaa0ad60788ff86c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9cb3db68fba1fec1eaa0ad60788ff86c"}, "created_at": 1663750851.631591, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MINUBO_GA_ADD_TO_CARTS' as \n    string\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "minubo_ga_add_to_carts", "file_key_name": "models.stg_minubo_ga_kpis_daily"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_minubo_ga_kpis_daily_minubo_ga_date__day__minubo_ga_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.b4cfc89a19": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0b279635386b033033bb1090b50dabea\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "minubo_ga_date", "date_part": "day", "row_condition": "minubo_ga_date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_minubo_ga_kpis_daily')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0b279635386b033033bb1090b50dabea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "minubo", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_minubo_ga_kpis_daily_minubo_ga_date__day__minubo_ga_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_minubo_ga_kpis_daily_minubo_ga_date__day__minubo_ga_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.b4cfc89a19", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_0b279635386b033033bb1090b50dabea.sql", "original_file_path": "models/01_staging/minubo/_models_minubo.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_minubo_ga_kpis_daily_minubo_ga_date__day__minubo_ga_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_0b279635386b033033bb1090b50dabea", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_minubo_ga_kpis_daily"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/minubo/_models_minubo.yml/dbt_expectations_expect_row_va_0b279635386b033033bb1090b50dabea.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_0b279635386b033033bb1090b50dabea"}, "created_at": 1663750851.6399016, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 5\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-14' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-19' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(minubo_ga_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_minubo_ga_kpis_daily` f\n    \n    where minubo_ga_date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_minubo_ga_kpis_daily"}, "test.sql_repository_bz.unique_stg_antavo_club_optins_antavo_customer_id.c7eb84e6cf": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "antavo_customer_id", "model": "{{ get_where_subquery(ref('stg_antavo_club_optins')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_antavo_club_optins"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "antavo", "unique_stg_antavo_club_optins_antavo_customer_id"], "unique_id": "test.sql_repository_bz.unique_stg_antavo_club_optins_antavo_customer_id.c7eb84e6cf", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_antavo_club_optins_antavo_customer_id.sql", "original_file_path": "models/01_staging/antavo/_models_antavo.yml", "name": "unique_stg_antavo_club_optins_antavo_customer_id", "alias": "unique_stg_antavo_club_optins_antavo_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_antavo_club_optins"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/antavo/_models_antavo.yml/unique_stg_antavo_club_optins_antavo_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.6645458, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select antavo_customer_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_antavo_club_optins`\n  where antavo_customer_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "antavo_customer_id", "file_key_name": "models.stg_antavo_club_optins"}, "test.sql_repository_bz.not_null_stg_antavo_club_optins_antavo_customer_id.303711e666": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "antavo_customer_id", "model": "{{ get_where_subquery(ref('stg_antavo_club_optins')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_antavo_club_optins"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "antavo", "not_null_stg_antavo_club_optins_antavo_customer_id"], "unique_id": "test.sql_repository_bz.not_null_stg_antavo_club_optins_antavo_customer_id.303711e666", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_antavo_club_optins_antavo_customer_id.sql", "original_file_path": "models/01_staging/antavo/_models_antavo.yml", "name": "not_null_stg_antavo_club_optins_antavo_customer_id", "alias": "not_null_stg_antavo_club_optins_antavo_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_antavo_club_optins"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/antavo/_models_antavo.yml/not_null_stg_antavo_club_optins_antavo_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.66786, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_antavo_club_optins`\nwhere antavo_customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "antavo_customer_id", "file_key_name": "models.stg_antavo_club_optins"}, "test.sql_repository_bz.unique_stg_consentless_transactions_live_transaction_id.869dd889ff": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">20\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_consentless_transactions_live')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions_live"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">20", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "unique_stg_consentless_transactions_live_transaction_id"], "unique_id": "test.sql_repository_bz.unique_stg_consentless_transactions_live_transaction_id.869dd889ff", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_consentless_transactions_live_transaction_id.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "unique_stg_consentless_transactions_live_transaction_id", "alias": "unique_stg_consentless_transactions_live_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_transactions_live"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/unique_stg_consentless_transactions_live_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN", "warn_if": ">20"}, "created_at": 1663750851.6953912, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select transaction_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions_live`\n  where transaction_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_consentless_transactions_live"}, "test.sql_repository_bz.not_null_stg_consentless_transactions_live_transaction_id.bb1b2d2782": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_consentless_transactions_live')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions_live"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "not_null_stg_consentless_transactions_live_transaction_id"], "unique_id": "test.sql_repository_bz.not_null_stg_consentless_transactions_live_transaction_id.bb1b2d2782", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_consentless_transactions_live_transaction_id.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "not_null_stg_consentless_transactions_live_transaction_id", "alias": "not_null_stg_consentless_transactions_live_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_transactions_live"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/not_null_stg_consentless_transactions_live_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.6989632, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions_live`\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_consentless_transactions_live"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_consentless_transactions_live_transaction_id.14d47953bf": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_at_least_one_stg_con_04b1611153cd205fbe6b430452c9127a\") }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_consentless_transactions_live')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions_live"]}, "config": {"enabled": true, "alias": "dbt_utils_at_least_one_stg_con_04b1611153cd205fbe6b430452c9127a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "dbt_utils_at_least_one_stg_consentless_transactions_live_transaction_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_consentless_transactions_live_transaction_id.14d47953bf", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_con_04b1611153cd205fbe6b430452c9127a.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "dbt_utils_at_least_one_stg_consentless_transactions_live_transaction_id", "alias": "dbt_utils_at_least_one_stg_con_04b1611153cd205fbe6b430452c9127a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_transactions_live"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/dbt_utils_at_least_one_stg_con_04b1611153cd205fbe6b430452c9127a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_at_least_one_stg_con_04b1611153cd205fbe6b430452c9127a"}, "created_at": 1663750851.7017913, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(transaction_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions_live`\n\n    having count(transaction_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_consentless_transactions_live"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_live_transaction_id.9c2d55e45a": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4f05a393ab9953c87abe299ad1ac502f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_consentless_transactions_live')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions_live"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4f05a393ab9953c87abe299ad1ac502f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "dbt_expectations_expect_column_to_exist_stg_consentless_transactions_live_transaction_id"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_live_transaction_id.9c2d55e45a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_4f05a393ab9953c87abe299ad1ac502f.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "dbt_expectations_expect_column_to_exist_stg_consentless_transactions_live_transaction_id", "alias": "dbt_expectations_expect_column_4f05a393ab9953c87abe299ad1ac502f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_transactions_live"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/dbt_expectations_expect_column_4f05a393ab9953c87abe299ad1ac502f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4f05a393ab9953c87abe299ad1ac502f"}, "created_at": 1663750851.709752, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TRANSACTION_ID' as \n    string\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_consentless_transactions_live"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_transaction_id__date_date_sub_current_date_interval_30_day_.0f4661f728": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">4\",alias=\"dbt_expectations_expect_column_cf5e1535125920309efdb9c429d26113\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "date > date_sub(current_date(), interval 30 day)", "column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_consentless_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cf5e1535125920309efdb9c429d26113", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">4", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_transaction_id__date_date_sub_current_date_interval_30_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_transaction_id__date_date_sub_current_date_interval_30_day_.0f4661f728", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_cf5e1535125920309efdb9c429d26113.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_transaction_id__date_date_sub_current_date_interval_30_day_", "alias": "dbt_expectations_expect_column_cf5e1535125920309efdb9c429d26113", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/dbt_expectations_expect_column_cf5e1535125920309efdb9c429d26113.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">4", "alias": "dbt_expectations_expect_column_cf5e1535125920309efdb9c429d26113"}, "created_at": 1663750851.7183757, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        transaction_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions`\n    where\n        1=1\n        and \n    date > date_sub(current_date(), interval 30 day) and\n\n        (\n            transaction_id is not null\n            \n        )\n    \n    group by\n        transaction_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_consentless_transactions"}, "test.sql_repository_bz.not_null_stg_consentless_transactions_transaction_id.5b50a5a325": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_consentless_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "not_null_stg_consentless_transactions_transaction_id"], "unique_id": "test.sql_repository_bz.not_null_stg_consentless_transactions_transaction_id.5b50a5a325", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_consentless_transactions_transaction_id.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "not_null_stg_consentless_transactions_transaction_id", "alias": "not_null_stg_consentless_transactions_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/not_null_stg_consentless_transactions_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.729397, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions`\nwhere transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_consentless_transactions"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_consentless_transactions_transaction_id.c46db33851": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_at_least_one_stg_con_7a34cd0775dff64a059e4c12c9e712e0\") }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_consentless_transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_at_least_one_stg_con_7a34cd0775dff64a059e4c12c9e712e0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "dbt_utils_at_least_one_stg_consentless_transactions_transaction_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_consentless_transactions_transaction_id.c46db33851", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_con_7a34cd0775dff64a059e4c12c9e712e0.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "dbt_utils_at_least_one_stg_consentless_transactions_transaction_id", "alias": "dbt_utils_at_least_one_stg_con_7a34cd0775dff64a059e4c12c9e712e0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/dbt_utils_at_least_one_stg_con_7a34cd0775dff64a059e4c12c9e712e0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_at_least_one_stg_con_7a34cd0775dff64a059e4c12c9e712e0"}, "created_at": 1663750851.7322834, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(transaction_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions`\n\n    having count(transaction_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_consentless_transactions"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_id.7bdf407d52": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f604ee8023fb375b512247ebfb958e9e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "transaction_id", "model": "{{ get_where_subquery(ref('stg_consentless_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f604ee8023fb375b512247ebfb958e9e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_id"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_id.7bdf407d52", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_f604ee8023fb375b512247ebfb958e9e.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_id", "alias": "dbt_expectations_expect_column_f604ee8023fb375b512247ebfb958e9e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/dbt_expectations_expect_column_f604ee8023fb375b512247ebfb958e9e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f604ee8023fb375b512247ebfb958e9e"}, "created_at": 1663750851.7400339, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TRANSACTION_ID' as \n    string\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_id", "file_key_name": "models.stg_consentless_transactions"}, "test.sql_repository_bz.not_null_stg_consentless_transactions_transaction_value.b3798794cd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_value", "model": "{{ get_where_subquery(ref('stg_consentless_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "not_null_stg_consentless_transactions_transaction_value"], "unique_id": "test.sql_repository_bz.not_null_stg_consentless_transactions_transaction_value.b3798794cd", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_consentless_transactions_transaction_value.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "not_null_stg_consentless_transactions_transaction_value", "alias": "not_null_stg_consentless_transactions_transaction_value", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/not_null_stg_consentless_transactions_transaction_value.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.7480755, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions`\nwhere transaction_value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_value", "file_key_name": "models.stg_consentless_transactions"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_value.dbb049c070": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d263a5157c487369619dac9d0347feb8\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "transaction_value", "model": "{{ get_where_subquery(ref('stg_consentless_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d263a5157c487369619dac9d0347feb8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_value"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_value.dbb049c070", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_d263a5157c487369619dac9d0347feb8.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_value", "alias": "dbt_expectations_expect_column_d263a5157c487369619dac9d0347feb8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/dbt_expectations_expect_column_d263a5157c487369619dac9d0347feb8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d263a5157c487369619dac9d0347feb8"}, "created_at": 1663750851.7509272, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TRANSACTION_VALUE' as \n    string\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transaction_value", "file_key_name": "models.stg_consentless_transactions"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_gclid__date_date_sub_current_date_interval_30_day_.eb1701f63a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">500\",alias=\"dbt_expectations_expect_column_836059ca1201b07226f0daed27681e0f\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "date > date_sub(current_date(), interval 30 day)", "column_name": "gclid", "model": "{{ get_where_subquery(ref('stg_consentless_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_836059ca1201b07226f0daed27681e0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">500", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_gclid__date_date_sub_current_date_interval_30_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_gclid__date_date_sub_current_date_interval_30_day_.eb1701f63a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_836059ca1201b07226f0daed27681e0f.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_gclid__date_date_sub_current_date_interval_30_day_", "alias": "dbt_expectations_expect_column_836059ca1201b07226f0daed27681e0f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/dbt_expectations_expect_column_836059ca1201b07226f0daed27681e0f.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">500", "alias": "dbt_expectations_expect_column_836059ca1201b07226f0daed27681e0f"}, "created_at": 1663750851.7595477, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        gclid\n    from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions`\n    where\n        1=1\n        and \n    date > date_sub(current_date(), interval 30 day) and\n\n        (\n            gclid is not null\n            \n        )\n    \n    group by\n        gclid\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gclid", "file_key_name": "models.stg_consentless_transactions"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_gclid.48578c8780": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ce4d07180c5c32ac41da18bbc123e824\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "gclid", "model": "{{ get_where_subquery(ref('stg_consentless_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ce4d07180c5c32ac41da18bbc123e824", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "dbt_expectations_expect_column_to_exist_stg_consentless_transactions_gclid"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_gclid.48578c8780", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_ce4d07180c5c32ac41da18bbc123e824.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "dbt_expectations_expect_column_to_exist_stg_consentless_transactions_gclid", "alias": "dbt_expectations_expect_column_ce4d07180c5c32ac41da18bbc123e824", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/dbt_expectations_expect_column_ce4d07180c5c32ac41da18bbc123e824.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ce4d07180c5c32ac41da18bbc123e824"}, "created_at": 1663750851.7678483, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('GCLID' as \n    string\n) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gclid", "file_key_name": "models.stg_consentless_transactions"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_consentless_transactions_date__day.7500829a42": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_90f00d025a88fa7cdf0d72ab3bc06124\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "model": "{{ get_where_subquery(ref('stg_consentless_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_90f00d025a88fa7cdf0d72ab3bc06124", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_consentless_transactions_date__day"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_consentless_transactions_date__day.7500829a42", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_90f00d025a88fa7cdf0d72ab3bc06124.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_consentless_transactions_date__day", "alias": "dbt_expectations_expect_row_va_90f00d025a88fa7cdf0d72ab3bc06124", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/dbt_expectations_expect_row_va_90f00d025a88fa7cdf0d72ab3bc06124.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_90f00d025a88fa7cdf0d72ab3bc06124"}, "created_at": 1663750851.7747588, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 203\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-03-01' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_consentless_transactions` f\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_consentless_transactions"}, "test.sql_repository_bz.not_null_stg_consentless_consent_interaction_consent_event_id.1d9a27acff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "consent_event_id", "model": "{{ get_where_subquery(ref('stg_consentless_consent_interaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_consent_interaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "not_null_stg_consentless_consent_interaction_consent_event_id"], "unique_id": "test.sql_repository_bz.not_null_stg_consentless_consent_interaction_consent_event_id.1d9a27acff", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_consentless_consent_interaction_consent_event_id.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "not_null_stg_consentless_consent_interaction_consent_event_id", "alias": "not_null_stg_consentless_consent_interaction_consent_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_consent_interaction"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/not_null_stg_consentless_consent_interaction_consent_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.7836654, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_consentless_consent_interaction`\nwhere consent_event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "consent_event_id", "file_key_name": "models.stg_consentless_consent_interaction"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_consent_interaction_consent_event_id__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.8960ea6730": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">50\",alias=\"dbt_expectations_expect_column_0f07c47755e4da1ca706b5c2f9cc0f55\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "date between date_sub(current_date(), interval 30 day) and date_sub(current_date(), interval 1 day)", "column_name": "consent_event_id", "model": "{{ get_where_subquery(ref('stg_consentless_consent_interaction')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_consent_interaction"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0f07c47755e4da1ca706b5c2f9cc0f55", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">50", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "dbt_expectations_expect_column_values_to_be_unique_stg_consentless_consent_interaction_consent_event_id__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_consent_interaction_consent_event_id__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.8960ea6730", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_0f07c47755e4da1ca706b5c2f9cc0f55.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_consentless_consent_interaction_consent_event_id__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_0f07c47755e4da1ca706b5c2f9cc0f55", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_consent_interaction"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/dbt_expectations_expect_column_0f07c47755e4da1ca706b5c2f9cc0f55.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">50", "alias": "dbt_expectations_expect_column_0f07c47755e4da1ca706b5c2f9cc0f55"}, "created_at": 1663750851.7883322, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        consent_event_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_consent_interaction`\n    where\n        1=1\n        and \n    date between date_sub(current_date(), interval 30 day) and date_sub(current_date(), interval 1 day) and\n\n        (\n            consent_event_id is not null\n            \n        )\n    \n    group by\n        consent_event_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "consent_event_id", "file_key_name": "models.stg_consentless_consent_interaction"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_consent_interaction_consent_event_id.d2d3a28519": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_000ee213c118c2950785629c4fbdf7f7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "consent_event_id", "model": "{{ get_where_subquery(ref('stg_consentless_consent_interaction')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_consent_interaction"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_000ee213c118c2950785629c4fbdf7f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "dbt_expectations_expect_column_to_exist_stg_consentless_consent_interaction_consent_event_id"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_consent_interaction_consent_event_id.d2d3a28519", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_000ee213c118c2950785629c4fbdf7f7.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "dbt_expectations_expect_column_to_exist_stg_consentless_consent_interaction_consent_event_id", "alias": "dbt_expectations_expect_column_000ee213c118c2950785629c4fbdf7f7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_consent_interaction"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/dbt_expectations_expect_column_000ee213c118c2950785629c4fbdf7f7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_000ee213c118c2950785629c4fbdf7f7"}, "created_at": 1663750851.7962193, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CONSENT_EVENT_ID' as \n    string\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "consent_event_id", "file_key_name": "models.stg_consentless_consent_interaction"}, "test.sql_repository_bz.not_null_stg_consentless_page_views_live_pageview_event_id.97f8a40159": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pageview_event_id", "model": "{{ get_where_subquery(ref('stg_consentless_page_views_live')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_page_views_live"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "not_null_stg_consentless_page_views_live_pageview_event_id"], "unique_id": "test.sql_repository_bz.not_null_stg_consentless_page_views_live_pageview_event_id.97f8a40159", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_consentless_page_views_live_pageview_event_id.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "not_null_stg_consentless_page_views_live_pageview_event_id", "alias": "not_null_stg_consentless_page_views_live_pageview_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_page_views_live"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/not_null_stg_consentless_page_views_live_pageview_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.804328, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_consentless_page_views_live`\nwhere pageview_event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pageview_event_id", "file_key_name": "models.stg_consentless_page_views_live"}, "test.sql_repository_bz.unique_stg_consentless_page_views_live_pageview_event_id.1337a78cbf": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">200\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "pageview_event_id", "model": "{{ get_where_subquery(ref('stg_consentless_page_views_live')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_page_views_live"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">200", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "unique_stg_consentless_page_views_live_pageview_event_id"], "unique_id": "test.sql_repository_bz.unique_stg_consentless_page_views_live_pageview_event_id.1337a78cbf", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_consentless_page_views_live_pageview_event_id.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "unique_stg_consentless_page_views_live_pageview_event_id", "alias": "unique_stg_consentless_page_views_live_pageview_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_page_views_live"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/unique_stg_consentless_page_views_live_pageview_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN", "warn_if": ">200"}, "created_at": 1663750851.808471, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select pageview_event_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_consentless_page_views_live`\n  where pageview_event_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pageview_event_id", "file_key_name": "models.stg_consentless_page_views_live"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_page_views_live_pageview_event_id.3c2c68eb0f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_70bde914bde247166494dd1c1127d1eb\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "pageview_event_id", "model": "{{ get_where_subquery(ref('stg_consentless_page_views_live')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_consentless_page_views_live"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_70bde914bde247166494dd1c1127d1eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "consentless", "dbt_expectations_expect_column_to_exist_stg_consentless_page_views_live_pageview_event_id"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_page_views_live_pageview_event_id.3c2c68eb0f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_70bde914bde247166494dd1c1127d1eb.sql", "original_file_path": "models/01_staging/consentless/_models_stg_consentless.yml", "name": "dbt_expectations_expect_column_to_exist_stg_consentless_page_views_live_pageview_event_id", "alias": "dbt_expectations_expect_column_70bde914bde247166494dd1c1127d1eb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_consentless_page_views_live"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/consentless/_models_stg_consentless.yml/dbt_expectations_expect_column_70bde914bde247166494dd1c1127d1eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_70bde914bde247166494dd1c1127d1eb"}, "created_at": 1663750851.811748, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PAGEVIEW_EVENT_ID' as \n    string\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pageview_event_id", "file_key_name": "models.stg_consentless_page_views_live"}, "test.sql_repository_bz.not_null_stg_gcp_bigquery_job_cost_sk_id.b4c10abd3f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gcp_bigquery_job_cost')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gcp_bigquery_job_cost"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "not_null_stg_gcp_bigquery_job_cost_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gcp_bigquery_job_cost_sk_id.b4c10abd3f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gcp_bigquery_job_cost_sk_id.sql", "original_file_path": "models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml", "name": "not_null_stg_gcp_bigquery_job_cost_sk_id", "alias": "not_null_stg_gcp_bigquery_job_cost_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gcp_bigquery_job_cost"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml/not_null_stg_gcp_bigquery_job_cost_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.8374937, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gcp_bigquery_job_cost`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gcp_bigquery_job_cost"}, "test.sql_repository_bz.not_null_stg_gcp_cost_export_cost_entry_id.21de0cfd4f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_entry_id", "model": "{{ get_where_subquery(ref('stg_gcp_cost_export')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gcp_cost_export"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "not_null_stg_gcp_cost_export_cost_entry_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gcp_cost_export_cost_entry_id.21de0cfd4f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gcp_cost_export_cost_entry_id.sql", "original_file_path": "models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml", "name": "not_null_stg_gcp_cost_export_cost_entry_id", "alias": "not_null_stg_gcp_cost_export_cost_entry_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gcp_cost_export"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml/not_null_stg_gcp_cost_export_cost_entry_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.8404472, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gcp_cost_export`\nwhere cost_entry_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cost_entry_id", "file_key_name": "models.stg_gcp_cost_export"}, "test.sql_repository_bz.unique_stg_gcp_bigquery_table_storage_table_creation_id.fd77db0431": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "table_creation_id", "model": "{{ get_where_subquery(ref('stg_gcp_bigquery_table_storage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gcp_bigquery_table_storage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "unique_stg_gcp_bigquery_table_storage_table_creation_id"], "unique_id": "test.sql_repository_bz.unique_stg_gcp_bigquery_table_storage_table_creation_id.fd77db0431", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gcp_bigquery_table_storage_table_creation_id.sql", "original_file_path": "models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml", "name": "unique_stg_gcp_bigquery_table_storage_table_creation_id", "alias": "unique_stg_gcp_bigquery_table_storage_table_creation_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gcp_bigquery_table_storage"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml/unique_stg_gcp_bigquery_table_storage_table_creation_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.8432322, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select table_creation_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gcp_bigquery_table_storage`\n  where table_creation_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "table_creation_id", "file_key_name": "models.stg_gcp_bigquery_table_storage"}, "test.sql_repository_bz.not_null_stg_gcp_bigquery_table_storage_table_creation_id.b24d8f11ad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "table_creation_id", "model": "{{ get_where_subquery(ref('stg_gcp_bigquery_table_storage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gcp_bigquery_table_storage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "not_null_stg_gcp_bigquery_table_storage_table_creation_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gcp_bigquery_table_storage_table_creation_id.b24d8f11ad", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gcp_bigquery_table_storage_table_creation_id.sql", "original_file_path": "models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml", "name": "not_null_stg_gcp_bigquery_table_storage_table_creation_id", "alias": "not_null_stg_gcp_bigquery_table_storage_table_creation_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gcp_bigquery_table_storage"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml/not_null_stg_gcp_bigquery_table_storage_table_creation_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.8460093, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gcp_bigquery_table_storage`\nwhere table_creation_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "table_creation_id", "file_key_name": "models.stg_gcp_bigquery_table_storage"}, "test.sql_repository_bz.not_null_stg_gcp_bigquery_table_storage_total_rows.801a97c96f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_rows", "model": "{{ get_where_subquery(ref('stg_gcp_bigquery_table_storage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gcp_bigquery_table_storage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "not_null_stg_gcp_bigquery_table_storage_total_rows"], "unique_id": "test.sql_repository_bz.not_null_stg_gcp_bigquery_table_storage_total_rows.801a97c96f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gcp_bigquery_table_storage_total_rows.sql", "original_file_path": "models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml", "name": "not_null_stg_gcp_bigquery_table_storage_total_rows", "alias": "not_null_stg_gcp_bigquery_table_storage_total_rows", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gcp_bigquery_table_storage"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml/not_null_stg_gcp_bigquery_table_storage_total_rows.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.8491795, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gcp_bigquery_table_storage`\nwhere total_rows is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "total_rows", "file_key_name": "models.stg_gcp_bigquery_table_storage"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_gcp_bigquery_table_storage_total_rows__0.d218a50205": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ed848f4b8919a9028b9dc3512461da09\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "column_name": "total_rows", "model": "{{ get_where_subquery(ref('stg_gcp_bigquery_table_storage')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gcp_bigquery_table_storage"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ed848f4b8919a9028b9dc3512461da09", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "dbt_expectations_expect_column_values_to_be_between_stg_gcp_bigquery_table_storage_total_rows__0"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_gcp_bigquery_table_storage_total_rows__0.d218a50205", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_ed848f4b8919a9028b9dc3512461da09.sql", "original_file_path": "models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml", "name": "dbt_expectations_expect_column_values_to_be_between_stg_gcp_bigquery_table_storage_total_rows__0", "alias": "dbt_expectations_expect_column_ed848f4b8919a9028b9dc3512461da09", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gcp_bigquery_table_storage"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_cloud_platform_metadata/_models_gcp_meta.yml/dbt_expectations_expect_column_ed848f4b8919a9028b9dc3512461da09.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ed848f4b8919a9028b9dc3512461da09"}, "created_at": 1663750851.8518631, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and total_rows >= 0\n)\n as expression\n\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gcp_bigquery_table_storage`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "total_rows", "file_key_name": "models.stg_gcp_bigquery_table_storage"}, "test.sql_repository_bz.unique_stg_trusted_shops_reviews_review_id.949835d18d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "review_id", "model": "{{ get_where_subquery(ref('stg_trusted_shops_reviews')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_trusted_shops_reviews"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "trusted_shops", "unique_stg_trusted_shops_reviews_review_id"], "unique_id": "test.sql_repository_bz.unique_stg_trusted_shops_reviews_review_id.949835d18d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_trusted_shops_reviews_review_id.sql", "original_file_path": "models/01_staging/trusted_shops/_models_trusted_shops.yml", "name": "unique_stg_trusted_shops_reviews_review_id", "alias": "unique_stg_trusted_shops_reviews_review_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_trusted_shops_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/trusted_shops/_models_trusted_shops.yml/unique_stg_trusted_shops_reviews_review_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.8843036, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select review_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_trusted_shops_reviews`\n  where review_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "review_id", "file_key_name": "models.stg_trusted_shops_reviews"}, "test.sql_repository_bz.not_null_stg_trusted_shops_reviews_review_id.77ca29d3c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "review_id", "model": "{{ get_where_subquery(ref('stg_trusted_shops_reviews')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_trusted_shops_reviews"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "trusted_shops", "not_null_stg_trusted_shops_reviews_review_id"], "unique_id": "test.sql_repository_bz.not_null_stg_trusted_shops_reviews_review_id.77ca29d3c0", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_trusted_shops_reviews_review_id.sql", "original_file_path": "models/01_staging/trusted_shops/_models_trusted_shops.yml", "name": "not_null_stg_trusted_shops_reviews_review_id", "alias": "not_null_stg_trusted_shops_reviews_review_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_trusted_shops_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/trusted_shops/_models_trusted_shops.yml/not_null_stg_trusted_shops_reviews_review_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.8873115, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_trusted_shops_reviews`\nwhere review_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "review_id", "file_key_name": "models.stg_trusted_shops_reviews"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_trusted_shops_reviews_review_id.44892f2ea9": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "review_id", "model": "{{ get_where_subquery(ref('stg_trusted_shops_reviews')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_trusted_shops_reviews"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "trusted_shops", "dbt_utils_at_least_one_stg_trusted_shops_reviews_review_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_trusted_shops_reviews_review_id.44892f2ea9", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_trusted_shops_reviews_review_id.sql", "original_file_path": "models/01_staging/trusted_shops/_models_trusted_shops.yml", "name": "dbt_utils_at_least_one_stg_trusted_shops_reviews_review_id", "alias": "dbt_utils_at_least_one_stg_trusted_shops_reviews_review_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_trusted_shops_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/trusted_shops/_models_trusted_shops.yml/dbt_utils_at_least_one_stg_trusted_shops_reviews_review_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.8902245, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(review_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_trusted_shops_reviews`\n\n    having count(review_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "review_id", "file_key_name": "models.stg_trusted_shops_reviews"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_review_id.ea887442e7": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dc4e025f989ddcedeb22d50e68a7aa88\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "review_id", "model": "{{ get_where_subquery(ref('stg_trusted_shops_reviews')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_trusted_shops_reviews"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dc4e025f989ddcedeb22d50e68a7aa88", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "trusted_shops", "dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_review_id"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_review_id.ea887442e7", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_dc4e025f989ddcedeb22d50e68a7aa88.sql", "original_file_path": "models/01_staging/trusted_shops/_models_trusted_shops.yml", "name": "dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_review_id", "alias": "dbt_expectations_expect_column_dc4e025f989ddcedeb22d50e68a7aa88", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_trusted_shops_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/trusted_shops/_models_trusted_shops.yml/dbt_expectations_expect_column_dc4e025f989ddcedeb22d50e68a7aa88.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_dc4e025f989ddcedeb22d50e68a7aa88"}, "created_at": 1663750851.8973541, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('REVIEW_ID' as \n    string\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "review_id", "file_key_name": "models.stg_trusted_shops_reviews"}, "test.sql_repository_bz.not_null_stg_trusted_shops_reviews_date.81dcacb8ea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_trusted_shops_reviews')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_trusted_shops_reviews"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "trusted_shops", "not_null_stg_trusted_shops_reviews_date"], "unique_id": "test.sql_repository_bz.not_null_stg_trusted_shops_reviews_date.81dcacb8ea", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_trusted_shops_reviews_date.sql", "original_file_path": "models/01_staging/trusted_shops/_models_trusted_shops.yml", "name": "not_null_stg_trusted_shops_reviews_date", "alias": "not_null_stg_trusted_shops_reviews_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_trusted_shops_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/trusted_shops/_models_trusted_shops.yml/not_null_stg_trusted_shops_reviews_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.9041843, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_trusted_shops_reviews`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.stg_trusted_shops_reviews"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_date.480d173b22": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d5d58837e656ec4e959fb937677b8b3d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_trusted_shops_reviews')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_trusted_shops_reviews"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d5d58837e656ec4e959fb937677b8b3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "trusted_shops", "dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_date"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_date.480d173b22", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_d5d58837e656ec4e959fb937677b8b3d.sql", "original_file_path": "models/01_staging/trusted_shops/_models_trusted_shops.yml", "name": "dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_date", "alias": "dbt_expectations_expect_column_d5d58837e656ec4e959fb937677b8b3d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_trusted_shops_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/trusted_shops/_models_trusted_shops.yml/dbt_expectations_expect_column_d5d58837e656ec4e959fb937677b8b3d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d5d58837e656ec4e959fb937677b8b3d"}, "created_at": 1663750851.9074733, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DATE' as \n    string\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.stg_trusted_shops_reviews"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_trusted_shops_reviews_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_.ff0cd72a6e": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_3af22e22b959dd0795a3c18dce529214\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 60 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_trusted_shops_reviews')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_trusted_shops_reviews"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_3af22e22b959dd0795a3c18dce529214", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "trusted_shops", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_trusted_shops_reviews_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_trusted_shops_reviews_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_.ff0cd72a6e", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_3af22e22b959dd0795a3c18dce529214.sql", "original_file_path": "models/01_staging/trusted_shops/_models_trusted_shops.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_trusted_shops_reviews_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_3af22e22b959dd0795a3c18dce529214", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_trusted_shops_reviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/trusted_shops/_models_trusted_shops.yml/dbt_expectations_expect_row_va_3af22e22b959dd0795a3c18dce529214.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_3af22e22b959dd0795a3c18dce529214"}, "created_at": 1663750851.9144766, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 59\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-07-23' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_trusted_shops_reviews` f\n    \n    where date between date_sub(current_date(), interval 60 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_trusted_shops_reviews"}, "test.sql_repository_bz.unique_stg_gsheets_currency_factor_ch_currency_date.dadb8f5b80": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "currency_date", "model": "{{ get_where_subquery(ref('stg_gsheets_currency_factor_ch')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_currency_factor_ch"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "unique_stg_gsheets_currency_factor_ch_currency_date"], "unique_id": "test.sql_repository_bz.unique_stg_gsheets_currency_factor_ch_currency_date.dadb8f5b80", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gsheets_currency_factor_ch_currency_date.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "unique_stg_gsheets_currency_factor_ch_currency_date", "alias": "unique_stg_gsheets_currency_factor_ch_currency_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_currency_factor_ch"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/unique_stg_gsheets_currency_factor_ch_currency_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.9704769, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select currency_date as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_ch`\n  where currency_date is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "currency_date", "file_key_name": "models.stg_gsheets_currency_factor_ch"}, "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_ch_currency_date.8caf318b93": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_date", "model": "{{ get_where_subquery(ref('stg_gsheets_currency_factor_ch')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_currency_factor_ch"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "not_null_stg_gsheets_currency_factor_ch_currency_date"], "unique_id": "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_ch_currency_date.8caf318b93", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gsheets_currency_factor_ch_currency_date.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "not_null_stg_gsheets_currency_factor_ch_currency_date", "alias": "not_null_stg_gsheets_currency_factor_ch_currency_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_currency_factor_ch"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/not_null_stg_gsheets_currency_factor_ch_currency_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.9733524, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_ch`\nwhere currency_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "currency_date", "file_key_name": "models.stg_gsheets_currency_factor_ch"}, "test.sql_repository_bz.unique_stg_gsheets_currency_factor_gb_currency_date.dc6df0c420": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "currency_date", "model": "{{ get_where_subquery(ref('stg_gsheets_currency_factor_gb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_currency_factor_gb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "unique_stg_gsheets_currency_factor_gb_currency_date"], "unique_id": "test.sql_repository_bz.unique_stg_gsheets_currency_factor_gb_currency_date.dc6df0c420", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gsheets_currency_factor_gb_currency_date.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "unique_stg_gsheets_currency_factor_gb_currency_date", "alias": "unique_stg_gsheets_currency_factor_gb_currency_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_currency_factor_gb"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/unique_stg_gsheets_currency_factor_gb_currency_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.9771278, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select currency_date as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_gb`\n  where currency_date is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "currency_date", "file_key_name": "models.stg_gsheets_currency_factor_gb"}, "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_gb_currency_date.60c08266a3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_date", "model": "{{ get_where_subquery(ref('stg_gsheets_currency_factor_gb')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_currency_factor_gb"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "not_null_stg_gsheets_currency_factor_gb_currency_date"], "unique_id": "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_gb_currency_date.60c08266a3", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gsheets_currency_factor_gb_currency_date.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "not_null_stg_gsheets_currency_factor_gb_currency_date", "alias": "not_null_stg_gsheets_currency_factor_gb_currency_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_currency_factor_gb"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/not_null_stg_gsheets_currency_factor_gb_currency_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.9800053, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_gb`\nwhere currency_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "currency_date", "file_key_name": "models.stg_gsheets_currency_factor_gb"}, "test.sql_repository_bz.unique_stg_gsheets_currency_factor_all_countries_sk_id.d65e47a9df": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gsheets_currency_factor_all_countries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_currency_factor_all_countries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "unique_stg_gsheets_currency_factor_all_countries_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_gsheets_currency_factor_all_countries_sk_id.d65e47a9df", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gsheets_currency_factor_all_countries_sk_id.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "unique_stg_gsheets_currency_factor_all_countries_sk_id", "alias": "unique_stg_gsheets_currency_factor_all_countries_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_currency_factor_all_countries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/unique_stg_gsheets_currency_factor_all_countries_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.9828427, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_all_countries`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gsheets_currency_factor_all_countries"}, "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_all_countries_sk_id.46183c91bf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gsheets_currency_factor_all_countries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_currency_factor_all_countries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "not_null_stg_gsheets_currency_factor_all_countries_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_all_countries_sk_id.46183c91bf", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gsheets_currency_factor_all_countries_sk_id.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "not_null_stg_gsheets_currency_factor_all_countries_sk_id", "alias": "not_null_stg_gsheets_currency_factor_all_countries_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_currency_factor_all_countries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/not_null_stg_gsheets_currency_factor_all_countries_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.9855037, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_currency_factor_all_countries`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gsheets_currency_factor_all_countries"}, "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_country_soll.375d5a033e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_soll", "model": "{{ get_where_subquery(ref('stg_gsheets_order_value_planned')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_order_value_planned"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "not_null_stg_gsheets_order_value_planned_country_soll"], "unique_id": "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_country_soll.375d5a033e", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gsheets_order_value_planned_country_soll.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "not_null_stg_gsheets_order_value_planned_country_soll", "alias": "not_null_stg_gsheets_order_value_planned_country_soll", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_order_value_planned"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/not_null_stg_gsheets_order_value_planned_country_soll.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750851.9884856, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_order_value_planned`\nwhere country_soll is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "country_soll", "file_key_name": "models.stg_gsheets_order_value_planned"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_gsheets_order_value_planned_country_soll.b550d014a1": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_at_least_one_stg_gsh_690b9decd7c8d830685318b763dfff7d\") }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "country_soll", "model": "{{ get_where_subquery(ref('stg_gsheets_order_value_planned')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_order_value_planned"]}, "config": {"enabled": true, "alias": "dbt_utils_at_least_one_stg_gsh_690b9decd7c8d830685318b763dfff7d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "dbt_utils_at_least_one_stg_gsheets_order_value_planned_country_soll"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_gsheets_order_value_planned_country_soll.b550d014a1", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_gsh_690b9decd7c8d830685318b763dfff7d.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "dbt_utils_at_least_one_stg_gsheets_order_value_planned_country_soll", "alias": "dbt_utils_at_least_one_stg_gsh_690b9decd7c8d830685318b763dfff7d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_order_value_planned"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/dbt_utils_at_least_one_stg_gsh_690b9decd7c8d830685318b763dfff7d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_at_least_one_stg_gsh_690b9decd7c8d830685318b763dfff7d"}, "created_at": 1663750851.9905503, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(country_soll) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_order_value_planned`\n\n    having count(country_soll) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "country_soll", "file_key_name": "models.stg_gsheets_order_value_planned"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_in_set_stg_gsheets_order_value_planned_country_soll__de__at__ch__it__nl__uk__int.38a8c54181": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6f1974482aa6b1bb98b2a01458def6c4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["de", "at", "ch", "it", "nl", "uk", "int"], "column_name": "country_soll", "model": "{{ get_where_subquery(ref('stg_gsheets_order_value_planned')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_order_value_planned"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6f1974482aa6b1bb98b2a01458def6c4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "dbt_expectations_expect_column_values_to_be_in_set_stg_gsheets_order_value_planned_country_soll__de__at__ch__it__nl__uk__int"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_in_set_stg_gsheets_order_value_planned_country_soll__de__at__ch__it__nl__uk__int.38a8c54181", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_6f1974482aa6b1bb98b2a01458def6c4.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_stg_gsheets_order_value_planned_country_soll__de__at__ch__it__nl__uk__int", "alias": "dbt_expectations_expect_column_6f1974482aa6b1bb98b2a01458def6c4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_order_value_planned"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/dbt_expectations_expect_column_6f1974482aa6b1bb98b2a01458def6c4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6f1974482aa6b1bb98b2a01458def6c4"}, "created_at": 1663750851.9976668, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        country_soll as value_field\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_order_value_planned`\n    \n\n),\nset_values as (\n\n    select\n        cast('de' as \n    string\n) as value_field\n    union all\n    select\n        cast('at' as \n    string\n) as value_field\n    union all\n    select\n        cast('ch' as \n    string\n) as value_field\n    union all\n    select\n        cast('it' as \n    string\n) as value_field\n    union all\n    select\n        cast('nl' as \n    string\n) as value_field\n    union all\n    select\n        cast('uk' as \n    string\n) as value_field\n    union all\n    select\n        cast('int' as \n    string\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "country_soll", "file_key_name": "models.stg_gsheets_order_value_planned"}, "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_month_soll.18b7a3df24": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "month_soll", "model": "{{ get_where_subquery(ref('stg_gsheets_order_value_planned')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_order_value_planned"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "not_null_stg_gsheets_order_value_planned_month_soll"], "unique_id": "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_month_soll.18b7a3df24", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gsheets_order_value_planned_month_soll.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "not_null_stg_gsheets_order_value_planned_month_soll", "alias": "not_null_stg_gsheets_order_value_planned_month_soll", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_order_value_planned"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/not_null_stg_gsheets_order_value_planned_month_soll.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0158727, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_order_value_planned`\nwhere month_soll is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "month_soll", "file_key_name": "models.stg_gsheets_order_value_planned"}, "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_order_value_soll_overall.24d2f1b2f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_gsheets_order_val_c252f29e58ba41f5eb501e87c655745d\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_value_soll_overall", "model": "{{ get_where_subquery(ref('stg_gsheets_order_value_planned')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_order_value_planned"]}, "config": {"enabled": true, "alias": "not_null_stg_gsheets_order_val_c252f29e58ba41f5eb501e87c655745d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "not_null_stg_gsheets_order_value_planned_order_value_soll_overall"], "unique_id": "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_order_value_soll_overall.24d2f1b2f5", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gsheets_order_val_c252f29e58ba41f5eb501e87c655745d.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "not_null_stg_gsheets_order_value_planned_order_value_soll_overall", "alias": "not_null_stg_gsheets_order_val_c252f29e58ba41f5eb501e87c655745d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_order_value_planned"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/not_null_stg_gsheets_order_val_c252f29e58ba41f5eb501e87c655745d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_gsheets_order_val_c252f29e58ba41f5eb501e87c655745d"}, "created_at": 1663750852.0187883, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_order_value_planned`\nwhere order_value_soll_overall is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_value_soll_overall", "file_key_name": "models.stg_gsheets_order_value_planned"}, "test.sql_repository_bz.unique_stg_gsheets_order_value_planned_sk_id.ef401765b3": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gsheets_order_value_planned')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_order_value_planned"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "unique_stg_gsheets_order_value_planned_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_gsheets_order_value_planned_sk_id.ef401765b3", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gsheets_order_value_planned_sk_id.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "unique_stg_gsheets_order_value_planned_sk_id", "alias": "unique_stg_gsheets_order_value_planned_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_order_value_planned"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/unique_stg_gsheets_order_value_planned_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0222929, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_order_value_planned`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gsheets_order_value_planned"}, "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_sk_id.7015de60fd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gsheets_order_value_planned')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_order_value_planned"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "not_null_stg_gsheets_order_value_planned_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_sk_id.7015de60fd", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gsheets_order_value_planned_sk_id.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "not_null_stg_gsheets_order_value_planned_sk_id", "alias": "not_null_stg_gsheets_order_value_planned_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_order_value_planned"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/not_null_stg_gsheets_order_value_planned_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.025199, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_order_value_planned`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gsheets_order_value_planned"}, "test.sql_repository_bz.unique_stg_gsheets_channel_shares_planned_sk_id.badaec310f": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gsheets_channel_shares_planned')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_channel_shares_planned"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "unique_stg_gsheets_channel_shares_planned_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_gsheets_channel_shares_planned_sk_id.badaec310f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gsheets_channel_shares_planned_sk_id.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "unique_stg_gsheets_channel_shares_planned_sk_id", "alias": "unique_stg_gsheets_channel_shares_planned_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_channel_shares_planned"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/unique_stg_gsheets_channel_shares_planned_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0280871, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_channel_shares_planned`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gsheets_channel_shares_planned"}, "test.sql_repository_bz.not_null_stg_gsheets_channel_shares_planned_sk_id.3653da3a29": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_gsheets_channel_shares_planned')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_channel_shares_planned"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "not_null_stg_gsheets_channel_shares_planned_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_gsheets_channel_shares_planned_sk_id.3653da3a29", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gsheets_channel_shares_planned_sk_id.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "not_null_stg_gsheets_channel_shares_planned_sk_id", "alias": "not_null_stg_gsheets_channel_shares_planned_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_channel_shares_planned"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/not_null_stg_gsheets_channel_shares_planned_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0310066, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_channel_shares_planned`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_gsheets_channel_shares_planned"}, "test.sql_repository_bz.unique_stg_gsheets_seo_top_pages_url_noutm.7212c20bfa": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "url_noutm", "model": "{{ get_where_subquery(ref('stg_gsheets_seo_top_pages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_seo_top_pages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "unique_stg_gsheets_seo_top_pages_url_noutm"], "unique_id": "test.sql_repository_bz.unique_stg_gsheets_seo_top_pages_url_noutm.7212c20bfa", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gsheets_seo_top_pages_url_noutm.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "unique_stg_gsheets_seo_top_pages_url_noutm", "alias": "unique_stg_gsheets_seo_top_pages_url_noutm", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_seo_top_pages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/unique_stg_gsheets_seo_top_pages_url_noutm.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0344841, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select url_noutm as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_seo_top_pages`\n  where url_noutm is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "url_noutm", "file_key_name": "models.stg_gsheets_seo_top_pages"}, "test.sql_repository_bz.not_null_stg_gsheets_seo_top_pages_url_noutm.110efcbb9c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "url_noutm", "model": "{{ get_where_subquery(ref('stg_gsheets_seo_top_pages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_seo_top_pages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "not_null_stg_gsheets_seo_top_pages_url_noutm"], "unique_id": "test.sql_repository_bz.not_null_stg_gsheets_seo_top_pages_url_noutm.110efcbb9c", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gsheets_seo_top_pages_url_noutm.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "not_null_stg_gsheets_seo_top_pages_url_noutm", "alias": "not_null_stg_gsheets_seo_top_pages_url_noutm", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_seo_top_pages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/not_null_stg_gsheets_seo_top_pages_url_noutm.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0373764, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_seo_top_pages`\nwhere url_noutm is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "url_noutm", "file_key_name": "models.stg_gsheets_seo_top_pages"}, "test.sql_repository_bz.unique_stg_gsheets_seo_magazin_reworked_url_noutm.685baa01e6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "url_noutm", "model": "{{ get_where_subquery(ref('stg_gsheets_seo_magazin_reworked')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_seo_magazin_reworked"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "unique_stg_gsheets_seo_magazin_reworked_url_noutm"], "unique_id": "test.sql_repository_bz.unique_stg_gsheets_seo_magazin_reworked_url_noutm.685baa01e6", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_gsheets_seo_magazin_reworked_url_noutm.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "unique_stg_gsheets_seo_magazin_reworked_url_noutm", "alias": "unique_stg_gsheets_seo_magazin_reworked_url_noutm", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_seo_magazin_reworked"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/unique_stg_gsheets_seo_magazin_reworked_url_noutm.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0401654, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select url_noutm as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_seo_magazin_reworked`\n  where url_noutm is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "url_noutm", "file_key_name": "models.stg_gsheets_seo_magazin_reworked"}, "test.sql_repository_bz.not_null_stg_gsheets_seo_magazin_reworked_url_noutm.dbd0d88abf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "url_noutm", "model": "{{ get_where_subquery(ref('stg_gsheets_seo_magazin_reworked')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_gsheets_seo_magazin_reworked"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "not_null_stg_gsheets_seo_magazin_reworked_url_noutm"], "unique_id": "test.sql_repository_bz.not_null_stg_gsheets_seo_magazin_reworked_url_noutm.dbd0d88abf", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_gsheets_seo_magazin_reworked_url_noutm.sql", "original_file_path": "models/01_staging/google_sheets/_models_stg_gsheets.yml", "name": "not_null_stg_gsheets_seo_magazin_reworked_url_noutm", "alias": "not_null_stg_gsheets_seo_magazin_reworked_url_noutm", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_gsheets_seo_magazin_reworked"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_models_stg_gsheets.yml/not_null_stg_gsheets_seo_magazin_reworked_url_noutm.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0428734, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_gsheets_seo_magazin_reworked`\nwhere url_noutm is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "url_noutm", "file_key_name": "models.stg_gsheets_seo_magazin_reworked"}, "test.sql_repository_bz.unique_stg_awin_return_adjustment_errors_order_id_awin.04b602641e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id_awin", "model": "{{ get_where_subquery(ref('stg_awin_return_adjustment_errors')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_return_adjustment_errors"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "unique_stg_awin_return_adjustment_errors_order_id_awin"], "unique_id": "test.sql_repository_bz.unique_stg_awin_return_adjustment_errors_order_id_awin.04b602641e", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_awin_return_adjustment_errors_order_id_awin.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "unique_stg_awin_return_adjustment_errors_order_id_awin", "alias": "unique_stg_awin_return_adjustment_errors_order_id_awin", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_return_adjustment_errors"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/unique_stg_awin_return_adjustment_errors_order_id_awin.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0617414, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select order_id_awin as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_awin_return_adjustment_errors`\n  where order_id_awin is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id_awin", "file_key_name": "models.stg_awin_return_adjustment_errors"}, "test.sql_repository_bz.not_null_stg_awin_return_adjustment_errors_order_id_awin.85c503044f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id_awin", "model": "{{ get_where_subquery(ref('stg_awin_return_adjustment_errors')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_return_adjustment_errors"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "not_null_stg_awin_return_adjustment_errors_order_id_awin"], "unique_id": "test.sql_repository_bz.not_null_stg_awin_return_adjustment_errors_order_id_awin.85c503044f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_awin_return_adjustment_errors_order_id_awin.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "not_null_stg_awin_return_adjustment_errors_order_id_awin", "alias": "not_null_stg_awin_return_adjustment_errors_order_id_awin", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_return_adjustment_errors"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/not_null_stg_awin_return_adjustment_errors_order_id_awin.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0647273, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_awin_return_adjustment_errors`\nwhere order_id_awin is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id_awin", "file_key_name": "models.stg_awin_return_adjustment_errors"}, "test.sql_repository_bz.not_null_stg_awin_return_adjustment_errors_inv_h_shop_order_id.96a5995894": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "inv_h_shop_order_id", "model": "{{ get_where_subquery(ref('stg_awin_return_adjustment_errors')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_return_adjustment_errors"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "not_null_stg_awin_return_adjustment_errors_inv_h_shop_order_id"], "unique_id": "test.sql_repository_bz.not_null_stg_awin_return_adjustment_errors_inv_h_shop_order_id.96a5995894", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_awin_return_adjustment_errors_inv_h_shop_order_id.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "not_null_stg_awin_return_adjustment_errors_inv_h_shop_order_id", "alias": "not_null_stg_awin_return_adjustment_errors_inv_h_shop_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_return_adjustment_errors"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/not_null_stg_awin_return_adjustment_errors_inv_h_shop_order_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0670805, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_awin_return_adjustment_errors`\nwhere inv_h_shop_order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "inv_h_shop_order_id", "file_key_name": "models.stg_awin_return_adjustment_errors"}, "test.sql_repository_bz.unique_stg_awin_return_adjustment_errors_inv_h_shop_order_id.2bd5e7e3da": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "inv_h_shop_order_id", "model": "{{ get_where_subquery(ref('stg_awin_return_adjustment_errors')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_return_adjustment_errors"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "unique_stg_awin_return_adjustment_errors_inv_h_shop_order_id"], "unique_id": "test.sql_repository_bz.unique_stg_awin_return_adjustment_errors_inv_h_shop_order_id.2bd5e7e3da", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_awin_return_adjustment_errors_inv_h_shop_order_id.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "unique_stg_awin_return_adjustment_errors_inv_h_shop_order_id", "alias": "unique_stg_awin_return_adjustment_errors_inv_h_shop_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_return_adjustment_errors"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/unique_stg_awin_return_adjustment_errors_inv_h_shop_order_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0700557, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select inv_h_shop_order_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_awin_return_adjustment_errors`\n  where inv_h_shop_order_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "inv_h_shop_order_id", "file_key_name": "models.stg_awin_return_adjustment_errors"}, "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_stg_awin_return_adjustment_errors_15__False.4bcfe012bd": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__0cbcccdd079f603179bbb77677f03759\") }}", "test_metadata": {"name": "expect_table_row_count_to_be_between", "kwargs": {"max_value": 15, "strictly": false, "model": "{{ get_where_subquery(ref('stg_awin_return_adjustment_errors')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_return_adjustment_errors"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__0cbcccdd079f603179bbb77677f03759", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "dbt_expectations_expect_table_row_count_to_be_between_stg_awin_return_adjustment_errors_15__False"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_stg_awin_return_adjustment_errors_15__False.4bcfe012bd", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_table__0cbcccdd079f603179bbb77677f03759.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "dbt_expectations_expect_table_row_count_to_be_between_stg_awin_return_adjustment_errors_15__False", "alias": "dbt_expectations_expect_table__0cbcccdd079f603179bbb77677f03759", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_return_adjustment_errors"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/dbt_expectations_expect_table__0cbcccdd079f603179bbb77677f03759.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__0cbcccdd079f603179bbb77677f03759"}, "created_at": 1663750852.0732384, "compiled_sql": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) <= 15\n)\n as expression\n\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_awin_return_adjustment_errors`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_awin_return_adjustment_errors"}, "test.sql_repository_bz.not_null_stg_awin_orders_all_order_id_awin.b7a1da485c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id_awin", "model": "{{ get_where_subquery(ref('stg_awin_orders_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_orders_all"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "not_null_stg_awin_orders_all_order_id_awin"], "unique_id": "test.sql_repository_bz.not_null_stg_awin_orders_all_order_id_awin.b7a1da485c", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_awin_orders_all_order_id_awin.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "not_null_stg_awin_orders_all_order_id_awin", "alias": "not_null_stg_awin_orders_all_order_id_awin", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_orders_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/not_null_stg_awin_orders_all_order_id_awin.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.083104, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_awin_orders_all`\nwhere order_id_awin is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id_awin", "file_key_name": "models.stg_awin_orders_all"}, "test.sql_repository_bz.unique_stg_awin_orders_all_order_id_awin.1ec1a6104e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">2\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id_awin", "model": "{{ get_where_subquery(ref('stg_awin_orders_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_orders_all"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">2", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "unique_stg_awin_orders_all_order_id_awin"], "unique_id": "test.sql_repository_bz.unique_stg_awin_orders_all_order_id_awin.1ec1a6104e", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_awin_orders_all_order_id_awin.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "unique_stg_awin_orders_all_order_id_awin", "alias": "unique_stg_awin_orders_all_order_id_awin", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_orders_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/unique_stg_awin_orders_all_order_id_awin.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN", "warn_if": ">2"}, "created_at": 1663750852.0889418, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select order_id_awin as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_awin_orders_all`\n  where order_id_awin is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id_awin", "file_key_name": "models.stg_awin_orders_all"}, "test.sql_repository_bz.unique_stg_awin_orders_all_order_id.2f1c74c206": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">2\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_awin_orders_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_orders_all"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">2", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "unique_stg_awin_orders_all_order_id"], "unique_id": "test.sql_repository_bz.unique_stg_awin_orders_all_order_id.2f1c74c206", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_awin_orders_all_order_id.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "unique_stg_awin_orders_all_order_id", "alias": "unique_stg_awin_orders_all_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_orders_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/unique_stg_awin_orders_all_order_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN", "warn_if": ">2"}, "created_at": 1663750852.0932918, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select order_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_awin_orders_all`\n  where order_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id", "file_key_name": "models.stg_awin_orders_all"}, "test.sql_repository_bz.not_null_stg_awin_orders_all_order_id.587cb4b3c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_awin_orders_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_orders_all"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "not_null_stg_awin_orders_all_order_id"], "unique_id": "test.sql_repository_bz.not_null_stg_awin_orders_all_order_id.587cb4b3c0", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_awin_orders_all_order_id.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "not_null_stg_awin_orders_all_order_id", "alias": "not_null_stg_awin_orders_all_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_orders_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/not_null_stg_awin_orders_all_order_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0963132, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_awin_orders_all`\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id", "file_key_name": "models.stg_awin_orders_all"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_awin_orders_all_order_id.2506a6b5f5": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_awin_orders_all')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_orders_all"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "dbt_utils_at_least_one_stg_awin_orders_all_order_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_awin_orders_all_order_id.2506a6b5f5", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_awin_orders_all_order_id.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "dbt_utils_at_least_one_stg_awin_orders_all_order_id", "alias": "dbt_utils_at_least_one_stg_awin_orders_all_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_orders_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/dbt_utils_at_least_one_stg_awin_orders_all_order_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.0997488, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(order_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_awin_orders_all`\n\n    having count(order_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id", "file_key_name": "models.stg_awin_orders_all"}, "test.sql_repository_bz.not_null_stg_awin_orders_all_sale_amount_awin.cfd6a08f74": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sale_amount_awin", "model": "{{ get_where_subquery(ref('stg_awin_orders_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_orders_all"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "not_null_stg_awin_orders_all_sale_amount_awin"], "unique_id": "test.sql_repository_bz.not_null_stg_awin_orders_all_sale_amount_awin.cfd6a08f74", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_awin_orders_all_sale_amount_awin.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "not_null_stg_awin_orders_all_sale_amount_awin", "alias": "not_null_stg_awin_orders_all_sale_amount_awin", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_orders_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/not_null_stg_awin_orders_all_sale_amount_awin.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.106412, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_awin_orders_all`\nwhere sale_amount_awin is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sale_amount_awin", "file_key_name": "models.stg_awin_orders_all"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__1__awin_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.ce4c453dd9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">5\",alias=\"dbt_expectations_expect_column_1ee9107c4dc971eb2dd26a4ba507c53c\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 1, "row_condition": "awin_date between date_sub(current_date(), interval 30 day) and date_sub(current_date(), interval 1 day)", "column_name": "sale_amount_awin", "model": "{{ get_where_subquery(ref('stg_awin_orders_all')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_orders_all"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1ee9107c4dc971eb2dd26a4ba507c53c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">5", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__1__awin_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__1__awin_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.ce4c453dd9", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_1ee9107c4dc971eb2dd26a4ba507c53c.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__1__awin_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_1ee9107c4dc971eb2dd26a4ba507c53c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_orders_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/dbt_expectations_expect_column_1ee9107c4dc971eb2dd26a4ba507c53c.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">5", "alias": "dbt_expectations_expect_column_1ee9107c4dc971eb2dd26a4ba507c53c"}, "created_at": 1663750852.1111398, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and sale_amount_awin >= 1\n)\n as expression\n\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_awin_orders_all`\n    where\n        awin_date between date_sub(current_date(), interval 30 day) and date_sub(current_date(), interval 1 day)\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sale_amount_awin", "file_key_name": "models.stg_awin_orders_all"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__5000__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_.a4cb09bf6b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_expectations_expect_column_083873d4cca121928829a6dcb6a6b049\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"max_value": 5000, "row_condition": "awin_date between date_sub(current_date(), interval 3 day) and date_sub(current_date(), interval 1 day)", "column_name": "sale_amount_awin", "model": "{{ get_where_subquery(ref('stg_awin_orders_all')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_orders_all"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_083873d4cca121928829a6dcb6a6b049", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__5000__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__5000__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_.a4cb09bf6b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_083873d4cca121928829a6dcb6a6b049.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__5000__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_083873d4cca121928829a6dcb6a6b049", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_orders_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/dbt_expectations_expect_column_083873d4cca121928829a6dcb6a6b049.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "dbt_expectations_expect_column_083873d4cca121928829a6dcb6a6b049"}, "created_at": 1663750852.1190069, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and sale_amount_awin <= 5000\n)\n as expression\n\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_awin_orders_all`\n    where\n        awin_date between date_sub(current_date(), interval 3 day) and date_sub(current_date(), interval 1 day)\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sale_amount_awin", "file_key_name": "models.stg_awin_orders_all"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_awin_orders_all_awin_date__day__awin_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.6b0230aaa7": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_7158233b51694ca7e0efff81a58131b6\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "awin_date", "date_part": "day", "row_condition": "awin_date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_awin_orders_all')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_orders_all"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_7158233b51694ca7e0efff81a58131b6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_awin_orders_all_awin_date__day__awin_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_awin_orders_all_awin_date__day__awin_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.6b0230aaa7", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_7158233b51694ca7e0efff81a58131b6.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_awin_orders_all_awin_date__day__awin_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_7158233b51694ca7e0efff81a58131b6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_orders_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/dbt_expectations_expect_row_va_7158233b51694ca7e0efff81a58131b6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_7158233b51694ca7e0efff81a58131b6"}, "created_at": 1663750852.1263523, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 6\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-14' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(awin_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_awin_orders_all` f\n    \n    where awin_date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_awin_orders_all"}, "test.sql_repository_bz.max_row_count_change_from_prev_day_to_yesterday_in_percent_stg_awin_orders_all_100__awin_date.b4c3180cdc": {"raw_sql": "{{ test_max_row_count_change_from_prev_day_to_yesterday_in_percent(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"max_row_count_change_from_prev_49c93fe268cde271979b6bc999d08717\") }}", "test_metadata": {"name": "max_row_count_change_from_prev_day_to_yesterday_in_percent", "kwargs": {"date_col": "awin_date", "change_threshold_in_percent": 100, "model": "{{ get_where_subquery(ref('stg_awin_orders_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.sql_repository_bz.test_max_row_count_change_from_prev_day_to_yesterday_in_percent", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_awin_orders_all"]}, "config": {"enabled": true, "alias": "max_row_count_change_from_prev_49c93fe268cde271979b6bc999d08717", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "max_row_count_change_from_prev_day_to_yesterday_in_percent_stg_awin_orders_all_100__awin_date"], "unique_id": "test.sql_repository_bz.max_row_count_change_from_prev_day_to_yesterday_in_percent_stg_awin_orders_all_100__awin_date.b4c3180cdc", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "max_row_count_change_from_prev_49c93fe268cde271979b6bc999d08717.sql", "original_file_path": "models/01_staging/affiliate_awin/_models_stg_awin.yml", "name": "max_row_count_change_from_prev_day_to_yesterday_in_percent_stg_awin_orders_all_100__awin_date", "alias": "max_row_count_change_from_prev_49c93fe268cde271979b6bc999d08717", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_awin_orders_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/affiliate_awin/_models_stg_awin.yml/max_row_count_change_from_prev_49c93fe268cde271979b6bc999d08717.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "max_row_count_change_from_prev_49c93fe268cde271979b6bc999d08717"}, "created_at": 1663750852.1362188, "compiled_sql": "\n \nwith data_yesterday as (\n \n   select\n        'key' as key,\n        count(*) as row_count_yesterday\n   from `bergzeit`.`dbt_analytics_staging`.`stg_awin_orders_all`\n   where awin_date = date_sub(current_date(), interval 1 day)\n   group by 1\n \n),\n\ndata_prev_day as (\n \n   select\n        'key' as key,\n        count(*) as row_count_prev_day\n   from `bergzeit`.`dbt_analytics_staging`.`stg_awin_orders_all`\n   where awin_date = date_sub(current_date(), interval 2 day)\n   group by 1\n \n),\n\ndate_values_joined_and_compared as (\n\n   /* Calculate the relative difference from previous day to yesterday */\n   /* Example: (2500 - 1500) / 1500 = 500 / 1500 = 0.33 */\n   select \n      abs(row_count_yesterday - row_count_prev_day)/ row_count_prev_day * 100 as relative_difference_in_percent\n   from data_yesterday\n   left join data_prev_day using (key)\n   \n),\n\n\nvalidation_error as (\n \n   select *\n   from date_values_joined_and_compared\n   /* if the observed difference is greater than the threshold, the query returns one row */\n   where relative_difference_in_percent > 100\n \n)\n \nselect * from validation_error\n \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_awin_orders_all"}, "test.sql_repository_bz.not_null_stg_pagespeed_url_data_date_url_id.022036751d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_url_id", "model": "{{ get_where_subquery(ref('stg_pagespeed_url_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_pagespeed_url_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_pagespeed", "not_null_stg_pagespeed_url_data_date_url_id"], "unique_id": "test.sql_repository_bz.not_null_stg_pagespeed_url_data_date_url_id.022036751d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_pagespeed_url_data_date_url_id.sql", "original_file_path": "models/01_staging/google_pagespeed/_models_pagespeed.yml", "name": "not_null_stg_pagespeed_url_data_date_url_id", "alias": "not_null_stg_pagespeed_url_data_date_url_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pagespeed_url_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_pagespeed/_models_pagespeed.yml/not_null_stg_pagespeed_url_data_date_url_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.1793857, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_pagespeed_url_data`\nwhere date_url_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_url_id", "file_key_name": "models.stg_pagespeed_url_data"}, "test.sql_repository_bz.unique_stg_pagespeed_url_data_date_url_id.df1b23f779": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "date_url_id", "model": "{{ get_where_subquery(ref('stg_pagespeed_url_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_pagespeed_url_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_pagespeed", "unique_stg_pagespeed_url_data_date_url_id"], "unique_id": "test.sql_repository_bz.unique_stg_pagespeed_url_data_date_url_id.df1b23f779", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_pagespeed_url_data_date_url_id.sql", "original_file_path": "models/01_staging/google_pagespeed/_models_pagespeed.yml", "name": "unique_stg_pagespeed_url_data_date_url_id", "alias": "unique_stg_pagespeed_url_data_date_url_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pagespeed_url_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_pagespeed/_models_pagespeed.yml/unique_stg_pagespeed_url_data_date_url_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.1823268, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select date_url_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_pagespeed_url_data`\n  where date_url_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_url_id", "file_key_name": "models.stg_pagespeed_url_data"}, "test.sql_repository_bz.not_null_stg_pagespeed_url_data_date.de9a6dd3e8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_pagespeed_url_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_pagespeed_url_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_pagespeed", "not_null_stg_pagespeed_url_data_date"], "unique_id": "test.sql_repository_bz.not_null_stg_pagespeed_url_data_date.de9a6dd3e8", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_pagespeed_url_data_date.sql", "original_file_path": "models/01_staging/google_pagespeed/_models_pagespeed.yml", "name": "not_null_stg_pagespeed_url_data_date", "alias": "not_null_stg_pagespeed_url_data_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pagespeed_url_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_pagespeed/_models_pagespeed.yml/not_null_stg_pagespeed_url_data_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.1851108, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_pagespeed_url_data`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.stg_pagespeed_url_data"}, "test.sql_repository_bz.not_null_stg_pagespeed_url_data_country.b705d25b17": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('stg_pagespeed_url_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_pagespeed_url_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_pagespeed", "not_null_stg_pagespeed_url_data_country"], "unique_id": "test.sql_repository_bz.not_null_stg_pagespeed_url_data_country.b705d25b17", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_pagespeed_url_data_country.sql", "original_file_path": "models/01_staging/google_pagespeed/_models_pagespeed.yml", "name": "not_null_stg_pagespeed_url_data_country", "alias": "not_null_stg_pagespeed_url_data_country", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pagespeed_url_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_pagespeed/_models_pagespeed.yml/not_null_stg_pagespeed_url_data_country.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.187841, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_pagespeed_url_data`\nwhere country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "country", "file_key_name": "models.stg_pagespeed_url_data"}, "test.sql_repository_bz.not_null_stg_pagespeed_url_data_domain.13cc19c93c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "domain", "model": "{{ get_where_subquery(ref('stg_pagespeed_url_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_pagespeed_url_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_pagespeed", "not_null_stg_pagespeed_url_data_domain"], "unique_id": "test.sql_repository_bz.not_null_stg_pagespeed_url_data_domain.13cc19c93c", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_pagespeed_url_data_domain.sql", "original_file_path": "models/01_staging/google_pagespeed/_models_pagespeed.yml", "name": "not_null_stg_pagespeed_url_data_domain", "alias": "not_null_stg_pagespeed_url_data_domain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pagespeed_url_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_pagespeed/_models_pagespeed.yml/not_null_stg_pagespeed_url_data_domain.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.1909068, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_pagespeed_url_data`\nwhere domain is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "domain", "file_key_name": "models.stg_pagespeed_url_data"}, "test.sql_repository_bz.not_null_stg_pagespeed_url_data_cumulative_layout_shift_s.22056433d4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cumulative_layout_shift_s", "model": "{{ get_where_subquery(ref('stg_pagespeed_url_data')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_pagespeed_url_data"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_pagespeed", "not_null_stg_pagespeed_url_data_cumulative_layout_shift_s"], "unique_id": "test.sql_repository_bz.not_null_stg_pagespeed_url_data_cumulative_layout_shift_s.22056433d4", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_pagespeed_url_data_cumulative_layout_shift_s.sql", "original_file_path": "models/01_staging/google_pagespeed/_models_pagespeed.yml", "name": "not_null_stg_pagespeed_url_data_cumulative_layout_shift_s", "alias": "not_null_stg_pagespeed_url_data_cumulative_layout_shift_s", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pagespeed_url_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_pagespeed/_models_pagespeed.yml/not_null_stg_pagespeed_url_data_cumulative_layout_shift_s.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.1935477, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_pagespeed_url_data`\nwhere cumulative_layout_shift_s is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cumulative_layout_shift_s", "file_key_name": "models.stg_pagespeed_url_data"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_pagespeed_url_data_cumulative_layout_shift_s__5__0__date_2022_09_09_.868a68f183": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8cbafb248f81587d69d04e0c1c73b2c8\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "max_value": 5, "row_condition": "date >= '2022-09-09'", "column_name": "cumulative_layout_shift_s", "model": "{{ get_where_subquery(ref('stg_pagespeed_url_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_pagespeed_url_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8cbafb248f81587d69d04e0c1c73b2c8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_pagespeed", "dbt_expectations_expect_column_values_to_be_between_stg_pagespeed_url_data_cumulative_layout_shift_s__5__0__date_2022_09_09_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_pagespeed_url_data_cumulative_layout_shift_s__5__0__date_2022_09_09_.868a68f183", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_8cbafb248f81587d69d04e0c1c73b2c8.sql", "original_file_path": "models/01_staging/google_pagespeed/_models_pagespeed.yml", "name": "dbt_expectations_expect_column_values_to_be_between_stg_pagespeed_url_data_cumulative_layout_shift_s__5__0__date_2022_09_09_", "alias": "dbt_expectations_expect_column_8cbafb248f81587d69d04e0c1c73b2c8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pagespeed_url_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_pagespeed/_models_pagespeed.yml/dbt_expectations_expect_column_8cbafb248f81587d69d04e0c1c73b2c8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8cbafb248f81587d69d04e0c1c73b2c8"}, "created_at": 1663750852.1957355, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and cumulative_layout_shift_s >= 0 and cumulative_layout_shift_s <= 5\n)\n as expression\n\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_pagespeed_url_data`\n    where\n        date >= '2022-09-09'\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cumulative_layout_shift_s", "file_key_name": "models.stg_pagespeed_url_data"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_pagespeed_url_data_date__day.b864fe735a": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_ebcd2eb82bd4c80e64b92ce69c93dc40\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "model": "{{ get_where_subquery(ref('stg_pagespeed_url_data')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_pagespeed_url_data"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_ebcd2eb82bd4c80e64b92ce69c93dc40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_pagespeed", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_pagespeed_url_data_date__day"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_pagespeed_url_data_date__day.b864fe735a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_ebcd2eb82bd4c80e64b92ce69c93dc40.sql", "original_file_path": "models/01_staging/google_pagespeed/_models_pagespeed.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_pagespeed_url_data_date__day", "alias": "dbt_expectations_expect_row_va_ebcd2eb82bd4c80e64b92ce69c93dc40", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_pagespeed_url_data"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_pagespeed/_models_pagespeed.yml/dbt_expectations_expect_row_va_ebcd2eb82bd4c80e64b92ce69c93dc40.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_ebcd2eb82bd4c80e64b92ce69c93dc40"}, "created_at": 1663750852.2033956, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 14\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-06' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_pagespeed_url_data` f\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_pagespeed_url_data"}, "test.sql_repository_bz.unique_stg_ga_performance_costs_sk_id.bf171ab0d3": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_performance_costs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_performance_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">1", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "unique_stg_ga_performance_costs_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_ga_performance_costs_sk_id.bf171ab0d3", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_ga_performance_costs_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/performance_cost/_models_ga_performance_costs.yml", "name": "unique_stg_ga_performance_costs_sk_id", "alias": "unique_stg_ga_performance_costs_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_performance_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/performance_cost/_models_ga_performance_costs.yml/unique_stg_ga_performance_costs_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN", "warn_if": ">1"}, "created_at": 1663750852.264155, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_costs`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_performance_costs"}, "test.sql_repository_bz.not_null_stg_ga_performance_costs_sk_id.3dbb6b9b6a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_performance_costs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_performance_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "not_null_stg_ga_performance_costs_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_performance_costs_sk_id.3dbb6b9b6a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_performance_costs_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/performance_cost/_models_ga_performance_costs.yml", "name": "not_null_stg_ga_performance_costs_sk_id", "alias": "not_null_stg_ga_performance_costs_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_performance_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/performance_cost/_models_ga_performance_costs.yml/not_null_stg_ga_performance_costs_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.2674687, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_costs`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_performance_costs"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_performance_costs_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.6f52d48874": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_ebaf959426d23bcc983a8ee4df99367c\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_performance_costs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_performance_costs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_ebaf959426d23bcc983a8ee4df99367c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_performance_costs_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_performance_costs_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.6f52d48874", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_ebaf959426d23bcc983a8ee4df99367c.sql", "original_file_path": "models/01_staging/google_analytics/performance_cost/_models_ga_performance_costs.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_performance_costs_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_ebaf959426d23bcc983a8ee4df99367c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_performance_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/performance_cost/_models_ga_performance_costs.yml/dbt_expectations_expect_row_va_ebaf959426d23bcc983a8ee4df99367c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_ebaf959426d23bcc983a8ee4df99367c"}, "created_at": 1663750852.2703178, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_costs` f\n    \n    where date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_performance_costs"}, "test.sql_repository_bz.unique_stg_ga_performance_cost_validation_sk_id.1458d8ac6d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_performance_cost_validation')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_performance_cost_validation"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">1", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "unique_stg_ga_performance_cost_validation_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_ga_performance_cost_validation_sk_id.1458d8ac6d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_ga_performance_cost_validation_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/performance_cost/_models_ga_performance_costs.yml", "name": "unique_stg_ga_performance_cost_validation_sk_id", "alias": "unique_stg_ga_performance_cost_validation_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_performance_cost_validation"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/performance_cost/_models_ga_performance_costs.yml/unique_stg_ga_performance_cost_validation_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN", "warn_if": ">1"}, "created_at": 1663750852.2809072, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_cost_validation`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_performance_cost_validation"}, "test.sql_repository_bz.not_null_stg_ga_performance_cost_validation_sk_id.1f89130650": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_performance_cost_validation')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_performance_cost_validation"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "not_null_stg_ga_performance_cost_validation_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_performance_cost_validation_sk_id.1f89130650", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_performance_cost_validation_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/performance_cost/_models_ga_performance_costs.yml", "name": "not_null_stg_ga_performance_cost_validation_sk_id", "alias": "not_null_stg_ga_performance_cost_validation_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_performance_cost_validation"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/performance_cost/_models_ga_performance_costs.yml/not_null_stg_ga_performance_cost_validation_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.2838137, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_performance_cost_validation`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_performance_cost_validation"}, "test.sql_repository_bz.unique_stg_ga_pagespeed_per_pagetype_sk_id.9eddc42fea": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">10\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_pagespeed_per_pagetype')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_pagespeed_per_pagetype"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">10", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "unique_stg_ga_pagespeed_per_pagetype_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_ga_pagespeed_per_pagetype_sk_id.9eddc42fea", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_ga_pagespeed_per_pagetype_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/pages/_models_ga_pages.yml", "name": "unique_stg_ga_pagespeed_per_pagetype_sk_id", "alias": "unique_stg_ga_pagespeed_per_pagetype_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_pagespeed_per_pagetype"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/_models_ga_pages.yml/unique_stg_ga_pagespeed_per_pagetype_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN", "warn_if": ">10"}, "created_at": 1663750852.3090534, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_ga_pagespeed_per_pagetype`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_pagespeed_per_pagetype"}, "test.sql_repository_bz.not_null_stg_ga_pagespeed_per_pagetype_sk_id.7aec915dea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_pagespeed_per_pagetype')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_pagespeed_per_pagetype"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "not_null_stg_ga_pagespeed_per_pagetype_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_pagespeed_per_pagetype_sk_id.7aec915dea", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_pagespeed_per_pagetype_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/pages/_models_ga_pages.yml", "name": "not_null_stg_ga_pagespeed_per_pagetype_sk_id", "alias": "not_null_stg_ga_pagespeed_per_pagetype_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_pagespeed_per_pagetype"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/_models_ga_pages.yml/not_null_stg_ga_pagespeed_per_pagetype_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.3116267, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_pagespeed_per_pagetype`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_pagespeed_per_pagetype"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pagespeed_per_pagetype_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.50512cba29": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_d7de84c7bd04d6bf9e106a2b57282f0d\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "ga_date", "date_part": "day", "row_condition": "ga_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_pagespeed_per_pagetype')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_pagespeed_per_pagetype"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_d7de84c7bd04d6bf9e106a2b57282f0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pagespeed_per_pagetype_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pagespeed_per_pagetype_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.50512cba29", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_d7de84c7bd04d6bf9e106a2b57282f0d.sql", "original_file_path": "models/01_staging/google_analytics/pages/_models_ga_pages.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pagespeed_per_pagetype_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_d7de84c7bd04d6bf9e106a2b57282f0d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_pagespeed_per_pagetype"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/_models_ga_pages.yml/dbt_expectations_expect_row_va_d7de84c7bd04d6bf9e106a2b57282f0d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_d7de84c7bd04d6bf9e106a2b57282f0d"}, "created_at": 1663750852.3140275, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(ga_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_pagespeed_per_pagetype` f\n    \n    where ga_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_pagespeed_per_pagetype"}, "test.sql_repository_bz.not_null_stg_ga_page_types_date.013abb6e60": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_ga_page_types')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_page_types"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "not_null_stg_ga_page_types_date"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_page_types_date.013abb6e60", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_page_types_date.sql", "original_file_path": "models/01_staging/google_analytics/pages/_models_ga_pages.yml", "name": "not_null_stg_ga_page_types_date", "alias": "not_null_stg_ga_page_types_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_page_types"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/_models_ga_pages.yml/not_null_stg_ga_page_types_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.3232508, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_page_types`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.stg_ga_page_types"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_page_types_date.d195ea7cc4": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_ga_page_types')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_page_types"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "dbt_utils_at_least_one_stg_ga_page_types_date"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_page_types_date.d195ea7cc4", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_ga_page_types_date.sql", "original_file_path": "models/01_staging/google_analytics/pages/_models_ga_pages.yml", "name": "dbt_utils_at_least_one_stg_ga_page_types_date", "alias": "dbt_utils_at_least_one_stg_ga_page_types_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_page_types"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/_models_ga_pages.yml/dbt_utils_at_least_one_stg_ga_page_types_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.3258855, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(date) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_page_types`\n\n    having count(date) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.stg_ga_page_types"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_page_types_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.dd4ba2f67e": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_f4899c4e09ee14b67b6bc9f92cd2a3df\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_page_types')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_page_types"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_f4899c4e09ee14b67b6bc9f92cd2a3df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_page_types_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_page_types_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.dd4ba2f67e", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_f4899c4e09ee14b67b6bc9f92cd2a3df.sql", "original_file_path": "models/01_staging/google_analytics/pages/_models_ga_pages.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_page_types_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_f4899c4e09ee14b67b6bc9f92cd2a3df", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_page_types"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/_models_ga_pages.yml/dbt_expectations_expect_row_va_f4899c4e09ee14b67b6bc9f92cd2a3df.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_f4899c4e09ee14b67b6bc9f92cd2a3df"}, "created_at": 1663750852.3318558, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_page_types` f\n    \n    where date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_page_types"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pageviews_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.b28b8c6670": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9f6075bf12cd2b31ae2fe1bfca703376\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "pv_date", "date_part": "day", "row_condition": "pv_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_pageviews')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_pageviews"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9f6075bf12cd2b31ae2fe1bfca703376", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pageviews_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pageviews_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.b28b8c6670", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_9f6075bf12cd2b31ae2fe1bfca703376.sql", "original_file_path": "models/01_staging/google_analytics/pages/_models_ga_pages.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pageviews_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_9f6075bf12cd2b31ae2fe1bfca703376", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_pageviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/_models_ga_pages.yml/dbt_expectations_expect_row_va_9f6075bf12cd2b31ae2fe1bfca703376.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_9f6075bf12cd2b31ae2fe1bfca703376"}, "created_at": 1663750852.341039, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(pv_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_pageviews` f\n    \n    where pv_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_pageviews"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_detail_pages_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.e2cd1791a2": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_578501cddd9f8206c11db0b7b05d1ee3\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "pv_date", "date_part": "day", "row_condition": "pv_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_product_detail_pages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_product_detail_pages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_578501cddd9f8206c11db0b7b05d1ee3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_detail_pages_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_detail_pages_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.e2cd1791a2", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_578501cddd9f8206c11db0b7b05d1ee3.sql", "original_file_path": "models/01_staging/google_analytics/pages/_models_ga_pages.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_detail_pages_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_578501cddd9f8206c11db0b7b05d1ee3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_product_detail_pages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/_models_ga_pages.yml/dbt_expectations_expect_row_va_578501cddd9f8206c11db0b7b05d1ee3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_578501cddd9f8206c11db0b7b05d1ee3"}, "created_at": 1663750852.3491056, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(pv_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_product_detail_pages` f\n    \n    where pv_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_product_detail_pages"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_internal_search_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.d3b47f08ba": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_341653ec994e6c743060ec44513438e2\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "ga_date", "date_part": "day", "row_condition": "ga_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_internal_search')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_internal_search"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_341653ec994e6c743060ec44513438e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "pages", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_internal_search_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_internal_search_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.d3b47f08ba", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_341653ec994e6c743060ec44513438e2.sql", "original_file_path": "models/01_staging/google_analytics/pages/_models_ga_pages.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_internal_search_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_341653ec994e6c743060ec44513438e2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_internal_search"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/pages/_models_ga_pages.yml/dbt_expectations_expect_row_va_341653ec994e6c743060ec44513438e2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_341653ec994e6c743060ec44513438e2"}, "created_at": 1663750852.3574564, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(ga_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_internal_search` f\n    \n    where ga_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_internal_search"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_checkouts_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.68a80f7534": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_4f6df4f3eb0db169687b4800cd061a56\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "ga_date", "date_part": "day", "row_condition": "ga_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_product_checkouts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_product_checkouts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_4f6df4f3eb0db169687b4800cd061a56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "products", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_checkouts_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_checkouts_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.68a80f7534", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_4f6df4f3eb0db169687b4800cd061a56.sql", "original_file_path": "models/01_staging/google_analytics/products/_models_ga_products.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_checkouts_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_4f6df4f3eb0db169687b4800cd061a56", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_product_checkouts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/products/_models_ga_products.yml/dbt_expectations_expect_row_va_4f6df4f3eb0db169687b4800cd061a56.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_4f6df4f3eb0db169687b4800cd061a56"}, "created_at": 1663750852.3767707, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(ga_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_product_checkouts` f\n    \n    where ga_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_product_checkouts"}, "test.sql_repository_bz.not_null_stg_ga_products_sk_id.df1d8c24ac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_products')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_products"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "products", "not_null_stg_ga_products_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_products_sk_id.df1d8c24ac", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_products_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/products/_models_ga_products.yml", "name": "not_null_stg_ga_products_sk_id", "alias": "not_null_stg_ga_products_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/products/_models_ga_products.yml/not_null_stg_ga_products_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.3855517, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_products`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_products"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_products_sk_id__date_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_.9642857c67": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">10000\",alias=\"dbt_expectations_expect_column_1a0fdaa7c24c4137e946e48defc5d987\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "date between date_sub(current_date(), interval 1 day) and date_sub(current_date(), interval 1 day)", "column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_products')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_products"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1a0fdaa7c24c4137e946e48defc5d987", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">10000", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "products", "dbt_expectations_expect_column_values_to_be_unique_stg_ga_products_sk_id__date_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_products_sk_id__date_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_.9642857c67", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_1a0fdaa7c24c4137e946e48defc5d987.sql", "original_file_path": "models/01_staging/google_analytics/products/_models_ga_products.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_ga_products_sk_id__date_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_1a0fdaa7c24c4137e946e48defc5d987", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/products/_models_ga_products.yml/dbt_expectations_expect_column_1a0fdaa7c24c4137e946e48defc5d987.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">10000", "alias": "dbt_expectations_expect_column_1a0fdaa7c24c4137e946e48defc5d987"}, "created_at": 1663750852.3894482, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        sk_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_products`\n    where\n        1=1\n        and \n    date between date_sub(current_date(), interval 1 day) and date_sub(current_date(), interval 1 day) and\n\n        (\n            sk_id is not null\n            \n        )\n    \n    group by\n        sk_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_products"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_products_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.2773918a90": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_1567a7060d9f3197bea53cdba8124a4a\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_products')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_products"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_1567a7060d9f3197bea53cdba8124a4a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "products", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_products_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_products_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.2773918a90", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_1567a7060d9f3197bea53cdba8124a4a.sql", "original_file_path": "models/01_staging/google_analytics/products/_models_ga_products.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_products_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_1567a7060d9f3197bea53cdba8124a4a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/products/_models_ga_products.yml/dbt_expectations_expect_row_va_1567a7060d9f3197bea53cdba8124a4a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_1567a7060d9f3197bea53cdba8124a4a"}, "created_at": 1663750852.3961608, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_products` f\n    \n    where date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_products"}, "test.sql_repository_bz.not_null_stg_ga4_products_sk_id.b1a82e3783": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga4_products')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_products"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "products", "not_null_stg_ga4_products_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga4_products_sk_id.b1a82e3783", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga4_products_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/products/_models_ga4_products.yml", "name": "not_null_stg_ga4_products_sk_id", "alias": "not_null_stg_ga4_products_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/products/_models_ga4_products.yml/not_null_stg_ga4_products_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.4088635, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga4_products`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga4_products"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_products_sk_id__event_date_dt_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_.d99030f1d4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">10000\",alias=\"dbt_expectations_expect_column_baaf5579bc6168aa3f6d5ccbfe1e8a81\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "event_date_dt between date_sub(current_date(), interval 1 day) and date_sub(current_date(), interval 1 day)", "column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga4_products')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_products"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_baaf5579bc6168aa3f6d5ccbfe1e8a81", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">10000", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "products", "dbt_expectations_expect_column_values_to_be_unique_stg_ga4_products_sk_id__event_date_dt_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_products_sk_id__event_date_dt_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_.d99030f1d4", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_baaf5579bc6168aa3f6d5ccbfe1e8a81.sql", "original_file_path": "models/01_staging/google_analytics/products/_models_ga4_products.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_ga4_products_sk_id__event_date_dt_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_baaf5579bc6168aa3f6d5ccbfe1e8a81", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_products"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/products/_models_ga4_products.yml/dbt_expectations_expect_column_baaf5579bc6168aa3f6d5ccbfe1e8a81.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">10000", "alias": "dbt_expectations_expect_column_baaf5579bc6168aa3f6d5ccbfe1e8a81"}, "created_at": 1663750852.4126456, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        sk_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga4_products`\n    where\n        1=1\n        and \n    event_date_dt between date_sub(current_date(), interval 1 day) and date_sub(current_date(), interval 1 day) and\n\n        (\n            sk_id is not null\n            \n        )\n    \n    group by\n        sk_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga4_products"}, "test.sql_repository_bz.unique_stg_ga_session_totals_sk_id.5a638092dc": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_session_totals')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_session_totals"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "sessions", "unique_stg_ga_session_totals_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_ga_session_totals_sk_id.5a638092dc", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_ga_session_totals_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/sessions/_models_ga_sessions.yml", "name": "unique_stg_ga_session_totals_sk_id", "alias": "unique_stg_ga_session_totals_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_session_totals"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/sessions/_models_ga_sessions.yml/unique_stg_ga_session_totals_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.4289513, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_ga_session_totals`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_session_totals"}, "test.sql_repository_bz.not_null_stg_ga_session_totals_channel_grouping.21feb97e6a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "channel_grouping", "model": "{{ get_where_subquery(ref('stg_ga_session_totals')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_session_totals"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "sessions", "not_null_stg_ga_session_totals_channel_grouping"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_session_totals_channel_grouping.21feb97e6a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_session_totals_channel_grouping.sql", "original_file_path": "models/01_staging/google_analytics/sessions/_models_ga_sessions.yml", "name": "not_null_stg_ga_session_totals_channel_grouping", "alias": "not_null_stg_ga_session_totals_channel_grouping", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_session_totals"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/sessions/_models_ga_sessions.yml/not_null_stg_ga_session_totals_channel_grouping.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.4318318, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_session_totals`\nwhere channel_grouping is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "channel_grouping", "file_key_name": "models.stg_ga_session_totals"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_ga_session_totals_channel_grouping.ac3f4db203": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_db44cff0106be14f992fac7fc1990dec\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "channel_grouping", "model": "{{ get_where_subquery(ref('stg_ga_session_totals')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_session_totals"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_db44cff0106be14f992fac7fc1990dec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "sessions", "dbt_expectations_expect_column_to_exist_stg_ga_session_totals_channel_grouping"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_ga_session_totals_channel_grouping.ac3f4db203", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_db44cff0106be14f992fac7fc1990dec.sql", "original_file_path": "models/01_staging/google_analytics/sessions/_models_ga_sessions.yml", "name": "dbt_expectations_expect_column_to_exist_stg_ga_session_totals_channel_grouping", "alias": "dbt_expectations_expect_column_db44cff0106be14f992fac7fc1990dec", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_session_totals"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/sessions/_models_ga_sessions.yml/dbt_expectations_expect_column_db44cff0106be14f992fac7fc1990dec.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_db44cff0106be14f992fac7fc1990dec"}, "created_at": 1663750852.4343967, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CHANNEL_GROUPING' as \n    string\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "channel_grouping", "file_key_name": "models.stg_ga_session_totals"}, "test.sql_repository_bz.not_null_stg_ga_session_totals_hits.462e48d6f1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hits", "model": "{{ get_where_subquery(ref('stg_ga_session_totals')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_session_totals"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "sessions", "not_null_stg_ga_session_totals_hits"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_session_totals_hits.462e48d6f1", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_session_totals_hits.sql", "original_file_path": "models/01_staging/google_analytics/sessions/_models_ga_sessions.yml", "name": "not_null_stg_ga_session_totals_hits", "alias": "not_null_stg_ga_session_totals_hits", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_session_totals"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/sessions/_models_ga_sessions.yml/not_null_stg_ga_session_totals_hits.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.4413266, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_session_totals`\nwhere hits is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hits", "file_key_name": "models.stg_ga_session_totals"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_session_totals_hits.049b727064": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "hits", "model": "{{ get_where_subquery(ref('stg_ga_session_totals')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_session_totals"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "sessions", "dbt_utils_at_least_one_stg_ga_session_totals_hits"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_session_totals_hits.049b727064", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_ga_session_totals_hits.sql", "original_file_path": "models/01_staging/google_analytics/sessions/_models_ga_sessions.yml", "name": "dbt_utils_at_least_one_stg_ga_session_totals_hits", "alias": "dbt_utils_at_least_one_stg_ga_session_totals_hits", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_session_totals"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/sessions/_models_ga_sessions.yml/dbt_utils_at_least_one_stg_ga_session_totals_hits.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.4439743, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(hits) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_session_totals`\n\n    having count(hits) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hits", "file_key_name": "models.stg_ga_session_totals"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_ga_session_totals_hits.e9c650e839": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_995fe3656ffe26f3e4dd81b7233efd7c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "hits", "model": "{{ get_where_subquery(ref('stg_ga_session_totals')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_session_totals"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_995fe3656ffe26f3e4dd81b7233efd7c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "sessions", "dbt_expectations_expect_column_to_exist_stg_ga_session_totals_hits"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_ga_session_totals_hits.e9c650e839", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_995fe3656ffe26f3e4dd81b7233efd7c.sql", "original_file_path": "models/01_staging/google_analytics/sessions/_models_ga_sessions.yml", "name": "dbt_expectations_expect_column_to_exist_stg_ga_session_totals_hits", "alias": "dbt_expectations_expect_column_995fe3656ffe26f3e4dd81b7233efd7c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_session_totals"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/sessions/_models_ga_sessions.yml/dbt_expectations_expect_column_995fe3656ffe26f3e4dd81b7233efd7c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_995fe3656ffe26f3e4dd81b7233efd7c"}, "created_at": 1663750852.450935, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('HITS' as \n    string\n) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hits", "file_key_name": "models.stg_ga_session_totals"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_ga_session_totals_hits__499__1__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day___False.e0582a4e16": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">355\",alias=\"dbt_expectations_expect_column_7d36931d8c50c2aaa6d8028a6999af18\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 1, "max_value": 499, "row_condition": "date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day)", "strictly": false, "column_name": "hits", "model": "{{ get_where_subquery(ref('stg_ga_session_totals')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_session_totals"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7d36931d8c50c2aaa6d8028a6999af18", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">355", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "sessions", "dbt_expectations_expect_column_values_to_be_between_stg_ga_session_totals_hits__499__1__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day___False"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_ga_session_totals_hits__499__1__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day___False.e0582a4e16", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_7d36931d8c50c2aaa6d8028a6999af18.sql", "original_file_path": "models/01_staging/google_analytics/sessions/_models_ga_sessions.yml", "name": "dbt_expectations_expect_column_values_to_be_between_stg_ga_session_totals_hits__499__1__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day___False", "alias": "dbt_expectations_expect_column_7d36931d8c50c2aaa6d8028a6999af18", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_session_totals"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/sessions/_models_ga_sessions.yml/dbt_expectations_expect_column_7d36931d8c50c2aaa6d8028a6999af18.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">355", "alias": "dbt_expectations_expect_column_7d36931d8c50c2aaa6d8028a6999af18"}, "created_at": 1663750852.4575534, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and hits >= 1 and hits <= 499\n)\n as expression\n\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_session_totals`\n    where\n        date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day)\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hits", "file_key_name": "models.stg_ga_session_totals"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_session_totals_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.bf9ac5798f": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_8894fe5c4393cdd7cecb20a0878fe8ef\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_session_totals')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_session_totals"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_8894fe5c4393cdd7cecb20a0878fe8ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "sessions", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_session_totals_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_session_totals_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.bf9ac5798f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_8894fe5c4393cdd7cecb20a0878fe8ef.sql", "original_file_path": "models/01_staging/google_analytics/sessions/_models_ga_sessions.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_session_totals_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_8894fe5c4393cdd7cecb20a0878fe8ef", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_session_totals"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/sessions/_models_ga_sessions.yml/dbt_expectations_expect_row_va_8894fe5c4393cdd7cecb20a0878fe8ef.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_8894fe5c4393cdd7cecb20a0878fe8ef"}, "created_at": 1663750852.4635322, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_session_totals` f\n    \n    where date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_session_totals"}, "test.sql_repository_bz.accepted_values_stg_ga4_events_custom_event_name___custom_category_tree_click___custom_filter_click___custom_flyout_click___custom_magazine_click___custom_search_suggest_click___custom_sort_click___custom_triggermail_entrance___custom_wishlist_click___custom_magazine_product_carousel_click.0dab3351b0": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">150\",error_if=\">250\",alias=\"accepted_values_stg_ga4_events_7bf2ec76b0f16679d978bd5184d54d02\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["_custom_category-tree_click", "_custom_filter_click", "_custom_flyout_click", "_custom_magazine_click", "_custom_search-suggest_click", "_custom_sort_click", "_custom_triggermail_entrance", "_custom_wishlist_click", "_custom_magazine-product-carousel_click"], "column_name": "event_name", "model": "{{ get_where_subquery(ref('stg_ga4_events_custom')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_events_custom"]}, "config": {"enabled": true, "alias": "accepted_values_stg_ga4_events_7bf2ec76b0f16679d978bd5184d54d02", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">150", "error_if": ">250"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "accepted_values_stg_ga4_events_custom_event_name___custom_category_tree_click___custom_filter_click___custom_flyout_click___custom_magazine_click___custom_search_suggest_click___custom_sort_click___custom_triggermail_entrance___custom_wishlist_click___custom_magazine_product_carousel_click"], "unique_id": "test.sql_repository_bz.accepted_values_stg_ga4_events_custom_event_name___custom_category_tree_click___custom_filter_click___custom_flyout_click___custom_magazine_click___custom_search_suggest_click___custom_sort_click___custom_triggermail_entrance___custom_wishlist_click___custom_magazine_product_carousel_click.0dab3351b0", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "accepted_values_stg_ga4_events_7bf2ec76b0f16679d978bd5184d54d02.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga4_events.yml", "name": "accepted_values_stg_ga4_events_custom_event_name___custom_category_tree_click___custom_filter_click___custom_flyout_click___custom_magazine_click___custom_search_suggest_click___custom_sort_click___custom_triggermail_entrance___custom_wishlist_click___custom_magazine_product_carousel_click", "alias": "accepted_values_stg_ga4_events_7bf2ec76b0f16679d978bd5184d54d02", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_events_custom"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga4_events.yml/accepted_values_stg_ga4_events_7bf2ec76b0f16679d978bd5184d54d02.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "error", "warn_if": ">150", "error_if": ">250", "alias": "accepted_values_stg_ga4_events_7bf2ec76b0f16679d978bd5184d54d02"}, "created_at": 1663750852.488082, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        event_name as value_field,\n        count(*) as n_records\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_custom`\n    group by event_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '_custom_category-tree_click','_custom_filter_click','_custom_flyout_click','_custom_magazine_click','_custom_search-suggest_click','_custom_sort_click','_custom_triggermail_entrance','_custom_wishlist_click','_custom_magazine-product-carousel_click'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_name", "file_key_name": "models.stg_ga4_events_custom"}, "test.sql_repository_bz.not_null_stg_ga4_events_custom_sk_id.41a4aba218": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga4_events_custom')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_events_custom"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "not_null_stg_ga4_events_custom_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga4_events_custom_sk_id.41a4aba218", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga4_events_custom_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga4_events.yml", "name": "not_null_stg_ga4_events_custom_sk_id", "alias": "not_null_stg_ga4_events_custom_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_events_custom"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga4_events.yml/not_null_stg_ga4_events_custom_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.4999053, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_custom`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga4_events_custom"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_custom_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.c255fac6ff": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1000\",alias=\"dbt_expectations_expect_column_a8ffa205d2af9df10bad9a17126df1b9\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "event_date_dt between date_sub(current_date(), interval 14 day) and date_sub(current_date(), interval 1 day)", "column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga4_events_custom')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_events_custom"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a8ffa205d2af9df10bad9a17126df1b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">1000", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_custom_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_custom_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.c255fac6ff", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_a8ffa205d2af9df10bad9a17126df1b9.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga4_events.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_custom_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_a8ffa205d2af9df10bad9a17126df1b9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_events_custom"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga4_events.yml/dbt_expectations_expect_column_a8ffa205d2af9df10bad9a17126df1b9.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">1000", "alias": "dbt_expectations_expect_column_a8ffa205d2af9df10bad9a17126df1b9"}, "created_at": 1663750852.5034218, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        sk_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_custom`\n    where\n        1=1\n        and \n    event_date_dt between date_sub(current_date(), interval 14 day) and date_sub(current_date(), interval 1 day) and\n\n        (\n            sk_id is not null\n            \n        )\n    \n    group by\n        sk_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga4_events_custom"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_custom_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.c3deba17f9": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_553cbeeafde3b2b2147f89ab6e6306cb\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "event_date_dt", "date_part": "day", "row_condition": "event_date_dt between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga4_events_custom')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_events_custom"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_553cbeeafde3b2b2147f89ab6e6306cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_custom_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_custom_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.c3deba17f9", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_553cbeeafde3b2b2147f89ab6e6306cb.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga4_events.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_custom_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_553cbeeafde3b2b2147f89ab6e6306cb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_events_custom"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga4_events.yml/dbt_expectations_expect_row_va_553cbeeafde3b2b2147f89ab6e6306cb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_553cbeeafde3b2b2147f89ab6e6306cb"}, "created_at": 1663750852.509828, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 8\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-19' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(event_date_dt as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_custom` f\n    \n    where event_date_dt between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga4_events_custom"}, "test.sql_repository_bz.not_null_stg_ga4_events_checkout_sk_id.4597eea933": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga4_events_checkout')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_events_checkout"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "not_null_stg_ga4_events_checkout_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga4_events_checkout_sk_id.4597eea933", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga4_events_checkout_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga4_events.yml", "name": "not_null_stg_ga4_events_checkout_sk_id", "alias": "not_null_stg_ga4_events_checkout_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_events_checkout"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga4_events.yml/not_null_stg_ga4_events_checkout_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.5176609, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_checkout`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga4_events_checkout"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_checkout_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.db7ab27ce1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1000\",alias=\"dbt_expectations_expect_column_decce8c14e919f3593b7abb126de65c6\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "event_date_dt between date_sub(current_date(), interval 14 day) and date_sub(current_date(), interval 1 day)", "column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga4_events_checkout')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_events_checkout"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_decce8c14e919f3593b7abb126de65c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">1000", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_checkout_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_checkout_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.db7ab27ce1", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_decce8c14e919f3593b7abb126de65c6.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga4_events.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_checkout_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_decce8c14e919f3593b7abb126de65c6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_events_checkout"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga4_events.yml/dbt_expectations_expect_column_decce8c14e919f3593b7abb126de65c6.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">1000", "alias": "dbt_expectations_expect_column_decce8c14e919f3593b7abb126de65c6"}, "created_at": 1663750852.521259, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        sk_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_checkout`\n    where\n        1=1\n        and \n    event_date_dt between date_sub(current_date(), interval 14 day) and date_sub(current_date(), interval 1 day) and\n\n        (\n            sk_id is not null\n            \n        )\n    \n    group by\n        sk_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga4_events_checkout"}, "test.sql_repository_bz.accepted_values_stg_ga4_events_checkout_event_name__add_to_cart__view_cart__remove_from_cart__begin_checkout__add_payment_info__purchase.543e26a8f4": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">150\",error_if=\">250\",alias=\"accepted_values_stg_ga4_events_d158fcf83b172b0032481518a268aab5\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["add_to_cart", "view_cart", "remove_from_cart", "begin_checkout", "add_payment_info", "purchase"], "column_name": "event_name", "model": "{{ get_where_subquery(ref('stg_ga4_events_checkout')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_events_checkout"]}, "config": {"enabled": true, "alias": "accepted_values_stg_ga4_events_d158fcf83b172b0032481518a268aab5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">150", "error_if": ">250"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "accepted_values_stg_ga4_events_checkout_event_name__add_to_cart__view_cart__remove_from_cart__begin_checkout__add_payment_info__purchase"], "unique_id": "test.sql_repository_bz.accepted_values_stg_ga4_events_checkout_event_name__add_to_cart__view_cart__remove_from_cart__begin_checkout__add_payment_info__purchase.543e26a8f4", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "accepted_values_stg_ga4_events_d158fcf83b172b0032481518a268aab5.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga4_events.yml", "name": "accepted_values_stg_ga4_events_checkout_event_name__add_to_cart__view_cart__remove_from_cart__begin_checkout__add_payment_info__purchase", "alias": "accepted_values_stg_ga4_events_d158fcf83b172b0032481518a268aab5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_events_checkout"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga4_events.yml/accepted_values_stg_ga4_events_d158fcf83b172b0032481518a268aab5.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "error", "warn_if": ">150", "error_if": ">250", "alias": "accepted_values_stg_ga4_events_d158fcf83b172b0032481518a268aab5"}, "created_at": 1663750852.5294375, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        event_name as value_field,\n        count(*) as n_records\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_checkout`\n    group by event_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'add_to_cart','view_cart','remove_from_cart','begin_checkout','add_payment_info','purchase'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_name", "file_key_name": "models.stg_ga4_events_checkout"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_checkout_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.476c8ec576": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_e8d32e6d10b33a5bba84e80a4e1170c9\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "event_date_dt", "date_part": "day", "row_condition": "event_date_dt between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga4_events_checkout')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_events_checkout"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_e8d32e6d10b33a5bba84e80a4e1170c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_checkout_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_checkout_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.476c8ec576", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_e8d32e6d10b33a5bba84e80a4e1170c9.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga4_events.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_checkout_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_e8d32e6d10b33a5bba84e80a4e1170c9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_events_checkout"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga4_events.yml/dbt_expectations_expect_row_va_e8d32e6d10b33a5bba84e80a4e1170c9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_e8d32e6d10b33a5bba84e80a4e1170c9"}, "created_at": 1663750852.5404272, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 8\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-19' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(event_date_dt as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_checkout` f\n    \n    where event_date_dt between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga4_events_checkout"}, "test.sql_repository_bz.accepted_values_stg_ga4_events_standard_event_name__view_item__view_item_list__select_item__view_promotion__select_promotion__session_start__first_visit__user_engagement__click__page_view__file_download__scroll__view_search_results__video_start__video_progress__video_complete.9fca75c894": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">150\",error_if=\">250\",alias=\"accepted_values_stg_ga4_events_59bc48879e4be94fed05e083fe64153b\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["view_item", "view_item_list", "select_item", "view_promotion", "select_promotion", "session_start", "first_visit", "user_engagement", "click", "page_view", "file_download", "scroll", "view_search_results", "video_start", "video_progress", "video_complete"], "column_name": "event_name", "model": "{{ get_where_subquery(ref('stg_ga4_events_standard')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_events_standard"]}, "config": {"enabled": true, "alias": "accepted_values_stg_ga4_events_59bc48879e4be94fed05e083fe64153b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">150", "error_if": ">250"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "accepted_values_stg_ga4_events_standard_event_name__view_item__view_item_list__select_item__view_promotion__select_promotion__session_start__first_visit__user_engagement__click__page_view__file_download__scroll__view_search_results__video_start__video_progress__video_complete"], "unique_id": "test.sql_repository_bz.accepted_values_stg_ga4_events_standard_event_name__view_item__view_item_list__select_item__view_promotion__select_promotion__session_start__first_visit__user_engagement__click__page_view__file_download__scroll__view_search_results__video_start__video_progress__video_complete.9fca75c894", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "accepted_values_stg_ga4_events_59bc48879e4be94fed05e083fe64153b.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga4_events.yml", "name": "accepted_values_stg_ga4_events_standard_event_name__view_item__view_item_list__select_item__view_promotion__select_promotion__session_start__first_visit__user_engagement__click__page_view__file_download__scroll__view_search_results__video_start__video_progress__video_complete", "alias": "accepted_values_stg_ga4_events_59bc48879e4be94fed05e083fe64153b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_events_standard"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga4_events.yml/accepted_values_stg_ga4_events_59bc48879e4be94fed05e083fe64153b.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "error", "warn_if": ">150", "error_if": ">250", "alias": "accepted_values_stg_ga4_events_59bc48879e4be94fed05e083fe64153b"}, "created_at": 1663750852.550957, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        event_name as value_field,\n        count(*) as n_records\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_standard`\n    group by event_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'view_item','view_item_list','select_item','view_promotion','select_promotion','session_start','first_visit','user_engagement','click','page_view','file_download','scroll','view_search_results','video_start','video_progress','video_complete'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_name", "file_key_name": "models.stg_ga4_events_standard"}, "test.sql_repository_bz.not_null_stg_ga4_events_standard_sk_id.8ed9669bdb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga4_events_standard')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_events_standard"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "not_null_stg_ga4_events_standard_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga4_events_standard_sk_id.8ed9669bdb", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga4_events_standard_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga4_events.yml", "name": "not_null_stg_ga4_events_standard_sk_id", "alias": "not_null_stg_ga4_events_standard_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_events_standard"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga4_events.yml/not_null_stg_ga4_events_standard_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.5690567, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_standard`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga4_events_standard"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_standard_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.e66abf2b96": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1000\",alias=\"dbt_expectations_expect_column_da2c982b9fea0ef5bc149a6cf097f65c\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "event_date_dt between date_sub(current_date(), interval 14 day) and date_sub(current_date(), interval 1 day)", "column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga4_events_standard')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_events_standard"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_da2c982b9fea0ef5bc149a6cf097f65c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">1000", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_standard_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_standard_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.e66abf2b96", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_da2c982b9fea0ef5bc149a6cf097f65c.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga4_events.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_standard_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_da2c982b9fea0ef5bc149a6cf097f65c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_events_standard"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga4_events.yml/dbt_expectations_expect_column_da2c982b9fea0ef5bc149a6cf097f65c.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">1000", "alias": "dbt_expectations_expect_column_da2c982b9fea0ef5bc149a6cf097f65c"}, "created_at": 1663750852.5737774, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        sk_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_standard`\n    where\n        1=1\n        and \n    event_date_dt between date_sub(current_date(), interval 14 day) and date_sub(current_date(), interval 1 day) and\n\n        (\n            sk_id is not null\n            \n        )\n    \n    group by\n        sk_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga4_events_standard"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_standard_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.5d7a41328b": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9b4c8a2379507c62ef4572ccea4375e9\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "event_date_dt", "date_part": "day", "row_condition": "event_date_dt between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga4_events_standard')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga4_events_standard"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9b4c8a2379507c62ef4572ccea4375e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_standard_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_standard_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.5d7a41328b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_9b4c8a2379507c62ef4572ccea4375e9.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga4_events.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_standard_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_9b4c8a2379507c62ef4572ccea4375e9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4_events_standard"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga4_events.yml/dbt_expectations_expect_row_va_9b4c8a2379507c62ef4572ccea4375e9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_9b4c8a2379507c62ef4572ccea4375e9"}, "created_at": 1663750852.5816336, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 8\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-19' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(event_date_dt as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga4_events_standard` f\n    \n    where event_date_dt between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga4_events_standard"}, "test.sql_repository_bz.not_null_stg_ga_events_per_page_sk_id.0055b71d8c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_events_per_page')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_events_per_page"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "not_null_stg_ga_events_per_page_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_events_per_page_sk_id.0055b71d8c", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_events_per_page_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga_events.yml", "name": "not_null_stg_ga_events_per_page_sk_id", "alias": "not_null_stg_ga_events_per_page_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_events_per_page"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga_events.yml/not_null_stg_ga_events_per_page_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.6201694, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_events_per_page`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_events_per_page"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_per_page_sk_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.3b4617b45a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">10000\",alias=\"dbt_expectations_expect_column_449781dc7b005e0dd78c15d5deeec9da\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "date between date_sub(current_date(), interval 14 day) and date_sub(current_date(), interval 1 day)", "column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_events_per_page')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_events_per_page"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_449781dc7b005e0dd78c15d5deeec9da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">10000", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_per_page_sk_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_per_page_sk_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.3b4617b45a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_449781dc7b005e0dd78c15d5deeec9da.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga_events.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_per_page_sk_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_449781dc7b005e0dd78c15d5deeec9da", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_events_per_page"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga_events.yml/dbt_expectations_expect_column_449781dc7b005e0dd78c15d5deeec9da.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">10000", "alias": "dbt_expectations_expect_column_449781dc7b005e0dd78c15d5deeec9da"}, "created_at": 1663750852.625267, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        sk_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_events_per_page`\n    where\n        1=1\n        and \n    date between date_sub(current_date(), interval 14 day) and date_sub(current_date(), interval 1 day) and\n\n        (\n            sk_id is not null\n            \n        )\n    \n    group by\n        sk_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_events_per_page"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_per_page_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.e5e16acb72": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_79614a99b074ab87af65ded512054c33\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_events_per_page')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_events_per_page"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_79614a99b074ab87af65ded512054c33", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_per_page_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_per_page_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.e5e16acb72", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_79614a99b074ab87af65ded512054c33.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga_events.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_per_page_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_79614a99b074ab87af65ded512054c33", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_events_per_page"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga_events.yml/dbt_expectations_expect_row_va_79614a99b074ab87af65ded512054c33.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_79614a99b074ab87af65ded512054c33"}, "created_at": 1663750852.6344004, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_events_per_page` f\n    \n    where date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_events_per_page"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_promotion_teaser_event_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.689eb79adf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">2500\",alias=\"dbt_expectations_expect_column_bd3783f75b2288997dd5448e96a34c3f\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "date between date_sub(current_date(), interval 14 day) and date_sub(current_date(), interval 1 day)", "column_name": "teaser_event_id", "model": "{{ get_where_subquery(ref('stg_ga_events_promotion')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_events_promotion"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bd3783f75b2288997dd5448e96a34c3f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">2500", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_promotion_teaser_event_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_promotion_teaser_event_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.689eb79adf", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_bd3783f75b2288997dd5448e96a34c3f.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga_events.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_promotion_teaser_event_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_bd3783f75b2288997dd5448e96a34c3f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_events_promotion"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga_events.yml/dbt_expectations_expect_column_bd3783f75b2288997dd5448e96a34c3f.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">2500", "alias": "dbt_expectations_expect_column_bd3783f75b2288997dd5448e96a34c3f"}, "created_at": 1663750852.645928, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        teaser_event_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_events_promotion`\n    where\n        1=1\n        and \n    date between date_sub(current_date(), interval 14 day) and date_sub(current_date(), interval 1 day) and\n\n        (\n            teaser_event_id is not null\n            \n        )\n    \n    group by\n        teaser_event_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "teaser_event_id", "file_key_name": "models.stg_ga_events_promotion"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_name__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.7cb01b44eb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_not_be_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">5000\",alias=\"dbt_expectations_expect_column_1dd117da2b45f8aabc64919695a72bd9\") }}", "test_metadata": {"name": "expect_column_values_to_not_be_null", "kwargs": {"row_condition": "date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day) ", "column_name": "promo_name", "model": "{{ get_where_subquery(ref('stg_ga_events_promotion')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_events_promotion"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1dd117da2b45f8aabc64919695a72bd9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">5000", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_name__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_name__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.7cb01b44eb", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_1dd117da2b45f8aabc64919695a72bd9.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga_events.yml", "name": "dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_name__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_1dd117da2b45f8aabc64919695a72bd9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_events_promotion"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga_events.yml/dbt_expectations_expect_column_1dd117da2b45f8aabc64919695a72bd9.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">5000", "alias": "dbt_expectations_expect_column_1dd117da2b45f8aabc64919695a72bd9"}, "created_at": 1663750852.658126, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  promo_name is not null as expression\n\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_events_promotion`\n    where\n        date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day) \n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "promo_name", "file_key_name": "models.stg_ga_events_promotion"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_creative__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.874b0d1267": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_not_be_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">5000\",alias=\"dbt_expectations_expect_column_f4b25240bba93b921e484a6e5cad806a\") }}", "test_metadata": {"name": "expect_column_values_to_not_be_null", "kwargs": {"row_condition": "date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day) ", "column_name": "promo_creative", "model": "{{ get_where_subquery(ref('stg_ga_events_promotion')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_events_promotion"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f4b25240bba93b921e484a6e5cad806a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">5000", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_creative__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_creative__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.874b0d1267", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_f4b25240bba93b921e484a6e5cad806a.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga_events.yml", "name": "dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_creative__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_f4b25240bba93b921e484a6e5cad806a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_events_promotion"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga_events.yml/dbt_expectations_expect_column_f4b25240bba93b921e484a6e5cad806a.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">5000", "alias": "dbt_expectations_expect_column_f4b25240bba93b921e484a6e5cad806a"}, "created_at": 1663750852.6697638, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  promo_creative is not null as expression\n\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_events_promotion`\n    where\n        date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day) \n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "promo_creative", "file_key_name": "models.stg_ga_events_promotion"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_promotion_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.3233811fec": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_b7e53fa27ce8fd8d7db19e71a836bf26\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_events_promotion')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_events_promotion"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_b7e53fa27ce8fd8d7db19e71a836bf26", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_promotion_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_promotion_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.3233811fec", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_b7e53fa27ce8fd8d7db19e71a836bf26.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga_events.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_promotion_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_b7e53fa27ce8fd8d7db19e71a836bf26", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_events_promotion"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga_events.yml/dbt_expectations_expect_row_va_b7e53fa27ce8fd8d7db19e71a836bf26.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_b7e53fa27ce8fd8d7db19e71a836bf26"}, "created_at": 1663750852.677616, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_events_promotion` f\n    \n    where date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_events_promotion"}, "test.sql_repository_bz.not_null_stg_ga_events_event_id.197c93642a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_ga_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "not_null_stg_ga_events_event_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_events_event_id.197c93642a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_events_event_id.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga_events.yml", "name": "not_null_stg_ga_events_event_id", "alias": "not_null_stg_ga_events_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga_events.yml/not_null_stg_ga_events_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.686072, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_events`\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_ga_events"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_event_id__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_and_event_action_eec_promoView_.a4d39cc847": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">1500\",error_if=\">10000\",alias=\"dbt_expectations_expect_column_c6f75e3fe2027a805b6045f0b346de6d\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day) and event_action != 'eec.promoView'", "column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_ga_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c6f75e3fe2027a805b6045f0b346de6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">1500", "error_if": ">10000"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_event_id__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_and_event_action_eec_promoView_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_event_id__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_and_event_action_eec_promoView_.a4d39cc847", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_c6f75e3fe2027a805b6045f0b346de6d.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga_events.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_event_id__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_and_event_action_eec_promoView_", "alias": "dbt_expectations_expect_column_c6f75e3fe2027a805b6045f0b346de6d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga_events.yml/dbt_expectations_expect_column_c6f75e3fe2027a805b6045f0b346de6d.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "error", "warn_if": ">1500", "error_if": ">10000", "alias": "dbt_expectations_expect_column_c6f75e3fe2027a805b6045f0b346de6d"}, "created_at": 1663750852.6909127, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        event_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_events`\n    where\n        1=1\n        and \n    date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day) and event_action != 'eec.promoView' and\n\n        (\n            event_id is not null\n            \n        )\n    \n    group by\n        event_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_ga_events"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.a8d306408b": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">2000\",alias=\"dbt_expectations_expect_row_va_d05f670238db0e43eb13fce7e49b6d00\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 30 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_d05f670238db0e43eb13fce7e49b6d00", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">2000", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.a8d306408b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_d05f670238db0e43eb13fce7e49b6d00.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga_events.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_d05f670238db0e43eb13fce7e49b6d00", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga_events.yml/dbt_expectations_expect_row_va_d05f670238db0e43eb13fce7e49b6d00.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">2000", "alias": "dbt_expectations_expect_row_va_d05f670238db0e43eb13fce7e49b6d00"}, "created_at": 1663750852.7010286, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 29\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-08-22' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_events` f\n    \n    where date between date_sub(current_date(), interval 30 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_events"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_filter_events_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.832cc46197": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9fb3a9e662c94614b928b8202517a583\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_filter_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_filter_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9fb3a9e662c94614b928b8202517a583", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_filter_events_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_filter_events_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.832cc46197", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_9fb3a9e662c94614b928b8202517a583.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga_events.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_filter_events_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_9fb3a9e662c94614b928b8202517a583", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_filter_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga_events.yml/dbt_expectations_expect_row_va_9fb3a9e662c94614b928b8202517a583.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_9fb3a9e662c94614b928b8202517a583"}, "created_at": 1663750852.7104006, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_filter_events` f\n    \n    where date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_filter_events"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_hits_all_properties_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.741ff36f99": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_77287525c88897e45032fac44ed45ce4\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "ga_date", "date_part": "day", "row_condition": "ga_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_hits_all_properties')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_hits_all_properties"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_77287525c88897e45032fac44ed45ce4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_hits_all_properties_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_hits_all_properties_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.741ff36f99", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_77287525c88897e45032fac44ed45ce4.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga_events.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_hits_all_properties_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_77287525c88897e45032fac44ed45ce4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_hits_all_properties"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga_events.yml/dbt_expectations_expect_row_va_77287525c88897e45032fac44ed45ce4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_77287525c88897e45032fac44ed45ce4"}, "created_at": 1663750852.7281656, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(ga_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_hits_all_properties` f\n    \n    where ga_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_hits_all_properties"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_ecommerce_actions_c_date__day__c_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.53ae9161a9": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_f3811ccc1ac171f8944be07a95a7bcc4\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "c_date", "date_part": "day", "row_condition": "c_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_ecommerce_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_ecommerce_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_f3811ccc1ac171f8944be07a95a7bcc4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "events", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_ecommerce_actions_c_date__day__c_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_ecommerce_actions_c_date__day__c_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.53ae9161a9", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_f3811ccc1ac171f8944be07a95a7bcc4.sql", "original_file_path": "models/01_staging/google_analytics/events/_models_ga_events.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_ecommerce_actions_c_date__day__c_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_f3811ccc1ac171f8944be07a95a7bcc4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_ecommerce_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/events/_models_ga_events.yml/dbt_expectations_expect_row_va_f3811ccc1ac171f8944be07a95a7bcc4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_f3811ccc1ac171f8944be07a95a7bcc4"}, "created_at": 1663750852.739496, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(c_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_ecommerce_actions` f\n    \n    where c_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_ecommerce_actions"}, "test.sql_repository_bz.unique_stg_ga_magazin_custom_dims_sk_id.e9d73751a1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">1\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_magazin_custom_dims')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_magazin_custom_dims"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">1", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "magazine", "unique_stg_ga_magazin_custom_dims_sk_id"], "unique_id": "test.sql_repository_bz.unique_stg_ga_magazin_custom_dims_sk_id.e9d73751a1", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_ga_magazin_custom_dims_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/magazine/_models_ga_magazine.yml", "name": "unique_stg_ga_magazin_custom_dims_sk_id", "alias": "unique_stg_ga_magazin_custom_dims_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_magazin_custom_dims"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/magazine/_models_ga_magazine.yml/unique_stg_ga_magazin_custom_dims_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN", "warn_if": ">1"}, "created_at": 1663750852.7568035, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select sk_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_ga_magazin_custom_dims`\n  where sk_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_magazin_custom_dims"}, "test.sql_repository_bz.not_null_stg_ga_magazin_custom_dims_sk_id.27c359e513": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_magazin_custom_dims')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_magazin_custom_dims"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "magazine", "not_null_stg_ga_magazin_custom_dims_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_magazin_custom_dims_sk_id.27c359e513", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_magazin_custom_dims_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/magazine/_models_ga_magazine.yml", "name": "not_null_stg_ga_magazin_custom_dims_sk_id", "alias": "not_null_stg_ga_magazin_custom_dims_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_magazin_custom_dims"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/magazine/_models_ga_magazine.yml/not_null_stg_ga_magazin_custom_dims_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.7601686, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_magazin_custom_dims`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_magazin_custom_dims"}, "test.sql_repository_bz.unique_stg_ga_transactions_with_adclick_involvement_ad_transactionid.2e94cfb8df": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_ga_transactions_wit_ba0de416883a26c935f9bd341261c6d5\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ad_transactionid", "model": "{{ get_where_subquery(ref('stg_ga_transactions_with_adclick_involvement')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_transactions_with_adclick_involvement"]}, "config": {"enabled": true, "alias": "unique_stg_ga_transactions_wit_ba0de416883a26c935f9bd341261c6d5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "unique_stg_ga_transactions_with_adclick_involvement_ad_transactionid"], "unique_id": "test.sql_repository_bz.unique_stg_ga_transactions_with_adclick_involvement_ad_transactionid.2e94cfb8df", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_ga_transactions_wit_ba0de416883a26c935f9bd341261c6d5.sql", "original_file_path": "models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "name": "unique_stg_ga_transactions_with_adclick_involvement_ad_transactionid", "alias": "unique_stg_ga_transactions_wit_ba0de416883a26c935f9bd341261c6d5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_transactions_with_adclick_involvement"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/_models_ga_transactions.yml/unique_stg_ga_transactions_wit_ba0de416883a26c935f9bd341261c6d5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_ga_transactions_wit_ba0de416883a26c935f9bd341261c6d5"}, "created_at": 1663750852.7776282, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select ad_transactionid as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions_with_adclick_involvement`\n  where ad_transactionid is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_transactionid", "file_key_name": "models.stg_ga_transactions_with_adclick_involvement"}, "test.sql_repository_bz.not_null_stg_ga_transactions_with_adclick_involvement_ad_transactionid.93f103603a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_ga_transactions_w_485bbfa8eb33932f57767c89363b1830\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ad_transactionid", "model": "{{ get_where_subquery(ref('stg_ga_transactions_with_adclick_involvement')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_transactions_with_adclick_involvement"]}, "config": {"enabled": true, "alias": "not_null_stg_ga_transactions_w_485bbfa8eb33932f57767c89363b1830", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "not_null_stg_ga_transactions_with_adclick_involvement_ad_transactionid"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_transactions_with_adclick_involvement_ad_transactionid.93f103603a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_transactions_w_485bbfa8eb33932f57767c89363b1830.sql", "original_file_path": "models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "name": "not_null_stg_ga_transactions_with_adclick_involvement_ad_transactionid", "alias": "not_null_stg_ga_transactions_w_485bbfa8eb33932f57767c89363b1830", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_transactions_with_adclick_involvement"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/_models_ga_transactions.yml/not_null_stg_ga_transactions_w_485bbfa8eb33932f57767c89363b1830.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_ga_transactions_w_485bbfa8eb33932f57767c89363b1830"}, "created_at": 1663750852.7808232, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions_with_adclick_involvement`\nwhere ad_transactionid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ad_transactionid", "file_key_name": "models.stg_ga_transactions_with_adclick_involvement"}, "test.sql_repository_bz.unique_stg_ga_transactions_conversion_backfill_ga_transaction_id.ff960f4d00": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_ga_transactions_con_b7e6c244b05b79c99f9819bf918eaab3\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ga_transaction_id", "model": "{{ get_where_subquery(ref('stg_ga_transactions_conversion_backfill')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_transactions_conversion_backfill"]}, "config": {"enabled": true, "alias": "unique_stg_ga_transactions_con_b7e6c244b05b79c99f9819bf918eaab3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "unique_stg_ga_transactions_conversion_backfill_ga_transaction_id"], "unique_id": "test.sql_repository_bz.unique_stg_ga_transactions_conversion_backfill_ga_transaction_id.ff960f4d00", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_ga_transactions_con_b7e6c244b05b79c99f9819bf918eaab3.sql", "original_file_path": "models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "name": "unique_stg_ga_transactions_conversion_backfill_ga_transaction_id", "alias": "unique_stg_ga_transactions_con_b7e6c244b05b79c99f9819bf918eaab3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_transactions_conversion_backfill"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/_models_ga_transactions.yml/unique_stg_ga_transactions_con_b7e6c244b05b79c99f9819bf918eaab3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_ga_transactions_con_b7e6c244b05b79c99f9819bf918eaab3"}, "created_at": 1663750852.7841365, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select ga_transaction_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions_conversion_backfill`\n  where ga_transaction_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ga_transaction_id", "file_key_name": "models.stg_ga_transactions_conversion_backfill"}, "test.sql_repository_bz.not_null_stg_ga_transactions_conversion_backfill_ga_transaction_id.85403ad4fb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_ga_transactions_c_f71d66023232bc1613dcf5f53ef4e0de\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ga_transaction_id", "model": "{{ get_where_subquery(ref('stg_ga_transactions_conversion_backfill')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_transactions_conversion_backfill"]}, "config": {"enabled": true, "alias": "not_null_stg_ga_transactions_c_f71d66023232bc1613dcf5f53ef4e0de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "not_null_stg_ga_transactions_conversion_backfill_ga_transaction_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_transactions_conversion_backfill_ga_transaction_id.85403ad4fb", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_transactions_c_f71d66023232bc1613dcf5f53ef4e0de.sql", "original_file_path": "models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "name": "not_null_stg_ga_transactions_conversion_backfill_ga_transaction_id", "alias": "not_null_stg_ga_transactions_c_f71d66023232bc1613dcf5f53ef4e0de", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_transactions_conversion_backfill"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/_models_ga_transactions.yml/not_null_stg_ga_transactions_c_f71d66023232bc1613dcf5f53ef4e0de.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_ga_transactions_c_f71d66023232bc1613dcf5f53ef4e0de"}, "created_at": 1663750852.7867572, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions_conversion_backfill`\nwhere ga_transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ga_transaction_id", "file_key_name": "models.stg_ga_transactions_conversion_backfill"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_transactions_ga_transaction_id__ga_date_2022_03_22_.deb23661cb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">2\",error_if=\">5\",alias=\"dbt_expectations_expect_column_c6e6a1dcbb97b1aef0b977f18b4fd9e9\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "ga_date >= '2022-03-22'", "column_name": "ga_transaction_id", "model": "{{ get_where_subquery(ref('stg_ga_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c6e6a1dcbb97b1aef0b977f18b4fd9e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">2", "error_if": ">5"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "dbt_expectations_expect_column_values_to_be_unique_stg_ga_transactions_ga_transaction_id__ga_date_2022_03_22_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_transactions_ga_transaction_id__ga_date_2022_03_22_.deb23661cb", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_c6e6a1dcbb97b1aef0b977f18b4fd9e9.sql", "original_file_path": "models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_ga_transactions_ga_transaction_id__ga_date_2022_03_22_", "alias": "dbt_expectations_expect_column_c6e6a1dcbb97b1aef0b977f18b4fd9e9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/_models_ga_transactions.yml/dbt_expectations_expect_column_c6e6a1dcbb97b1aef0b977f18b4fd9e9.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "error", "warn_if": ">2", "error_if": ">5", "alias": "dbt_expectations_expect_column_c6e6a1dcbb97b1aef0b977f18b4fd9e9"}, "created_at": 1663750852.791425, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        ga_transaction_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions`\n    where\n        1=1\n        and \n    ga_date >= '2022-03-22' and\n\n        (\n            ga_transaction_id is not null\n            \n        )\n    \n    group by\n        ga_transaction_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ga_transaction_id", "file_key_name": "models.stg_ga_transactions"}, "test.sql_repository_bz.not_null_stg_ga_transactions_ga_transaction_id.ffcd5181e4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ga_transaction_id", "model": "{{ get_where_subquery(ref('stg_ga_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "not_null_stg_ga_transactions_ga_transaction_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_transactions_ga_transaction_id.ffcd5181e4", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_transactions_ga_transaction_id.sql", "original_file_path": "models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "name": "not_null_stg_ga_transactions_ga_transaction_id", "alias": "not_null_stg_ga_transactions_ga_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/_models_ga_transactions.yml/not_null_stg_ga_transactions_ga_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.7996595, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions`\nwhere ga_transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ga_transaction_id", "file_key_name": "models.stg_ga_transactions"}, "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_transactions_ga_transaction_id.ebc24c41f0": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "ga_transaction_id", "model": "{{ get_where_subquery(ref('stg_ga_transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "dbt_utils_at_least_one_stg_ga_transactions_ga_transaction_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_transactions_ga_transaction_id.ebc24c41f0", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_stg_ga_transactions_ga_transaction_id.sql", "original_file_path": "models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "name": "dbt_utils_at_least_one_stg_ga_transactions_ga_transaction_id", "alias": "dbt_utils_at_least_one_stg_ga_transactions_ga_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/_models_ga_transactions.yml/dbt_utils_at_least_one_stg_ga_transactions_ga_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.8023527, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(ga_transaction_id) as filler_column\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions`\n\n    having count(ga_transaction_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ga_transaction_id", "file_key_name": "models.stg_ga_transactions"}, "test.sql_repository_bz.not_null_stg_ga_transactions_sk_id.a9e4fe4e7f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_ga_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "not_null_stg_ga_transactions_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_transactions_sk_id.a9e4fe4e7f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_transactions_sk_id.sql", "original_file_path": "models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "name": "not_null_stg_ga_transactions_sk_id", "alias": "not_null_stg_ga_transactions_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/_models_ga_transactions.yml/not_null_stg_ga_transactions_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.808959, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_ga_transactions"}, "test.sql_repository_bz.not_null_stg_ga_transactions_ga_date.043a94113f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ga_date", "model": "{{ get_where_subquery(ref('stg_ga_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "not_null_stg_ga_transactions_ga_date"], "unique_id": "test.sql_repository_bz.not_null_stg_ga_transactions_ga_date.043a94113f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_ga_transactions_ga_date.sql", "original_file_path": "models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "name": "not_null_stg_ga_transactions_ga_date", "alias": "not_null_stg_ga_transactions_ga_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/_models_ga_transactions.yml/not_null_stg_ga_transactions_ga_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.8114262, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions`\nwhere ga_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ga_date", "file_key_name": "models.stg_ga_transactions"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_recent_data_stg_ga_transactions_ga_date__day__2.51546af5d3": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_a89a5c481e1971b094dfae7261d2c3ac\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "ga_date", "model": "{{ get_where_subquery(ref('stg_ga_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_a89a5c481e1971b094dfae7261d2c3ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "dbt_expectations_expect_row_values_to_have_recent_data_stg_ga_transactions_ga_date__day__2"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_recent_data_stg_ga_transactions_ga_date__day__2.51546af5d3", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_a89a5c481e1971b094dfae7261d2c3ac.sql", "original_file_path": "models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_stg_ga_transactions_ga_date__day__2", "alias": "dbt_expectations_expect_row_va_a89a5c481e1971b094dfae7261d2c3ac", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/_models_ga_transactions.yml/dbt_expectations_expect_row_va_a89a5c481e1971b094dfae7261d2c3ac.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_a89a5c481e1971b094dfae7261d2c3ac"}, "created_at": 1663750852.8137496, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(ga_date as \n    timestamp\n)) as max_timestamp\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions`\n    where\n        -- to exclude erroneous future dates\n        cast(ga_date as \n    timestamp\n) <= timestamp(datetime(\n    current_timestamp\n, 'Europe/Berlin'))\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp\n))\n        <\n        cast(\n\n        datetime_add(\n            cast( timestamp(datetime(\n    current_timestamp\n, 'Europe/Berlin')) as datetime),\n        interval -2 day\n        )\n\n as \n    timestamp\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ga_date", "file_key_name": "models.stg_ga_transactions"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_transactions_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.be9d909b40": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_84e0b29196db0e8af76b293b0ee155a3\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "ga_date", "date_part": "day", "row_condition": "ga_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('stg_ga_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_ga_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_84e0b29196db0e8af76b293b0ee155a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_analytics", "transactions", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_transactions_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_transactions_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.be9d909b40", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_84e0b29196db0e8af76b293b0ee155a3.sql", "original_file_path": "models/01_staging/google_analytics/transactions/_models_ga_transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_transactions_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_84e0b29196db0e8af76b293b0ee155a3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_analytics/transactions/_models_ga_transactions.yml/dbt_expectations_expect_row_va_84e0b29196db0e8af76b293b0ee155a3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_84e0b29196db0e8af76b293b0ee155a3"}, "created_at": 1663750852.8407686, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 9\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-11' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(ga_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_ga_transactions` f\n    \n    where ga_date between date_sub(current_date(), interval 10 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_ga_transactions"}, "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_country_product_id.4ecced115b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_product_id", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "not_null_stg_channel_pilot_source_feeds_ipim_country_product_id"], "unique_id": "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_country_product_id.4ecced115b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_channel_pilot_source_feeds_ipim_country_product_id.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "not_null_stg_channel_pilot_source_feeds_ipim_country_product_id", "alias": "not_null_stg_channel_pilot_source_feeds_ipim_country_product_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/not_null_stg_channel_pilot_source_feeds_ipim_country_product_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.8654358, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\nwhere country_product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "country_product_id", "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.unique_stg_channel_pilot_source_feeds_ipim_country_product_id.091cd5d960": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "country_product_id", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "unique_stg_channel_pilot_source_feeds_ipim_country_product_id"], "unique_id": "test.sql_repository_bz.unique_stg_channel_pilot_source_feeds_ipim_country_product_id.091cd5d960", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_stg_channel_pilot_source_feeds_ipim_country_product_id.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "unique_stg_channel_pilot_source_feeds_ipim_country_product_id", "alias": "unique_stg_channel_pilot_source_feeds_ipim_country_product_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/unique_stg_channel_pilot_source_feeds_ipim_country_product_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.8683746, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select country_product_id as unique_field\n  from `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\n  where country_product_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "country_product_id", "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_productid.97767b6846": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "not_null_stg_channel_pilot_source_feeds_ipim_productid"], "unique_id": "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_productid.97767b6846", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_channel_pilot_source_feeds_ipim_productid.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "not_null_stg_channel_pilot_source_feeds_ipim_productid", "alias": "not_null_stg_channel_pilot_source_feeds_ipim_productid", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/not_null_stg_channel_pilot_source_feeds_ipim_productid.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.872035, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\nwhere productid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "productid", "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_short_description.169591f8d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">0\",error_if=\">10000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "short_description", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">0", "error_if": ">10000"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "not_null_stg_channel_pilot_source_feeds_ipim_short_description"], "unique_id": "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_short_description.169591f8d7", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_channel_pilot_source_feeds_ipim_short_description.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "not_null_stg_channel_pilot_source_feeds_ipim_short_description", "alias": "not_null_stg_channel_pilot_source_feeds_ipim_short_description", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/not_null_stg_channel_pilot_source_feeds_ipim_short_description.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR", "warn_if": ">0", "error_if": ">10000"}, "created_at": 1663750852.877643, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\nwhere short_description is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "short_description", "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_brand.4619596cbd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">0\",error_if=\">10000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "brand", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">0", "error_if": ">10000"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "not_null_stg_channel_pilot_source_feeds_ipim_brand"], "unique_id": "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_brand.4619596cbd", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_channel_pilot_source_feeds_ipim_brand.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "not_null_stg_channel_pilot_source_feeds_ipim_brand", "alias": "not_null_stg_channel_pilot_source_feeds_ipim_brand", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/not_null_stg_channel_pilot_source_feeds_ipim_brand.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR", "warn_if": ">0", "error_if": ">10000"}, "created_at": 1663750852.882729, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\nwhere brand is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "brand", "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_category_path.993b592a57": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_path", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "not_null_stg_channel_pilot_source_feeds_ipim_category_path"], "unique_id": "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_category_path.993b592a57", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_channel_pilot_source_feeds_ipim_category_path.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "not_null_stg_channel_pilot_source_feeds_ipim_category_path", "alias": "not_null_stg_channel_pilot_source_feeds_ipim_category_path", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/not_null_stg_channel_pilot_source_feeds_ipim_category_path.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750852.8871725, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\nwhere category_path is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "category_path", "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_verkaufspreis.7239cac51f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">100\",error_if=\">15000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "verkaufspreis", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">100", "error_if": ">15000"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "not_null_stg_channel_pilot_source_feeds_ipim_verkaufspreis"], "unique_id": "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_verkaufspreis.7239cac51f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_channel_pilot_source_feeds_ipim_verkaufspreis.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "not_null_stg_channel_pilot_source_feeds_ipim_verkaufspreis", "alias": "not_null_stg_channel_pilot_source_feeds_ipim_verkaufspreis", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/not_null_stg_channel_pilot_source_feeds_ipim_verkaufspreis.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR", "warn_if": ">100", "error_if": ">15000"}, "created_at": 1663750852.8920352, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\nwhere verkaufspreis is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "verkaufspreis", "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_verkaufspreis__0__verkaufspreis_is_not_null.9b96c4e3f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_397ed488ce8bcc28b693713166aab68e\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "row_condition": "verkaufspreis is not null", "column_name": "verkaufspreis", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_397ed488ce8bcc28b693713166aab68e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_verkaufspreis__0__verkaufspreis_is_not_null"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_verkaufspreis__0__verkaufspreis_is_not_null.9b96c4e3f5", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_397ed488ce8bcc28b693713166aab68e.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_verkaufspreis__0__verkaufspreis_is_not_null", "alias": "dbt_expectations_expect_column_397ed488ce8bcc28b693713166aab68e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/dbt_expectations_expect_column_397ed488ce8bcc28b693713166aab68e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_397ed488ce8bcc28b693713166aab68e"}, "created_at": 1663750852.895134, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and verkaufspreis >= 0\n)\n as expression\n\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\n    where\n        verkaufspreis is not null\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "verkaufspreis", "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_uvp.dafb6006e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">1000\",error_if=\">10000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "uvp", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">1000", "error_if": ">10000"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "not_null_stg_channel_pilot_source_feeds_ipim_uvp"], "unique_id": "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_uvp.dafb6006e2", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_channel_pilot_source_feeds_ipim_uvp.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "not_null_stg_channel_pilot_source_feeds_ipim_uvp", "alias": "not_null_stg_channel_pilot_source_feeds_ipim_uvp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/not_null_stg_channel_pilot_source_feeds_ipim_uvp.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR", "warn_if": ">1000", "error_if": ">10000"}, "created_at": 1663750852.9056106, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\nwhere uvp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "uvp", "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_uvp__0.20a3b1aa3b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f74cf94108307c968f3919e0957f0ae8\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "column_name": "uvp", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f74cf94108307c968f3919e0957f0ae8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_uvp__0"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_uvp__0.20a3b1aa3b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_f74cf94108307c968f3919e0957f0ae8.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_uvp__0", "alias": "dbt_expectations_expect_column_f74cf94108307c968f3919e0957f0ae8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/dbt_expectations_expect_column_f74cf94108307c968f3919e0957f0ae8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f74cf94108307c968f3919e0957f0ae8"}, "created_at": 1663750852.9084086, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and uvp >= 0\n)\n as expression\n\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "uvp", "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_ean.6548678f49": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">100\",error_if=\">10000\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ean", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">100", "error_if": ">10000"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "not_null_stg_channel_pilot_source_feeds_ipim_ean"], "unique_id": "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_ean.6548678f49", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_channel_pilot_source_feeds_ipim_ean.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "not_null_stg_channel_pilot_source_feeds_ipim_ean", "alias": "not_null_stg_channel_pilot_source_feeds_ipim_ean", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/not_null_stg_channel_pilot_source_feeds_ipim_ean.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR", "warn_if": ">100", "error_if": ">10000"}, "created_at": 1663750852.936077, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\nwhere ean is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ean", "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_base_title.6b55a746de": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">0\",error_if=\">200\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "base_title", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">0", "error_if": ">200"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "not_null_stg_channel_pilot_source_feeds_ipim_base_title"], "unique_id": "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_base_title.6b55a746de", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_channel_pilot_source_feeds_ipim_base_title.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "not_null_stg_channel_pilot_source_feeds_ipim_base_title", "alias": "not_null_stg_channel_pilot_source_feeds_ipim_base_title", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/not_null_stg_channel_pilot_source_feeds_ipim_base_title.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR", "warn_if": ">0", "error_if": ">200"}, "created_at": 1663750852.941081, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\nwhere base_title is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "base_title", "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_externeid.7830fb5a2b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">0\",error_if=\">400\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "externeid", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">0", "error_if": ">400"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "not_null_stg_channel_pilot_source_feeds_ipim_externeid"], "unique_id": "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_externeid.7830fb5a2b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_channel_pilot_source_feeds_ipim_externeid.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "not_null_stg_channel_pilot_source_feeds_ipim_externeid", "alias": "not_null_stg_channel_pilot_source_feeds_ipim_externeid", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/not_null_stg_channel_pilot_source_feeds_ipim_externeid.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR", "warn_if": ">0", "error_if": ">400"}, "created_at": 1663750852.954435, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\nwhere externeid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "externeid", "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.dbt_expectations_expect_table_column_count_to_equal_stg_channel_pilot_source_feeds_ipim_32.b369279dc6": {"raw_sql": "{{ dbt_expectations.test_expect_table_column_count_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__9ce71e5c77acbfbbce2fbbeabd65bd49\") }}", "test_metadata": {"name": "expect_table_column_count_to_equal", "kwargs": {"value": 32, "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__9ce71e5c77acbfbbce2fbbeabd65bd49", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "dbt_expectations_expect_table_column_count_to_equal_stg_channel_pilot_source_feeds_ipim_32"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_table_column_count_to_equal_stg_channel_pilot_source_feeds_ipim_32.b369279dc6", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_table__9ce71e5c77acbfbbce2fbbeabd65bd49.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "dbt_expectations_expect_table_column_count_to_equal_stg_channel_pilot_source_feeds_ipim_32", "alias": "dbt_expectations_expect_table__9ce71e5c77acbfbbce2fbbeabd65bd49", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/dbt_expectations_expect_table__9ce71e5c77acbfbbce2fbbeabd65bd49.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__9ce71e5c77acbfbbce2fbbeabd65bd49"}, "created_at": 1663750852.95754, "compiled_sql": "with test_data as (\n\n    select\n        32 as number_actual_columns,\n        32 as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_stg_channel_pilot_source_feeds_ipim_1800000.011dcf5879": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__156b254dfd28737fa511a2ba734ffad7\") }}", "test_metadata": {"name": "expect_table_row_count_to_be_between", "kwargs": {"min_value": 1800000, "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__156b254dfd28737fa511a2ba734ffad7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "dbt_expectations_expect_table_row_count_to_be_between_stg_channel_pilot_source_feeds_ipim_1800000"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_stg_channel_pilot_source_feeds_ipim_1800000.011dcf5879", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_table__156b254dfd28737fa511a2ba734ffad7.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "dbt_expectations_expect_table_row_count_to_be_between_stg_channel_pilot_source_feeds_ipim_1800000", "alias": "dbt_expectations_expect_table__156b254dfd28737fa511a2ba734ffad7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/dbt_expectations_expect_table__156b254dfd28737fa511a2ba734ffad7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__156b254dfd28737fa511a2ba734ffad7"}, "created_at": 1663750852.9680517, "compiled_sql": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1800000\n)\n as expression\n\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.dbt_expectations_expect_grouped_row_values_to_have_recent_data_stg_channel_pilot_source_feeds_ipim_day__country__1__file_datetime.1016f9cf03": {"raw_sql": "{{ dbt_expectations.test_expect_grouped_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">0\",error_if=\">2\",alias=\"dbt_expectations_expect_groupe_5ecdc0a042e462c0e66ad2b9c2c76695\") }}", "test_metadata": {"name": "expect_grouped_row_values_to_have_recent_data", "kwargs": {"group_by": ["country"], "timestamp_column": "file_datetime", "datepart": "day", "interval": 1, "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_groupe_5ecdc0a042e462c0e66ad2b9c2c76695", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">0", "error_if": ">2"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "dbt_expectations_expect_grouped_row_values_to_have_recent_data_stg_channel_pilot_source_feeds_ipim_day__country__1__file_datetime"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_grouped_row_values_to_have_recent_data_stg_channel_pilot_source_feeds_ipim_day__country__1__file_datetime.1016f9cf03", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_groupe_5ecdc0a042e462c0e66ad2b9c2c76695.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "dbt_expectations_expect_grouped_row_values_to_have_recent_data_stg_channel_pilot_source_feeds_ipim_day__country__1__file_datetime", "alias": "dbt_expectations_expect_groupe_5ecdc0a042e462c0e66ad2b9c2c76695", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/dbt_expectations_expect_groupe_5ecdc0a042e462c0e66ad2b9c2c76695.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "error", "warn_if": ">0", "error_if": ">2", "alias": "dbt_expectations_expect_groupe_5ecdc0a042e462c0e66ad2b9c2c76695"}, "created_at": 1663750852.9800408, "compiled_sql": "\n\n \nwith latest_grouped_timestamps as (\n\n    select\n        country,\n        max(1) as join_key,\n        max(cast(file_datetime as \n    timestamp\n)) as latest_timestamp_column\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\n    where\n        -- to exclude erroneous future dates\n        cast(file_datetime as \n    timestamp\n) <= timestamp(datetime(\n    current_timestamp\n, 'Europe/Berlin'))\n        \n\n    group by 1\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                \n\n        datetime_add(\n            cast( timestamp(datetime(\n    current_timestamp\n, 'Europe/Berlin')) as datetime),\n        interval -1 day\n        )\n\n\n                as \n    timestamp\n\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_channel_pilot_source_feeds_ipim_uvp__verkaufspreis__True__uvp_is_not_null_and_verkaufspreis_is_not_null.11b9601583": {"raw_sql": "{{ dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">10\",error_if=\">1000\",alias=\"dbt_expectations_expect_column_dd03d6b2c5d830bf22520dbb890bce28\") }}", "test_metadata": {"name": "expect_column_pair_values_A_to_be_greater_than_B", "kwargs": {"column_A": "uvp", "column_B": "verkaufspreis", "or_equal": true, "row_condition": "uvp is not null and verkaufspreis is not null", "model": "{{ get_where_subquery(ref('stg_channel_pilot_source_feeds_ipim')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dd03d6b2c5d830bf22520dbb890bce28", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">10", "error_if": ">1000"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_channel_pilot_source_feeds_ipim_uvp__verkaufspreis__True__uvp_is_not_null_and_verkaufspreis_is_not_null"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_channel_pilot_source_feeds_ipim_uvp__verkaufspreis__True__uvp_is_not_null_and_verkaufspreis_is_not_null.11b9601583", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_dd03d6b2c5d830bf22520dbb890bce28.sql", "original_file_path": "models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml", "name": "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_channel_pilot_source_feeds_ipim_uvp__verkaufspreis__True__uvp_is_not_null_and_verkaufspreis_is_not_null", "alias": "dbt_expectations_expect_column_dd03d6b2c5d830bf22520dbb890bce28", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_channel_pilot_source_feeds_ipim"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channelpilot_source/_models_stg_channel_pilot_ipim.yml/dbt_expectations_expect_column_dd03d6b2c5d830bf22520dbb890bce28.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "error", "warn_if": ">10", "error_if": ">1000", "alias": "dbt_expectations_expect_column_dd03d6b2c5d830bf22520dbb890bce28"}, "created_at": 1663750853.0080304, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  uvp >= verkaufspreis as expression\n\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_channel_pilot_source_feeds_ipim`\n    where\n        uvp is not null and verkaufspreis is not null\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_channel_pilot_source_feeds_ipim"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_crawl_advertools_logs_url_crawl_id__parse_date_Y_m_d_date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.afc25836a7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">100\",alias=\"dbt_expectations_expect_column_843a9062e0890090f2fe8fe4b3d425d3\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "parse_date('%Y-%m-%d', date) between date_sub(current_date(), interval 14 day) and date_sub(current_date(), interval 1 day)", "column_name": "url_crawl_id", "model": "{{ get_where_subquery(ref('stg_crawl_advertools_logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_crawl_advertools_logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_843a9062e0890090f2fe8fe4b3d425d3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">100", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "dbt_expectations_expect_column_values_to_be_unique_stg_crawl_advertools_logs_url_crawl_id__parse_date_Y_m_d_date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_crawl_advertools_logs_url_crawl_id__parse_date_Y_m_d_date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.afc25836a7", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_843a9062e0890090f2fe8fe4b3d425d3.sql", "original_file_path": "models/01_staging/google_crawl_data/_models_stg_crawl.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_crawl_advertools_logs_url_crawl_id__parse_date_Y_m_d_date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_843a9062e0890090f2fe8fe4b3d425d3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_crawl_advertools_logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/_models_stg_crawl.yml/dbt_expectations_expect_column_843a9062e0890090f2fe8fe4b3d425d3.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">100", "alias": "dbt_expectations_expect_column_843a9062e0890090f2fe8fe4b3d425d3"}, "created_at": 1663750853.0588322, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        url_crawl_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_crawl_advertools_logs`\n    where\n        1=1\n        and \n    parse_date('%Y-%m-%d', date) between date_sub(current_date(), interval 14 day) and date_sub(current_date(), interval 1 day) and\n\n        (\n            url_crawl_id is not null\n            \n        )\n    \n    group by\n        url_crawl_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "url_crawl_id", "file_key_name": "models.stg_crawl_advertools_logs"}, "test.sql_repository_bz.not_null_stg_crawl_advertools_logs_url_crawl_id.ec4d5af0b4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "url_crawl_id", "model": "{{ get_where_subquery(ref('stg_crawl_advertools_logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_crawl_advertools_logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "not_null_stg_crawl_advertools_logs_url_crawl_id"], "unique_id": "test.sql_repository_bz.not_null_stg_crawl_advertools_logs_url_crawl_id.ec4d5af0b4", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_crawl_advertools_logs_url_crawl_id.sql", "original_file_path": "models/01_staging/google_crawl_data/_models_stg_crawl.yml", "name": "not_null_stg_crawl_advertools_logs_url_crawl_id", "alias": "not_null_stg_crawl_advertools_logs_url_crawl_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_crawl_advertools_logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/_models_stg_crawl.yml/not_null_stg_crawl_advertools_logs_url_crawl_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.0672836, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_crawl_advertools_logs`\nwhere url_crawl_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "url_crawl_id", "file_key_name": "models.stg_crawl_advertools_logs"}, "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_de_sitemap_name.70f5d2f525": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sitemap_name", "model": "{{ get_where_subquery(ref('stg_crawl_sitemap_urls_de')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_crawl_sitemap_urls_de"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "not_null_stg_crawl_sitemap_urls_de_sitemap_name"], "unique_id": "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_de_sitemap_name.70f5d2f525", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_crawl_sitemap_urls_de_sitemap_name.sql", "original_file_path": "models/01_staging/google_crawl_data/_models_stg_crawl.yml", "name": "not_null_stg_crawl_sitemap_urls_de_sitemap_name", "alias": "not_null_stg_crawl_sitemap_urls_de_sitemap_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_crawl_sitemap_urls_de"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/_models_stg_crawl.yml/not_null_stg_crawl_sitemap_urls_de_sitemap_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.0700798, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_de`\nwhere sitemap_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sitemap_name", "file_key_name": "models.stg_crawl_sitemap_urls_de"}, "test.sql_repository_bz.accepted_values_stg_crawl_sitemap_urls_de_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special.1a7d3b09cb": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_crawl_site_03d10e35767c4b6954003052378f2502\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["articles", "campaigns", "categories", "categories attributes", "categories manufacturers", "category", "content", "event articles", "event categories", "manufacturers", "pictures-imago", "product", "searchterms", "special"], "column_name": "sitemap_name", "model": "{{ get_where_subquery(ref('stg_crawl_sitemap_urls_de')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_crawl_sitemap_urls_de"]}, "config": {"enabled": true, "alias": "accepted_values_stg_crawl_site_03d10e35767c4b6954003052378f2502", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "accepted_values_stg_crawl_sitemap_urls_de_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special"], "unique_id": "test.sql_repository_bz.accepted_values_stg_crawl_sitemap_urls_de_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special.1a7d3b09cb", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "accepted_values_stg_crawl_site_03d10e35767c4b6954003052378f2502.sql", "original_file_path": "models/01_staging/google_crawl_data/_models_stg_crawl.yml", "name": "accepted_values_stg_crawl_sitemap_urls_de_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special", "alias": "accepted_values_stg_crawl_site_03d10e35767c4b6954003052378f2502", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_crawl_sitemap_urls_de"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/_models_stg_crawl.yml/accepted_values_stg_crawl_site_03d10e35767c4b6954003052378f2502.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_crawl_site_03d10e35767c4b6954003052378f2502"}, "created_at": 1663750853.074595, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        sitemap_name as value_field,\n        count(*) as n_records\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_de`\n    group by sitemap_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'articles','campaigns','categories','categories attributes','categories manufacturers','category','content','event articles','event categories','manufacturers','pictures-imago','product','searchterms','special'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sitemap_name", "file_key_name": "models.stg_crawl_sitemap_urls_de"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_crawl_sitemap_urls_all_sk_id__crawl_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.0365716f95": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">100\",alias=\"dbt_expectations_expect_column_99cd7c2ebe0b77f5d79a5fa09e122b61\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "crawl_date between date_sub(current_date(), interval 30 day) and date_sub(current_date(), interval 1 day)", "column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_crawl_sitemap_urls_all')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_99cd7c2ebe0b77f5d79a5fa09e122b61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">100", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "dbt_expectations_expect_column_values_to_be_unique_stg_crawl_sitemap_urls_all_sk_id__crawl_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_crawl_sitemap_urls_all_sk_id__crawl_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.0365716f95", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_99cd7c2ebe0b77f5d79a5fa09e122b61.sql", "original_file_path": "models/01_staging/google_crawl_data/_models_stg_crawl.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_stg_crawl_sitemap_urls_all_sk_id__crawl_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_99cd7c2ebe0b77f5d79a5fa09e122b61", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_crawl_sitemap_urls_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/_models_stg_crawl.yml/dbt_expectations_expect_column_99cd7c2ebe0b77f5d79a5fa09e122b61.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">100", "alias": "dbt_expectations_expect_column_99cd7c2ebe0b77f5d79a5fa09e122b61"}, "created_at": 1663750853.0932324, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        sk_id\n    from `bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_all`\n    where\n        1=1\n        and \n    crawl_date between date_sub(current_date(), interval 30 day) and date_sub(current_date(), interval 1 day) and\n\n        (\n            sk_id is not null\n            \n        )\n    \n    group by\n        sk_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_crawl_sitemap_urls_all"}, "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_all_sk_id.9c86037f76": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sk_id", "model": "{{ get_where_subquery(ref('stg_crawl_sitemap_urls_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "not_null_stg_crawl_sitemap_urls_all_sk_id"], "unique_id": "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_all_sk_id.9c86037f76", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_crawl_sitemap_urls_all_sk_id.sql", "original_file_path": "models/01_staging/google_crawl_data/_models_stg_crawl.yml", "name": "not_null_stg_crawl_sitemap_urls_all_sk_id", "alias": "not_null_stg_crawl_sitemap_urls_all_sk_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_crawl_sitemap_urls_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/_models_stg_crawl.yml/not_null_stg_crawl_sitemap_urls_all_sk_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.101843, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_all`\nwhere sk_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sk_id", "file_key_name": "models.stg_crawl_sitemap_urls_all"}, "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_all_sitemap_name.cba5f2461b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sitemap_name", "model": "{{ get_where_subquery(ref('stg_crawl_sitemap_urls_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "not_null_stg_crawl_sitemap_urls_all_sitemap_name"], "unique_id": "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_all_sitemap_name.cba5f2461b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_crawl_sitemap_urls_all_sitemap_name.sql", "original_file_path": "models/01_staging/google_crawl_data/_models_stg_crawl.yml", "name": "not_null_stg_crawl_sitemap_urls_all_sitemap_name", "alias": "not_null_stg_crawl_sitemap_urls_all_sitemap_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_crawl_sitemap_urls_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/_models_stg_crawl.yml/not_null_stg_crawl_sitemap_urls_all_sitemap_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.104843, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_all`\nwhere sitemap_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sitemap_name", "file_key_name": "models.stg_crawl_sitemap_urls_all"}, "test.sql_repository_bz.accepted_values_stg_crawl_sitemap_urls_all_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special.9e60cd2c50": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_crawl_site_bf54edd1ec1794d8f8eda1a3103ff928\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["articles", "campaigns", "categories", "categories attributes", "categories manufacturers", "category", "content", "event articles", "event categories", "manufacturers", "pictures-imago", "product", "searchterms", "special"], "column_name": "sitemap_name", "model": "{{ get_where_subquery(ref('stg_crawl_sitemap_urls_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all"]}, "config": {"enabled": true, "alias": "accepted_values_stg_crawl_site_bf54edd1ec1794d8f8eda1a3103ff928", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "accepted_values_stg_crawl_sitemap_urls_all_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special"], "unique_id": "test.sql_repository_bz.accepted_values_stg_crawl_sitemap_urls_all_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special.9e60cd2c50", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "accepted_values_stg_crawl_site_bf54edd1ec1794d8f8eda1a3103ff928.sql", "original_file_path": "models/01_staging/google_crawl_data/_models_stg_crawl.yml", "name": "accepted_values_stg_crawl_sitemap_urls_all_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special", "alias": "accepted_values_stg_crawl_site_bf54edd1ec1794d8f8eda1a3103ff928", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_crawl_sitemap_urls_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/_models_stg_crawl.yml/accepted_values_stg_crawl_site_bf54edd1ec1794d8f8eda1a3103ff928.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_crawl_site_bf54edd1ec1794d8f8eda1a3103ff928"}, "created_at": 1663750853.1078649, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        sitemap_name as value_field,\n        count(*) as n_records\n\n    from `bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_all`\n    group by sitemap_name\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'articles','campaigns','categories','categories attributes','categories manufacturers','category','content','event articles','event categories','manufacturers','pictures-imago','product','searchterms','special'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sitemap_name", "file_key_name": "models.stg_crawl_sitemap_urls_all"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_crawl_sitemap_urls_all_crawl_date__day.10793617ba": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_caa6efa7bc84ac475a670f0abb11772f\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "crawl_date", "date_part": "day", "model": "{{ get_where_subquery(ref('stg_crawl_sitemap_urls_all')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_caa6efa7bc84ac475a670f0abb11772f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_crawl_sitemap_urls_all_crawl_date__day"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_crawl_sitemap_urls_all_crawl_date__day.10793617ba", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_caa6efa7bc84ac475a670f0abb11772f.sql", "original_file_path": "models/01_staging/google_crawl_data/_models_stg_crawl.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_crawl_sitemap_urls_all_crawl_date__day", "alias": "dbt_expectations_expect_row_va_caa6efa7bc84ac475a670f0abb11772f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_crawl_sitemap_urls_all"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/_models_stg_crawl.yml/dbt_expectations_expect_row_va_caa6efa7bc84ac475a670f0abb11772f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_caa6efa7bc84ac475a670f0abb11772f"}, "created_at": 1663750853.1263723, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 179\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-03-25' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(crawl_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_all` f\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_crawl_sitemap_urls_all"}, "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_bergfreunde_url.4aef2acff8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "url", "model": "{{ get_where_subquery(ref('stg_crawl_sitemap_urls_bergfreunde')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_crawl_sitemap_urls_bergfreunde"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "not_null_stg_crawl_sitemap_urls_bergfreunde_url"], "unique_id": "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_bergfreunde_url.4aef2acff8", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_stg_crawl_sitemap_urls_bergfreunde_url.sql", "original_file_path": "models/01_staging/google_crawl_data/_models_stg_crawl.yml", "name": "not_null_stg_crawl_sitemap_urls_bergfreunde_url", "alias": "not_null_stg_crawl_sitemap_urls_bergfreunde_url", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_crawl_sitemap_urls_bergfreunde"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_crawl_data/_models_stg_crawl.yml/not_null_stg_crawl_sitemap_urls_bergfreunde_url.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.1362967, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_analytics_staging`.`stg_crawl_sitemap_urls_bergfreunde`\nwhere url is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "url", "file_key_name": "models.stg_crawl_sitemap_urls_bergfreunde"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_invoice_header_and_lines_order_date__day__order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_.b1c83b7d54": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_1870a4c977c66f9893b43138f0a47d48\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "order_date", "date_part": "day", "row_condition": "order_date between date_sub(current_date(), interval 90 day) and date_sub(current_date(), interval 3 day)", "model": "{{ get_where_subquery(ref('stg_nav_invoice_header_and_lines')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_nav_invoice_header_and_lines"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_1870a4c977c66f9893b43138f0a47d48", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "navision", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_invoice_header_and_lines_order_date__day__order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_invoice_header_and_lines_order_date__day__order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_.b1c83b7d54", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_1870a4c977c66f9893b43138f0a47d48.sql", "original_file_path": "models/01_staging/navision/_models_stg_nav.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_invoice_header_and_lines_order_date__day__order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_", "alias": "dbt_expectations_expect_row_va_1870a4c977c66f9893b43138f0a47d48", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nav_invoice_header_and_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/navision/_models_stg_nav.yml/dbt_expectations_expect_row_va_1870a4c977c66f9893b43138f0a47d48.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_1870a4c977c66f9893b43138f0a47d48"}, "created_at": 1663750853.1763928, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 87\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-06-23' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-18' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(order_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_nav_invoice_header_and_lines` f\n    \n    where order_date between date_sub(current_date(), interval 90 day) and date_sub(current_date(), interval 3 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_nav_invoice_header_and_lines"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_transactions_T_order_date__day__T_order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_.a042accd5a": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_b842ae2112c8731cfa1b4bc85a5becff\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "T_order_date", "date_part": "day", "row_condition": "T_order_date between date_sub(current_date(), interval 90 day) and date_sub(current_date(), interval 3 day)", "model": "{{ get_where_subquery(ref('stg_nav_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.stg_nav_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_b842ae2112c8731cfa1b4bc85a5becff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "navision", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_transactions_T_order_date__day__T_order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_transactions_T_order_date__day__T_order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_.a042accd5a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_b842ae2112c8731cfa1b4bc85a5becff.sql", "original_file_path": "models/01_staging/navision/_models_stg_nav.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_transactions_T_order_date__day__T_order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_", "alias": "dbt_expectations_expect_row_va_b842ae2112c8731cfa1b4bc85a5becff", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_nav_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/navision/_models_stg_nav.yml/dbt_expectations_expect_row_va_b842ae2112c8731cfa1b4bc85a5becff.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_b842ae2112c8731cfa1b4bc85a5becff"}, "created_at": 1663750853.1865704, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 87\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-06-23' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-18' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(T_order_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_analytics_staging`.`stg_nav_transactions` f\n    \n    where T_order_date between date_sub(current_date(), interval 90 day) and date_sub(current_date(), interval 3 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_nav_transactions"}, "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_date.2c0e5f7ac3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('weather_avg_temp_to_monthly_avg')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.weather_avg_temp_to_monthly_avg"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "weather_data", "not_null_weather_avg_temp_to_monthly_avg_date"], "unique_id": "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_date.2c0e5f7ac3", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_weather_avg_temp_to_monthly_avg_date.sql", "original_file_path": "models/03_marts/weather_data/_models_weather.yml", "name": "not_null_weather_avg_temp_to_monthly_avg_date", "alias": "not_null_weather_avg_temp_to_monthly_avg_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["weather_avg_temp_to_monthly_avg"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/weather_data/_models_weather.yml/not_null_weather_avg_temp_to_monthly_avg_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.247442, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_weather_data`.`weather_avg_temp_to_monthly_avg`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.weather_avg_temp_to_monthly_avg"}, "test.sql_repository_bz.dbt_utils_at_least_one_weather_avg_temp_to_monthly_avg_date.c88ebad30c": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('weather_avg_temp_to_monthly_avg')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.weather_avg_temp_to_monthly_avg"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "weather_data", "dbt_utils_at_least_one_weather_avg_temp_to_monthly_avg_date"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_weather_avg_temp_to_monthly_avg_date.c88ebad30c", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_weather_avg_temp_to_monthly_avg_date.sql", "original_file_path": "models/03_marts/weather_data/_models_weather.yml", "name": "dbt_utils_at_least_one_weather_avg_temp_to_monthly_avg_date", "alias": "dbt_utils_at_least_one_weather_avg_temp_to_monthly_avg_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["weather_avg_temp_to_monthly_avg"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/weather_data/_models_weather.yml/dbt_utils_at_least_one_weather_avg_temp_to_monthly_avg_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.2530522, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(date) as filler_column\n\n    from `bergzeit`.`dbt_weather_data`.`weather_avg_temp_to_monthly_avg`\n\n    having count(date) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.weather_avg_temp_to_monthly_avg"}, "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_avg_temp.8fd2bfd46b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "avg_temp", "model": "{{ get_where_subquery(ref('weather_avg_temp_to_monthly_avg')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.weather_avg_temp_to_monthly_avg"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "weather_data", "not_null_weather_avg_temp_to_monthly_avg_avg_temp"], "unique_id": "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_avg_temp.8fd2bfd46b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_weather_avg_temp_to_monthly_avg_avg_temp.sql", "original_file_path": "models/03_marts/weather_data/_models_weather.yml", "name": "not_null_weather_avg_temp_to_monthly_avg_avg_temp", "alias": "not_null_weather_avg_temp_to_monthly_avg_avg_temp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["weather_avg_temp_to_monthly_avg"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/weather_data/_models_weather.yml/not_null_weather_avg_temp_to_monthly_avg_avg_temp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.2603817, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_weather_data`.`weather_avg_temp_to_monthly_avg`\nwhere avg_temp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "avg_temp", "file_key_name": "models.weather_avg_temp_to_monthly_avg"}, "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_m_avg_temp.2a744adda8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "m_avg_temp", "model": "{{ get_where_subquery(ref('weather_avg_temp_to_monthly_avg')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.weather_avg_temp_to_monthly_avg"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "weather_data", "not_null_weather_avg_temp_to_monthly_avg_m_avg_temp"], "unique_id": "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_m_avg_temp.2a744adda8", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_weather_avg_temp_to_monthly_avg_m_avg_temp.sql", "original_file_path": "models/03_marts/weather_data/_models_weather.yml", "name": "not_null_weather_avg_temp_to_monthly_avg_m_avg_temp", "alias": "not_null_weather_avg_temp_to_monthly_avg_m_avg_temp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["weather_avg_temp_to_monthly_avg"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/weather_data/_models_weather.yml/not_null_weather_avg_temp_to_monthly_avg_m_avg_temp.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.2630386, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_weather_data`.`weather_avg_temp_to_monthly_avg`\nwhere m_avg_temp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "m_avg_temp", "file_key_name": "models.weather_avg_temp_to_monthly_avg"}, "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_temp_diff_to_m_avg.8c30a0bda6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "temp_diff_to_m_avg", "model": "{{ get_where_subquery(ref('weather_avg_temp_to_monthly_avg')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.weather_avg_temp_to_monthly_avg"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "weather_data", "not_null_weather_avg_temp_to_monthly_avg_temp_diff_to_m_avg"], "unique_id": "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_temp_diff_to_m_avg.8c30a0bda6", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_weather_avg_temp_to_monthly_avg_temp_diff_to_m_avg.sql", "original_file_path": "models/03_marts/weather_data/_models_weather.yml", "name": "not_null_weather_avg_temp_to_monthly_avg_temp_diff_to_m_avg", "alias": "not_null_weather_avg_temp_to_monthly_avg_temp_diff_to_m_avg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["weather_avg_temp_to_monthly_avg"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/weather_data/_models_weather.yml/not_null_weather_avg_temp_to_monthly_avg_temp_diff_to_m_avg.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.2656739, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_weather_data`.`weather_avg_temp_to_monthly_avg`\nwhere temp_diff_to_m_avg is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "temp_diff_to_m_avg", "file_key_name": "models.weather_avg_temp_to_monthly_avg"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_weather_avg_temp_to_monthly_avg_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_.bc1cde2c30": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_beaa0f24f623dee627e7e2929ec3642c\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 90 day) and date_sub(current_date(), interval 0 day)", "model": "{{ get_where_subquery(ref('weather_avg_temp_to_monthly_avg')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.weather_avg_temp_to_monthly_avg"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_beaa0f24f623dee627e7e2929ec3642c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "weather_data", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_weather_avg_temp_to_monthly_avg_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_weather_avg_temp_to_monthly_avg_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_.bc1cde2c30", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_beaa0f24f623dee627e7e2929ec3642c.sql", "original_file_path": "models/03_marts/weather_data/_models_weather.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_weather_avg_temp_to_monthly_avg_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_", "alias": "dbt_expectations_expect_row_va_beaa0f24f623dee627e7e2929ec3642c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["weather_avg_temp_to_monthly_avg"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/weather_data/_models_weather.yml/dbt_expectations_expect_row_va_beaa0f24f623dee627e7e2929ec3642c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_beaa0f24f623dee627e7e2929ec3642c"}, "created_at": 1663750853.2684102, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 89\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-06-23' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_weather_data`.`weather_avg_temp_to_monthly_avg` f\n    \n    where date between date_sub(current_date(), interval 90 day) and date_sub(current_date(), interval 0 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.weather_avg_temp_to_monthly_avg"}, "test.sql_repository_bz.not_null_pb_full_working_query_date.db6859164d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('pb_full_working_query')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.pb_full_working_query"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "profit_bidding", "not_null_pb_full_working_query_date"], "unique_id": "test.sql_repository_bz.not_null_pb_full_working_query_date.db6859164d", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_pb_full_working_query_date.sql", "original_file_path": "models/03_marts/profit_bidding/_models_profit_bidding.yml", "name": "not_null_pb_full_working_query_date", "alias": "not_null_pb_full_working_query_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pb_full_working_query"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/profit_bidding/_models_profit_bidding.yml/not_null_pb_full_working_query_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.3713908, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_profit_bidding`.`pb_full_working_query`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.pb_full_working_query"}, "test.sql_repository_bz.dbt_utils_at_least_one_pb_full_working_query_date.183367a5f0": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('pb_full_working_query')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.pb_full_working_query"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "profit_bidding", "dbt_utils_at_least_one_pb_full_working_query_date"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_pb_full_working_query_date.183367a5f0", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_pb_full_working_query_date.sql", "original_file_path": "models/03_marts/profit_bidding/_models_profit_bidding.yml", "name": "dbt_utils_at_least_one_pb_full_working_query_date", "alias": "dbt_utils_at_least_one_pb_full_working_query_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pb_full_working_query"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/profit_bidding/_models_profit_bidding.yml/dbt_utils_at_least_one_pb_full_working_query_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.3742597, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(date) as filler_column\n\n    from `bergzeit`.`dbt_profit_bidding`.`pb_full_working_query`\n\n    having count(date) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.pb_full_working_query"}, "test.sql_repository_bz.not_null_pb_full_working_query_conversion_name.38941044cd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "conversion_name", "model": "{{ get_where_subquery(ref('pb_full_working_query')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.pb_full_working_query"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "profit_bidding", "not_null_pb_full_working_query_conversion_name"], "unique_id": "test.sql_repository_bz.not_null_pb_full_working_query_conversion_name.38941044cd", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_pb_full_working_query_conversion_name.sql", "original_file_path": "models/03_marts/profit_bidding/_models_profit_bidding.yml", "name": "not_null_pb_full_working_query_conversion_name", "alias": "not_null_pb_full_working_query_conversion_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pb_full_working_query"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/profit_bidding/_models_profit_bidding.yml/not_null_pb_full_working_query_conversion_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.3811197, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_profit_bidding`.`pb_full_working_query`\nwhere conversion_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conversion_name", "file_key_name": "models.pb_full_working_query"}, "test.sql_repository_bz.not_null_pb_full_working_query_transactionId.3b1bdf2539": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transactionId", "model": "{{ get_where_subquery(ref('pb_full_working_query')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.pb_full_working_query"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "profit_bidding", "not_null_pb_full_working_query_transactionId"], "unique_id": "test.sql_repository_bz.not_null_pb_full_working_query_transactionId.3b1bdf2539", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_pb_full_working_query_transactionId.sql", "original_file_path": "models/03_marts/profit_bidding/_models_profit_bidding.yml", "name": "not_null_pb_full_working_query_transactionId", "alias": "not_null_pb_full_working_query_transactionId", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pb_full_working_query"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/profit_bidding/_models_profit_bidding.yml/not_null_pb_full_working_query_transactionId.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.383893, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_profit_bidding`.`pb_full_working_query`\nwhere transactionId is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transactionId", "file_key_name": "models.pb_full_working_query"}, "test.sql_repository_bz.unique_pb_full_working_query_transactionId.12c3f941a2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "transactionId", "model": "{{ get_where_subquery(ref('pb_full_working_query')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.pb_full_working_query"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "profit_bidding", "unique_pb_full_working_query_transactionId"], "unique_id": "test.sql_repository_bz.unique_pb_full_working_query_transactionId.12c3f941a2", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_pb_full_working_query_transactionId.sql", "original_file_path": "models/03_marts/profit_bidding/_models_profit_bidding.yml", "name": "unique_pb_full_working_query_transactionId", "alias": "unique_pb_full_working_query_transactionId", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pb_full_working_query"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/profit_bidding/_models_profit_bidding.yml/unique_pb_full_working_query_transactionId.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.3866603, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select transactionId as unique_field\n  from `bergzeit`.`dbt_profit_bidding`.`pb_full_working_query`\n  where transactionId is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transactionId", "file_key_name": "models.pb_full_working_query"}, "test.sql_repository_bz.not_null_pb_full_working_query_totalRevenue.7d8ef55f4a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "totalRevenue", "model": "{{ get_where_subquery(ref('pb_full_working_query')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.pb_full_working_query"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "profit_bidding", "not_null_pb_full_working_query_totalRevenue"], "unique_id": "test.sql_repository_bz.not_null_pb_full_working_query_totalRevenue.7d8ef55f4a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_pb_full_working_query_totalRevenue.sql", "original_file_path": "models/03_marts/profit_bidding/_models_profit_bidding.yml", "name": "not_null_pb_full_working_query_totalRevenue", "alias": "not_null_pb_full_working_query_totalRevenue", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pb_full_working_query"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/profit_bidding/_models_profit_bidding.yml/not_null_pb_full_working_query_totalRevenue.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.3897822, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_profit_bidding`.`pb_full_working_query`\nwhere totalRevenue is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "totalRevenue", "file_key_name": "models.pb_full_working_query"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_totalRevenue__0_01.194e5ddff4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_65c741318635d4c74b119cf25ea9cd49\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0.01, "column_name": "totalRevenue", "model": "{{ get_where_subquery(ref('pb_full_working_query')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.pb_full_working_query"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_65c741318635d4c74b119cf25ea9cd49", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "profit_bidding", "dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_totalRevenue__0_01"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_totalRevenue__0_01.194e5ddff4", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_65c741318635d4c74b119cf25ea9cd49.sql", "original_file_path": "models/03_marts/profit_bidding/_models_profit_bidding.yml", "name": "dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_totalRevenue__0_01", "alias": "dbt_expectations_expect_column_65c741318635d4c74b119cf25ea9cd49", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pb_full_working_query"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/profit_bidding/_models_profit_bidding.yml/dbt_expectations_expect_column_65c741318635d4c74b119cf25ea9cd49.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_65c741318635d4c74b119cf25ea9cd49"}, "created_at": 1663750853.3924994, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and totalRevenue >= 0.01\n)\n as expression\n\n\n    from `bergzeit`.`dbt_profit_bidding`.`pb_full_working_query`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "totalRevenue", "file_key_name": "models.pb_full_working_query"}, "test.sql_repository_bz.not_null_pb_full_working_query_order_margins_after_returns.93f374c0c2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_margins_after_returns", "model": "{{ get_where_subquery(ref('pb_full_working_query')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.pb_full_working_query"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "profit_bidding", "not_null_pb_full_working_query_order_margins_after_returns"], "unique_id": "test.sql_repository_bz.not_null_pb_full_working_query_order_margins_after_returns.93f374c0c2", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_pb_full_working_query_order_margins_after_returns.sql", "original_file_path": "models/03_marts/profit_bidding/_models_profit_bidding.yml", "name": "not_null_pb_full_working_query_order_margins_after_returns", "alias": "not_null_pb_full_working_query_order_margins_after_returns", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pb_full_working_query"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/profit_bidding/_models_profit_bidding.yml/not_null_pb_full_working_query_order_margins_after_returns.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.4004803, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_profit_bidding`.`pb_full_working_query`\nwhere order_margins_after_returns is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_margins_after_returns", "file_key_name": "models.pb_full_working_query"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_order_margins_after_returns__0_01.9a575baf5e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c770d89e2e01495a3b13b3ab724caa06\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0.01, "column_name": "order_margins_after_returns", "model": "{{ get_where_subquery(ref('pb_full_working_query')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.pb_full_working_query"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c770d89e2e01495a3b13b3ab724caa06", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "profit_bidding", "dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_order_margins_after_returns__0_01"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_order_margins_after_returns__0_01.9a575baf5e", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_c770d89e2e01495a3b13b3ab724caa06.sql", "original_file_path": "models/03_marts/profit_bidding/_models_profit_bidding.yml", "name": "dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_order_margins_after_returns__0_01", "alias": "dbt_expectations_expect_column_c770d89e2e01495a3b13b3ab724caa06", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pb_full_working_query"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/profit_bidding/_models_profit_bidding.yml/dbt_expectations_expect_column_c770d89e2e01495a3b13b3ab724caa06.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c770d89e2e01495a3b13b3ab724caa06"}, "created_at": 1663750853.4032502, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and order_margins_after_returns >= 0.01\n)\n as expression\n\n\n    from `bergzeit`.`dbt_profit_bidding`.`pb_full_working_query`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_margins_after_returns", "file_key_name": "models.pb_full_working_query"}, "test.sql_repository_bz.unique_onsite_duplicate_teaser_events_teaser_event_id.795ca7b5f0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "teaser_event_id", "model": "{{ get_where_subquery(ref('onsite_duplicate_teaser_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_duplicate_teaser_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "unique_onsite_duplicate_teaser_events_teaser_event_id"], "unique_id": "test.sql_repository_bz.unique_onsite_duplicate_teaser_events_teaser_event_id.795ca7b5f0", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "unique_onsite_duplicate_teaser_events_teaser_event_id.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "unique_onsite_duplicate_teaser_events_teaser_event_id", "alias": "unique_onsite_duplicate_teaser_events_teaser_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_duplicate_teaser_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/unique_onsite_duplicate_teaser_events_teaser_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.5035849, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select teaser_event_id as unique_field\n  from `bergzeit`.`dbt_onsite`.`onsite_duplicate_teaser_events`\n  where teaser_event_id is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "teaser_event_id", "file_key_name": "models.onsite_duplicate_teaser_events"}, "test.sql_repository_bz.not_null_onsite_duplicate_teaser_events_teaser_event_id.1439c5bb2b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "teaser_event_id", "model": "{{ get_where_subquery(ref('onsite_duplicate_teaser_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_duplicate_teaser_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "not_null_onsite_duplicate_teaser_events_teaser_event_id"], "unique_id": "test.sql_repository_bz.not_null_onsite_duplicate_teaser_events_teaser_event_id.1439c5bb2b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_onsite_duplicate_teaser_events_teaser_event_id.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "not_null_onsite_duplicate_teaser_events_teaser_event_id", "alias": "not_null_onsite_duplicate_teaser_events_teaser_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_duplicate_teaser_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/not_null_onsite_duplicate_teaser_events_teaser_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.506953, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_onsite`.`onsite_duplicate_teaser_events`\nwhere teaser_event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "teaser_event_id", "file_key_name": "models.onsite_duplicate_teaser_events"}, "test.sql_repository_bz.not_null_onsite_ga_filter_usage_page.036c570431": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "page", "model": "{{ get_where_subquery(ref('onsite_ga_filter_usage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_ga_filter_usage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "not_null_onsite_ga_filter_usage_page"], "unique_id": "test.sql_repository_bz.not_null_onsite_ga_filter_usage_page.036c570431", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_onsite_ga_filter_usage_page.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "not_null_onsite_ga_filter_usage_page", "alias": "not_null_onsite_ga_filter_usage_page", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_ga_filter_usage"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/not_null_onsite_ga_filter_usage_page.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.5096877, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_onsite`.`onsite_ga_filter_usage`\nwhere page is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "page", "file_key_name": "models.onsite_ga_filter_usage"}, "test.sql_repository_bz.dbt_utils_at_least_one_onsite_ga_filter_usage_page.62acd149c6": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "page", "model": "{{ get_where_subquery(ref('onsite_ga_filter_usage')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_ga_filter_usage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "dbt_utils_at_least_one_onsite_ga_filter_usage_page"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_onsite_ga_filter_usage_page.62acd149c6", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_onsite_ga_filter_usage_page.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "dbt_utils_at_least_one_onsite_ga_filter_usage_page", "alias": "dbt_utils_at_least_one_onsite_ga_filter_usage_page", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_ga_filter_usage"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/dbt_utils_at_least_one_onsite_ga_filter_usage_page.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.5124433, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(page) as filler_column\n\n    from `bergzeit`.`dbt_onsite`.`onsite_ga_filter_usage`\n\n    having count(page) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "page", "file_key_name": "models.onsite_ga_filter_usage"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_page.bcc635be0c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_21dca3fdc0ee33261ea6a9e34ae32bd3\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "page", "model": "{{ get_where_subquery(ref('onsite_ga_filter_usage')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_ga_filter_usage"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_21dca3fdc0ee33261ea6a9e34ae32bd3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_page"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_page.bcc635be0c", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_21dca3fdc0ee33261ea6a9e34ae32bd3.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_page", "alias": "dbt_expectations_expect_column_21dca3fdc0ee33261ea6a9e34ae32bd3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_ga_filter_usage"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/dbt_expectations_expect_column_21dca3fdc0ee33261ea6a9e34ae32bd3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_21dca3fdc0ee33261ea6a9e34ae32bd3"}, "created_at": 1663750853.5197456, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PAGE' as \n    string\n) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "page", "file_key_name": "models.onsite_ga_filter_usage"}, "test.sql_repository_bz.not_null_onsite_ga_filter_usage_filter_type.76df520867": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "filter_type", "model": "{{ get_where_subquery(ref('onsite_ga_filter_usage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_ga_filter_usage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "not_null_onsite_ga_filter_usage_filter_type"], "unique_id": "test.sql_repository_bz.not_null_onsite_ga_filter_usage_filter_type.76df520867", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_onsite_ga_filter_usage_filter_type.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "not_null_onsite_ga_filter_usage_filter_type", "alias": "not_null_onsite_ga_filter_usage_filter_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_ga_filter_usage"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/not_null_onsite_ga_filter_usage_filter_type.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.526957, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_onsite`.`onsite_ga_filter_usage`\nwhere filter_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "filter_type", "file_key_name": "models.onsite_ga_filter_usage"}, "test.sql_repository_bz.dbt_utils_at_least_one_onsite_ga_filter_usage_filter_type.feb7c119d7": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "filter_type", "model": "{{ get_where_subquery(ref('onsite_ga_filter_usage')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_ga_filter_usage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "dbt_utils_at_least_one_onsite_ga_filter_usage_filter_type"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_onsite_ga_filter_usage_filter_type.feb7c119d7", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_onsite_ga_filter_usage_filter_type.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "dbt_utils_at_least_one_onsite_ga_filter_usage_filter_type", "alias": "dbt_utils_at_least_one_onsite_ga_filter_usage_filter_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_ga_filter_usage"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/dbt_utils_at_least_one_onsite_ga_filter_usage_filter_type.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.530441, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(filter_type) as filler_column\n\n    from `bergzeit`.`dbt_onsite`.`onsite_ga_filter_usage`\n\n    having count(filter_type) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "filter_type", "file_key_name": "models.onsite_ga_filter_usage"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_filter_type.299c4c09a8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_11db44775dd91e5325822ae12f685969\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "filter_type", "model": "{{ get_where_subquery(ref('onsite_ga_filter_usage')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_ga_filter_usage"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_11db44775dd91e5325822ae12f685969", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_filter_type"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_filter_type.299c4c09a8", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_11db44775dd91e5325822ae12f685969.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_filter_type", "alias": "dbt_expectations_expect_column_11db44775dd91e5325822ae12f685969", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_ga_filter_usage"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/dbt_expectations_expect_column_11db44775dd91e5325822ae12f685969.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_11db44775dd91e5325822ae12f685969"}, "created_at": 1663750853.5371118, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FILTER_TYPE' as \n    string\n) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "filter_type", "file_key_name": "models.onsite_ga_filter_usage"}, "test.sql_repository_bz.not_null_onsite_hits_by_property_and_day_ga_property.96f9de3646": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ga_property", "model": "{{ get_where_subquery(ref('onsite_hits_by_property_and_day')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_hits_by_property_and_day"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "not_null_onsite_hits_by_property_and_day_ga_property"], "unique_id": "test.sql_repository_bz.not_null_onsite_hits_by_property_and_day_ga_property.96f9de3646", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_onsite_hits_by_property_and_day_ga_property.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "not_null_onsite_hits_by_property_and_day_ga_property", "alias": "not_null_onsite_hits_by_property_and_day_ga_property", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_hits_by_property_and_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/not_null_onsite_hits_by_property_and_day_ga_property.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.5445397, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_onsite`.`onsite_hits_by_property_and_day`\nwhere ga_property is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ga_property", "file_key_name": "models.onsite_hits_by_property_and_day"}, "test.sql_repository_bz.dbt_utils_at_least_one_onsite_hits_by_property_and_day_ga_property.3dbf7c98a2": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_at_least_one_onsite__f120f8835d896ede640fc22384eb4586\") }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "ga_property", "model": "{{ get_where_subquery(ref('onsite_hits_by_property_and_day')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_hits_by_property_and_day"]}, "config": {"enabled": true, "alias": "dbt_utils_at_least_one_onsite__f120f8835d896ede640fc22384eb4586", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "dbt_utils_at_least_one_onsite_hits_by_property_and_day_ga_property"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_onsite_hits_by_property_and_day_ga_property.3dbf7c98a2", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_onsite__f120f8835d896ede640fc22384eb4586.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "dbt_utils_at_least_one_onsite_hits_by_property_and_day_ga_property", "alias": "dbt_utils_at_least_one_onsite__f120f8835d896ede640fc22384eb4586", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_hits_by_property_and_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/dbt_utils_at_least_one_onsite__f120f8835d896ede640fc22384eb4586.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_at_least_one_onsite__f120f8835d896ede640fc22384eb4586"}, "created_at": 1663750853.5474288, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(ga_property) as filler_column\n\n    from `bergzeit`.`dbt_onsite`.`onsite_hits_by_property_and_day`\n\n    having count(ga_property) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ga_property", "file_key_name": "models.onsite_hits_by_property_and_day"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_hits_by_property_and_day_ga_property.5dd838d10e": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2c3587e96552765280600e4517d2191f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ga_property", "model": "{{ get_where_subquery(ref('onsite_hits_by_property_and_day')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_hits_by_property_and_day"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2c3587e96552765280600e4517d2191f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "dbt_expectations_expect_column_to_exist_onsite_hits_by_property_and_day_ga_property"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_hits_by_property_and_day_ga_property.5dd838d10e", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_2c3587e96552765280600e4517d2191f.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "dbt_expectations_expect_column_to_exist_onsite_hits_by_property_and_day_ga_property", "alias": "dbt_expectations_expect_column_2c3587e96552765280600e4517d2191f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_hits_by_property_and_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/dbt_expectations_expect_column_2c3587e96552765280600e4517d2191f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2c3587e96552765280600e4517d2191f"}, "created_at": 1663750853.5549693, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('GA_PROPERTY' as \n    string\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ga_property", "file_key_name": "models.onsite_hits_by_property_and_day"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_sessions_comp__1_2__0_8__date_date_sub_current_date_interval_2_day_.13395bde30": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_expectations_expect_column_1b1931abd284f2eab08effd7337f8db4\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0.8, "max_value": 1.2, "row_condition": "date > date_sub(current_date(), interval 2 day) ", "column_name": "sessions_comp", "model": "{{ get_where_subquery(ref('onsite_ga4_metric_comparison')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_ga4_metric_comparison"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1b1931abd284f2eab08effd7337f8db4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_sessions_comp__1_2__0_8__date_date_sub_current_date_interval_2_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_sessions_comp__1_2__0_8__date_date_sub_current_date_interval_2_day_.13395bde30", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_1b1931abd284f2eab08effd7337f8db4.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_sessions_comp__1_2__0_8__date_date_sub_current_date_interval_2_day_", "alias": "dbt_expectations_expect_column_1b1931abd284f2eab08effd7337f8db4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_ga4_metric_comparison"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/dbt_expectations_expect_column_1b1931abd284f2eab08effd7337f8db4.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "dbt_expectations_expect_column_1b1931abd284f2eab08effd7337f8db4"}, "created_at": 1663750853.5637097, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and sessions_comp >= 0.8 and sessions_comp <= 1.2\n)\n as expression\n\n\n    from `bergzeit`.`dbt_onsite`.`onsite_ga4_metric_comparison`\n    where\n        date > date_sub(current_date(), interval 2 day) \n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sessions_comp", "file_key_name": "models.onsite_ga4_metric_comparison"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_transactions_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_.1d297b4e98": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_expectations_expect_column_198c4533de9b7f6bc2660647e5d2a527\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0.95, "max_value": 1.05, "row_condition": "date > date_sub(current_date(), interval 2 day) ", "column_name": "transactions_comp", "model": "{{ get_where_subquery(ref('onsite_ga4_metric_comparison')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_ga4_metric_comparison"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_198c4533de9b7f6bc2660647e5d2a527", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_transactions_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_transactions_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_.1d297b4e98", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_198c4533de9b7f6bc2660647e5d2a527.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_transactions_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_", "alias": "dbt_expectations_expect_column_198c4533de9b7f6bc2660647e5d2a527", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_ga4_metric_comparison"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/dbt_expectations_expect_column_198c4533de9b7f6bc2660647e5d2a527.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "dbt_expectations_expect_column_198c4533de9b7f6bc2660647e5d2a527"}, "created_at": 1663750853.5732105, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and transactions_comp >= 0.95 and transactions_comp <= 1.05\n)\n as expression\n\n\n    from `bergzeit`.`dbt_onsite`.`onsite_ga4_metric_comparison`\n    where\n        date > date_sub(current_date(), interval 2 day) \n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transactions_comp", "file_key_name": "models.onsite_ga4_metric_comparison"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_order_value_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_.66d53dfc73": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_expectations_expect_column_585b09f07d9f2d7b344afc75d32fe84b\") }}", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0.95, "max_value": 1.05, "row_condition": "date > date_sub(current_date(), interval 2 day) ", "column_name": "order_value_comp", "model": "{{ get_where_subquery(ref('onsite_ga4_metric_comparison')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.onsite_ga4_metric_comparison"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_585b09f07d9f2d7b344afc75d32fe84b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "onsite", "dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_order_value_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_order_value_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_.66d53dfc73", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_585b09f07d9f2d7b344afc75d32fe84b.sql", "original_file_path": "models/03_marts/onsite/_models_onsite.yml", "name": "dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_order_value_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_", "alias": "dbt_expectations_expect_column_585b09f07d9f2d7b344afc75d32fe84b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["onsite_ga4_metric_comparison"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/onsite/_models_onsite.yml/dbt_expectations_expect_column_585b09f07d9f2d7b344afc75d32fe84b.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "dbt_expectations_expect_column_585b09f07d9f2d7b344afc75d32fe84b"}, "created_at": 1663750853.5829253, "compiled_sql": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and order_value_comp >= 0.95 and order_value_comp <= 1.05\n)\n as expression\n\n\n    from `bergzeit`.`dbt_onsite`.`onsite_ga4_metric_comparison`\n    where\n        date > date_sub(current_date(), interval 2 day) \n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_value_comp", "file_key_name": "models.onsite_ga4_metric_comparison"}, "test.sql_repository_bz.dbt_utils_at_least_one_gads_ads_for_url_check_final_url.9cafbd858b": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "final_url", "model": "{{ get_where_subquery(ref('gads_ads_for_url_check')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_ads_for_url_check"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "link_checker", "dbt_utils_at_least_one_gads_ads_for_url_check_final_url"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_gads_ads_for_url_check_final_url.9cafbd858b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_gads_ads_for_url_check_final_url.sql", "original_file_path": "models/03_marts/sea_analytics/link_checker/_models_sea_link_checker.yml", "name": "dbt_utils_at_least_one_gads_ads_for_url_check_final_url", "alias": "dbt_utils_at_least_one_gads_ads_for_url_check_final_url", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_ads_for_url_check"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/link_checker/_models_sea_link_checker.yml/dbt_utils_at_least_one_gads_ads_for_url_check_final_url.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.8440857, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(final_url) as filler_column\n\n    from `bergzeit`.`dbt_sea_analytics`.`gads_ads_for_url_check`\n\n    having count(final_url) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "final_url", "file_key_name": "models.gads_ads_for_url_check"}, "test.sql_repository_bz.not_null_gads_adstats_and_attributes_adgroup_id.edb7c2279b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "adgroup_id", "model": "{{ get_where_subquery(ref('gads_adstats_and_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_adstats_and_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "feed_campaign_input", "not_null_gads_adstats_and_attributes_adgroup_id"], "unique_id": "test.sql_repository_bz.not_null_gads_adstats_and_attributes_adgroup_id.edb7c2279b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_gads_adstats_and_attributes_adgroup_id.sql", "original_file_path": "models/03_marts/sea_analytics/feed_campaign_input/_models_sea_feed_campaign_input.yml", "name": "not_null_gads_adstats_and_attributes_adgroup_id", "alias": "not_null_gads_adstats_and_attributes_adgroup_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_adstats_and_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/feed_campaign_input/_models_sea_feed_campaign_input.yml/not_null_gads_adstats_and_attributes_adgroup_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.8557696, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_sea_analytics`.`gads_adstats_and_attributes`\nwhere adgroup_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "adgroup_id", "file_key_name": "models.gads_adstats_and_attributes"}, "test.sql_repository_bz.dbt_utils_at_least_one_gads_adstats_and_attributes_adgroup_id.e490c275df": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "adgroup_id", "model": "{{ get_where_subquery(ref('gads_adstats_and_attributes')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_adstats_and_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "feed_campaign_input", "dbt_utils_at_least_one_gads_adstats_and_attributes_adgroup_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_gads_adstats_and_attributes_adgroup_id.e490c275df", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_gads_adstats_and_attributes_adgroup_id.sql", "original_file_path": "models/03_marts/sea_analytics/feed_campaign_input/_models_sea_feed_campaign_input.yml", "name": "dbt_utils_at_least_one_gads_adstats_and_attributes_adgroup_id", "alias": "dbt_utils_at_least_one_gads_adstats_and_attributes_adgroup_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_adstats_and_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/feed_campaign_input/_models_sea_feed_campaign_input.yml/dbt_utils_at_least_one_gads_adstats_and_attributes_adgroup_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.8586688, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(adgroup_id) as filler_column\n\n    from `bergzeit`.`dbt_sea_analytics`.`gads_adstats_and_attributes`\n\n    having count(adgroup_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "adgroup_id", "file_key_name": "models.gads_adstats_and_attributes"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_name.80647eef58": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a7cd75f66fe961f5c4de9e5dad0d4f27\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "conversion_name", "model": "{{ get_where_subquery(ref('gads_backfill_consentless_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_backfill_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a7cd75f66fe961f5c4de9e5dad0d4f27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_name"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_name.80647eef58", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_a7cd75f66fe961f5c4de9e5dad0d4f27.sql", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml", "name": "dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_name", "alias": "dbt_expectations_expect_column_a7cd75f66fe961f5c4de9e5dad0d4f27", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_backfill_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml/dbt_expectations_expect_column_a7cd75f66fe961f5c4de9e5dad0d4f27.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a7cd75f66fe961f5c4de9e5dad0d4f27"}, "created_at": 1663750853.881659, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CONVERSION_NAME' as \n    string\n) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conversion_name", "file_key_name": "models.gads_backfill_consentless_transactions"}, "test.sql_repository_bz.dbt_utils_at_least_one_gads_backfill_consentless_transactions_conversion_name.dc61bca00f": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_at_least_one_gads_ba_d7cb0d65a5da1e0febd43e9d521becab\") }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "conversion_name", "model": "{{ get_where_subquery(ref('gads_backfill_consentless_transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_backfill_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_at_least_one_gads_ba_d7cb0d65a5da1e0febd43e9d521becab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "dbt_utils_at_least_one_gads_backfill_consentless_transactions_conversion_name"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_gads_backfill_consentless_transactions_conversion_name.dc61bca00f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_gads_ba_d7cb0d65a5da1e0febd43e9d521becab.sql", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml", "name": "dbt_utils_at_least_one_gads_backfill_consentless_transactions_conversion_name", "alias": "dbt_utils_at_least_one_gads_ba_d7cb0d65a5da1e0febd43e9d521becab", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_backfill_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml/dbt_utils_at_least_one_gads_ba_d7cb0d65a5da1e0febd43e9d521becab.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_at_least_one_gads_ba_d7cb0d65a5da1e0febd43e9d521becab"}, "created_at": 1663750853.8888428, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(conversion_name) as filler_column\n\n    from `bergzeit`.`dbt_sea_analytics`.`gads_backfill_consentless_transactions`\n\n    having count(conversion_name) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conversion_name", "file_key_name": "models.gads_backfill_consentless_transactions"}, "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_name.a4be000e25": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "conversion_name", "model": "{{ get_where_subquery(ref('gads_backfill_consentless_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_backfill_consentless_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "not_null_gads_backfill_consentless_transactions_conversion_name"], "unique_id": "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_name.a4be000e25", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_gads_backfill_consentless_transactions_conversion_name.sql", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml", "name": "not_null_gads_backfill_consentless_transactions_conversion_name", "alias": "not_null_gads_backfill_consentless_transactions_conversion_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_backfill_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml/not_null_gads_backfill_consentless_transactions_conversion_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.8963485, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_sea_analytics`.`gads_backfill_consentless_transactions`\nwhere conversion_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conversion_name", "file_key_name": "models.gads_backfill_consentless_transactions"}, "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_value.ee7967395f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_gads_backfill_consent_bee6a8f4d95f1d1251c0bc0cae2ed92e\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "conversion_value", "model": "{{ get_where_subquery(ref('gads_backfill_consentless_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_backfill_consentless_transactions"]}, "config": {"enabled": true, "alias": "not_null_gads_backfill_consent_bee6a8f4d95f1d1251c0bc0cae2ed92e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "not_null_gads_backfill_consentless_transactions_conversion_value"], "unique_id": "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_value.ee7967395f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_gads_backfill_consent_bee6a8f4d95f1d1251c0bc0cae2ed92e.sql", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml", "name": "not_null_gads_backfill_consentless_transactions_conversion_value", "alias": "not_null_gads_backfill_consent_bee6a8f4d95f1d1251c0bc0cae2ed92e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_backfill_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml/not_null_gads_backfill_consent_bee6a8f4d95f1d1251c0bc0cae2ed92e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_gads_backfill_consent_bee6a8f4d95f1d1251c0bc0cae2ed92e"}, "created_at": 1663750853.899182, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_sea_analytics`.`gads_backfill_consentless_transactions`\nwhere conversion_value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conversion_value", "file_key_name": "models.gads_backfill_consentless_transactions"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_value.1ebff85aae": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_be64159a5ffdbb42c1700aae8a8137f3\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "conversion_value", "model": "{{ get_where_subquery(ref('gads_backfill_consentless_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_backfill_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_be64159a5ffdbb42c1700aae8a8137f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_value"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_value.1ebff85aae", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_be64159a5ffdbb42c1700aae8a8137f3.sql", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml", "name": "dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_value", "alias": "dbt_expectations_expect_column_be64159a5ffdbb42c1700aae8a8137f3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_backfill_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml/dbt_expectations_expect_column_be64159a5ffdbb42c1700aae8a8137f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_be64159a5ffdbb42c1700aae8a8137f3"}, "created_at": 1663750853.903283, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CONVERSION_VALUE' as \n    string\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conversion_value", "file_key_name": "models.gads_backfill_consentless_transactions"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_gads_backfill_consentless_transactions_google_click_id__conversion_name_in_Sale_PB_AT_Import_Sale_PB_NL_Import_Sale_PB_IT_Import_Sale_DE_Import_Sale_CH_Import_Sale_UK_Import_Sale__Import_.9d7b13ec85": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\">5\",alias=\"dbt_expectations_expect_column_173c21e289bde081856f3ad3d1873748\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "conversion_name in ('Sale_PB_AT_Import', 'Sale_PB_NL_Import', 'Sale_PB_IT_Import', 'Sale_DE_Import', 'Sale_CH_Import', 'Sale_UK_Import', 'Sale__Import')", "column_name": "google_click_id", "model": "{{ get_where_subquery(ref('gads_backfill_consentless_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_backfill_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_173c21e289bde081856f3ad3d1873748", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">5", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "dbt_expectations_expect_column_values_to_be_unique_gads_backfill_consentless_transactions_google_click_id__conversion_name_in_Sale_PB_AT_Import_Sale_PB_NL_Import_Sale_PB_IT_Import_Sale_DE_Import_Sale_CH_Import_Sale_UK_Import_Sale__Import_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_gads_backfill_consentless_transactions_google_click_id__conversion_name_in_Sale_PB_AT_Import_Sale_PB_NL_Import_Sale_PB_IT_Import_Sale_DE_Import_Sale_CH_Import_Sale_UK_Import_Sale__Import_.9d7b13ec85", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_173c21e289bde081856f3ad3d1873748.sql", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_gads_backfill_consentless_transactions_google_click_id__conversion_name_in_Sale_PB_AT_Import_Sale_PB_NL_Import_Sale_PB_IT_Import_Sale_DE_Import_Sale_CH_Import_Sale_UK_Import_Sale__Import_", "alias": "dbt_expectations_expect_column_173c21e289bde081856f3ad3d1873748", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_backfill_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml/dbt_expectations_expect_column_173c21e289bde081856f3ad3d1873748.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "warn_if": ">5", "alias": "dbt_expectations_expect_column_173c21e289bde081856f3ad3d1873748"}, "created_at": 1663750853.9115598, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        google_click_id\n    from `bergzeit`.`dbt_sea_analytics`.`gads_backfill_consentless_transactions`\n    where\n        1=1\n        and \n    conversion_name in ('Sale_PB_AT_Import', 'Sale_PB_NL_Import', 'Sale_PB_IT_Import', 'Sale_DE_Import', 'Sale_CH_Import', 'Sale_UK_Import', 'Sale__Import') and\n\n        (\n            google_click_id is not null\n            \n        )\n    \n    group by\n        google_click_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "google_click_id", "file_key_name": "models.gads_backfill_consentless_transactions"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_google_click_id.4197bfa548": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_707482271aa2f1142deb7966f2f71134\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "google_click_id", "model": "{{ get_where_subquery(ref('gads_backfill_consentless_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_backfill_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_707482271aa2f1142deb7966f2f71134", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_google_click_id"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_google_click_id.4197bfa548", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_707482271aa2f1142deb7966f2f71134.sql", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml", "name": "dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_google_click_id", "alias": "dbt_expectations_expect_column_707482271aa2f1142deb7966f2f71134", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_backfill_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml/dbt_expectations_expect_column_707482271aa2f1142deb7966f2f71134.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_707482271aa2f1142deb7966f2f71134"}, "created_at": 1663750853.9196584, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('GOOGLE_CLICK_ID' as \n    string\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "google_click_id", "file_key_name": "models.gads_backfill_consentless_transactions"}, "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_google_click_id.73d41f11b3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "google_click_id", "model": "{{ get_where_subquery(ref('gads_backfill_consentless_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_backfill_consentless_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "not_null_gads_backfill_consentless_transactions_google_click_id"], "unique_id": "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_google_click_id.73d41f11b3", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_gads_backfill_consentless_transactions_google_click_id.sql", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml", "name": "not_null_gads_backfill_consentless_transactions_google_click_id", "alias": "not_null_gads_backfill_consentless_transactions_google_click_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_backfill_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml/not_null_gads_backfill_consentless_transactions_google_click_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.9295619, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_sea_analytics`.`gads_backfill_consentless_transactions`\nwhere google_click_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "google_click_id", "file_key_name": "models.gads_backfill_consentless_transactions"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_time.c7b1d11e16": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_487327d0a3a44ce1d8bf86af110367ed\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "conversion_time", "model": "{{ get_where_subquery(ref('gads_backfill_consentless_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_backfill_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_487327d0a3a44ce1d8bf86af110367ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_time"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_time.c7b1d11e16", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_487327d0a3a44ce1d8bf86af110367ed.sql", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml", "name": "dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_time", "alias": "dbt_expectations_expect_column_487327d0a3a44ce1d8bf86af110367ed", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_backfill_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml/dbt_expectations_expect_column_487327d0a3a44ce1d8bf86af110367ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_487327d0a3a44ce1d8bf86af110367ed"}, "created_at": 1663750853.9324818, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CONVERSION_TIME' as \n    string\n) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conversion_time", "file_key_name": "models.gads_backfill_consentless_transactions"}, "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_time.300785956b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "conversion_time", "model": "{{ get_where_subquery(ref('gads_backfill_consentless_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_backfill_consentless_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "not_null_gads_backfill_consentless_transactions_conversion_time"], "unique_id": "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_time.300785956b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_gads_backfill_consentless_transactions_conversion_time.sql", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml", "name": "not_null_gads_backfill_consentless_transactions_conversion_time", "alias": "not_null_gads_backfill_consentless_transactions_conversion_time", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_backfill_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml/not_null_gads_backfill_consentless_transactions_conversion_time.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.9397101, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_sea_analytics`.`gads_backfill_consentless_transactions`\nwhere conversion_time is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "conversion_time", "file_key_name": "models.gads_backfill_consentless_transactions"}, "test.sql_repository_bz.dbt_expectations_expect_table_column_count_to_equal_gads_backfill_consentless_transactions_5.29426e22c7": {"raw_sql": "{{ dbt_expectations.test_expect_table_column_count_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__f5f5da968b5eb1815ff3ad6b45d82ad4\") }}", "test_metadata": {"name": "expect_table_column_count_to_equal", "kwargs": {"value": 5, "model": "{{ get_where_subquery(ref('gads_backfill_consentless_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_backfill_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__f5f5da968b5eb1815ff3ad6b45d82ad4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "dbt_expectations_expect_table_column_count_to_equal_gads_backfill_consentless_transactions_5"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_table_column_count_to_equal_gads_backfill_consentless_transactions_5.29426e22c7", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_table__f5f5da968b5eb1815ff3ad6b45d82ad4.sql", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml", "name": "dbt_expectations_expect_table_column_count_to_equal_gads_backfill_consentless_transactions_5", "alias": "dbt_expectations_expect_table__f5f5da968b5eb1815ff3ad6b45d82ad4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_backfill_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml/dbt_expectations_expect_table__f5f5da968b5eb1815ff3ad6b45d82ad4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__f5f5da968b5eb1815ff3ad6b45d82ad4"}, "created_at": 1663750853.9425526, "compiled_sql": "with test_data as (\n\n    select\n        5 as number_actual_columns,\n        5 as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.gads_backfill_consentless_transactions"}, "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_gads_backfill_consentless_transactions_1000__200__False.0096963cea": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__4ed43771360e82c066dfc44089b1db98\") }}", "test_metadata": {"name": "expect_table_row_count_to_be_between", "kwargs": {"min_value": 200, "max_value": 1000, "strictly": false, "model": "{{ get_where_subquery(ref('gads_backfill_consentless_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gads_backfill_consentless_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__4ed43771360e82c066dfc44089b1db98", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "dbt_expectations_expect_table_row_count_to_be_between_gads_backfill_consentless_transactions_1000__200__False"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_gads_backfill_consentless_transactions_1000__200__False.0096963cea", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_table__4ed43771360e82c066dfc44089b1db98.sql", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml", "name": "dbt_expectations_expect_table_row_count_to_be_between_gads_backfill_consentless_transactions_1000__200__False", "alias": "dbt_expectations_expect_table__4ed43771360e82c066dfc44089b1db98", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gads_backfill_consentless_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/conversion_backfill/_models_sea_conversion_backfill.yml/dbt_expectations_expect_table__4ed43771360e82c066dfc44089b1db98.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__4ed43771360e82c066dfc44089b1db98"}, "created_at": 1663750853.949797, "compiled_sql": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 200 and count(*) <= 1000\n)\n as expression\n\n\n    from `bergzeit`.`dbt_sea_analytics`.`gads_backfill_consentless_transactions`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.gads_backfill_consentless_transactions"}, "test.sql_repository_bz.dbt_utils_at_least_one_gmc_missing_brands_per_country_country.7c615e55c7": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('gmc_missing_brands_per_country')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gmc_missing_brands_per_country"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "smart_shopping_refresher", "dbt_utils_at_least_one_gmc_missing_brands_per_country_country"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_gmc_missing_brands_per_country_country.7c615e55c7", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_gmc_missing_brands_per_country_country.sql", "original_file_path": "models/03_marts/sea_analytics/smart_shopping_refresher/_models_smart_sho_refresh.yml", "name": "dbt_utils_at_least_one_gmc_missing_brands_per_country_country", "alias": "dbt_utils_at_least_one_gmc_missing_brands_per_country_country", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gmc_missing_brands_per_country"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/smart_shopping_refresher/_models_smart_sho_refresh.yml/dbt_utils_at_least_one_gmc_missing_brands_per_country_country.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.9713411, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(country) as filler_column\n\n    from `bergzeit`.`dbt_sea_analytics`.`gmc_missing_brands_per_country`\n\n    having count(country) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "country", "file_key_name": "models.gmc_missing_brands_per_country"}, "test.sql_repository_bz.dbt_utils_at_least_one_gmc_missing_brands_per_country_account_id.066b1cb92a": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_at_least_one_gmc_mis_8d24a5f09d44dc42fce9df1cf3ca1f70\") }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('gmc_missing_brands_per_country')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gmc_missing_brands_per_country"]}, "config": {"enabled": true, "alias": "dbt_utils_at_least_one_gmc_mis_8d24a5f09d44dc42fce9df1cf3ca1f70", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "smart_shopping_refresher", "dbt_utils_at_least_one_gmc_missing_brands_per_country_account_id"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_gmc_missing_brands_per_country_account_id.066b1cb92a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_gmc_mis_8d24a5f09d44dc42fce9df1cf3ca1f70.sql", "original_file_path": "models/03_marts/sea_analytics/smart_shopping_refresher/_models_smart_sho_refresh.yml", "name": "dbt_utils_at_least_one_gmc_missing_brands_per_country_account_id", "alias": "dbt_utils_at_least_one_gmc_mis_8d24a5f09d44dc42fce9df1cf3ca1f70", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gmc_missing_brands_per_country"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/smart_shopping_refresher/_models_smart_sho_refresh.yml/dbt_utils_at_least_one_gmc_mis_8d24a5f09d44dc42fce9df1cf3ca1f70.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_at_least_one_gmc_mis_8d24a5f09d44dc42fce9df1cf3ca1f70"}, "created_at": 1663750853.9777412, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(account_id) as filler_column\n\n    from `bergzeit`.`dbt_sea_analytics`.`gmc_missing_brands_per_country`\n\n    having count(account_id) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.gmc_missing_brands_per_country"}, "test.sql_repository_bz.not_null_gmc_missing_brands_per_country_product_group.faa607cf81": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_group", "model": "{{ get_where_subquery(ref('gmc_missing_brands_per_country')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.gmc_missing_brands_per_country"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "smart_shopping_refresher", "not_null_gmc_missing_brands_per_country_product_group"], "unique_id": "test.sql_repository_bz.not_null_gmc_missing_brands_per_country_product_group.faa607cf81", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_gmc_missing_brands_per_country_product_group.sql", "original_file_path": "models/03_marts/sea_analytics/smart_shopping_refresher/_models_smart_sho_refresh.yml", "name": "not_null_gmc_missing_brands_per_country_product_group", "alias": "not_null_gmc_missing_brands_per_country_product_group", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gmc_missing_brands_per_country"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/sea_analytics/smart_shopping_refresher/_models_smart_sho_refresh.yml/not_null_gmc_missing_brands_per_country_product_group.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750853.9848194, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_sea_analytics`.`gmc_missing_brands_per_country`\nwhere product_group is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "product_group", "file_key_name": "models.gmc_missing_brands_per_country"}, "test.sql_repository_bz.not_null_awin_transactions_pending_with_returns_order_id_awin.9d5fb70f34": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id_awin", "model": "{{ get_where_subquery(ref('awin_transactions_pending_with_returns')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.awin_transactions_pending_with_returns"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "affiliate_awin", "not_null_awin_transactions_pending_with_returns_order_id_awin"], "unique_id": "test.sql_repository_bz.not_null_awin_transactions_pending_with_returns_order_id_awin.9d5fb70f34", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_awin_transactions_pending_with_returns_order_id_awin.sql", "original_file_path": "models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml", "name": "not_null_awin_transactions_pending_with_returns_order_id_awin", "alias": "not_null_awin_transactions_pending_with_returns_order_id_awin", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["awin_transactions_pending_with_returns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml/not_null_awin_transactions_pending_with_returns_order_id_awin.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750854.0280592, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_affiliate`.`awin_transactions_pending_with_returns`\nwhere order_id_awin is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id_awin", "file_key_name": "models.awin_transactions_pending_with_returns"}, "test.sql_repository_bz.dbt_utils_at_least_one_awin_transactions_pending_with_returns_order_id_awin.ada8261cb8": {"raw_sql": "{{ dbt_utils.test_at_least_one(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_at_least_one_awin_tr_a326a7b40030bd56fcd78eb05b6a3528\") }}", "test_metadata": {"name": "at_least_one", "kwargs": {"column_name": "order_id_awin", "model": "{{ get_where_subquery(ref('awin_transactions_pending_with_returns')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_at_least_one", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.awin_transactions_pending_with_returns"]}, "config": {"enabled": true, "alias": "dbt_utils_at_least_one_awin_tr_a326a7b40030bd56fcd78eb05b6a3528", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "affiliate_awin", "dbt_utils_at_least_one_awin_transactions_pending_with_returns_order_id_awin"], "unique_id": "test.sql_repository_bz.dbt_utils_at_least_one_awin_transactions_pending_with_returns_order_id_awin.ada8261cb8", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_utils_at_least_one_awin_tr_a326a7b40030bd56fcd78eb05b6a3528.sql", "original_file_path": "models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml", "name": "dbt_utils_at_least_one_awin_transactions_pending_with_returns_order_id_awin", "alias": "dbt_utils_at_least_one_awin_tr_a326a7b40030bd56fcd78eb05b6a3528", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["awin_transactions_pending_with_returns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml/dbt_utils_at_least_one_awin_tr_a326a7b40030bd56fcd78eb05b6a3528.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_at_least_one_awin_tr_a326a7b40030bd56fcd78eb05b6a3528"}, "created_at": 1663750854.0312932, "compiled_sql": "\n\nselect *\nfrom (\n    select\n        \n        \n      count(order_id_awin) as filler_column\n\n    from `bergzeit`.`dbt_affiliate`.`awin_transactions_pending_with_returns`\n\n    having count(order_id_awin) = 0\n\n) validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id_awin", "file_key_name": "models.awin_transactions_pending_with_returns"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_order_id_awin.47c5befa4a": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_47ceffd66df4491d03e6c445f3df1807\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "order_id_awin", "model": "{{ get_where_subquery(ref('awin_transactions_pending_with_returns')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.awin_transactions_pending_with_returns"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_47ceffd66df4491d03e6c445f3df1807", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "affiliate_awin", "dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_order_id_awin"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_order_id_awin.47c5befa4a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_47ceffd66df4491d03e6c445f3df1807.sql", "original_file_path": "models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml", "name": "dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_order_id_awin", "alias": "dbt_expectations_expect_column_47ceffd66df4491d03e6c445f3df1807", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["awin_transactions_pending_with_returns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml/dbt_expectations_expect_column_47ceffd66df4491d03e6c445f3df1807.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_47ceffd66df4491d03e6c445f3df1807"}, "created_at": 1663750854.038362, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ORDER_ID_AWIN' as \n    string\n) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id_awin", "file_key_name": "models.awin_transactions_pending_with_returns"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_order_id_awin__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_.9a103157be": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">1\",alias=\"dbt_expectations_expect_column_0e46ea09b62d9ed07a40c47bf91c1d38\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"row_condition": "awin_date between date_sub(current_date(), interval 3 day) and date_sub(current_date(), interval 1 day)", "column_name": "order_id_awin", "model": "{{ get_where_subquery(ref('awin_transactions_pending_with_returns')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.awin_transactions_pending_with_returns"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0e46ea09b62d9ed07a40c47bf91c1d38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">1", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "affiliate_awin", "dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_order_id_awin__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_order_id_awin__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_.9a103157be", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_0e46ea09b62d9ed07a40c47bf91c1d38.sql", "original_file_path": "models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_order_id_awin__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_column_0e46ea09b62d9ed07a40c47bf91c1d38", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["awin_transactions_pending_with_returns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml/dbt_expectations_expect_column_0e46ea09b62d9ed07a40c47bf91c1d38.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "error", "warn_if": ">1", "alias": "dbt_expectations_expect_column_0e46ea09b62d9ed07a40c47bf91c1d38"}, "created_at": 1663750854.0477328, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        order_id_awin\n    from `bergzeit`.`dbt_affiliate`.`awin_transactions_pending_with_returns`\n    where\n        1=1\n        and \n    awin_date between date_sub(current_date(), interval 3 day) and date_sub(current_date(), interval 1 day) and\n\n        (\n            order_id_awin is not null\n            \n        )\n    \n    group by\n        order_id_awin\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id_awin", "file_key_name": "models.awin_transactions_pending_with_returns"}, "test.sql_repository_bz.not_null_awin_transactions_pending_with_returns_sale_amount_awin.e764fc75bc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_awin_transactions_pen_33756cc0728ae96a9ffbe8a5ca35ad5b\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sale_amount_awin", "model": "{{ get_where_subquery(ref('awin_transactions_pending_with_returns')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.awin_transactions_pending_with_returns"]}, "config": {"enabled": true, "alias": "not_null_awin_transactions_pen_33756cc0728ae96a9ffbe8a5ca35ad5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "affiliate_awin", "not_null_awin_transactions_pending_with_returns_sale_amount_awin"], "unique_id": "test.sql_repository_bz.not_null_awin_transactions_pending_with_returns_sale_amount_awin.e764fc75bc", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "not_null_awin_transactions_pen_33756cc0728ae96a9ffbe8a5ca35ad5b.sql", "original_file_path": "models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml", "name": "not_null_awin_transactions_pending_with_returns_sale_amount_awin", "alias": "not_null_awin_transactions_pen_33756cc0728ae96a9ffbe8a5ca35ad5b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["awin_transactions_pending_with_returns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml/not_null_awin_transactions_pen_33756cc0728ae96a9ffbe8a5ca35ad5b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_awin_transactions_pen_33756cc0728ae96a9ffbe8a5ca35ad5b"}, "created_at": 1663750854.0559452, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt_affiliate`.`awin_transactions_pending_with_returns`\nwhere sale_amount_awin is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sale_amount_awin", "file_key_name": "models.awin_transactions_pending_with_returns"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_inv_h_shop_order_id.40f8727dcc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",warn_if=\">0\",error_if=\">=5\",alias=\"dbt_expectations_expect_column_d6d0658f597409455ea37a8a015b8c83\") }}", "test_metadata": {"name": "expect_column_values_to_be_unique", "kwargs": {"column_name": "inv_h_shop_order_id", "model": "{{ get_where_subquery(ref('awin_transactions_pending_with_returns')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.awin_transactions_pending_with_returns"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d6d0658f597409455ea37a8a015b8c83", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": ">0", "error_if": ">=5"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "affiliate_awin", "dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_inv_h_shop_order_id"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_inv_h_shop_order_id.40f8727dcc", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_d6d0658f597409455ea37a8a015b8c83.sql", "original_file_path": "models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml", "name": "dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_inv_h_shop_order_id", "alias": "dbt_expectations_expect_column_d6d0658f597409455ea37a8a015b8c83", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["awin_transactions_pending_with_returns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml/dbt_expectations_expect_column_d6d0658f597409455ea37a8a015b8c83.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "error", "warn_if": ">0", "error_if": ">=5", "alias": "dbt_expectations_expect_column_d6d0658f597409455ea37a8a015b8c83"}, "created_at": 1663750854.060903, "compiled_sql": "\n\n\n\nwith validation_errors as (\n\n    select\n        inv_h_shop_order_id\n    from `bergzeit`.`dbt_affiliate`.`awin_transactions_pending_with_returns`\n    where\n        1=1\n        and \n        (\n            inv_h_shop_order_id is not null\n            \n        )\n    \n    group by\n        inv_h_shop_order_id\n    having count(*) > 1\n\n)\nselect * from validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "inv_h_shop_order_id", "file_key_name": "models.awin_transactions_pending_with_returns"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_inv_h_shop_order_id.177285c64b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_32f8f16ae902703400c1ab34e5e8c2c5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "inv_h_shop_order_id", "model": "{{ get_where_subquery(ref('awin_transactions_pending_with_returns')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.awin_transactions_pending_with_returns"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_32f8f16ae902703400c1ab34e5e8c2c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "affiliate_awin", "dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_inv_h_shop_order_id"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_inv_h_shop_order_id.177285c64b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_32f8f16ae902703400c1ab34e5e8c2c5.sql", "original_file_path": "models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml", "name": "dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_inv_h_shop_order_id", "alias": "dbt_expectations_expect_column_32f8f16ae902703400c1ab34e5e8c2c5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["awin_transactions_pending_with_returns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml/dbt_expectations_expect_column_32f8f16ae902703400c1ab34e5e8c2c5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_32f8f16ae902703400c1ab34e5e8c2c5"}, "created_at": 1663750854.0686548, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('INV_H_SHOP_ORDER_ID' as \n    string\n) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "inv_h_shop_order_id", "file_key_name": "models.awin_transactions_pending_with_returns"}, "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_umsatz_netto.a5b484a50a": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0785bb55c2ad7df118f6b89305e39327\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "umsatz_netto", "model": "{{ get_where_subquery(ref('awin_transactions_pending_with_returns')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.awin_transactions_pending_with_returns"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0785bb55c2ad7df118f6b89305e39327", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "affiliate_awin", "dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_umsatz_netto"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_umsatz_netto.a5b484a50a", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_0785bb55c2ad7df118f6b89305e39327.sql", "original_file_path": "models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml", "name": "dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_umsatz_netto", "alias": "dbt_expectations_expect_column_0785bb55c2ad7df118f6b89305e39327", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["awin_transactions_pending_with_returns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml/dbt_expectations_expect_column_0785bb55c2ad7df118f6b89305e39327.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0785bb55c2ad7df118f6b89305e39327"}, "created_at": 1663750854.0759754, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('UMSATZ_NETTO' as \n    string\n) as column_name,\n            13 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "umsatz_netto", "file_key_name": "models.awin_transactions_pending_with_returns"}, "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_awin_transactions_pending_with_returns_umsatz_netto__inv_h_shop_order_id_is_not_null.40fdd0e1d0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_not_be_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_25e59afffbfc59c191f8b724d55b3b40\") }}", "test_metadata": {"name": "expect_column_values_to_not_be_null", "kwargs": {"row_condition": "inv_h_shop_order_id is not null", "column_name": "umsatz_netto", "model": "{{ get_where_subquery(ref('awin_transactions_pending_with_returns')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.awin_transactions_pending_with_returns"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_25e59afffbfc59c191f8b724d55b3b40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "affiliate_awin", "dbt_expectations_expect_column_values_to_not_be_null_awin_transactions_pending_with_returns_umsatz_netto__inv_h_shop_order_id_is_not_null"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_awin_transactions_pending_with_returns_umsatz_netto__inv_h_shop_order_id_is_not_null.40fdd0e1d0", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_column_25e59afffbfc59c191f8b724d55b3b40.sql", "original_file_path": "models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml", "name": "dbt_expectations_expect_column_values_to_not_be_null_awin_transactions_pending_with_returns_umsatz_netto__inv_h_shop_order_id_is_not_null", "alias": "dbt_expectations_expect_column_25e59afffbfc59c191f8b724d55b3b40", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["awin_transactions_pending_with_returns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/affiliate_awin/_models_awin_return_adjustment.yml/dbt_expectations_expect_column_25e59afffbfc59c191f8b724d55b3b40.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_25e59afffbfc59c191f8b724d55b3b40"}, "created_at": 1663750854.0826128, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  umsatz_netto is not null as expression\n\n\n    from `bergzeit`.`dbt_affiliate`.`awin_transactions_pending_with_returns`\n    where\n        inv_h_shop_order_id is not null\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "umsatz_netto", "file_key_name": "models.awin_transactions_pending_with_returns"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_ga_data_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.8ed5bd2364": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_7aa18d854a204133b57b5afba9397e3a\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('product_attributes_and_ga_data_by_day')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.product_attributes_and_ga_data_by_day"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_7aa18d854a204133b57b5afba9397e3a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_ga_data_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_ga_data_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.8ed5bd2364", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_7aa18d854a204133b57b5afba9397e3a.sql", "original_file_path": "models/03_marts/product_inventory/_models_product.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_ga_data_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_7aa18d854a204133b57b5afba9397e3a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["product_attributes_and_ga_data_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/_models_product.yml/dbt_expectations_expect_row_va_7aa18d854a204133b57b5afba9397e3a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_7aa18d854a204133b57b5afba9397e3a"}, "created_at": 1663750854.15459, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 6\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-14' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_product_inventory`.`product_attributes_and_ga_data_by_day` f\n    \n    where date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.product_attributes_and_ga_data_by_day"}, "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_stock_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.06519299f6": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_dd7e65480a0e18f213759f6647fc36d3\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "date", "date_part": "day", "row_condition": "date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day)", "model": "{{ get_where_subquery(ref('product_attributes_and_stock_by_day')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["model.sql_repository_bz.product_attributes_and_stock_by_day"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_dd7e65480a0e18f213759f6647fc36d3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "03_marts", "product_inventory", "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_stock_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_"], "unique_id": "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_stock_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.06519299f6", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_expect_row_va_dd7e65480a0e18f213759f6647fc36d3.sql", "original_file_path": "models/03_marts/product_inventory/_models_product.yml", "name": "dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_stock_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_", "alias": "dbt_expectations_expect_row_va_dd7e65480a0e18f213759f6647fc36d3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["product_attributes_and_stock_by_day"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/03_marts/product_inventory/_models_product.yml/dbt_expectations_expect_row_va_dd7e65480a0e18f213759f6647fc36d3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_dd7e65480a0e18f213759f6647fc36d3"}, "created_at": 1663750854.164275, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 6\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-09-14' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_product_inventory`.`product_attributes_and_stock_by_day` f\n    \n    where date between date_sub(current_date(), interval 7 day) and date_sub(current_date(), interval 1 day)\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.product_attributes_and_stock_by_day"}, "test.ga4.unique_dim_ga4__sessions_session_key.5ade237063": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "session_key", "model": "{{ get_where_subquery(ref('dim_ga4__sessions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ga4.dim_ga4__sessions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["ga4", "marts", "core", "unique_dim_ga4__sessions_session_key"], "unique_id": "test.ga4.unique_dim_ga4__sessions_session_key.5ade237063", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "unique_dim_ga4__sessions_session_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_ga4__sessions_session_key", "alias": "unique_dim_ga4__sessions_session_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_ga4__sessions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/marts/core/core.yml/unique_dim_ga4__sessions_session_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750854.303784, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select session_key as unique_field\n  from `bergzeit`.`dbt`.`dim_ga4__sessions`\n  where session_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_key", "file_key_name": "models.dim_ga4__sessions"}, "test.ga4.unique_dim_ga4__users_user_key.bdf442708d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "user_key", "model": "{{ get_where_subquery(ref('dim_ga4__users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ga4.dim_ga4__users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["ga4", "marts", "core", "unique_dim_ga4__users_user_key"], "unique_id": "test.ga4.unique_dim_ga4__users_user_key.bdf442708d", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "unique_dim_ga4__users_user_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_dim_ga4__users_user_key", "alias": "unique_dim_ga4__users_user_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_ga4__users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/marts/core/core.yml/unique_dim_ga4__users_user_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750854.3069263, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select user_key as unique_field\n  from `bergzeit`.`dbt`.`dim_ga4__users`\n  where user_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_key", "file_key_name": "models.dim_ga4__users"}, "test.ga4.unique_fct_ga4__sessions_session_key.93f6a798f0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "session_key", "model": "{{ get_where_subquery(ref('fct_ga4__sessions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ga4.fct_ga4__sessions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["ga4", "marts", "core", "unique_fct_ga4__sessions_session_key"], "unique_id": "test.ga4.unique_fct_ga4__sessions_session_key.93f6a798f0", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "unique_fct_ga4__sessions_session_key.sql", "original_file_path": "models/marts/core/core.yml", "name": "unique_fct_ga4__sessions_session_key", "alias": "unique_fct_ga4__sessions_session_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_ga4__sessions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/marts/core/core.yml/unique_fct_ga4__sessions_session_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750854.3099213, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select session_key as unique_field\n  from `bergzeit`.`dbt`.`fct_ga4__sessions`\n  where session_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_key", "file_key_name": "models.fct_ga4__sessions"}, "test.ga4.not_null_stg_ga4__event_page_view_page_location.8b37318084": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "page_location", "model": "{{ get_where_subquery(ref('stg_ga4__event_page_view')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ga4.stg_ga4__event_page_view"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["ga4", "staging", "ga4", "not_null_stg_ga4__event_page_view_page_location"], "unique_id": "test.ga4.not_null_stg_ga4__event_page_view_page_location.8b37318084", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "not_null_stg_ga4__event_page_view_page_location.sql", "original_file_path": "models/staging/ga4/stg_ga4.yml", "name": "not_null_stg_ga4__event_page_view_page_location", "alias": "not_null_stg_ga4__event_page_view_page_location", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4__event_page_view"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4.yml/not_null_stg_ga4__event_page_view_page_location.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750854.3399422, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt`.`stg_ga4__event_page_view`\nwhere page_location is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "page_location", "file_key_name": "models.stg_ga4__event_page_view"}, "test.ga4.unique_stg_ga4__users_first_last_pageviews_user_key.3c574733bb": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "user_key", "model": "{{ get_where_subquery(ref('stg_ga4__users_first_last_pageviews')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ga4.stg_ga4__users_first_last_pageviews"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["ga4", "staging", "ga4", "unique_stg_ga4__users_first_last_pageviews_user_key"], "unique_id": "test.ga4.unique_stg_ga4__users_first_last_pageviews_user_key.3c574733bb", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "unique_stg_ga4__users_first_last_pageviews_user_key.sql", "original_file_path": "models/staging/ga4/stg_ga4.yml", "name": "unique_stg_ga4__users_first_last_pageviews_user_key", "alias": "unique_stg_ga4__users_first_last_pageviews_user_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4__users_first_last_pageviews"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4.yml/unique_stg_ga4__users_first_last_pageviews_user_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750854.3430996, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select user_key as unique_field\n  from `bergzeit`.`dbt`.`stg_ga4__users_first_last_pageviews`\n  where user_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_key", "file_key_name": "models.stg_ga4__users_first_last_pageviews"}, "test.ga4.unique_stg_ga4__users_first_last_events_user_key.dc787935d6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "user_key", "model": "{{ get_where_subquery(ref('stg_ga4__users_first_last_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ga4.stg_ga4__users_first_last_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["ga4", "staging", "ga4", "unique_stg_ga4__users_first_last_events_user_key"], "unique_id": "test.ga4.unique_stg_ga4__users_first_last_events_user_key.dc787935d6", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "unique_stg_ga4__users_first_last_events_user_key.sql", "original_file_path": "models/staging/ga4/stg_ga4.yml", "name": "unique_stg_ga4__users_first_last_events_user_key", "alias": "unique_stg_ga4__users_first_last_events_user_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4__users_first_last_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4.yml/unique_stg_ga4__users_first_last_events_user_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750854.345914, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select user_key as unique_field\n  from `bergzeit`.`dbt`.`stg_ga4__users_first_last_events`\n  where user_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_key", "file_key_name": "models.stg_ga4__users_first_last_events"}, "test.ga4.unique_stg_ga4__events_event_key.985cc306e5": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_key", "model": "{{ get_where_subquery(ref('stg_ga4__events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ga4.stg_ga4__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["ga4", "staging", "ga4", "unique_stg_ga4__events_event_key"], "unique_id": "test.ga4.unique_stg_ga4__events_event_key.985cc306e5", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "unique_stg_ga4__events_event_key.sql", "original_file_path": "models/staging/ga4/stg_ga4.yml", "name": "unique_stg_ga4__events_event_key", "alias": "unique_stg_ga4__events_event_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4.yml/unique_stg_ga4__events_event_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750854.348805, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select event_key as unique_field\n  from `bergzeit`.`dbt`.`stg_ga4__events`\n  where event_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_key", "file_key_name": "models.stg_ga4__events"}, "test.ga4.unique_stg_ga4__derived_user_properties_user_key.8ef3970648": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "user_key", "model": "{{ get_where_subquery(ref('stg_ga4__derived_user_properties')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["ga4", "staging", "ga4", "unique_stg_ga4__derived_user_properties_user_key"], "unique_id": "test.ga4.unique_stg_ga4__derived_user_properties_user_key.8ef3970648", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "unique_stg_ga4__derived_user_properties_user_key.sql", "original_file_path": "models/staging/ga4/stg_ga4.yml", "name": "unique_stg_ga4__derived_user_properties_user_key", "alias": "unique_stg_ga4__derived_user_properties_user_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4__derived_user_properties"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750854.3520408, "column_name": "user_key", "file_key_name": "models.stg_ga4__derived_user_properties"}, "test.ga4.unique_stg_ga4__sessions_traffic_sources_session_key.417549e35d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "session_key", "model": "{{ get_where_subquery(ref('stg_ga4__sessions_traffic_sources')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ga4.stg_ga4__sessions_traffic_sources"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["ga4", "staging", "ga4", "unique_stg_ga4__sessions_traffic_sources_session_key"], "unique_id": "test.ga4.unique_stg_ga4__sessions_traffic_sources_session_key.417549e35d", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "unique_stg_ga4__sessions_traffic_sources_session_key.sql", "original_file_path": "models/staging/ga4/stg_ga4.yml", "name": "unique_stg_ga4__sessions_traffic_sources_session_key", "alias": "unique_stg_ga4__sessions_traffic_sources_session_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4__sessions_traffic_sources"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4.yml/unique_stg_ga4__sessions_traffic_sources_session_key.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750854.3549163, "compiled_sql": "\n    \n    \n\nwith dbt_test__target as (\n  \n  select session_key as unique_field\n  from `bergzeit`.`dbt`.`stg_ga4__sessions_traffic_sources`\n  where session_key is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_key", "file_key_name": "models.stg_ga4__sessions_traffic_sources"}, "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_source.49313fe211": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_source", "model": "{{ get_where_subquery(ref('stg_ga4__sessions_traffic_sources')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ga4.stg_ga4__sessions_traffic_sources"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["ga4", "staging", "ga4", "not_null_stg_ga4__sessions_traffic_sources_session_source"], "unique_id": "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_source.49313fe211", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "not_null_stg_ga4__sessions_traffic_sources_session_source.sql", "original_file_path": "models/staging/ga4/stg_ga4.yml", "name": "not_null_stg_ga4__sessions_traffic_sources_session_source", "alias": "not_null_stg_ga4__sessions_traffic_sources_session_source", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4__sessions_traffic_sources"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4.yml/not_null_stg_ga4__sessions_traffic_sources_session_source.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750854.3576653, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt`.`stg_ga4__sessions_traffic_sources`\nwhere session_source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_source", "file_key_name": "models.stg_ga4__sessions_traffic_sources"}, "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_medium.90883df125": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_medium", "model": "{{ get_where_subquery(ref('stg_ga4__sessions_traffic_sources')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ga4.stg_ga4__sessions_traffic_sources"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["ga4", "staging", "ga4", "not_null_stg_ga4__sessions_traffic_sources_session_medium"], "unique_id": "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_medium.90883df125", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "not_null_stg_ga4__sessions_traffic_sources_session_medium.sql", "original_file_path": "models/staging/ga4/stg_ga4.yml", "name": "not_null_stg_ga4__sessions_traffic_sources_session_medium", "alias": "not_null_stg_ga4__sessions_traffic_sources_session_medium", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4__sessions_traffic_sources"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4.yml/not_null_stg_ga4__sessions_traffic_sources_session_medium.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750854.3604503, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt`.`stg_ga4__sessions_traffic_sources`\nwhere session_medium is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_medium", "file_key_name": "models.stg_ga4__sessions_traffic_sources"}, "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_campaign.63d42c772d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_campaign", "model": "{{ get_where_subquery(ref('stg_ga4__sessions_traffic_sources')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ga4.stg_ga4__sessions_traffic_sources"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["ga4", "staging", "ga4", "not_null_stg_ga4__sessions_traffic_sources_session_campaign"], "unique_id": "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_campaign.63d42c772d", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "not_null_stg_ga4__sessions_traffic_sources_session_campaign.sql", "original_file_path": "models/staging/ga4/stg_ga4.yml", "name": "not_null_stg_ga4__sessions_traffic_sources_session_campaign", "alias": "not_null_stg_ga4__sessions_traffic_sources_session_campaign", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ga4__sessions_traffic_sources"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ga4/models/staging/ga4/stg_ga4.yml/not_null_stg_ga4__sessions_traffic_sources_session_campaign.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663750854.363771, "compiled_sql": "\n    \n    \n\nselect *\nfrom `bergzeit`.`dbt`.`stg_ga4__sessions_traffic_sources`\nwhere session_campaign is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_campaign", "file_key_name": "models.stg_ga4__sessions_traffic_sources"}, "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_channel_attribution_markov_attribution_channel_level_country_grouping__date__date_2022_05_20_and_country_grouping_de___19.3eefbef85f": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_73245a2619a28b20b93c7ccbb88c3c95\") }}", "test_metadata": {"name": "expect_table_row_count_to_equal", "kwargs": {"value": 19, "group_by": ["country_grouping", "date"], "row_condition": "date >= '2022-05-20' and country_grouping = 'de'", "model": "{{ get_where_subquery(source('channel_attribution', 'markov_attribution_channel_level')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.sql_repository_bz.channel_attribution.markov_attribution_channel_level"]}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_73245a2619a28b20b93c7ccbb88c3c95", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channel_attribution", "dbt_expectations_source_expect_table_row_count_to_equal_channel_attribution_markov_attribution_channel_level_country_grouping__date__date_2022_05_20_and_country_grouping_de___19"], "unique_id": "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_channel_attribution_markov_attribution_channel_level_country_grouping__date__date_2022_05_20_and_country_grouping_de___19.3eefbef85f", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_source_expect_73245a2619a28b20b93c7ccbb88c3c95.sql", "original_file_path": "models/01_staging/channel_attribution/_sources_attribution.yml", "name": "dbt_expectations_source_expect_table_row_count_to_equal_channel_attribution_markov_attribution_channel_level_country_grouping__date__date_2022_05_20_and_country_grouping_de___19", "alias": "dbt_expectations_source_expect_73245a2619a28b20b93c7ccbb88c3c95", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["channel_attribution", "markov_attribution_channel_level"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channel_attribution/_sources_attribution.yml/dbt_expectations_source_expect_73245a2619a28b20b93c7ccbb88c3c95.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_73245a2619a28b20b93c7ccbb88c3c95"}, "created_at": 1663750854.3782494, "compiled_sql": "\n\n    with grouped_expression as (\n    select\n        \n        country_grouping as col_1,\n        date as col_2,\n        \n        \n    \n  \ncount(*) = 19\n as expression\n\n\n    from `bergzeit`.`channel_attribution`.`markov_attribution_daily_updates`\n    where\n        date >= '2022-05-20' and country_grouping = 'de'\n    \n    \n    group by\n    country_grouping,\n    date\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "sources.channel_attribution"}, "test.sql_repository_bz.dbt_expectations_source_expect_row_values_to_have_recent_data_channel_attribution_markov_attribution_channel_level_date__hour__39.07f7fbb608": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_1c386658dde7657cd3af97af01b03c24\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "hour", "interval": 39, "column_name": "date", "model": "{{ get_where_subquery(source('channel_attribution', 'markov_attribution_channel_level')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["source.sql_repository_bz.channel_attribution.markov_attribution_channel_level"]}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_1c386658dde7657cd3af97af01b03c24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "channel_attribution", "dbt_expectations_source_expect_row_values_to_have_recent_data_channel_attribution_markov_attribution_channel_level_date__hour__39"], "unique_id": "test.sql_repository_bz.dbt_expectations_source_expect_row_values_to_have_recent_data_channel_attribution_markov_attribution_channel_level_date__hour__39.07f7fbb608", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_source_expect_1c386658dde7657cd3af97af01b03c24.sql", "original_file_path": "models/01_staging/channel_attribution/_sources_attribution.yml", "name": "dbt_expectations_source_expect_row_values_to_have_recent_data_channel_attribution_markov_attribution_channel_level_date__hour__39", "alias": "dbt_expectations_source_expect_1c386658dde7657cd3af97af01b03c24", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["channel_attribution", "markov_attribution_channel_level"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/channel_attribution/_sources_attribution.yml/dbt_expectations_source_expect_1c386658dde7657cd3af97af01b03c24.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_1c386658dde7657cd3af97af01b03c24"}, "created_at": 1663750854.3946161, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(date as \n    timestamp\n)) as max_timestamp\n    from\n        `bergzeit`.`channel_attribution`.`markov_attribution_daily_updates`\n    where\n        -- to exclude erroneous future dates\n        cast(date as \n    timestamp\n) <= timestamp(datetime(\n    current_timestamp\n, 'Europe/Berlin'))\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp\n))\n        <\n        cast(\n\n        datetime_add(\n            cast( timestamp(datetime(\n    current_timestamp\n, 'Europe/Berlin')) as datetime),\n        interval -39 hour\n        )\n\n as \n    timestamp\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "sources.channel_attribution"}, "test.sql_repository_bz.dbt_expectations_source_expect_row_values_to_have_data_for_every_n_datepart_dbt_test_results_test_results_history_test_date__day__2022_07_01.ef831ae303": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_20983c588541540fbd2228a6bf237890\") }}", "test_metadata": {"name": "expect_row_values_to_have_data_for_every_n_datepart", "kwargs": {"date_col": "test_date", "date_part": "day", "test_start_date": "2022-07-01", "model": "{{ get_where_subquery(source('dbt_test_results', 'test_results_history')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro.dbt.get_where_subquery"], "nodes": ["source.sql_repository_bz.dbt_test_results.test_results_history"]}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_20983c588541540fbd2228a6bf237890", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "dbt_metadata", "dbt_expectations_source_expect_row_values_to_have_data_for_every_n_datepart_dbt_test_results_test_results_history_test_date__day__2022_07_01"], "unique_id": "test.sql_repository_bz.dbt_expectations_source_expect_row_values_to_have_data_for_every_n_datepart_dbt_test_results_test_results_history_test_date__day__2022_07_01.ef831ae303", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_source_expect_20983c588541540fbd2228a6bf237890.sql", "original_file_path": "models/01_staging/dbt_metadata/_sources_dbt_metadata.yml", "name": "dbt_expectations_source_expect_row_values_to_have_data_for_every_n_datepart_dbt_test_results_test_results_history_test_date__day__2022_07_01", "alias": "dbt_expectations_source_expect_20983c588541540fbd2228a6bf237890", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["dbt_test_results", "test_results_history"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/dbt_metadata/_sources_dbt_metadata.yml/dbt_expectations_source_expect_20983c588541540fbd2228a6bf237890.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_20983c588541540fbd2228a6bf237890"}, "created_at": 1663750854.434434, "compiled_sql": "\n\n\n    \n\n\n\n\n\n\n\n\n\nwith base_dates as (\n\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 81\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2022-07-01' as date ) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-09-20' as date )\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp\n) as date_day\nfrom\n    date_spine d\n\n\n    \n\n),\nmodel_data as (\n\n    select\n    \n\n        cast(timestamp_trunc(\n        cast(test_date as timestamp),\n        day\n    ) as datetime) as date_day,\n\n    \n    \n        count(*) as row_cnt\n    from\n        `bergzeit`.`dbt_test_results`.`test_results_history` f\n    \n    group by\n        date_day\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_day as datetime) as date_day,\n        case when f.date_day is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_day as datetime) = f.date_day\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "sources.dbt_test_results"}, "test.sql_repository_bz.dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_Land__Monat__Wert.b09caac309": {"raw_sql": "{{ dbt_expectations.test_expect_table_columns_to_match_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_09d3fbaccc2d37ff9e2d0429fb1085ad\") }}", "test_metadata": {"name": "expect_table_columns_to_match_set", "kwargs": {"column_list": ["Land", "Monat", "Wert"], "model": "{{ get_where_subquery(source('price_intelligence', 'budgetplan_soll')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro.dbt.get_where_subquery"], "nodes": ["source.sql_repository_bz.price_intelligence.budgetplan_soll"]}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_09d3fbaccc2d37ff9e2d0429fb1085ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_Land__Monat__Wert"], "unique_id": "test.sql_repository_bz.dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_Land__Monat__Wert.b09caac309", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_source_expect_09d3fbaccc2d37ff9e2d0429fb1085ad.sql", "original_file_path": "models/01_staging/google_sheets/_sources_gsheets.yml", "name": "dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_Land__Monat__Wert", "alias": "dbt_expectations_source_expect_09d3fbaccc2d37ff9e2d0429fb1085ad", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["price_intelligence", "budgetplan_soll"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_sources_gsheets.yml/dbt_expectations_source_expect_09d3fbaccc2d37ff9e2d0429fb1085ad.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_09d3fbaccc2d37ff9e2d0429fb1085ad"}, "created_at": 1663750854.452611, "compiled_sql": "with relation_columns as (\n\n        \n        select cast('LAND' as \n    string\n) as relation_column\n        union all\n        \n        select cast('MONAT' as \n    string\n) as relation_column\n        union all\n        \n        select cast('WERT' as \n    string\n) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('LAND' as \n    string\n) as input_column\n        union all\n        \n        select cast('MONAT' as \n    string\n) as input_column\n        union all\n        \n        select cast('WERT' as \n    string\n) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "sources.price_intelligence"}, "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__Monat__1.5d85f3b378": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_7f2b4111cf6d5b589576a59fd09c75c2\") }}", "test_metadata": {"name": "expect_table_row_count_to_equal", "kwargs": {"value": 1, "group_by": ["Land", "Monat"], "model": "{{ get_where_subquery(source('price_intelligence', 'budgetplan_soll')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.sql_repository_bz.price_intelligence.budgetplan_soll"]}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_7f2b4111cf6d5b589576a59fd09c75c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__Monat__1"], "unique_id": "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__Monat__1.5d85f3b378", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_source_expect_7f2b4111cf6d5b589576a59fd09c75c2.sql", "original_file_path": "models/01_staging/google_sheets/_sources_gsheets.yml", "name": "dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__Monat__1", "alias": "dbt_expectations_source_expect_7f2b4111cf6d5b589576a59fd09c75c2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["price_intelligence", "budgetplan_soll"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_sources_gsheets.yml/dbt_expectations_source_expect_7f2b4111cf6d5b589576a59fd09c75c2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_7f2b4111cf6d5b589576a59fd09c75c2"}, "created_at": 1663750854.4693115, "compiled_sql": "\n\n    with grouped_expression as (\n    select\n        \n        Land as col_1,\n        Monat as col_2,\n        \n        \n    \n  \ncount(*) = 1\n as expression\n\n\n    from `bergzeit`.`price_intelligence`.`budgetplan_soll`\n    \n    group by\n    Land,\n    Monat\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "sources.price_intelligence"}, "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__12.888a866c6b": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_dc8ac658698767f387b20c71bee54e0f\") }}", "test_metadata": {"name": "expect_table_row_count_to_equal", "kwargs": {"value": 12, "group_by": ["Land"], "model": "{{ get_where_subquery(source('price_intelligence', 'budgetplan_soll')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.sql_repository_bz.price_intelligence.budgetplan_soll"]}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_dc8ac658698767f387b20c71bee54e0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__12"], "unique_id": "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__12.888a866c6b", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_source_expect_dc8ac658698767f387b20c71bee54e0f.sql", "original_file_path": "models/01_staging/google_sheets/_sources_gsheets.yml", "name": "dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__12", "alias": "dbt_expectations_source_expect_dc8ac658698767f387b20c71bee54e0f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["price_intelligence", "budgetplan_soll"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_sources_gsheets.yml/dbt_expectations_source_expect_dc8ac658698767f387b20c71bee54e0f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_dc8ac658698767f387b20c71bee54e0f"}, "created_at": 1663750854.478689, "compiled_sql": "\n\n    with grouped_expression as (\n    select\n        \n        Land as col_1,\n        \n        \n    \n  \ncount(*) = 12\n as expression\n\n\n    from `bergzeit`.`price_intelligence`.`budgetplan_soll`\n    \n    group by\n    Land\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "sources.price_intelligence"}, "test.sql_repository_bz.dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_channels_Land__Channel__Anteil__KUR.754e05eaad": {"raw_sql": "{{ dbt_expectations.test_expect_table_columns_to_match_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_32598240d99f64c1b723b3cbf04ef39d\") }}", "test_metadata": {"name": "expect_table_columns_to_match_set", "kwargs": {"column_list": ["Land", "Channel", "Anteil", "KUR"], "model": "{{ get_where_subquery(source('price_intelligence', 'budgetplan_soll_channels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro.dbt.get_where_subquery"], "nodes": ["source.sql_repository_bz.price_intelligence.budgetplan_soll_channels"]}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_32598240d99f64c1b723b3cbf04ef39d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_channels_Land__Channel__Anteil__KUR"], "unique_id": "test.sql_repository_bz.dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_channels_Land__Channel__Anteil__KUR.754e05eaad", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_source_expect_32598240d99f64c1b723b3cbf04ef39d.sql", "original_file_path": "models/01_staging/google_sheets/_sources_gsheets.yml", "name": "dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_channels_Land__Channel__Anteil__KUR", "alias": "dbt_expectations_source_expect_32598240d99f64c1b723b3cbf04ef39d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["price_intelligence", "budgetplan_soll_channels"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_sources_gsheets.yml/dbt_expectations_source_expect_32598240d99f64c1b723b3cbf04ef39d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_32598240d99f64c1b723b3cbf04ef39d"}, "created_at": 1663750854.48804, "compiled_sql": "with relation_columns as (\n\n        \n        select cast('LAND' as \n    string\n) as relation_column\n        union all\n        \n        select cast('CHANNEL' as \n    string\n) as relation_column\n        union all\n        \n        select cast('ANTEIL' as \n    string\n) as relation_column\n        union all\n        \n        select cast('KUR' as \n    string\n) as relation_column\n        \n        \n    ),\n    input_columns as (\n\n        \n        select cast('LAND' as \n    string\n) as input_column\n        union all\n        \n        select cast('CHANNEL' as \n    string\n) as input_column\n        union all\n        \n        select cast('ANTEIL' as \n    string\n) as input_column\n        union all\n        \n        select cast('KUR' as \n    string\n) as input_column\n        \n        \n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "sources.price_intelligence"}, "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_channels_Land__Channel__Land_is_not_null_and_Channel_is_not_null__1.f09a2be471": {"raw_sql": "{{ dbt_expectations.test_expect_table_row_count_to_equal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_1dd702a25dcd63db404daf434723a07f\") }}", "test_metadata": {"name": "expect_table_row_count_to_equal", "kwargs": {"value": 1, "group_by": ["Land", "Channel"], "row_condition": "Land is not null and Channel is not null", "model": "{{ get_where_subquery(source('price_intelligence', 'budgetplan_soll_channels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro.dbt.get_where_subquery"], "nodes": ["source.sql_repository_bz.price_intelligence.budgetplan_soll_channels"]}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_1dd702a25dcd63db404daf434723a07f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "bergzeit", "schema": "dbt_dbt_test__audit", "fqn": ["sql_repository_bz", "01_staging", "google_sheets", "dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_channels_Land__Channel__Land_is_not_null_and_Channel_is_not_null__1"], "unique_id": "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_channels_Land__Channel__Land_is_not_null_and_Channel_is_not_null__1.f09a2be471", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "dbt_expectations_source_expect_1dd702a25dcd63db404daf434723a07f.sql", "original_file_path": "models/01_staging/google_sheets/_sources_gsheets.yml", "name": "dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_channels_Land__Channel__Land_is_not_null_and_Channel_is_not_null__1", "alias": "dbt_expectations_source_expect_1dd702a25dcd63db404daf434723a07f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [], "sources": [["price_intelligence", "budgetplan_soll_channels"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/sql_repository_bz/models/01_staging/google_sheets/_sources_gsheets.yml/dbt_expectations_source_expect_1dd702a25dcd63db404daf434723a07f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_1dd702a25dcd63db404daf434723a07f"}, "created_at": 1663750854.4976857, "compiled_sql": "\n\n    with grouped_expression as (\n    select\n        \n        Land as col_1,\n        Channel as col_2,\n        \n        \n    \n  \ncount(*) = 1\n as expression\n\n\n    from `bergzeit`.`price_intelligence`.`budgetplan_soll_channels`\n    where\n        Land is not null and Channel is not null\n    \n    \n    group by\n    Land,\n    Channel\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "sources.price_intelligence"}}, "sources": {"source.sql_repository_bz.channel_attribution.markov_attribution_channel_level": {"fqn": ["sql_repository_bz", "01_staging", "channel_attribution", "channel_attribution", "markov_attribution_channel_level"], "database": "bergzeit", "schema": "channel_attribution", "unique_id": "source.sql_repository_bz.channel_attribution.markov_attribution_channel_level", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/channel_attribution/_sources_attribution.yml", "original_file_path": "models/01_staging/channel_attribution/_sources_attribution.yml", "name": "markov_attribution_channel_level", "source_name": "channel_attribution", "source_description": "", "loader": "", "identifier": "markov_attribution_daily_updates", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "this table is the result of the daily channel attribution notebook run (calculates attribution on channel level)", "columns": {"date": {"name": "date", "description": "the max date of the analysis window (= current day minus one)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`channel_attribution`.`markov_attribution_daily_updates`", "created_at": 1663750854.403533}, "source.sql_repository_bz.channel_attribution.markov_attribution_path_level": {"fqn": ["sql_repository_bz", "01_staging", "channel_attribution", "channel_attribution", "markov_attribution_path_level"], "database": "bergzeit", "schema": "channel_attribution", "unique_id": "source.sql_repository_bz.channel_attribution.markov_attribution_path_level", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/channel_attribution/_sources_attribution.yml", "original_file_path": "models/01_staging/channel_attribution/_sources_attribution.yml", "name": "markov_attribution_path_level", "source_name": "channel_attribution", "source_description": "", "loader": "", "identifier": "markov_attribution_path_level_daily", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "this table is the result of the weekly manual channel attribution run (calculates attribution on path level)", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`channel_attribution`.`markov_attribution_path_level_daily`", "created_at": 1663750854.4038062}, "source.sql_repository_bz.weather_data.weather_dach_daily": {"fqn": ["sql_repository_bz", "01_staging", "weather_data", "weather_data", "weather_dach_daily"], "database": "bergzeit", "schema": "weatherData", "unique_id": "source.sql_repository_bz.weather_data.weather_dach_daily", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/weather_data/_sources_weather.yml", "original_file_path": "models/01_staging/weather_data/_sources_weather.yml", "name": "weather_dach_daily", "source_name": "weather_data", "source_description": "This is a collection of daily weather data", "loader": "", "identifier": "weatherData_Current", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "this model lists temperature data from OpenWeatherMaps, fetched 6 times per day for 15 cities per DACH country", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`weatherData`.`weatherData_Current`", "created_at": 1663750854.4040403}, "source.sql_repository_bz.weather_data.weather_dach_7d_forecast": {"fqn": ["sql_repository_bz", "01_staging", "weather_data", "weather_data", "weather_dach_7d_forecast"], "database": "bergzeit", "schema": "weatherData", "unique_id": "source.sql_repository_bz.weather_data.weather_dach_7d_forecast", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/weather_data/_sources_weather.yml", "original_file_path": "models/01_staging/weather_data/_sources_weather.yml", "name": "weather_dach_7d_forecast", "source_name": "weather_data", "source_description": "This is a collection of daily weather data", "loader": "", "identifier": "weather_forecast", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "this model lists weather forecasts from OpenWeatherMaps, updated 6 times per day for 15 cities per DACH country", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`weatherData`.`weather_forecast`", "created_at": 1663750854.4042401}, "source.sql_repository_bz.google_ads_transfer_de.gads_shopping_product_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_de", "gads_shopping_product_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DE", "unique_id": "source.sql_repository_bz.google_ads_transfer_de.gads_shopping_product_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_shopping_product_stats", "source_name": "google_ads_transfer_de", "source_description": "", "loader": "", "identifier": "p_ShoppingProductStats_7844181130", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DE`.`p_ShoppingProductStats_7844181130`", "created_at": 1663750854.4044461}, "source.sql_repository_bz.google_ads_transfer_de.gads_search_query_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_de", "gads_search_query_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DE", "unique_id": "source.sql_repository_bz.google_ads_transfer_de.gads_search_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_search_query_stats", "source_name": "google_ads_transfer_de", "source_description": "", "loader": "", "identifier": "p_SearchQueryStats_7844181130", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DE`.`p_SearchQueryStats_7844181130`", "created_at": 1663750854.4046361}, "source.sql_repository_bz.google_ads_transfer_de.gads_campaigns": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_de", "gads_campaigns"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DE", "unique_id": "source.sql_repository_bz.google_ads_transfer_de.gads_campaigns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaigns", "source_name": "google_ads_transfer_de", "source_description": "", "loader": "", "identifier": "p_Campaign_7844181130", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DE`.`p_Campaign_7844181130`", "created_at": 1663750854.40483}, "source.sql_repository_bz.google_ads_transfer_de.gads_campaign_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_de", "gads_campaign_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DE", "unique_id": "source.sql_repository_bz.google_ads_transfer_de.gads_campaign_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaign_stats", "source_name": "google_ads_transfer_de", "source_description": "", "loader": "", "identifier": "p_CampaignStats_7844181130", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DE`.`p_CampaignStats_7844181130`", "created_at": 1663750854.4050376}, "source.sql_repository_bz.google_ads_transfer_de.gads_ads_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_de", "gads_ads_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DE", "unique_id": "source.sql_repository_bz.google_ads_transfer_de.gads_ads_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads_stats", "source_name": "google_ads_transfer_de", "source_description": "", "loader": "", "identifier": "p_AdStats_7844181130", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DE`.`p_AdStats_7844181130`", "created_at": 1663750854.4052405}, "source.sql_repository_bz.google_ads_transfer_de.gads_ads": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_de", "gads_ads"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DE", "unique_id": "source.sql_repository_bz.google_ads_transfer_de.gads_ads", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads", "source_name": "google_ads_transfer_de", "source_description": "", "loader": "", "identifier": "p_Ad_7844181130", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DE`.`p_Ad_7844181130`", "created_at": 1663750854.4054356}, "source.sql_repository_bz.google_ads_transfer_de.gads_adgroups": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_de", "gads_adgroups"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DE", "unique_id": "source.sql_repository_bz.google_ads_transfer_de.gads_adgroups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_adgroups", "source_name": "google_ads_transfer_de", "source_description": "", "loader": "", "identifier": "p_AdGroup_7844181130", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DE`.`p_AdGroup_7844181130`", "created_at": 1663750854.4056287}, "source.sql_repository_bz.google_ads_transfer_de.gads_adgroup_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_de", "gads_adgroup_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DE", "unique_id": "source.sql_repository_bz.google_ads_transfer_de.gads_adgroup_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_adgroup_stats", "source_name": "google_ads_transfer_de", "source_description": "", "loader": "", "identifier": "p_AdGroupStats_7844181130", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DE`.`p_AdGroupStats_7844181130`", "created_at": 1663750854.4058275}, "source.sql_repository_bz.google_ads_transfer_de.gads_criteria": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_de", "gads_criteria"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DE", "unique_id": "source.sql_repository_bz.google_ads_transfer_de.gads_criteria", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_criteria", "source_name": "google_ads_transfer_de", "source_description": "", "loader": "", "identifier": "p_Criteria_7844181130", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DE`.`p_Criteria_7844181130`", "created_at": 1663750854.4060276}, "source.sql_repository_bz.google_ads_transfer_at.gads_shopping_product_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_at", "gads_shopping_product_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_AT", "unique_id": "source.sql_repository_bz.google_ads_transfer_at.gads_shopping_product_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_shopping_product_stats", "source_name": "google_ads_transfer_at", "source_description": "", "loader": "", "identifier": "p_ShoppingProductStats_5575738585", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_AT`.`p_ShoppingProductStats_5575738585`", "created_at": 1663750854.4062946}, "source.sql_repository_bz.google_ads_transfer_at.gads_search_query_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_at", "gads_search_query_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_AT", "unique_id": "source.sql_repository_bz.google_ads_transfer_at.gads_search_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_search_query_stats", "source_name": "google_ads_transfer_at", "source_description": "", "loader": "", "identifier": "p_SearchQueryStats_5575738585", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_AT`.`p_SearchQueryStats_5575738585`", "created_at": 1663750854.4065087}, "source.sql_repository_bz.google_ads_transfer_at.gads_campaigns": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_at", "gads_campaigns"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_AT", "unique_id": "source.sql_repository_bz.google_ads_transfer_at.gads_campaigns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaigns", "source_name": "google_ads_transfer_at", "source_description": "", "loader": "", "identifier": "p_Campaign_5575738585", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_AT`.`p_Campaign_5575738585`", "created_at": 1663750854.4070582}, "source.sql_repository_bz.google_ads_transfer_at.gads_campaign_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_at", "gads_campaign_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_AT", "unique_id": "source.sql_repository_bz.google_ads_transfer_at.gads_campaign_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaign_stats", "source_name": "google_ads_transfer_at", "source_description": "", "loader": "", "identifier": "p_CampaignStats_5575738585", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_AT`.`p_CampaignStats_5575738585`", "created_at": 1663750854.4072948}, "source.sql_repository_bz.google_ads_transfer_at.gads_ads_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_at", "gads_ads_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_AT", "unique_id": "source.sql_repository_bz.google_ads_transfer_at.gads_ads_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads_stats", "source_name": "google_ads_transfer_at", "source_description": "", "loader": "", "identifier": "p_AdStats_5575738585", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_AT`.`p_AdStats_5575738585`", "created_at": 1663750854.4074833}, "source.sql_repository_bz.google_ads_transfer_at.gads_ads": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_at", "gads_ads"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_AT", "unique_id": "source.sql_repository_bz.google_ads_transfer_at.gads_ads", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads", "source_name": "google_ads_transfer_at", "source_description": "", "loader": "", "identifier": "p_Ad_5575738585", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_AT`.`p_Ad_5575738585`", "created_at": 1663750854.4076617}, "source.sql_repository_bz.google_ads_transfer_at.gads_adgroups": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_at", "gads_adgroups"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_AT", "unique_id": "source.sql_repository_bz.google_ads_transfer_at.gads_adgroups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_adgroups", "source_name": "google_ads_transfer_at", "source_description": "", "loader": "", "identifier": "p_AdGroup_5575738585", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_AT`.`p_AdGroup_5575738585`", "created_at": 1663750854.4078336}, "source.sql_repository_bz.google_ads_transfer_at.gads_criteria": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_at", "gads_criteria"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_AT", "unique_id": "source.sql_repository_bz.google_ads_transfer_at.gads_criteria", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_criteria", "source_name": "google_ads_transfer_at", "source_description": "", "loader": "", "identifier": "p_Criteria_5575738585", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_AT`.`p_Criteria_5575738585`", "created_at": 1663750854.4080079}, "source.sql_repository_bz.google_ads_transfer_ch.gads_shopping_product_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_ch", "gads_shopping_product_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CH", "unique_id": "source.sql_repository_bz.google_ads_transfer_ch.gads_shopping_product_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_shopping_product_stats", "source_name": "google_ads_transfer_ch", "source_description": "", "loader": "", "identifier": "p_ShoppingProductStats_1845331214", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CH`.`p_ShoppingProductStats_1845331214`", "created_at": 1663750854.4081848}, "source.sql_repository_bz.google_ads_transfer_ch.gads_search_query_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_ch", "gads_search_query_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CH", "unique_id": "source.sql_repository_bz.google_ads_transfer_ch.gads_search_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_search_query_stats", "source_name": "google_ads_transfer_ch", "source_description": "", "loader": "", "identifier": "p_SearchQueryStats_1845331214", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CH`.`p_SearchQueryStats_1845331214`", "created_at": 1663750854.4083602}, "source.sql_repository_bz.google_ads_transfer_ch.gads_campaigns": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_ch", "gads_campaigns"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CH", "unique_id": "source.sql_repository_bz.google_ads_transfer_ch.gads_campaigns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaigns", "source_name": "google_ads_transfer_ch", "source_description": "", "loader": "", "identifier": "p_Campaign_1845331214", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CH`.`p_Campaign_1845331214`", "created_at": 1663750854.4085271}, "source.sql_repository_bz.google_ads_transfer_ch.gads_campaign_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_ch", "gads_campaign_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CH", "unique_id": "source.sql_repository_bz.google_ads_transfer_ch.gads_campaign_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaign_stats", "source_name": "google_ads_transfer_ch", "source_description": "", "loader": "", "identifier": "p_CampaignStats_1845331214", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CH`.`p_CampaignStats_1845331214`", "created_at": 1663750854.4087136}, "source.sql_repository_bz.google_ads_transfer_ch.gads_ads_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_ch", "gads_ads_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CH", "unique_id": "source.sql_repository_bz.google_ads_transfer_ch.gads_ads_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads_stats", "source_name": "google_ads_transfer_ch", "source_description": "", "loader": "", "identifier": "p_AdStats_1845331214", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CH`.`p_AdStats_1845331214`", "created_at": 1663750854.4088867}, "source.sql_repository_bz.google_ads_transfer_ch.gads_ads": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_ch", "gads_ads"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CH", "unique_id": "source.sql_repository_bz.google_ads_transfer_ch.gads_ads", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads", "source_name": "google_ads_transfer_ch", "source_description": "", "loader": "", "identifier": "p_Ad_1845331214", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CH`.`p_Ad_1845331214`", "created_at": 1663750854.409062}, "source.sql_repository_bz.google_ads_transfer_ch.gads_adgroups": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_ch", "gads_adgroups"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CH", "unique_id": "source.sql_repository_bz.google_ads_transfer_ch.gads_adgroups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_adgroups", "source_name": "google_ads_transfer_ch", "source_description": "", "loader": "", "identifier": "p_AdGroup_1845331214", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CH`.`p_AdGroup_1845331214`", "created_at": 1663750854.409238}, "source.sql_repository_bz.google_ads_transfer_ch.gads_criteria": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_ch", "gads_criteria"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CH", "unique_id": "source.sql_repository_bz.google_ads_transfer_ch.gads_criteria", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_criteria", "source_name": "google_ads_transfer_ch", "source_description": "", "loader": "", "identifier": "p_Criteria_1845331214", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CH`.`p_Criteria_1845331214`", "created_at": 1663750854.4094179}, "source.sql_repository_bz.google_ads_transfer_nl.gads_shopping_product_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_nl", "gads_shopping_product_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_NL", "unique_id": "source.sql_repository_bz.google_ads_transfer_nl.gads_shopping_product_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_shopping_product_stats", "source_name": "google_ads_transfer_nl", "source_description": "", "loader": "", "identifier": "p_ShoppingProductStats_1631966904", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_NL`.`p_ShoppingProductStats_1631966904`", "created_at": 1663750854.4095993}, "source.sql_repository_bz.google_ads_transfer_nl.gads_search_query_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_nl", "gads_search_query_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_NL", "unique_id": "source.sql_repository_bz.google_ads_transfer_nl.gads_search_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_search_query_stats", "source_name": "google_ads_transfer_nl", "source_description": "", "loader": "", "identifier": "p_SearchQueryStats_1631966904", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_NL`.`p_SearchQueryStats_1631966904`", "created_at": 1663750854.4097757}, "source.sql_repository_bz.google_ads_transfer_nl.gads_campaigns": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_nl", "gads_campaigns"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_NL", "unique_id": "source.sql_repository_bz.google_ads_transfer_nl.gads_campaigns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaigns", "source_name": "google_ads_transfer_nl", "source_description": "", "loader": "", "identifier": "p_Campaign_1631966904", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_NL`.`p_Campaign_1631966904`", "created_at": 1663750854.4099524}, "source.sql_repository_bz.google_ads_transfer_nl.gads_campaign_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_nl", "gads_campaign_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_NL", "unique_id": "source.sql_repository_bz.google_ads_transfer_nl.gads_campaign_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaign_stats", "source_name": "google_ads_transfer_nl", "source_description": "", "loader": "", "identifier": "p_CampaignStats_1631966904", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_NL`.`p_CampaignStats_1631966904`", "created_at": 1663750854.410129}, "source.sql_repository_bz.google_ads_transfer_nl.gads_ads_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_nl", "gads_ads_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_NL", "unique_id": "source.sql_repository_bz.google_ads_transfer_nl.gads_ads_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads_stats", "source_name": "google_ads_transfer_nl", "source_description": "", "loader": "", "identifier": "p_AdStats_1631966904", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_NL`.`p_AdStats_1631966904`", "created_at": 1663750854.410399}, "source.sql_repository_bz.google_ads_transfer_nl.gads_ads": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_nl", "gads_ads"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_NL", "unique_id": "source.sql_repository_bz.google_ads_transfer_nl.gads_ads", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads", "source_name": "google_ads_transfer_nl", "source_description": "", "loader": "", "identifier": "p_Ad_1631966904", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_NL`.`p_Ad_1631966904`", "created_at": 1663750854.4105866}, "source.sql_repository_bz.google_ads_transfer_nl.gads_adgroups": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_nl", "gads_adgroups"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_NL", "unique_id": "source.sql_repository_bz.google_ads_transfer_nl.gads_adgroups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_adgroups", "source_name": "google_ads_transfer_nl", "source_description": "", "loader": "", "identifier": "p_AdGroup_1631966904", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_NL`.`p_AdGroup_1631966904`", "created_at": 1663750854.4107778}, "source.sql_repository_bz.google_ads_transfer_nl.gads_criteria": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_nl", "gads_criteria"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_NL", "unique_id": "source.sql_repository_bz.google_ads_transfer_nl.gads_criteria", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_criteria", "source_name": "google_ads_transfer_nl", "source_description": "", "loader": "", "identifier": "p_Criteria_1631966904", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_NL`.`p_Criteria_1631966904`", "created_at": 1663750854.4109745}, "source.sql_repository_bz.google_ads_transfer_be.gads_shopping_product_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_be", "gads_shopping_product_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_BE", "unique_id": "source.sql_repository_bz.google_ads_transfer_be.gads_shopping_product_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_shopping_product_stats", "source_name": "google_ads_transfer_be", "source_description": "", "loader": "", "identifier": "p_ShoppingProductStats_1473786185", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_BE`.`p_ShoppingProductStats_1473786185`", "created_at": 1663750854.4111693}, "source.sql_repository_bz.google_ads_transfer_be.gads_search_query_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_be", "gads_search_query_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_BE", "unique_id": "source.sql_repository_bz.google_ads_transfer_be.gads_search_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_search_query_stats", "source_name": "google_ads_transfer_be", "source_description": "", "loader": "", "identifier": "p_SearchQueryStats_1473786185", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_BE`.`p_SearchQueryStats_1473786185`", "created_at": 1663750854.4113383}, "source.sql_repository_bz.google_ads_transfer_be.gads_campaigns": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_be", "gads_campaigns"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_BE", "unique_id": "source.sql_repository_bz.google_ads_transfer_be.gads_campaigns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaigns", "source_name": "google_ads_transfer_be", "source_description": "", "loader": "", "identifier": "p_Campaign_1473786185", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_BE`.`p_Campaign_1473786185`", "created_at": 1663750854.4114966}, "source.sql_repository_bz.google_ads_transfer_be.gads_campaign_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_be", "gads_campaign_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_BE", "unique_id": "source.sql_repository_bz.google_ads_transfer_be.gads_campaign_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaign_stats", "source_name": "google_ads_transfer_be", "source_description": "", "loader": "", "identifier": "p_CampaignStats_1473786185", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_BE`.`p_CampaignStats_1473786185`", "created_at": 1663750854.4116511}, "source.sql_repository_bz.google_ads_transfer_be.gads_ads_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_be", "gads_ads_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_BE", "unique_id": "source.sql_repository_bz.google_ads_transfer_be.gads_ads_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads_stats", "source_name": "google_ads_transfer_be", "source_description": "", "loader": "", "identifier": "p_AdStats_1473786185", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_BE`.`p_AdStats_1473786185`", "created_at": 1663750854.411817}, "source.sql_repository_bz.google_ads_transfer_be.gads_ads": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_be", "gads_ads"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_BE", "unique_id": "source.sql_repository_bz.google_ads_transfer_be.gads_ads", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads", "source_name": "google_ads_transfer_be", "source_description": "", "loader": "", "identifier": "p_Ad_1473786185", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_BE`.`p_Ad_1473786185`", "created_at": 1663750854.412008}, "source.sql_repository_bz.google_ads_transfer_be.gads_adgroups": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_be", "gads_adgroups"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_BE", "unique_id": "source.sql_repository_bz.google_ads_transfer_be.gads_adgroups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_adgroups", "source_name": "google_ads_transfer_be", "source_description": "", "loader": "", "identifier": "p_AdGroup_1473786185", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_BE`.`p_AdGroup_1473786185`", "created_at": 1663750854.4122112}, "source.sql_repository_bz.google_ads_transfer_be.gads_criteria": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_be", "gads_criteria"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_BE", "unique_id": "source.sql_repository_bz.google_ads_transfer_be.gads_criteria", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_criteria", "source_name": "google_ads_transfer_be", "source_description": "", "loader": "", "identifier": "p_Criteria_1473786185", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_BE`.`p_Criteria_1473786185`", "created_at": 1663750854.4124098}, "source.sql_repository_bz.google_ads_transfer_it.gads_shopping_product_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_it", "gads_shopping_product_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_IT", "unique_id": "source.sql_repository_bz.google_ads_transfer_it.gads_shopping_product_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_shopping_product_stats", "source_name": "google_ads_transfer_it", "source_description": "", "loader": "", "identifier": "p_ShoppingProductStats_9156948459", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_IT`.`p_ShoppingProductStats_9156948459`", "created_at": 1663750854.4126046}, "source.sql_repository_bz.google_ads_transfer_it.gads_search_query_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_it", "gads_search_query_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_IT", "unique_id": "source.sql_repository_bz.google_ads_transfer_it.gads_search_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_search_query_stats", "source_name": "google_ads_transfer_it", "source_description": "", "loader": "", "identifier": "p_SearchQueryStats_9156948459", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_IT`.`p_SearchQueryStats_9156948459`", "created_at": 1663750854.4128025}, "source.sql_repository_bz.google_ads_transfer_it.gads_campaigns": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_it", "gads_campaigns"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_IT", "unique_id": "source.sql_repository_bz.google_ads_transfer_it.gads_campaigns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaigns", "source_name": "google_ads_transfer_it", "source_description": "", "loader": "", "identifier": "p_Campaign_9156948459", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_IT`.`p_Campaign_9156948459`", "created_at": 1663750854.4130032}, "source.sql_repository_bz.google_ads_transfer_it.gads_campaign_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_it", "gads_campaign_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_IT", "unique_id": "source.sql_repository_bz.google_ads_transfer_it.gads_campaign_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaign_stats", "source_name": "google_ads_transfer_it", "source_description": "", "loader": "", "identifier": "p_CampaignStats_9156948459", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_IT`.`p_CampaignStats_9156948459`", "created_at": 1663750854.4132128}, "source.sql_repository_bz.google_ads_transfer_it.gads_ads_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_it", "gads_ads_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_IT", "unique_id": "source.sql_repository_bz.google_ads_transfer_it.gads_ads_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads_stats", "source_name": "google_ads_transfer_it", "source_description": "", "loader": "", "identifier": "p_AdStats_9156948459", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_IT`.`p_AdStats_9156948459`", "created_at": 1663750854.4134245}, "source.sql_repository_bz.google_ads_transfer_it.gads_ads": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_it", "gads_ads"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_IT", "unique_id": "source.sql_repository_bz.google_ads_transfer_it.gads_ads", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads", "source_name": "google_ads_transfer_it", "source_description": "", "loader": "", "identifier": "p_Ad_9156948459", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_IT`.`p_Ad_9156948459`", "created_at": 1663750854.4136312}, "source.sql_repository_bz.google_ads_transfer_it.gads_adgroups": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_it", "gads_adgroups"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_IT", "unique_id": "source.sql_repository_bz.google_ads_transfer_it.gads_adgroups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_adgroups", "source_name": "google_ads_transfer_it", "source_description": "", "loader": "", "identifier": "p_AdGroup_9156948459", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_IT`.`p_AdGroup_9156948459`", "created_at": 1663750854.41383}, "source.sql_repository_bz.google_ads_transfer_it.gads_criteria": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_it", "gads_criteria"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_IT", "unique_id": "source.sql_repository_bz.google_ads_transfer_it.gads_criteria", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_criteria", "source_name": "google_ads_transfer_it", "source_description": "", "loader": "", "identifier": "p_Criteria_9156948459", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_IT`.`p_Criteria_9156948459`", "created_at": 1663750854.4140306}, "source.sql_repository_bz.google_ads_transfer_uk.gads_shopping_product_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_uk", "gads_shopping_product_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_UK", "unique_id": "source.sql_repository_bz.google_ads_transfer_uk.gads_shopping_product_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_shopping_product_stats", "source_name": "google_ads_transfer_uk", "source_description": "", "loader": "", "identifier": "p_ShoppingProductStats_7806554469", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_UK`.`p_ShoppingProductStats_7806554469`", "created_at": 1663750854.4142985}, "source.sql_repository_bz.google_ads_transfer_uk.gads_search_query_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_uk", "gads_search_query_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_UK", "unique_id": "source.sql_repository_bz.google_ads_transfer_uk.gads_search_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_search_query_stats", "source_name": "google_ads_transfer_uk", "source_description": "", "loader": "", "identifier": "p_SearchQueryStats_7806554469", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_UK`.`p_SearchQueryStats_7806554469`", "created_at": 1663750854.4144957}, "source.sql_repository_bz.google_ads_transfer_uk.gads_campaigns": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_uk", "gads_campaigns"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_UK", "unique_id": "source.sql_repository_bz.google_ads_transfer_uk.gads_campaigns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaigns", "source_name": "google_ads_transfer_uk", "source_description": "", "loader": "", "identifier": "p_Campaign_7806554469", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_UK`.`p_Campaign_7806554469`", "created_at": 1663750854.4146862}, "source.sql_repository_bz.google_ads_transfer_uk.gads_campaign_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_uk", "gads_campaign_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_UK", "unique_id": "source.sql_repository_bz.google_ads_transfer_uk.gads_campaign_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaign_stats", "source_name": "google_ads_transfer_uk", "source_description": "", "loader": "", "identifier": "p_CampaignStats_7806554469", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_UK`.`p_CampaignStats_7806554469`", "created_at": 1663750854.4148784}, "source.sql_repository_bz.google_ads_transfer_uk.gads_ads_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_uk", "gads_ads_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_UK", "unique_id": "source.sql_repository_bz.google_ads_transfer_uk.gads_ads_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads_stats", "source_name": "google_ads_transfer_uk", "source_description": "", "loader": "", "identifier": "p_AdStats_7806554469", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_UK`.`p_AdStats_7806554469`", "created_at": 1663750854.4150724}, "source.sql_repository_bz.google_ads_transfer_uk.gads_ads": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_uk", "gads_ads"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_UK", "unique_id": "source.sql_repository_bz.google_ads_transfer_uk.gads_ads", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads", "source_name": "google_ads_transfer_uk", "source_description": "", "loader": "", "identifier": "p_Ad_7806554469", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_UK`.`p_Ad_7806554469`", "created_at": 1663750854.4152913}, "source.sql_repository_bz.google_ads_transfer_uk.gads_adgroups": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_uk", "gads_adgroups"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_UK", "unique_id": "source.sql_repository_bz.google_ads_transfer_uk.gads_adgroups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_adgroups", "source_name": "google_ads_transfer_uk", "source_description": "", "loader": "", "identifier": "p_AdGroup_7806554469", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_UK`.`p_AdGroup_7806554469`", "created_at": 1663750854.415517}, "source.sql_repository_bz.google_ads_transfer_uk.gads_criteria": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_uk", "gads_criteria"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_UK", "unique_id": "source.sql_repository_bz.google_ads_transfer_uk.gads_criteria", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_criteria", "source_name": "google_ads_transfer_uk", "source_description": "", "loader": "", "identifier": "p_Criteria_7806554469", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_UK`.`p_Criteria_7806554469`", "created_at": 1663750854.4157758}, "source.sql_repository_bz.google_ads_transfer_dk.gads_shopping_product_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_dk", "gads_shopping_product_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DK", "unique_id": "source.sql_repository_bz.google_ads_transfer_dk.gads_shopping_product_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_shopping_product_stats", "source_name": "google_ads_transfer_dk", "source_description": "", "loader": "", "identifier": "p_ShoppingProductStats_4459699103", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DK`.`p_ShoppingProductStats_4459699103`", "created_at": 1663750854.4159906}, "source.sql_repository_bz.google_ads_transfer_dk.gads_search_query_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_dk", "gads_search_query_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DK", "unique_id": "source.sql_repository_bz.google_ads_transfer_dk.gads_search_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_search_query_stats", "source_name": "google_ads_transfer_dk", "source_description": "", "loader": "", "identifier": "p_SearchQueryStats_4459699103", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DK`.`p_SearchQueryStats_4459699103`", "created_at": 1663750854.4161913}, "source.sql_repository_bz.google_ads_transfer_dk.gads_campaigns": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_dk", "gads_campaigns"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DK", "unique_id": "source.sql_repository_bz.google_ads_transfer_dk.gads_campaigns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaigns", "source_name": "google_ads_transfer_dk", "source_description": "", "loader": "", "identifier": "p_Campaign_4459699103", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DK`.`p_Campaign_4459699103`", "created_at": 1663750854.4163885}, "source.sql_repository_bz.google_ads_transfer_dk.gads_campaign_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_dk", "gads_campaign_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DK", "unique_id": "source.sql_repository_bz.google_ads_transfer_dk.gads_campaign_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaign_stats", "source_name": "google_ads_transfer_dk", "source_description": "", "loader": "", "identifier": "p_CampaignStats_4459699103", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DK`.`p_CampaignStats_4459699103`", "created_at": 1663750854.416592}, "source.sql_repository_bz.google_ads_transfer_dk.gads_ads_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_dk", "gads_ads_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DK", "unique_id": "source.sql_repository_bz.google_ads_transfer_dk.gads_ads_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads_stats", "source_name": "google_ads_transfer_dk", "source_description": "", "loader": "", "identifier": "p_AdStats_4459699103", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DK`.`p_AdStats_4459699103`", "created_at": 1663750854.416796}, "source.sql_repository_bz.google_ads_transfer_dk.gads_ads": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_dk", "gads_ads"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DK", "unique_id": "source.sql_repository_bz.google_ads_transfer_dk.gads_ads", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads", "source_name": "google_ads_transfer_dk", "source_description": "", "loader": "", "identifier": "p_Ad_4459699103", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DK`.`p_Ad_4459699103`", "created_at": 1663750854.4169936}, "source.sql_repository_bz.google_ads_transfer_dk.gads_adgroups": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_dk", "gads_adgroups"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DK", "unique_id": "source.sql_repository_bz.google_ads_transfer_dk.gads_adgroups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_adgroups", "source_name": "google_ads_transfer_dk", "source_description": "", "loader": "", "identifier": "p_AdGroup_4459699103", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DK`.`p_AdGroup_4459699103`", "created_at": 1663750854.4171777}, "source.sql_repository_bz.google_ads_transfer_dk.gads_criteria": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_dk", "gads_criteria"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_DK", "unique_id": "source.sql_repository_bz.google_ads_transfer_dk.gads_criteria", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_criteria", "source_name": "google_ads_transfer_dk", "source_description": "", "loader": "", "identifier": "p_Criteria_4459699103", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_DK`.`p_Criteria_4459699103`", "created_at": 1663750854.4173653}, "source.sql_repository_bz.google_ads_transfer_se.gads_shopping_product_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_se", "gads_shopping_product_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_SE", "unique_id": "source.sql_repository_bz.google_ads_transfer_se.gads_shopping_product_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_shopping_product_stats", "source_name": "google_ads_transfer_se", "source_description": "", "loader": "", "identifier": "p_ShoppingProductStats_4013522683", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_SE`.`p_ShoppingProductStats_4013522683`", "created_at": 1663750854.4175534}, "source.sql_repository_bz.google_ads_transfer_se.gads_search_query_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_se", "gads_search_query_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_SE", "unique_id": "source.sql_repository_bz.google_ads_transfer_se.gads_search_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_search_query_stats", "source_name": "google_ads_transfer_se", "source_description": "", "loader": "", "identifier": "p_SearchQueryStats_4013522683", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_SE`.`p_SearchQueryStats_4013522683`", "created_at": 1663750854.4177632}, "source.sql_repository_bz.google_ads_transfer_se.gads_campaigns": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_se", "gads_campaigns"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_SE", "unique_id": "source.sql_repository_bz.google_ads_transfer_se.gads_campaigns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaigns", "source_name": "google_ads_transfer_se", "source_description": "", "loader": "", "identifier": "p_Campaign_4013522683", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_SE`.`p_Campaign_4013522683`", "created_at": 1663750854.4179566}, "source.sql_repository_bz.google_ads_transfer_se.gads_campaign_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_se", "gads_campaign_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_SE", "unique_id": "source.sql_repository_bz.google_ads_transfer_se.gads_campaign_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaign_stats", "source_name": "google_ads_transfer_se", "source_description": "", "loader": "", "identifier": "p_CampaignStats_4013522683", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_SE`.`p_CampaignStats_4013522683`", "created_at": 1663750854.4181333}, "source.sql_repository_bz.google_ads_transfer_se.gads_ads_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_se", "gads_ads_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_SE", "unique_id": "source.sql_repository_bz.google_ads_transfer_se.gads_ads_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads_stats", "source_name": "google_ads_transfer_se", "source_description": "", "loader": "", "identifier": "p_AdStats_4013522683", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_SE`.`p_AdStats_4013522683`", "created_at": 1663750854.4183793}, "source.sql_repository_bz.google_ads_transfer_se.gads_ads": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_se", "gads_ads"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_SE", "unique_id": "source.sql_repository_bz.google_ads_transfer_se.gads_ads", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads", "source_name": "google_ads_transfer_se", "source_description": "", "loader": "", "identifier": "p_Ad_4013522683", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_SE`.`p_Ad_4013522683`", "created_at": 1663750854.4185631}, "source.sql_repository_bz.google_ads_transfer_se.gads_adgroups": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_se", "gads_adgroups"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_SE", "unique_id": "source.sql_repository_bz.google_ads_transfer_se.gads_adgroups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_adgroups", "source_name": "google_ads_transfer_se", "source_description": "", "loader": "", "identifier": "p_AdGroup_4013522683", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_SE`.`p_AdGroup_4013522683`", "created_at": 1663750854.4187644}, "source.sql_repository_bz.google_ads_transfer_se.gads_criteria": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_se", "gads_criteria"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_SE", "unique_id": "source.sql_repository_bz.google_ads_transfer_se.gads_criteria", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_criteria", "source_name": "google_ads_transfer_se", "source_description": "", "loader": "", "identifier": "p_Criteria_4013522683", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_SE`.`p_Criteria_4013522683`", "created_at": 1663750854.4189563}, "source.sql_repository_bz.google_ads_transfer_fr.gads_shopping_product_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fr", "gads_shopping_product_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FR", "unique_id": "source.sql_repository_bz.google_ads_transfer_fr.gads_shopping_product_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_shopping_product_stats", "source_name": "google_ads_transfer_fr", "source_description": "", "loader": "", "identifier": "p_ShoppingProductStats_6704103474", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FR`.`p_ShoppingProductStats_6704103474`", "created_at": 1663750854.419153}, "source.sql_repository_bz.google_ads_transfer_fr.gads_search_query_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fr", "gads_search_query_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FR", "unique_id": "source.sql_repository_bz.google_ads_transfer_fr.gads_search_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_search_query_stats", "source_name": "google_ads_transfer_fr", "source_description": "", "loader": "", "identifier": "p_SearchQueryStats_6704103474", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FR`.`p_SearchQueryStats_6704103474`", "created_at": 1663750854.4193416}, "source.sql_repository_bz.google_ads_transfer_fr.gads_campaigns": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fr", "gads_campaigns"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FR", "unique_id": "source.sql_repository_bz.google_ads_transfer_fr.gads_campaigns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaigns", "source_name": "google_ads_transfer_fr", "source_description": "", "loader": "", "identifier": "p_Campaign_6704103474", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FR`.`p_Campaign_6704103474`", "created_at": 1663750854.4195287}, "source.sql_repository_bz.google_ads_transfer_fr.gads_campaign_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fr", "gads_campaign_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FR", "unique_id": "source.sql_repository_bz.google_ads_transfer_fr.gads_campaign_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaign_stats", "source_name": "google_ads_transfer_fr", "source_description": "", "loader": "", "identifier": "p_CampaignStats_6704103474", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FR`.`p_CampaignStats_6704103474`", "created_at": 1663750854.4197397}, "source.sql_repository_bz.google_ads_transfer_fr.gads_ads_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fr", "gads_ads_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FR", "unique_id": "source.sql_repository_bz.google_ads_transfer_fr.gads_ads_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads_stats", "source_name": "google_ads_transfer_fr", "source_description": "", "loader": "", "identifier": "p_AdStats_6704103474", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FR`.`p_AdStats_6704103474`", "created_at": 1663750854.4199693}, "source.sql_repository_bz.google_ads_transfer_fr.gads_ads": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fr", "gads_ads"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FR", "unique_id": "source.sql_repository_bz.google_ads_transfer_fr.gads_ads", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads", "source_name": "google_ads_transfer_fr", "source_description": "", "loader": "", "identifier": "p_Ad_6704103474", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FR`.`p_Ad_6704103474`", "created_at": 1663750854.4201822}, "source.sql_repository_bz.google_ads_transfer_fr.gads_adgroups": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fr", "gads_adgroups"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FR", "unique_id": "source.sql_repository_bz.google_ads_transfer_fr.gads_adgroups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_adgroups", "source_name": "google_ads_transfer_fr", "source_description": "", "loader": "", "identifier": "p_AdGroup_6704103474", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FR`.`p_AdGroup_6704103474`", "created_at": 1663750854.4204023}, "source.sql_repository_bz.google_ads_transfer_fr.gads_criteria": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fr", "gads_criteria"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FR", "unique_id": "source.sql_repository_bz.google_ads_transfer_fr.gads_criteria", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_criteria", "source_name": "google_ads_transfer_fr", "source_description": "", "loader": "", "identifier": "p_Criteria_6704103474", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FR`.`p_Criteria_6704103474`", "created_at": 1663750854.420605}, "source.sql_repository_bz.google_ads_transfer_fi.gads_shopping_product_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fi", "gads_shopping_product_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FI", "unique_id": "source.sql_repository_bz.google_ads_transfer_fi.gads_shopping_product_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_shopping_product_stats", "source_name": "google_ads_transfer_fi", "source_description": "", "loader": "", "identifier": "p_ShoppingProductStats_9125109148", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FI`.`p_ShoppingProductStats_9125109148`", "created_at": 1663750854.420806}, "source.sql_repository_bz.google_ads_transfer_fi.gads_search_query_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fi", "gads_search_query_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FI", "unique_id": "source.sql_repository_bz.google_ads_transfer_fi.gads_search_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_search_query_stats", "source_name": "google_ads_transfer_fi", "source_description": "", "loader": "", "identifier": "p_SearchQueryStats_9125109148", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FI`.`p_SearchQueryStats_9125109148`", "created_at": 1663750854.421021}, "source.sql_repository_bz.google_ads_transfer_fi.gads_campaigns": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fi", "gads_campaigns"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FI", "unique_id": "source.sql_repository_bz.google_ads_transfer_fi.gads_campaigns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaigns", "source_name": "google_ads_transfer_fi", "source_description": "", "loader": "", "identifier": "p_Campaign_9125109148", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FI`.`p_Campaign_9125109148`", "created_at": 1663750854.421222}, "source.sql_repository_bz.google_ads_transfer_fi.gads_campaign_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fi", "gads_campaign_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FI", "unique_id": "source.sql_repository_bz.google_ads_transfer_fi.gads_campaign_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaign_stats", "source_name": "google_ads_transfer_fi", "source_description": "", "loader": "", "identifier": "p_CampaignStats_9125109148", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FI`.`p_CampaignStats_9125109148`", "created_at": 1663750854.421415}, "source.sql_repository_bz.google_ads_transfer_fi.gads_ads_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fi", "gads_ads_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FI", "unique_id": "source.sql_repository_bz.google_ads_transfer_fi.gads_ads_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads_stats", "source_name": "google_ads_transfer_fi", "source_description": "", "loader": "", "identifier": "p_AdStats_9125109148", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FI`.`p_AdStats_9125109148`", "created_at": 1663750854.421629}, "source.sql_repository_bz.google_ads_transfer_fi.gads_ads": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fi", "gads_ads"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FI", "unique_id": "source.sql_repository_bz.google_ads_transfer_fi.gads_ads", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads", "source_name": "google_ads_transfer_fi", "source_description": "", "loader": "", "identifier": "p_Ad_9125109148", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FI`.`p_Ad_9125109148`", "created_at": 1663750854.4218326}, "source.sql_repository_bz.google_ads_transfer_fi.gads_adgroups": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fi", "gads_adgroups"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FI", "unique_id": "source.sql_repository_bz.google_ads_transfer_fi.gads_adgroups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_adgroups", "source_name": "google_ads_transfer_fi", "source_description": "", "loader": "", "identifier": "p_AdGroup_9125109148", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FI`.`p_AdGroup_9125109148`", "created_at": 1663750854.4220436}, "source.sql_repository_bz.google_ads_transfer_fi.gads_criteria": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_fi", "gads_criteria"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_FI", "unique_id": "source.sql_repository_bz.google_ads_transfer_fi.gads_criteria", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_criteria", "source_name": "google_ads_transfer_fi", "source_description": "", "loader": "", "identifier": "p_Criteria_9125109148", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_FI`.`p_Criteria_9125109148`", "created_at": 1663750854.426315}, "source.sql_repository_bz.google_ads_transfer_cz.gads_shopping_product_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_cz", "gads_shopping_product_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CZ", "unique_id": "source.sql_repository_bz.google_ads_transfer_cz.gads_shopping_product_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_shopping_product_stats", "source_name": "google_ads_transfer_cz", "source_description": "", "loader": "", "identifier": "p_ShoppingProductStats_4105561535", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_ShoppingProductStats_4105561535`", "created_at": 1663750854.4265633}, "source.sql_repository_bz.google_ads_transfer_cz.gads_search_query_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_cz", "gads_search_query_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CZ", "unique_id": "source.sql_repository_bz.google_ads_transfer_cz.gads_search_query_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_search_query_stats", "source_name": "google_ads_transfer_cz", "source_description": "", "loader": "", "identifier": "p_SearchQueryStats_4105561535", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_SearchQueryStats_4105561535`", "created_at": 1663750854.4267738}, "source.sql_repository_bz.google_ads_transfer_cz.gads_campaigns": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_cz", "gads_campaigns"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CZ", "unique_id": "source.sql_repository_bz.google_ads_transfer_cz.gads_campaigns", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaigns", "source_name": "google_ads_transfer_cz", "source_description": "", "loader": "", "identifier": "p_Campaign_4105561535", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_Campaign_4105561535`", "created_at": 1663750854.4269965}, "source.sql_repository_bz.google_ads_transfer_cz.gads_campaign_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_cz", "gads_campaign_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CZ", "unique_id": "source.sql_repository_bz.google_ads_transfer_cz.gads_campaign_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_campaign_stats", "source_name": "google_ads_transfer_cz", "source_description": "", "loader": "", "identifier": "p_CampaignStats_4105561535", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_CampaignStats_4105561535`", "created_at": 1663750854.4272206}, "source.sql_repository_bz.google_ads_transfer_cz.gads_ads_stats": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_cz", "gads_ads_stats"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CZ", "unique_id": "source.sql_repository_bz.google_ads_transfer_cz.gads_ads_stats", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads_stats", "source_name": "google_ads_transfer_cz", "source_description": "", "loader": "", "identifier": "p_AdStats_4105561535", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_AdStats_4105561535`", "created_at": 1663750854.4274406}, "source.sql_repository_bz.google_ads_transfer_cz.gads_ads": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_cz", "gads_ads"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CZ", "unique_id": "source.sql_repository_bz.google_ads_transfer_cz.gads_ads", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_ads", "source_name": "google_ads_transfer_cz", "source_description": "", "loader": "", "identifier": "p_Ad_4105561535", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_Ad_4105561535`", "created_at": 1663750854.4276521}, "source.sql_repository_bz.google_ads_transfer_cz.gads_adgroups": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_cz", "gads_adgroups"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CZ", "unique_id": "source.sql_repository_bz.google_ads_transfer_cz.gads_adgroups", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_adgroups", "source_name": "google_ads_transfer_cz", "source_description": "", "loader": "", "identifier": "p_AdGroup_4105561535", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_AdGroup_4105561535`", "created_at": 1663750854.427853}, "source.sql_repository_bz.google_ads_transfer_cz.gads_criteria": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "google_ads_transfer_cz", "gads_criteria"], "database": "adsdataprediction", "schema": "GoogleAdsTransfer_CZ", "unique_id": "source.sql_repository_bz.google_ads_transfer_cz.gads_criteria", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "gads_criteria", "source_name": "google_ads_transfer_cz", "source_description": "", "loader": "", "identifier": "p_Criteria_4105561535", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`GoogleAdsTransfer_CZ`.`p_Criteria_4105561535`", "created_at": 1663750854.4280553}, "source.sql_repository_bz.crawled_ad_urls.crawled_ad_urls": {"fqn": ["sql_repository_bz", "01_staging", "google_ads", "crawled_ad_urls", "crawled_ad_urls"], "database": "adsdataprediction", "schema": "ads_analytics", "unique_id": "source.sql_repository_bz.crawled_ad_urls.crawled_ad_urls", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_ads/_sources_gads.yml", "original_file_path": "models/01_staging/google_ads/_sources_gads.yml", "name": "crawled_ad_urls", "source_name": "crawled_ad_urls", "source_description": "", "loader": "", "identifier": "ads_urls_crawled", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`ads_analytics`.`ads_urls_crawled`", "created_at": 1663750854.4283373}, "source.sql_repository_bz.dbt_test_results.test_results_central": {"fqn": ["sql_repository_bz", "01_staging", "dbt_metadata", "dbt_test_results", "test_results_central"], "database": "bergzeit", "schema": "dbt_test_results", "unique_id": "source.sql_repository_bz.dbt_test_results.test_results_central", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/dbt_metadata/_sources_dbt_metadata.yml", "original_file_path": "models/01_staging/dbt_metadata/_sources_dbt_metadata.yml", "name": "test_results_central", "source_name": "dbt_test_results", "source_description": "this dataset stores the results and metadata of all dbt tests, as defined in store_test_results macro", "loader": "", "identifier": "test_results_central", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "this table shows the results of the most recent test run", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`dbt_test_results`.`test_results_central`", "created_at": 1663750854.428568}, "source.sql_repository_bz.dbt_test_results.test_results_history": {"fqn": ["sql_repository_bz", "01_staging", "dbt_metadata", "dbt_test_results", "test_results_history"], "database": "bergzeit", "schema": "dbt_test_results", "unique_id": "source.sql_repository_bz.dbt_test_results.test_results_history", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/dbt_metadata/_sources_dbt_metadata.yml", "original_file_path": "models/01_staging/dbt_metadata/_sources_dbt_metadata.yml", "name": "test_results_history", "source_name": "dbt_test_results", "source_description": "this dataset stores the results and metadata of all dbt tests, as defined in store_test_results macro", "loader": "", "identifier": "test_results_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "this table shows the history of all test runs, each new run will be appended", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`dbt_test_results`.`test_results_history`", "created_at": 1663750854.4448025}, "source.sql_repository_bz.google_search_console.gsc_data": {"fqn": ["sql_repository_bz", "01_staging", "google_search_console", "google_search_console", "gsc_data"], "database": "bergzeit", "schema": "google_search_console", "unique_id": "source.sql_repository_bz.google_search_console.gsc_data", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_search_console/_sources_gsc.yml", "original_file_path": "models/01_staging/google_search_console/_sources_gsc.yml", "name": "gsc_data", "source_name": "google_search_console", "source_description": "### Description\r\n\r\nA daily cloud function that fetches all Google search console data for all properties, for the two search appearances web and image.\r\n\r\n### When does the job run and how?\r\n\r\n* The two [daily cloud scheduler jobs in the \"bergzeit\" project]https://console.cloud.google.com/cloudscheduler?project=bergzeit) triggers a cloud function to store all daily GSC Data to Cloud Storage.\r\n* The [gsc cloud function](https://console.cloud.google.com/functions/details/europe-west3/runGscDataSave?project=bergzeit&tab=source) takes one argument \"search_type\" to either fetch web or image data. \r\n* The scheduler jobs run daily from 5pm to 10m, every 30min, to reliably fetch all GSC for three days prior. There is no guarantee that the data will be available at 5pm, thus multiple runs are triggered to be safe.\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* The  dataframes are [directly written to Cloud Storage to the \"gsc_data_bz\" bucket](https://console.cloud.google.com/storage/browser/gsc_data_bz;tab=objects?forceOnBucketsSortingFiltering=false&project=bergzeit&prefix=&forceOnObjectsSortingFiltering=false) via the to_gbq method.\r\n* A [data transfer job](https://console.cloud.google.com/bigquery/transfers?project=bergzeit) fetches the two cloud storage csv files and loads them into a date-partitioned BQ table. \r\n\r\n### What type of table is it?\r\n\r\n[Native, date-partitioned table named \"query_site_report_by_page\"](https://console.cloud.google.com/bigquery?project=bergzeit&ws=!1m19!1m4!4m3!1sbergzeit!2sdbt_sea_analytics!3sgads_ads_for_url_check!1m3!8m2!1s266126070320!2s5fb42a821d61412cb497f41a99291ba7!1m4!4m3!1sbergzeit!2sdbt_analytics_staging!3sstg_awin_orders_all!1m4!4m3!1sbergzeit!2sgoogle_search_console!3squery_site_report_by_page&d=dbt_analytics_staging&p=bergzeit&t=stg_awin_orders_all&page=table).\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. A regular check is performed in the Bergzeit cloud function overview page and on the [Analytics Admin dashboard](https://datastudio.google.com/s/iUprJbY3B2Y), code execution failures are alerted via email and GCP App.\r\n\r\n### Who is the business stakeholder? \r\n\r\nDanny Zidaric\r\n\r\n### Which ticket does the feature refer to?\r\n\r\nThe latest update to the import pipeline was performed in [WEBA-719](https://bergzeit.atlassian.net/browse/WEBA-719)\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\n* Cloud function failure alerts in GCP\r\n* dbt datepart test, expecting the last three days to be missing, but complete coverage prior to that", "loader": "", "identifier": "query_site_report_by_page", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "lowest granularity including site, query, url, device and search appearance", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`google_search_console`.`query_site_report_by_page`", "created_at": 1663750854.4450533}, "source.sql_repository_bz.product_inventory.cp_product_attributes_daily": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "product_inventory", "cp_product_attributes_daily"], "database": "bergzeit", "schema": "product_inventory", "unique_id": "source.sql_repository_bz.product_inventory.cp_product_attributes_daily", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "cp_product_attributes_daily", "source_name": "product_inventory", "source_description": "these tables are daily product attributes loaded from channelpilot feeds", "loader": "", "identifier": "product_attributes_daily", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(date as timestamp)", "freshness": null, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`product_inventory`.`product_attributes_daily`", "created_at": 1663750854.4452531}, "source.sql_repository_bz.merchant_center_transfer_de.mc_products_de": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_products_de"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_products_de", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_products_de", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "Products_4410479", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_4410479`", "created_at": 1663750854.4454675}, "source.sql_repository_bz.merchant_center_transfer_de.mc_products_uk": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_products_uk"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_products_uk", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_products_uk", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "Products_100198987", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_100198987`", "created_at": 1663750854.4456828}, "source.sql_repository_bz.merchant_center_transfer_de.mc_products_ch": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_products_ch"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_products_ch", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_products_ch", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "Products_100453093", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_100453093`", "created_at": 1663750854.445891}, "source.sql_repository_bz.merchant_center_transfer_de.mc_products_at": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_products_at"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_products_at", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_products_at", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "Products_10150175", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_10150175`", "created_at": 1663750854.44609}, "source.sql_repository_bz.merchant_center_transfer_de.mc_products_nl": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_products_nl"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_products_nl", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_products_nl", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "Products_103272233", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_103272233`", "created_at": 1663750854.4463322}, "source.sql_repository_bz.merchant_center_transfer_de.mc_products_it": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_products_it"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_products_it", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_products_it", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "Products_135253248", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_135253248`", "created_at": 1663750854.4465432}, "source.sql_repository_bz.merchant_center_transfer_de.mc_product_stock_de": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_product_stock_de"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_product_stock_de", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_product_stock_de", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "product_stock_DE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`product_stock_DE`", "created_at": 1663750854.4467335}, "source.sql_repository_bz.merchant_center_transfer_de.mc_product_price_benchmark_de": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_product_price_benchmark_de"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_product_price_benchmark_de", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_product_price_benchmark_de", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "Products_PriceBenchmarks_4410479", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`Products_PriceBenchmarks_4410479`", "created_at": 1663750854.4469266}, "source.sql_repository_bz.merchant_center_transfer_de.mc_return_rates": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_return_rates"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_return_rates", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_return_rates", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "return_rate_all", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`return_rate_all`", "created_at": 1663750854.447118}, "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_product_margins"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_product_margins", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "margins_ALL", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`margins_ALL`", "created_at": 1663750854.4473133}, "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_de": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_product_margins_de"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_de", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_product_margins_de", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "margins_DE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`margins_DE`", "created_at": 1663750854.4475088}, "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_ch": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_product_margins_ch"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_ch", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_product_margins_ch", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "margins_CH", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`margins_CH`", "created_at": 1663750854.4477034}, "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_int": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_product_margins_int"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_int", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_product_margins_int", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "margins_INT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`margins_INT`", "created_at": 1663750854.4479053}, "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_it": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_product_margins_it"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_it", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_product_margins_it", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "margins_IT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`margins_IT`", "created_at": 1663750854.4481235}, "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_uk": {"fqn": ["sql_repository_bz", "01_staging", "google_merchant_center", "merchant_center_transfer_de", "mc_product_margins_uk"], "database": "adsdataprediction", "schema": "MerchantCenterTransfer_DE", "unique_id": "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_uk", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "original_file_path": "models/01_staging/google_merchant_center/_sources_gmc.yml", "name": "mc_product_margins_uk", "source_name": "merchant_center_transfer_de", "source_description": "daily transfer of merchant center data provided by Google\n", "loader": "", "identifier": "margins_UK", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`MerchantCenterTransfer_DE`.`margins_UK`", "created_at": 1663750854.4483323}, "source.sql_repository_bz.seo_analytics.finished_seo_jira_tickets": {"fqn": ["sql_repository_bz", "01_staging", "jira", "seo_analytics", "finished_seo_jira_tickets"], "database": "bergzeit", "schema": "seo_analytics", "unique_id": "source.sql_repository_bz.seo_analytics.finished_seo_jira_tickets", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/jira/_sources_jira.yml", "original_file_path": "models/01_staging/jira/_sources_jira.yml", "name": "finished_seo_jira_tickets", "source_name": "seo_analytics", "source_description": "", "loader": "", "identifier": "finished_seo_jira_tickets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "All finished Jira Tickets with SEO context in the IFRONT Project", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`seo_analytics`.`finished_seo_jira_tickets`", "created_at": 1663750854.4485354}, "source.sql_repository_bz.analytics_datamart.minubo_ga_export": {"fqn": ["sql_repository_bz", "01_staging", "minubo", "analytics_datamart", "minubo_ga_export"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.analytics_datamart.minubo_ga_export", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/minubo/_sources_minubo.yml", "original_file_path": "models/01_staging/minubo/_sources_minubo.yml", "name": "minubo_ga_export", "source_name": "analytics_datamart", "source_description": "daily export of ga data from minubo", "loader": "", "identifier": "minubo_ga_export", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"owner": "@Steffi H"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`minubo_ga_export`", "created_at": 1663750854.4487402}, "source.sql_repository_bz.customer_analytics.antavo_optins": {"fqn": ["sql_repository_bz", "01_staging", "antavo", "customer_analytics", "antavo_optins"], "database": "bergzeit", "schema": "customer_analytics", "unique_id": "source.sql_repository_bz.customer_analytics.antavo_optins", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/antavo/_sources_antavo.yml", "original_file_path": "models/01_staging/antavo/_sources_antavo.yml", "name": "antavo_optins", "source_name": "customer_analytics", "source_description": "This is a one-time manual csv export of antavo optins from antavo (15.09.2022)", "loader": "", "identifier": "antavo_optins", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`customer_analytics`.`antavo_optins`", "created_at": 1663750854.4489458}, "source.sql_repository_bz.consentless_tracking.ishop_consentless_prod": {"fqn": ["sql_repository_bz", "01_staging", "consentless", "consentless_tracking", "ishop_consentless_prod"], "database": "bergzeit", "schema": "consentless_tracking", "unique_id": "source.sql_repository_bz.consentless_tracking.ishop_consentless_prod", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/consentless/_sources_consentless.yml", "original_file_path": "models/01_staging/consentless/_sources_consentless.yml", "name": "ishop_consentless_prod", "source_name": "consentless_tracking", "source_description": "A custom backend tracking for first pageview, consent event and transaction to get full coverage of events. Docs TBD", "loader": "", "identifier": "hits_prod", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "### Description\r\n\r\n...\r\n\r\n### When does the job run and how?\r\n\r\n* ...\r\n\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* ...\r\n* ...\r\n\r\n### What type of table is it?\r\n\r\n...\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. ...\r\n\r\n### Who is the business stakeholder? \r\n\r\n...\r\n\r\n### Which ticket does the feature refer to?\r\n\r\nWEBA-...\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\n...", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`consentless_tracking`.`hits_prod`", "created_at": 1663750854.4491482}, "source.sql_repository_bz.consentless_tracking.ishop_consentless_staging": {"fqn": ["sql_repository_bz", "01_staging", "consentless", "consentless_tracking", "ishop_consentless_staging"], "database": "bergzeit", "schema": "consentless_tracking", "unique_id": "source.sql_repository_bz.consentless_tracking.ishop_consentless_staging", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/consentless/_sources_consentless.yml", "original_file_path": "models/01_staging/consentless/_sources_consentless.yml", "name": "ishop_consentless_staging", "source_name": "consentless_tracking", "source_description": "A custom backend tracking for first pageview, consent event and transaction to get full coverage of events. Docs TBD", "loader": "", "identifier": "hits_staging", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`consentless_tracking`.`hits_staging`", "created_at": 1663750854.4493437}, "source.sql_repository_bz.bz_information_schema.TABLE_STORAGE": {"fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "bz_information_schema", "TABLE_STORAGE"], "database": "bergzeit", "schema": "region-eu.INFORMATION_SCHEMA", "unique_id": "source.sql_repository_bz.bz_information_schema.TABLE_STORAGE", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_cloud_platform_metadata/_sources_gcp_meta.yml", "original_file_path": "models/01_staging/google_cloud_platform_metadata/_sources_gcp_meta.yml", "name": "TABLE_STORAGE", "source_name": "bz_information_schema", "source_description": "log of all BigQuery executions", "loader": "", "identifier": "TABLE_STORAGE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`region-eu.INFORMATION_SCHEMA`.`TABLE_STORAGE`", "created_at": 1663750854.4495378}, "source.sql_repository_bz.bz_information_schema.bigquery_jobs": {"fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "bz_information_schema", "bigquery_jobs"], "database": "bergzeit", "schema": "region-eu.INFORMATION_SCHEMA", "unique_id": "source.sql_repository_bz.bz_information_schema.bigquery_jobs", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_cloud_platform_metadata/_sources_gcp_meta.yml", "original_file_path": "models/01_staging/google_cloud_platform_metadata/_sources_gcp_meta.yml", "name": "bigquery_jobs", "source_name": "bz_information_schema", "source_description": "log of all BigQuery executions", "loader": "", "identifier": "JOBS_BY_PROJECT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "log of all BigQuery executions", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`region-eu.INFORMATION_SCHEMA`.`JOBS_BY_PROJECT`", "created_at": 1663750854.449729}, "source.sql_repository_bz.gcp_cost.gcp_cost_data": {"fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "gcp_cost", "gcp_cost_data"], "database": "bergzeit", "schema": "gcp_cost_export", "unique_id": "source.sql_repository_bz.gcp_cost.gcp_cost_data", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_cloud_platform_metadata/_sources_gcp_meta.yml", "original_file_path": "models/01_staging/google_cloud_platform_metadata/_sources_gcp_meta.yml", "name": "gcp_cost_data", "source_name": "gcp_cost", "source_description": "daily transfer of all Google Cloud Platform cost data", "loader": "", "identifier": "gcp_billing_export_v1_0195FF_CDEB4D_2A5AD3", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "daily transfer of all Google Cloud Platform cost data, from 2022-05-23", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`gcp_cost_export`.`gcp_billing_export_v1_0195FF_CDEB4D_2A5AD3`", "created_at": 1663750854.4499247}, "source.sql_repository_bz.gcp_cost.gcp_cost_data_legacy": {"fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "gcp_cost", "gcp_cost_data_legacy"], "database": "bergzeit", "schema": "gcp_cost_export", "unique_id": "source.sql_repository_bz.gcp_cost.gcp_cost_data_legacy", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_cloud_platform_metadata/_sources_gcp_meta.yml", "original_file_path": "models/01_staging/google_cloud_platform_metadata/_sources_gcp_meta.yml", "name": "gcp_cost_data_legacy", "source_name": "gcp_cost", "source_description": "daily transfer of all Google Cloud Platform cost data", "loader": "", "identifier": "gcp_billing_export_v1_0195FF_CDEB4D_2A5AD3_backup", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "old  transfer transfer of all Google Cloud Platform cost data, up to 2022-05-22", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`gcp_cost_export`.`gcp_billing_export_v1_0195FF_CDEB4D_2A5AD3_backup`", "created_at": 1663750854.450125}, "source.sql_repository_bz.gcp_cloud_logs.cloudscheduler_executions": {"fqn": ["sql_repository_bz", "01_staging", "google_cloud_platform_metadata", "gcp_cloud_logs", "cloudscheduler_executions"], "database": "bergzeit", "schema": "gcp_execution_logs", "unique_id": "source.sql_repository_bz.gcp_cloud_logs.cloudscheduler_executions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_cloud_platform_metadata/_sources_gcp_meta.yml", "original_file_path": "models/01_staging/google_cloud_platform_metadata/_sources_gcp_meta.yml", "name": "cloudscheduler_executions", "source_name": "gcp_cloud_logs", "source_description": "daily update of all Google Cloud Platform processes", "loader": "", "identifier": "cloudscheduler_googleapis_com_executions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "daily transfer of allcloudscheduler executions", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`gcp_execution_logs`.`cloudscheduler_googleapis_com_executions`", "created_at": 1663750854.4503605}, "source.sql_repository_bz.trusted_shops.ts_reviews_all": {"fqn": ["sql_repository_bz", "01_staging", "trusted_shops", "trusted_shops", "ts_reviews_all"], "database": "bergzeit", "schema": "trusted_shops", "unique_id": "source.sql_repository_bz.trusted_shops.ts_reviews_all", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/trusted_shops/_sources_trusted_shops.yml", "original_file_path": "models/01_staging/trusted_shops/_sources_trusted_shops.yml", "name": "ts_reviews_all", "source_name": "trusted_shops", "source_description": "daily transfer of trusted shops reviews", "loader": "", "identifier": "ts_reviews_all", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "daily transfer of trusted shops reviews", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`trusted_shops`.`ts_reviews_all`", "created_at": 1663750854.4505446}, "source.sql_repository_bz.price_intelligence.currency_factor_chf": {"fqn": ["sql_repository_bz", "01_staging", "google_sheets", "price_intelligence", "currency_factor_chf"], "database": "bergzeit", "schema": "price_intelligence", "unique_id": "source.sql_repository_bz.price_intelligence.currency_factor_chf", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_sheets/_sources_gsheets.yml", "original_file_path": "models/01_staging/google_sheets/_sources_gsheets.yml", "name": "currency_factor_chf", "source_name": "price_intelligence", "source_description": "", "loader": "", "identifier": "currency_factor_chf", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Currency factor per day for CH via google finance function in google sheets, added as external table in Bigquery", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`price_intelligence`.`currency_factor_chf`", "created_at": 1663750854.4507217}, "source.sql_repository_bz.price_intelligence.currency_factor_gbp": {"fqn": ["sql_repository_bz", "01_staging", "google_sheets", "price_intelligence", "currency_factor_gbp"], "database": "bergzeit", "schema": "price_intelligence", "unique_id": "source.sql_repository_bz.price_intelligence.currency_factor_gbp", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_sheets/_sources_gsheets.yml", "original_file_path": "models/01_staging/google_sheets/_sources_gsheets.yml", "name": "currency_factor_gbp", "source_name": "price_intelligence", "source_description": "", "loader": "", "identifier": "currency_factor_gbp", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Currency factor per day for GB via google finance function in google sheets, added as external table in Bigquery", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`price_intelligence`.`currency_factor_gbp`", "created_at": 1663750854.4509032}, "source.sql_repository_bz.price_intelligence.budgetplan_soll": {"fqn": ["sql_repository_bz", "01_staging", "google_sheets", "price_intelligence", "budgetplan_soll"], "database": "bergzeit", "schema": "price_intelligence", "unique_id": "source.sql_repository_bz.price_intelligence.budgetplan_soll", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_sheets/_sources_gsheets.yml", "original_file_path": "models/01_staging/google_sheets/_sources_gsheets.yml", "name": "budgetplan_soll", "source_name": "price_intelligence", "source_description": "", "loader": "", "identifier": "budgetplan_soll", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Planned order values (extracted manually by Eric from adaptive planning) in google sheets, added as external table in Bigquery", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`price_intelligence`.`budgetplan_soll`", "created_at": 1663750854.4863145}, "source.sql_repository_bz.price_intelligence.budgetplan_soll_channels": {"fqn": ["sql_repository_bz", "01_staging", "google_sheets", "price_intelligence", "budgetplan_soll_channels"], "database": "bergzeit", "schema": "price_intelligence", "unique_id": "source.sql_repository_bz.price_intelligence.budgetplan_soll_channels", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_sheets/_sources_gsheets.yml", "original_file_path": "models/01_staging/google_sheets/_sources_gsheets.yml", "name": "budgetplan_soll_channels", "source_name": "price_intelligence", "source_description": "", "loader": "", "identifier": "budgetplan_soll_channels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Planned channel shares and kur values (extracted manually by Eric) in google sheets, added as external table in Bigquery", "columns": {"Anteil": {"name": "Anteil", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`price_intelligence`.`budgetplan_soll_channels`", "created_at": 1663750854.5118575}, "source.sql_repository_bz.seo_analytics.top_pages_input_list": {"fqn": ["sql_repository_bz", "01_staging", "google_sheets", "seo_analytics", "top_pages_input_list"], "database": "bergzeit", "schema": "seo_analytics", "unique_id": "source.sql_repository_bz.seo_analytics.top_pages_input_list", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_sheets/_sources_gsheets.yml", "original_file_path": "models/01_staging/google_sheets/_sources_gsheets.yml", "name": "top_pages_input_list", "source_name": "seo_analytics", "source_description": "", "loader": "", "identifier": "top_pages_input_list", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Manually curated list of the top magazin and shop pages that should be monitored in the SEO report", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`seo_analytics`.`top_pages_input_list`", "created_at": 1663750854.5121467}, "source.sql_repository_bz.seo_analytics.magazin_posts_reworked_input_list": {"fqn": ["sql_repository_bz", "01_staging", "google_sheets", "seo_analytics", "magazin_posts_reworked_input_list"], "database": "bergzeit", "schema": "seo_analytics", "unique_id": "source.sql_repository_bz.seo_analytics.magazin_posts_reworked_input_list", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_sheets/_sources_gsheets.yml", "original_file_path": "models/01_staging/google_sheets/_sources_gsheets.yml", "name": "magazin_posts_reworked_input_list", "source_name": "seo_analytics", "source_description": "", "loader": "", "identifier": "magazin_posts_reworked_input_list", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Manually curated list of the newly updated magazin posts", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`seo_analytics`.`magazin_posts_reworked_input_list`", "created_at": 1663750854.5123553}, "source.sql_repository_bz.awin.awin_orders_all_ch": {"fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "awin", "awin_orders_all_ch"], "database": "adsdataprediction", "schema": "awin", "unique_id": "source.sql_repository_bz.awin.awin_orders_all_ch", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/affiliate_awin/_sources_awin.yml", "original_file_path": "models/01_staging/affiliate_awin/_sources_awin.yml", "name": "awin_orders_all_ch", "source_name": "awin", "source_description": "### Description\r\n\r\nA cloud function that fetches all Awin orders of the last 120 days via the API across all countries. \r\n\r\n### When does the job run and how?\r\n\r\n* The [daily cloud scheduler job in the \"adsdataprediction\" project](https://console.cloud.google.com/cloudscheduler/jobs/edit/europe-west1/get_awin_orders?project=adsdataprediction) triggers [a cloud function](https://console.cloud.google.com/functions/details/europe-west3/get_awin_orders?env=gen1&project=adsdataprediction) to store all Awin orders to Cloud Storage in one csv file per country.\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* The output dataframes are [directly written to BigQuery](https://console.cloud.google.com/bigquery?project=bergzeit&ws=!1m9!1m4!4m3!1sbergzeit!2sdbt_sea_analytics!3sgads_ads_for_url_check!1m3!3m2!1sadsdataprediction!2sawin&d=awin&p=adsdataprediction&page=dataset) via the to_gbq method.\r\n\r\n### What type of table is it?\r\n\r\nNative table, overwritten on every run.\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. A regular check is performed in the [cloud function overview page](https://console.cloud.google.com/functions/list?project=adsdataprediction) and on the [Analytics Admin dashboard](https://datastudio.google.com/s/iUprJbY3B2Y)\r\n\r\n### Who is the business stakeholder? \r\n\r\nEric Estel\r\n\r\n### Which ticket does the feature refer to?\r\n\r\n[WEBA-261](https://bergzeit.atlassian.net/browse/WEBA-261)\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\ndbt test coverage (see model yml) and Cloud function failure alerts", "loader": "", "identifier": "awin_orders_all_ch", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(transactionDate as timestamp)", "freshness": {"warn_after": {"count": 36, "period": "hour"}, "error_after": {"count": 36, "period": "hour"}, "filter": null}, "external": null, "description": "see top level dataset docs > https://bergzeit-analytics.netlify.app/#!/source_list/awin", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`awin`.`awin_orders_all_ch`", "created_at": 1663750854.51257}, "source.sql_repository_bz.awin.awin_orders_all_deat": {"fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "awin", "awin_orders_all_deat"], "database": "adsdataprediction", "schema": "awin", "unique_id": "source.sql_repository_bz.awin.awin_orders_all_deat", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/affiliate_awin/_sources_awin.yml", "original_file_path": "models/01_staging/affiliate_awin/_sources_awin.yml", "name": "awin_orders_all_deat", "source_name": "awin", "source_description": "### Description\r\n\r\nA cloud function that fetches all Awin orders of the last 120 days via the API across all countries. \r\n\r\n### When does the job run and how?\r\n\r\n* The [daily cloud scheduler job in the \"adsdataprediction\" project](https://console.cloud.google.com/cloudscheduler/jobs/edit/europe-west1/get_awin_orders?project=adsdataprediction) triggers [a cloud function](https://console.cloud.google.com/functions/details/europe-west3/get_awin_orders?env=gen1&project=adsdataprediction) to store all Awin orders to Cloud Storage in one csv file per country.\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* The output dataframes are [directly written to BigQuery](https://console.cloud.google.com/bigquery?project=bergzeit&ws=!1m9!1m4!4m3!1sbergzeit!2sdbt_sea_analytics!3sgads_ads_for_url_check!1m3!3m2!1sadsdataprediction!2sawin&d=awin&p=adsdataprediction&page=dataset) via the to_gbq method.\r\n\r\n### What type of table is it?\r\n\r\nNative table, overwritten on every run.\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. A regular check is performed in the [cloud function overview page](https://console.cloud.google.com/functions/list?project=adsdataprediction) and on the [Analytics Admin dashboard](https://datastudio.google.com/s/iUprJbY3B2Y)\r\n\r\n### Who is the business stakeholder? \r\n\r\nEric Estel\r\n\r\n### Which ticket does the feature refer to?\r\n\r\n[WEBA-261](https://bergzeit.atlassian.net/browse/WEBA-261)\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\ndbt test coverage (see model yml) and Cloud function failure alerts", "loader": "", "identifier": "awin_orders_all_deat", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(transactionDate as timestamp)", "freshness": {"warn_after": {"count": 36, "period": "hour"}, "error_after": {"count": 36, "period": "hour"}, "filter": null}, "external": null, "description": "see top level dataset docs > https://bergzeit-analytics.netlify.app/#!/source_list/awin", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`awin`.`awin_orders_all_deat`", "created_at": 1663750854.5127695}, "source.sql_repository_bz.awin.awin_orders_all_it": {"fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "awin", "awin_orders_all_it"], "database": "adsdataprediction", "schema": "awin", "unique_id": "source.sql_repository_bz.awin.awin_orders_all_it", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/affiliate_awin/_sources_awin.yml", "original_file_path": "models/01_staging/affiliate_awin/_sources_awin.yml", "name": "awin_orders_all_it", "source_name": "awin", "source_description": "### Description\r\n\r\nA cloud function that fetches all Awin orders of the last 120 days via the API across all countries. \r\n\r\n### When does the job run and how?\r\n\r\n* The [daily cloud scheduler job in the \"adsdataprediction\" project](https://console.cloud.google.com/cloudscheduler/jobs/edit/europe-west1/get_awin_orders?project=adsdataprediction) triggers [a cloud function](https://console.cloud.google.com/functions/details/europe-west3/get_awin_orders?env=gen1&project=adsdataprediction) to store all Awin orders to Cloud Storage in one csv file per country.\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* The output dataframes are [directly written to BigQuery](https://console.cloud.google.com/bigquery?project=bergzeit&ws=!1m9!1m4!4m3!1sbergzeit!2sdbt_sea_analytics!3sgads_ads_for_url_check!1m3!3m2!1sadsdataprediction!2sawin&d=awin&p=adsdataprediction&page=dataset) via the to_gbq method.\r\n\r\n### What type of table is it?\r\n\r\nNative table, overwritten on every run.\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. A regular check is performed in the [cloud function overview page](https://console.cloud.google.com/functions/list?project=adsdataprediction) and on the [Analytics Admin dashboard](https://datastudio.google.com/s/iUprJbY3B2Y)\r\n\r\n### Who is the business stakeholder? \r\n\r\nEric Estel\r\n\r\n### Which ticket does the feature refer to?\r\n\r\n[WEBA-261](https://bergzeit.atlassian.net/browse/WEBA-261)\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\ndbt test coverage (see model yml) and Cloud function failure alerts", "loader": "", "identifier": "awin_orders_all_it", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "see top level dataset docs > https://bergzeit-analytics.netlify.app/#!/source_list/awin", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`awin`.`awin_orders_all_it`", "created_at": 1663750854.5129697}, "source.sql_repository_bz.awin.awin_orders_all_uk": {"fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "awin", "awin_orders_all_uk"], "database": "adsdataprediction", "schema": "awin", "unique_id": "source.sql_repository_bz.awin.awin_orders_all_uk", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/affiliate_awin/_sources_awin.yml", "original_file_path": "models/01_staging/affiliate_awin/_sources_awin.yml", "name": "awin_orders_all_uk", "source_name": "awin", "source_description": "### Description\r\n\r\nA cloud function that fetches all Awin orders of the last 120 days via the API across all countries. \r\n\r\n### When does the job run and how?\r\n\r\n* The [daily cloud scheduler job in the \"adsdataprediction\" project](https://console.cloud.google.com/cloudscheduler/jobs/edit/europe-west1/get_awin_orders?project=adsdataprediction) triggers [a cloud function](https://console.cloud.google.com/functions/details/europe-west3/get_awin_orders?env=gen1&project=adsdataprediction) to store all Awin orders to Cloud Storage in one csv file per country.\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* The output dataframes are [directly written to BigQuery](https://console.cloud.google.com/bigquery?project=bergzeit&ws=!1m9!1m4!4m3!1sbergzeit!2sdbt_sea_analytics!3sgads_ads_for_url_check!1m3!3m2!1sadsdataprediction!2sawin&d=awin&p=adsdataprediction&page=dataset) via the to_gbq method.\r\n\r\n### What type of table is it?\r\n\r\nNative table, overwritten on every run.\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. A regular check is performed in the [cloud function overview page](https://console.cloud.google.com/functions/list?project=adsdataprediction) and on the [Analytics Admin dashboard](https://datastudio.google.com/s/iUprJbY3B2Y)\r\n\r\n### Who is the business stakeholder? \r\n\r\nEric Estel\r\n\r\n### Which ticket does the feature refer to?\r\n\r\n[WEBA-261](https://bergzeit.atlassian.net/browse/WEBA-261)\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\ndbt test coverage (see model yml) and Cloud function failure alerts", "loader": "", "identifier": "awin_orders_all_uk", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "see top level dataset docs > https://bergzeit-analytics.netlify.app/#!/source_list/awin", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`awin`.`awin_orders_all_uk`", "created_at": 1663750854.513168}, "source.sql_repository_bz.awin.awin_orders_all_nl": {"fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "awin", "awin_orders_all_nl"], "database": "adsdataprediction", "schema": "awin", "unique_id": "source.sql_repository_bz.awin.awin_orders_all_nl", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/affiliate_awin/_sources_awin.yml", "original_file_path": "models/01_staging/affiliate_awin/_sources_awin.yml", "name": "awin_orders_all_nl", "source_name": "awin", "source_description": "### Description\r\n\r\nA cloud function that fetches all Awin orders of the last 120 days via the API across all countries. \r\n\r\n### When does the job run and how?\r\n\r\n* The [daily cloud scheduler job in the \"adsdataprediction\" project](https://console.cloud.google.com/cloudscheduler/jobs/edit/europe-west1/get_awin_orders?project=adsdataprediction) triggers [a cloud function](https://console.cloud.google.com/functions/details/europe-west3/get_awin_orders?env=gen1&project=adsdataprediction) to store all Awin orders to Cloud Storage in one csv file per country.\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* The output dataframes are [directly written to BigQuery](https://console.cloud.google.com/bigquery?project=bergzeit&ws=!1m9!1m4!4m3!1sbergzeit!2sdbt_sea_analytics!3sgads_ads_for_url_check!1m3!3m2!1sadsdataprediction!2sawin&d=awin&p=adsdataprediction&page=dataset) via the to_gbq method.\r\n\r\n### What type of table is it?\r\n\r\nNative table, overwritten on every run.\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. A regular check is performed in the [cloud function overview page](https://console.cloud.google.com/functions/list?project=adsdataprediction) and on the [Analytics Admin dashboard](https://datastudio.google.com/s/iUprJbY3B2Y)\r\n\r\n### Who is the business stakeholder? \r\n\r\nEric Estel\r\n\r\n### Which ticket does the feature refer to?\r\n\r\n[WEBA-261](https://bergzeit.atlassian.net/browse/WEBA-261)\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\ndbt test coverage (see model yml) and Cloud function failure alerts", "loader": "", "identifier": "awin_orders_all_nl", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "see top level dataset docs > https://bergzeit-analytics.netlify.app/#!/source_list/awin", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`awin`.`awin_orders_all_nl`", "created_at": 1663750854.5133626}, "source.sql_repository_bz.awin.awin_return_adjustment_errors": {"fqn": ["sql_repository_bz", "01_staging", "affiliate_awin", "awin", "awin_return_adjustment_errors"], "database": "adsdataprediction", "schema": "awin", "unique_id": "source.sql_repository_bz.awin.awin_return_adjustment_errors", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/affiliate_awin/_sources_awin.yml", "original_file_path": "models/01_staging/affiliate_awin/_sources_awin.yml", "name": "awin_return_adjustment_errors", "source_name": "awin", "source_description": "### Description\r\n\r\nA cloud function that fetches all Awin orders of the last 120 days via the API across all countries. \r\n\r\n### When does the job run and how?\r\n\r\n* The [daily cloud scheduler job in the \"adsdataprediction\" project](https://console.cloud.google.com/cloudscheduler/jobs/edit/europe-west1/get_awin_orders?project=adsdataprediction) triggers [a cloud function](https://console.cloud.google.com/functions/details/europe-west3/get_awin_orders?env=gen1&project=adsdataprediction) to store all Awin orders to Cloud Storage in one csv file per country.\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* The output dataframes are [directly written to BigQuery](https://console.cloud.google.com/bigquery?project=bergzeit&ws=!1m9!1m4!4m3!1sbergzeit!2sdbt_sea_analytics!3sgads_ads_for_url_check!1m3!3m2!1sadsdataprediction!2sawin&d=awin&p=adsdataprediction&page=dataset) via the to_gbq method.\r\n\r\n### What type of table is it?\r\n\r\nNative table, overwritten on every run.\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. A regular check is performed in the [cloud function overview page](https://console.cloud.google.com/functions/list?project=adsdataprediction) and on the [Analytics Admin dashboard](https://datastudio.google.com/s/iUprJbY3B2Y)\r\n\r\n### Who is the business stakeholder? \r\n\r\nEric Estel\r\n\r\n### Which ticket does the feature refer to?\r\n\r\n[WEBA-261](https://bergzeit.atlassian.net/browse/WEBA-261)\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\ndbt test coverage (see model yml) and Cloud function failure alerts", "loader": "", "identifier": "awin_return_adjustment_errors", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "this table is the csv output of this application exposure > https://bergzeit-analytics.netlify.app/#!/exposure/exposure.sql_repository_bz.Awin%20Sales%20Comparison%20Cloud%20Function", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`adsdataprediction`.`awin`.`awin_return_adjustment_errors`", "created_at": 1663750854.5135558}, "source.sql_repository_bz.customer_analytics.emarsys_ids": {"fqn": ["sql_repository_bz", "01_staging", "zz_emarsys", "customer_analytics", "emarsys_ids"], "database": "bergzeit", "schema": "customer_analytics", "unique_id": "source.sql_repository_bz.customer_analytics.emarsys_ids", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/zz_emarsys/_sources_emarsys.yml", "original_file_path": "models/01_staging/zz_emarsys/_sources_emarsys.yml", "name": "emarsys_ids", "source_name": "customer_analytics", "source_description": "This is a extract of emarsys optin status data transferred to BQ via python export (pymarsys)", "loader": "", "identifier": "emarsys_contacts_daily", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`customer_analytics`.`emarsys_contacts_daily`", "created_at": 1663750854.513745}, "source.sql_repository_bz.pagespeed_measurement.pagespeed_api_metrics": {"fqn": ["sql_repository_bz", "01_staging", "google_pagespeed", "pagespeed_measurement", "pagespeed_api_metrics"], "database": "bergzeit", "schema": "seo_analytics", "unique_id": "source.sql_repository_bz.pagespeed_measurement.pagespeed_api_metrics", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_pagespeed/_sources_pagespeed.yml", "original_file_path": "models/01_staging/google_pagespeed/_sources_pagespeed.yml", "name": "pagespeed_api_metrics", "source_name": "pagespeed_measurement", "source_description": "", "loader": "", "identifier": "pagespeed_api_metrics", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`seo_analytics`.`pagespeed_api_metrics`", "created_at": 1663750854.5139427}, "source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "ga_bz_master_view_overall", "ga_sessions_all"], "database": "bergzeit", "schema": "79472326", "unique_id": "source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "ga_sessions_all", "source_name": "ga_bz_master_view_overall", "source_description": "", "loader": "", "identifier": "ga_sessions_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`79472326`.`ga_sessions_*`", "created_at": 1663750854.514136}, "source.sql_repository_bz.ga_bz_master_view_de.ga_sessions_de": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "ga_bz_master_view_de", "ga_sessions_de"], "database": "bergzeit", "schema": "79462285_EU_Backup", "unique_id": "source.sql_repository_bz.ga_bz_master_view_de.ga_sessions_de", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "ga_sessions_de", "source_name": "ga_bz_master_view_de", "source_description": "", "loader": "", "identifier": "ga_sessions_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`79462285_EU_Backup`.`ga_sessions_*`", "created_at": 1663750854.5143766}, "source.sql_repository_bz.ga_bz_master_view_at.ga_sessions_at": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "ga_bz_master_view_at", "ga_sessions_at"], "database": "bergzeit", "schema": "79471425", "unique_id": "source.sql_repository_bz.ga_bz_master_view_at.ga_sessions_at", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "ga_sessions_at", "source_name": "ga_bz_master_view_at", "source_description": "", "loader": "", "identifier": "ga_sessions_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`79471425`.`ga_sessions_*`", "created_at": 1663750854.5145702}, "source.sql_repository_bz.ga_bz_master_view_ch.ga_sessions_ch": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "ga_bz_master_view_ch", "ga_sessions_ch"], "database": "bergzeit", "schema": "79472121", "unique_id": "source.sql_repository_bz.ga_bz_master_view_ch.ga_sessions_ch", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "ga_sessions_ch", "source_name": "ga_bz_master_view_ch", "source_description": "", "loader": "", "identifier": "ga_sessions_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`79472121`.`ga_sessions_*`", "created_at": 1663750854.5147552}, "source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "ga4_bz_overall", "ga4_bz_overall_events"], "database": "bergzeit", "schema": "analytics_317045356", "unique_id": "source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "ga4_bz_overall_events", "source_name": "ga4_bz_overall", "source_description": "", "loader": "", "identifier": "events_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_317045356`.`events_*`", "created_at": 1663750854.5149431}, "source.sql_repository_bz.performance_cost.performance_cost_DE": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_DE"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_DE", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_DE", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_79462285", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_79462285`", "created_at": 1663750854.51513}, "source.sql_repository_bz.performance_cost.performance_cost_AT": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_AT"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_AT", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_AT", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_79471425", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_79471425`", "created_at": 1663750854.5153155}, "source.sql_repository_bz.performance_cost.performance_cost_CH": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_CH"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_CH", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_CH", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_79472121", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_79472121`", "created_at": 1663750854.5155013}, "source.sql_repository_bz.performance_cost.performance_cost_BE": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_BE"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_BE", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_BE", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_88288948", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_88288948`", "created_at": 1663750854.5156884}, "source.sql_repository_bz.performance_cost.performance_cost_UK": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_UK"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_UK", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_UK", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_79469635", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_79469635`", "created_at": 1663750854.5158758}, "source.sql_repository_bz.performance_cost.performance_cost_CZ": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_CZ"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_CZ", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_CZ", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_79468944", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_79468944`", "created_at": 1663750854.5160623}, "source.sql_repository_bz.performance_cost.performance_cost_DK": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_DK"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_DK", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_DK", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_79473924", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_79473924`", "created_at": 1663750854.516248}, "source.sql_repository_bz.performance_cost.performance_cost_FI": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_FI"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_FI", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_FI", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_79470138", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_79470138`", "created_at": 1663750854.5164306}, "source.sql_repository_bz.performance_cost.performance_cost_FR": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_FR"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_FR", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_FR", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_83921387", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_83921387`", "created_at": 1663750854.5166144}, "source.sql_repository_bz.performance_cost.performance_cost_IT": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_IT"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_IT", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_IT", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_79470139", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_79470139`", "created_at": 1663750854.5168207}, "source.sql_repository_bz.performance_cost.performance_cost_NL": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_NL"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_NL", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_NL", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_84553507", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_84553507`", "created_at": 1663750854.7519507}, "source.sql_repository_bz.performance_cost.performance_cost_NO": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_NO"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_NO", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_NO", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_79471426", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_79471426`", "created_at": 1663750854.7522771}, "source.sql_repository_bz.performance_cost.performance_cost_PL": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_PL"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_PL", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_PL", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_79470434", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_79470434`", "created_at": 1663750854.7524939}, "source.sql_repository_bz.performance_cost.performance_cost_SE": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_SE"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_SE", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_SE", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_79469636", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_79469636`", "created_at": 1663750854.7527115}, "source.sql_repository_bz.performance_cost.performance_cost_validation_all_views": {"fqn": ["sql_repository_bz", "01_staging", "google_analytics", "performance_cost", "performance_cost_validation_all_views"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.performance_cost.performance_cost_validation_all_views", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_analytics/_sources_ga.yml", "original_file_path": "models/01_staging/google_analytics/_sources_ga.yml", "name": "performance_cost_validation_all_views", "source_name": "performance_cost", "source_description": "", "loader": "", "identifier": "performance_costs_daily_validation_all_views", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`performance_costs_daily_validation_all_views`", "created_at": 1663750854.752927}, "source.sql_repository_bz.product_inventory.channelpilot_source_feeds_all": {"fqn": ["sql_repository_bz", "01_staging", "channelpilot_source", "product_inventory", "channelpilot_source_feeds_all"], "database": "bergzeit", "schema": "product_inventory", "unique_id": "source.sql_repository_bz.product_inventory.channelpilot_source_feeds_all", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/channelpilot_source/_source_channel_pilot.yml", "original_file_path": "models/01_staging/channelpilot_source/_source_channel_pilot.yml", "name": "channelpilot_source_feeds_all", "source_name": "product_inventory", "source_description": "these tables are daily product attributes loaded from channelpilot feeds", "loader": "", "identifier": "channelpilot_source_feeds_all", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(file_datetime as timestamp)", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "a union of all channelpilot source feeds from Bergzeit SFTP, for data testing purposes", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`product_inventory`.`channelpilot_source_feeds_all`", "created_at": 1663750854.7531414}, "source.sql_repository_bz.crawl_data.crawl_advertools_logs": {"fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "crawl_data", "crawl_advertools_logs"], "database": "bergzeit", "schema": "CrawlLogfileData", "unique_id": "source.sql_repository_bz.crawl_data.crawl_advertools_logs", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "original_file_path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "name": "crawl_advertools_logs", "source_name": "crawl_data", "source_description": "daily transfers of various crawl data, including Google bot, sitemap and other\n", "loader": "", "identifier": "advertools_crawl_logs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "weekly custom crawl via Python advertools crawler running on Vertex AI notebook", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`CrawlLogfileData`.`advertools_crawl_logs`", "created_at": 1663750854.7533517}, "source.sql_repository_bz.crawl_data.gbot_crawl_data": {"fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "crawl_data", "gbot_crawl_data"], "database": "bergzeit", "schema": "CrawlLogfileData", "unique_id": "source.sql_repository_bz.crawl_data.gbot_crawl_data", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "original_file_path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "name": "gbot_crawl_data", "source_name": "crawl_data", "source_description": "daily transfers of various crawl data, including Google bot, sitemap and other\n", "loader": "", "identifier": "DailyCrawlData_All", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "daily transfer of all URLs crawled by Googlebot", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`CrawlLogfileData`.`DailyCrawlData_All`", "created_at": 1663750854.753552}, "source.sql_repository_bz.crawl_data.sitemap_data_de": {"fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "crawl_data", "sitemap_data_de"], "database": "bergzeit", "schema": "CrawlLogfileData", "unique_id": "source.sql_repository_bz.crawl_data.sitemap_data_de", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "original_file_path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "name": "sitemap_data_de", "source_name": "crawl_data", "source_description": "daily transfers of various crawl data, including Google bot, sitemap and other\n", "loader": "", "identifier": "sitemap_de_daily", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "daily list of all current sitemap URLs with sitemap type", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`CrawlLogfileData`.`sitemap_de_daily`", "created_at": 1663750854.7537599}, "source.sql_repository_bz.crawl_data.sitemap_data_it": {"fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "crawl_data", "sitemap_data_it"], "database": "bergzeit", "schema": "CrawlLogfileData", "unique_id": "source.sql_repository_bz.crawl_data.sitemap_data_it", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "original_file_path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "name": "sitemap_data_it", "source_name": "crawl_data", "source_description": "daily transfers of various crawl data, including Google bot, sitemap and other\n", "loader": "", "identifier": "sitemap_it_daily", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "daily list of all IT current sitemap URLs with sitemap type", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`CrawlLogfileData`.`sitemap_it_daily`", "created_at": 1663750854.7539713}, "source.sql_repository_bz.crawl_data.sitemap_data_nl": {"fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "crawl_data", "sitemap_data_nl"], "database": "bergzeit", "schema": "CrawlLogfileData", "unique_id": "source.sql_repository_bz.crawl_data.sitemap_data_nl", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "original_file_path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "name": "sitemap_data_nl", "source_name": "crawl_data", "source_description": "daily transfers of various crawl data, including Google bot, sitemap and other\n", "loader": "", "identifier": "sitemap_nl_daily", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "daily list of all NL current sitemap URLs with sitemap type", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`CrawlLogfileData`.`sitemap_nl_daily`", "created_at": 1663750854.7542257}, "source.sql_repository_bz.crawl_data.sitemap_data_uk": {"fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "crawl_data", "sitemap_data_uk"], "database": "bergzeit", "schema": "CrawlLogfileData", "unique_id": "source.sql_repository_bz.crawl_data.sitemap_data_uk", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "original_file_path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "name": "sitemap_data_uk", "source_name": "crawl_data", "source_description": "daily transfers of various crawl data, including Google bot, sitemap and other\n", "loader": "", "identifier": "sitemap_uk_daily", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "daily list of all UK current sitemap URLs with sitemap type", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`CrawlLogfileData`.`sitemap_uk_daily`", "created_at": 1663750854.7544599}, "source.sql_repository_bz.crawl_data.bf_sitemap_current": {"fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "crawl_data", "bf_sitemap_current"], "database": "bergzeit", "schema": "CrawlLogfileData", "unique_id": "source.sql_repository_bz.crawl_data.bf_sitemap_current", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "original_file_path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "name": "bf_sitemap_current", "source_name": "crawl_data", "source_description": "daily transfers of various crawl data, including Google bot, sitemap and other\n", "loader": "", "identifier": "sitemap_bergfreunde", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "daily list of all Bergfreunde sitemap URLs", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`CrawlLogfileData`.`sitemap_bergfreunde`", "created_at": 1663750854.7546663}, "source.sql_repository_bz.crawl_data.backlinks_and_inlinks_per_url": {"fqn": ["sql_repository_bz", "01_staging", "google_crawl_data", "crawl_data", "backlinks_and_inlinks_per_url"], "database": "bergzeit", "schema": "CrawlLogfileData", "unique_id": "source.sql_repository_bz.crawl_data.backlinks_and_inlinks_per_url", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "original_file_path": "models/01_staging/google_crawl_data/_sources_crawl.yml", "name": "backlinks_and_inlinks_per_url", "source_name": "crawl_data", "source_description": "daily transfers of various crawl data, including Google bot, sitemap and other\n", "loader": "", "identifier": "backlinks_and_inlinks_per_url", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "static list of backlinks from September 2021", "columns": {}, "meta": {}, "source_meta": {"owner": "@Chris G"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`CrawlLogfileData`.`backlinks_and_inlinks_per_url`", "created_at": 1663750854.754847}, "source.sql_repository_bz.azure_dwh_discovery.nav_transactions": {"fqn": ["sql_repository_bz", "01_staging", "navision", "azure_dwh_discovery", "nav_transactions"], "database": "bergzeit", "schema": "azure_dwh_discovery", "unique_id": "source.sql_repository_bz.azure_dwh_discovery.nav_transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/navision/_sources_nav.yml", "original_file_path": "models/01_staging/navision/_sources_nav.yml", "name": "nav_transactions", "source_name": "azure_dwh_discovery", "source_description": "This is a replica of the mkt tables of Discovery DWH (Navision data) transferred to BQ via scheduled notebook", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(T_order_date as timestamp)", "freshness": {"warn_after": {"count": 90, "period": "hour"}, "error_after": {"count": 90, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`azure_dwh_discovery`.`transactions`", "created_at": 1663750854.7550244}, "source.sql_repository_bz.azure_dwh_discovery.nav_customers": {"fqn": ["sql_repository_bz", "01_staging", "navision", "azure_dwh_discovery", "nav_customers"], "database": "bergzeit", "schema": "azure_dwh_discovery", "unique_id": "source.sql_repository_bz.azure_dwh_discovery.nav_customers", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/navision/_sources_nav.yml", "original_file_path": "models/01_staging/navision/_sources_nav.yml", "name": "nav_customers", "source_name": "azure_dwh_discovery", "source_description": "This is a replica of the mkt tables of Discovery DWH (Navision data) transferred to BQ via scheduled notebook", "loader": "", "identifier": "customers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(T_order_date as timestamp)", "freshness": null, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`azure_dwh_discovery`.`customers`", "created_at": 1663750854.7551947}, "source.sql_repository_bz.azure_dwh_discovery.nav_invoice_line": {"fqn": ["sql_repository_bz", "01_staging", "navision", "azure_dwh_discovery", "nav_invoice_line"], "database": "bergzeit", "schema": "azure_dwh_discovery", "unique_id": "source.sql_repository_bz.azure_dwh_discovery.nav_invoice_line", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/navision/_sources_nav.yml", "original_file_path": "models/01_staging/navision/_sources_nav.yml", "name": "nav_invoice_line", "source_name": "azure_dwh_discovery", "source_description": "This is a replica of the mkt tables of Discovery DWH (Navision data) transferred to BQ via scheduled notebook", "loader": "", "identifier": "invoice_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(T_order_date as timestamp)", "freshness": null, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`azure_dwh_discovery`.`invoice_line`", "created_at": 1663750854.7553651}, "source.sql_repository_bz.azure_dwh_discovery.nav_invoice_header": {"fqn": ["sql_repository_bz", "01_staging", "navision", "azure_dwh_discovery", "nav_invoice_header"], "database": "bergzeit", "schema": "azure_dwh_discovery", "unique_id": "source.sql_repository_bz.azure_dwh_discovery.nav_invoice_header", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/navision/_sources_nav.yml", "original_file_path": "models/01_staging/navision/_sources_nav.yml", "name": "nav_invoice_header", "source_name": "azure_dwh_discovery", "source_description": "This is a replica of the mkt tables of Discovery DWH (Navision data) transferred to BQ via scheduled notebook", "loader": "", "identifier": "invoice_header", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(T_order_date as timestamp)", "freshness": null, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`azure_dwh_discovery`.`invoice_header`", "created_at": 1663750854.7555497}, "source.sql_repository_bz.azure_dwh_discovery.nav_credit_memo_line": {"fqn": ["sql_repository_bz", "01_staging", "navision", "azure_dwh_discovery", "nav_credit_memo_line"], "database": "bergzeit", "schema": "azure_dwh_discovery", "unique_id": "source.sql_repository_bz.azure_dwh_discovery.nav_credit_memo_line", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/navision/_sources_nav.yml", "original_file_path": "models/01_staging/navision/_sources_nav.yml", "name": "nav_credit_memo_line", "source_name": "azure_dwh_discovery", "source_description": "This is a replica of the mkt tables of Discovery DWH (Navision data) transferred to BQ via scheduled notebook", "loader": "", "identifier": "credit_memo_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(T_order_date as timestamp)", "freshness": null, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`azure_dwh_discovery`.`credit_memo_line`", "created_at": 1663750854.755731}, "source.sql_repository_bz.azure_dwh_discovery.nav_credit_memo_header": {"fqn": ["sql_repository_bz", "01_staging", "navision", "azure_dwh_discovery", "nav_credit_memo_header"], "database": "bergzeit", "schema": "azure_dwh_discovery", "unique_id": "source.sql_repository_bz.azure_dwh_discovery.nav_credit_memo_header", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/navision/_sources_nav.yml", "original_file_path": "models/01_staging/navision/_sources_nav.yml", "name": "nav_credit_memo_header", "source_name": "azure_dwh_discovery", "source_description": "This is a replica of the mkt tables of Discovery DWH (Navision data) transferred to BQ via scheduled notebook", "loader": "", "identifier": "credit_memo_header", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(T_order_date as timestamp)", "freshness": null, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`azure_dwh_discovery`.`credit_memo_header`", "created_at": 1663750854.7559228}, "source.sql_repository_bz.azure_dwh_discovery.nav_sales_channel": {"fqn": ["sql_repository_bz", "01_staging", "navision", "azure_dwh_discovery", "nav_sales_channel"], "database": "bergzeit", "schema": "azure_dwh_discovery", "unique_id": "source.sql_repository_bz.azure_dwh_discovery.nav_sales_channel", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/navision/_sources_nav.yml", "original_file_path": "models/01_staging/navision/_sources_nav.yml", "name": "nav_sales_channel", "source_name": "azure_dwh_discovery", "source_description": "This is a replica of the mkt tables of Discovery DWH (Navision data) transferred to BQ via scheduled notebook", "loader": "", "identifier": "nav_sales_channel", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(T_order_date as timestamp)", "freshness": null, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`azure_dwh_discovery`.`nav_sales_channel`", "created_at": 1663750854.7561185}, "source.sql_repository_bz.azure_dwh_discovery.nav_customers_new_id": {"fqn": ["sql_repository_bz", "01_staging", "navision", "azure_dwh_discovery", "nav_customers_new_id"], "database": "bergzeit", "schema": "azure_dwh_discovery", "unique_id": "source.sql_repository_bz.azure_dwh_discovery.nav_customers_new_id", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/navision/_sources_nav.yml", "original_file_path": "models/01_staging/navision/_sources_nav.yml", "name": "nav_customers_new_id", "source_name": "azure_dwh_discovery", "source_description": "This is a replica of the mkt tables of Discovery DWH (Navision data) transferred to BQ via scheduled notebook", "loader": "", "identifier": "customers_new_id", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(T_order_date as timestamp)", "freshness": null, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`azure_dwh_discovery`.`customers_new_id`", "created_at": 1663750854.7563193}, "source.sql_repository_bz.analytics_datamart.return_rates_country_brand_topcat": {"fqn": ["sql_repository_bz", "01_staging", "navision", "analytics_datamart", "return_rates_country_brand_topcat"], "database": "bergzeit", "schema": "analytics_datamart", "unique_id": "source.sql_repository_bz.analytics_datamart.return_rates_country_brand_topcat", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "models/01_staging/navision/_sources_nav.yml", "original_file_path": "models/01_staging/navision/_sources_nav.yml", "name": "return_rates_country_brand_topcat", "source_name": "analytics_datamart", "source_description": "This is a one-time export of return data from qlikview (currently for the year 2021)", "loader": "", "identifier": "return_rates_country_brand_topcat", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_datamart`.`return_rates_country_brand_topcat`", "created_at": 1663750854.7565362}, "source.ga4.ga4.events": {"fqn": ["ga4", "staging", "ga4", "ga4", "events"], "database": "bergzeit", "schema": "analytics_317045356", "unique_id": "source.ga4.ga4.events", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "models/staging/ga4/src_ga4.yml", "original_file_path": "models/staging/ga4/src_ga4.yml", "name": "events", "source_name": "ga4", "source_description": "", "loader": "", "identifier": "events_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Main events table exported by GA4. Sharded by date.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_317045356`.`events_*`", "created_at": 1663750854.7567997}, "source.ga4.ga4.events_intraday": {"fqn": ["ga4", "staging", "ga4", "ga4", "events_intraday"], "database": "bergzeit", "schema": "analytics_317045356", "unique_id": "source.ga4.ga4.events_intraday", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "models/staging/ga4/src_ga4.yml", "original_file_path": "models/staging/ga4/src_ga4.yml", "name": "events_intraday", "source_name": "ga4", "source_description": "", "loader": "", "identifier": "events_intraday_*", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Intraday events table which is optionally exported by GA4. Always contains events from the current day.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bergzeit`.`analytics_317045356`.`events_intraday_*`", "created_at": 1663750854.7570477}}, "macros": {"macro.sql_repository_bz.apply_country_grouping": {"unique_id": "macro.sql_repository_bz.apply_country_grouping", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/country_grouping.sql", "original_file_path": "macros/country_grouping.sql", "name": "apply_country_grouping", "macro_sql": "{% macro apply_country_grouping(column_name) %}\r\n    case\r\n        when {{ column_name }} in ('de', 'at', 'ch', 'nl', 'uk', 'it') then {{ column_name }}\r\n        else 'int'\r\n    end\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.8992007}, "macro.sql_repository_bz.extract_country_from_hostname": {"unique_id": "macro.sql_repository_bz.extract_country_from_hostname", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/extract_country_from_hostname.sql", "original_file_path": "macros/extract_country_from_hostname.sql", "name": "extract_country_from_hostname", "macro_sql": "{% macro extract_country_from_hostname(column_name) %}\r\n    case\r\n        when {{ column_name }} like '%co.uk%' then split({{ column_name }}, '.')[ offset (3)] \r\n        else split({{ column_name }}, '.')[offset(2)] \r\n    end\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9005985}, "macro.sql_repository_bz.map_country_to_analytics_viewid": {"unique_id": "macro.sql_repository_bz.map_country_to_analytics_viewid", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/map_country_to_analytics_viewid.sql", "original_file_path": "macros/map_country_to_analytics_viewid.sql", "name": "map_country_to_analytics_viewid", "macro_sql": "{% macro map_country_to_analytics_viewid(view_id) %}\r\n    case\r\n        when {{ view_id }} = '79471425' then 'at'\r\n        when {{ view_id }} = '79462285' then 'de'\r\n        when {{ view_id }} = '79472121' then 'ch'\r\n        when {{ view_id }} = '88288948' then 'be'\r\n        when {{ view_id }} = '79469635' then 'uk'\r\n        when {{ view_id }} = '79468944' then 'cz'\r\n        when {{ view_id }} = '79473924' then 'dk'\r\n        when {{ view_id }} = '79470138' then 'fi'\r\n        when {{ view_id }} = '83921387' then 'fr'\r\n        when {{ view_id }} = '79470139' then 'it'\r\n        when {{ view_id }} = '84553507' then 'nl'\r\n        when {{ view_id }} = '79471426' then 'no'\r\n        when {{ view_id }} = '79470434' then 'pl'\r\n        when {{ view_id }} = '79469636' then 'se'\r\n    end\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9033964}, "macro.sql_repository_bz.test_max_row_count_change_from_prev_day_to_yesterday_in_percent": {"unique_id": "macro.sql_repository_bz.test_max_row_count_change_from_prev_day_to_yesterday_in_percent", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/custom_tests/test_max_row_count_change_prev_day_to_yesterday.sql", "original_file_path": "macros/custom_tests/test_max_row_count_change_prev_day_to_yesterday.sql", "name": "test_max_row_count_change_from_prev_day_to_yesterday_in_percent", "macro_sql": "{% test max_row_count_change_from_prev_day_to_yesterday_in_percent(model, date_col, change_threshold_in_percent) %}\r\n \r\nwith data_yesterday as (\r\n \r\n   select\r\n        'key' as key,\r\n        count(*) as row_count_yesterday\r\n   from {{ model }}\r\n   where {{ date_col }} = date_sub(current_date(), interval 1 day)\r\n   group by 1\r\n \r\n),\r\n\r\ndata_prev_day as (\r\n \r\n   select\r\n        'key' as key,\r\n        count(*) as row_count_prev_day\r\n   from {{ model }}\r\n   where {{ date_col }} = date_sub(current_date(), interval 2 day)\r\n   group by 1\r\n \r\n),\r\n\r\ndate_values_joined_and_compared as (\r\n\r\n   /* Calculate the relative difference from previous day to yesterday */\r\n   /* Example: (2500 - 1500) / 1500 = 500 / 1500 = 0.33 */\r\n   select \r\n      abs(row_count_yesterday - row_count_prev_day)/ row_count_prev_day * 100 as relative_difference_in_percent\r\n   from data_yesterday\r\n   left join data_prev_day using (key)\r\n   \r\n),\r\n\r\n\r\nvalidation_error as (\r\n \r\n   select *\r\n   from date_values_joined_and_compared\r\n   /* if the observed difference is greater than the threshold, the query returns one row */\r\n   where relative_difference_in_percent > {{ change_threshold_in_percent }}\r\n \r\n)\r\n \r\nselect * from validation_error\r\n \r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9053361}, "macro.sql_repository_bz.test_max_row_count_change_from_yesterday_to_today_in_percent": {"unique_id": "macro.sql_repository_bz.test_max_row_count_change_from_yesterday_to_today_in_percent", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/custom_tests/test_max_row_count_change_yesterday_to_today.sql", "original_file_path": "macros/custom_tests/test_max_row_count_change_yesterday_to_today.sql", "name": "test_max_row_count_change_from_yesterday_to_today_in_percent", "macro_sql": "{% test max_row_count_change_from_yesterday_to_today_in_percent(model, date_col, change_threshold_in_percent) %}\r\n \r\nwith data_today as (\r\n \r\n   select\r\n        'key' as key,\r\n        count(*) as row_count_today\r\n   from {{ model }}\r\n   where {{ date_col }} = date_sub(current_date(), interval 0 day)\r\n   group by 1\r\n \r\n),\r\n\r\ndata_yesterday as (\r\n \r\n   select\r\n        'key' as key,\r\n        count(*) as row_count_yesterday\r\n   from {{ model }}\r\n   where {{ date_col }} = date_sub(current_date(), interval 1 day)\r\n   group by 1\r\n \r\n),\r\n\r\ndate_values_joined_and_compared as (\r\n\r\n   /* Calculate the relative difference from previous day to yesterday */\r\n   /* Example: (2500 - 1500) / 1500 = 500 / 1500 = 0.33 */\r\n   select \r\n      abs(row_count_today - row_count_yesterday)/ row_count_yesterday * 100 as relative_difference_in_percent\r\n   from data_today\r\n   left join data_yesterday using (key)\r\n   \r\n),\r\n\r\n\r\nvalidation_error as (\r\n \r\n   select *\r\n   from date_values_joined_and_compared\r\n   /* if the observed difference is greater than the threshold, the query returns one row */\r\n   where relative_difference_in_percent > {{ change_threshold_in_percent }}\r\n \r\n)\r\n \r\nselect * from validation_error\r\n \r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9073858}, "macro.sql_repository_bz.test_not_empty": {"unique_id": "macro.sql_repository_bz.test_not_empty", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/custom_tests/test_not_empy.sql", "original_file_path": "macros/custom_tests/test_not_empy.sql", "name": "test_not_empty", "macro_sql": "{% test not_empty(model, column_name) %}\r\n \r\nwith validation as (\r\n \r\n   select\r\n       count(1) as row_count\r\n \r\n   from {{ model }}\r\n \r\n),\r\n \r\nvalidation_errors as (\r\n \r\n   select\r\n       row_count\r\n \r\n   from validation\r\n   where row_count = 0\r\n \r\n)\r\n \r\nselect count(*)\r\nfrom validation_errors\r\n \r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.908437}, "macro.sql_repository_bz.unnest_key": {"unique_id": "macro.sql_repository_bz.unnest_key", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/ga4/unnest_key.sql", "original_file_path": "macros/ga4/unnest_key.sql", "name": "unnest_key", "macro_sql": "\n\n{%- macro unnest_key(column_to_unnest, key_to_extract, value_type = \"string_value\", rename_column = \"default\") -%}\n\n(select value.{{value_type}} from unnest({{column_to_unnest}}) where key = '{{key_to_extract}}') as \n\n    {% if  rename_column == \"default\" -%}\n    {{ key_to_extract }}\n    {%- else -%}\n    {{rename_column}}\n    {%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9109225}, "macro.sql_repository_bz.top_cat_translation_to_de": {"unique_id": "macro.sql_repository_bz.top_cat_translation_to_de", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/profit_bidding/top_cat_translation_to_de.sql", "original_file_path": "macros/profit_bidding/top_cat_translation_to_de.sql", "name": "top_cat_translation_to_de", "macro_sql": "{% macro top_cat_translation_to_de(column_name) %}\r\n\r\n(\r\n    replace(\r\n        replace(\r\n            replace(\r\n                replace(\r\n                    replace(\r\n                        replace(\r\n                            replace(\r\n                                replace(\r\n                                    replace(\r\n                                        replace( {{ column_name }}, \r\n                                        'Clothing', 'Bekleidung'),\r\n                                        'Footwear', 'Schuhe'),\r\n                                        'Equipment', 'Ausr\u00fcstung'),\r\n                                        'Uistrusting', 'Ausr\u00fcstung'),\r\n                                        'Schoenen', 'Schuhe'),\r\n                                        'Abbigliamento', 'Bekleidung'),\r\n                                        'Scarpe', 'Schuhe'),\r\n                                        'Accessori', 'Accessoires'),\r\n                                        'Attrezzatura', 'Ausr\u00fcstung'),\r\n                                        'Configurators', 'Konfiguratoren')\r\n)\r\n\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9125266}, "macro.sql_repository_bz.high_level_channel_grouping": {"unique_id": "macro.sql_repository_bz.high_level_channel_grouping", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/channel_grouping/high_level_channel_grouping.sql", "original_file_path": "macros/channel_grouping/high_level_channel_grouping.sql", "name": "high_level_channel_grouping", "macro_sql": "{% macro high_level_channel_grouping(channel_grouping) %}\r\n  \r\n  case\r\n    when {{channel_grouping}} in ('Brand Paid Search', 'Organic Search Home', 'Direct') then 'Brand'\r\n    when {{channel_grouping}} in ('Generic Paid Search Google', 'Generic Paid Shopping Google', 'Display', 'Generic Paid Search Bing', 'PSM', 'Affiliate', 'Social Paid', 'Native') then 'Paid'\r\n    when {{channel_grouping}} in ('Organic Search Non-Home', 'Referral', 'Hersteller Links', 'Social Organic', 'Organic Search Magazin') then 'Organic'\r\n    when {{channel_grouping}} in ('Newsletter', 'Triggermail') then 'Email'\r\n  else 'Other'\r\n  end\r\n\r\n  {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9137862}, "macro.sql_repository_bz.custom_channel_grouping": {"unique_id": "macro.sql_repository_bz.custom_channel_grouping", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/channel_grouping/custom_channel_grouping.sql", "original_file_path": "macros/channel_grouping/custom_channel_grouping.sql", "name": "custom_channel_grouping", "macro_sql": "{% macro custom_channel_grouping(source_medium, campaign) %}\r\n\r\ncase \r\n    when {{ source_medium}} = 'google / cpc' and regexp_contains({{campaign}},  '_1_|_4_|_5_|_6_') = false \r\n        then 'Generic Paid Search Google'\r\n    when {{ source_medium}} = 'google / cpc' and regexp_contains({{campaign}},  '_4_|_6_')  \r\n        then 'Generic Paid Shopping Google'\r\n    when {{ source_medium}} = 'bing / cpc' and regexp_contains({{campaign}},  'de_5_display retargeting|_1_') = false \r\n        then 'Generic Paid Search Bing'\r\n    when {{ source_medium}} in ('google / cpc', 'bing / cpc') and regexp_contains({{campaign}},  '_1_') \r\n        then 'Brand Paid Search'\r\n    when regexp_contains({{ source_medium}}, 'facebook|instagram|pinterest|youtube') and regexp_contains({{source_medium}},  '/ cpc') \r\n        then 'Social Paid'\r\n    when {{ source_medium}} = 'psm / cpc' or regexp_contains({{source_medium}},  'mydealz|beslist|trovaprezzi|shoptail|kelkoo') or {{campaign}} = 'ps_outdoordeals'\r\n        then 'PSM'\r\n    when regexp_contains({{source_medium}},  'affiliate|awin|redbrain|ulligunde|bike-magazin|outdoor-professionell')\r\n        then 'Affiliate'\r\n    when {{ source_medium}} in ('bsmart / cpc', 'bsd / cpc') or regexp_contains({{source_medium}},  'criteo') or regexp_contains({{campaign}}, '_5_display')\r\n        then 'Display'\r\n    when {{ source_medium}} in ('taboola / cpc', 'outbrain / cpc') or {{campaign}} = '_branding_'\r\n        then 'Branding'\r\n\r\nelse 'nicht zugeordnet' end\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9179745}, "macro.sql_repository_bz.remove_gender_from_product_path": {"unique_id": "macro.sql_repository_bz.remove_gender_from_product_path", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/language_replacements/remove_gender_from_product_path.sql", "original_file_path": "macros/language_replacements/remove_gender_from_product_path.sql", "name": "remove_gender_from_product_path", "macro_sql": "{% macro remove_gender_from_product_path(column_name) %}\r\n\r\n(\r\n    replace(\r\n        replace(\r\n            replace(\r\n                replace(\r\n                    replace(\r\n                        replace(\r\n                            replace(\r\n                                replace( {{ column_name }}, \r\n                                    'Herren >', ''),\r\n                                    'Damen >', ''),\r\n                                    'Heren >', ''),\r\n                                    'Dames >', ''),\r\n                                    'Women >', ''),\r\n                                    'Men >', ''),\r\n                                    'Uomo >', ''),\r\n                                    'Donna >', '')\r\n)\r\n\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9195163}, "macro.sql_repository_bz.store_test_results": {"unique_id": "macro.sql_repository_bz.store_test_results", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/external_macros/store_test_failures.sql", "original_file_path": "macros/external_macros/store_test_failures.sql", "name": "store_test_results", "macro_sql": "{% macro store_test_results(results) %}\r\n  {%- set test_results = [] -%}\r\n  {%- set jobs_to_exclude = ['63728', '63684', '44452'] -%}\r\n\r\n  {% if env_var(\"DBT_CLOUD_JOB_ID\", \"manual\") not in jobs_to_exclude %}  \r\n\r\n  {%- for result in results if result.node.resource_type == 'test' -%}\r\n    {%- set test_results = test_results.append(result) -%}\r\n  {%- endfor -%}\r\n\r\n  {% endif %}\r\n\r\n  {% if test_results|length == 0 -%}\r\n    {{ log(\"store_test_results found no test results to process.\") if execute }}\r\n    {{ return('') }}\r\n  {% endif -%}\r\n\r\n  {%- set central_tbl -%} {{ target.schema }}_test_results.test_results_central {%- endset -%}\r\n  {%- set history_tbl -%} {{ target.schema }}_test_results.test_results_history {%- endset -%}\r\n  \r\n  {{ log(\"Centralizing \" ~ test_results|length ~ \" test results in \" + central_tbl, info = true) if execute }}\r\n  {{ log(test_results, info=true) }}\r\n  create or replace table {{ central_tbl }} as (\r\n  \r\n  {%- for result in test_results %}\r\n\r\n    {%- set test_name = '' -%}\r\n    {%- set test_type = '' -%}\r\n    {%- set column_name = '' -%}\r\n\r\n    {%- if result.node.test_metadata is defined -%}\r\n      {%- set test_name = result.node.test_metadata.name -%}\r\n      {%- set test_type = 'generic' -%}\r\n      \r\n      {%- if test_name == 'relationships' -%}\r\n        {%- set column_name = result.node.test_metadata.kwargs.field ~ ',' ~ result.node.test_metadata.kwargs.column_name -%}\r\n      {%- else -%}\r\n        {%- set column_name = result.node.test_metadata.kwargs.column_name -%}\r\n      {%- endif -%}\r\n    {%- elif result.node.name is defined -%}\r\n      {%- set test_name = result.node.name -%}\r\n      {%- set test_type = 'singular' -%}\r\n    {%- endif %}\r\n    \r\n    select\r\n      current_timestamp as test_timestamp_utc,\r\n      current_date as test_date,\r\n      '{{ test_name }}' as test_name,\r\n      '{{ result.node.config.severity }}' as test_severity_config,\r\n      '{{ result.status }}' as test_result,\r\n      '{{ process_refs(result.node.refs) }}' as model_refs,\r\n      '{{ process_refs(result.node.sources, is_src=true) }}' as source_refs,\r\n      '{{ column_name|escape }}' as column_names,\r\n      '{{ result.node.name }}' as test_name_long,\r\n      '{{ test_type }}' as test_type,\r\n      '{{ result.execution_time }}' as execution_time_seconds,\r\n      '{{ result.node.original_file_path }}' as file_test_defined,\r\n      '{{ var(\"pipeline_name\", \"variable_not_set\") }}' as pipeline_name,\r\n      '{{ var(\"pipeline_type\", \"variable_not_set\") }}' as pipeline_type,\r\n      '{{ target.name }}' as dbt_cloud_target_name,\r\n      '{{ env_var(\"DBT_CLOUD_PROJECT_ID\", \"manual\") }}' as audit_project_id,\r\n      '{{ env_var(\"DBT_CLOUD_JOB_ID\", \"manual\") }}' as audit_job_id,\r\n      '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' as audit_run_id,\r\n      '{{ env_var(\"DBT_CLOUD_URL\", \"https://cloud.getdbt.com/next/deploy/12532/projects/\") }}'||'{{ env_var(\"DBT_CLOUD_PROJECT_ID\", \"manual\") }}'||'/runs/'||'{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' as audit_run_url   \r\n    {{ \"union all\" if not loop.last }}\r\n  \r\n  {%- endfor %}\r\n  \r\n  );\r\n\r\n  create table if not exists {{ history_tbl }} as (\r\n    select \r\n      *,\r\n      {{ dbt_utils.surrogate_key([\"test_name\", \"test_result\", \"test_timestamp_utc\"]) }} as sk_id \r\n    from {{ central_tbl }}\r\n    where false\r\n  );\r\n\r\ninsert into {{ history_tbl }} \r\n  select \r\n    *,\r\n    {{ dbt_utils.surrogate_key([\"test_name\", \"test_result\", \"test_timestamp_utc\"]) }} as sk_id \r\n  from {{ central_tbl }}\r\n;\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.sql_repository_bz.process_refs", "macro.dbt_utils.surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.961408}, "macro.sql_repository_bz.process_refs": {"unique_id": "macro.sql_repository_bz.process_refs", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/external_macros/store_test_failures.sql", "original_file_path": "macros/external_macros/store_test_failures.sql", "name": "process_refs", "macro_sql": "{% macro process_refs( ref_list, is_src=false ) %}\r\n  {% set refs = [] %}\r\n\r\n  {% if ref_list is defined and ref_list|length > 0 %}\r\n      {% for ref in ref_list %}\r\n        {% if is_src %}\r\n          {{ refs.append(ref|join('.')) }}\r\n        {% else %}\r\n          {{ refs.append(ref[0]) }}\r\n        {% endif %} \r\n      {% endfor %}\r\n\r\n      {{ return(refs|join(',')) }}\r\n  {% else %}\r\n      {{ return('') }}\r\n  {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9638977}, "macro.sql_repository_bz.get_last_n_days_date_range": {"unique_id": "macro.sql_repository_bz.get_last_n_days_date_range", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/date_macros/get_last_n_days_date_range.sql", "original_file_path": "macros/date_macros/get_last_n_days_date_range.sql", "name": "get_last_n_days_date_range", "macro_sql": "{% macro get_last_n_days_date_range(number_of_days) %}\r\n    date_sub(current_date(), interval {{ number_of_days }} day)\r\n    and date_sub(current_date(), interval 1 day)\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9650736}, "macro.sql_repository_bz.get_complete_prev_year_date_range": {"unique_id": "macro.sql_repository_bz.get_complete_prev_year_date_range", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/date_macros/get_complete_prev_year_date_range.sql", "original_file_path": "macros/date_macros/get_complete_prev_year_date_range.sql", "name": "get_complete_prev_year_date_range", "macro_sql": "{% macro get_complete_prev_year_date_range() %}\r\n    '{{ var(\"start_date_y_prev\") }}' and \r\n    date_sub('{{ var(\"start_date_y\") }}', interval 1 day)\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9670403}, "macro.sql_repository_bz.get_complete_prev_financial_year_date_range": {"unique_id": "macro.sql_repository_bz.get_complete_prev_financial_year_date_range", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/date_macros/get_complete_prev_financial_year.sql", "original_file_path": "macros/date_macros/get_complete_prev_financial_year.sql", "name": "get_complete_prev_financial_year_date_range", "macro_sql": "{% macro get_complete_prev_financial_year_date_range() %}\r\n    '{{ var(\"start_date_fy_prev\") }}' and \r\n    date_sub('{{ var(\"start_date_fy\") }}', interval 1 day)\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9681947}, "macro.sql_repository_bz.get_year_to_yesterday_date_range": {"unique_id": "macro.sql_repository_bz.get_year_to_yesterday_date_range", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/date_macros/get_year_to_yesterday_date_range.sql", "original_file_path": "macros/date_macros/get_year_to_yesterday_date_range.sql", "name": "get_year_to_yesterday_date_range", "macro_sql": "{% macro get_year_to_yesterday_date_range() %}\r\n    '{{ var(\"start_date_y\") }}' and date_sub(current_date(), interval 1 day)\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9691215}, "macro.sql_repository_bz.get_last_n_days_prev_year": {"unique_id": "macro.sql_repository_bz.get_last_n_days_prev_year", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/date_macros/get_last_n_days_prev_year.sql", "original_file_path": "macros/date_macros/get_last_n_days_prev_year.sql", "name": "get_last_n_days_prev_year", "macro_sql": "{% macro get_last_n_days_prev_year(number_of_days) %}\r\n    -- get date n days ago of last year\r\n    date_sub(date_sub(current_date(), interval 1 year), interval {{ number_of_days }} day)\r\n    -- get yesterday last year\r\n    and date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9700286}, "macro.sql_repository_bz.get_prev_financial_year_to_yest_layr_date_range": {"unique_id": "macro.sql_repository_bz.get_prev_financial_year_to_yest_layr_date_range", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/date_macros/get_prev_financial_year_to_yest_layr_date_range.sql", "original_file_path": "macros/date_macros/get_prev_financial_year_to_yest_layr_date_range.sql", "name": "get_prev_financial_year_to_yest_layr_date_range", "macro_sql": "{% macro get_prev_financial_year_to_yest_layr_date_range() %}\r\n    '{{ var(\"start_date_fy_prev\") }}' and \r\n    date_sub(date_sub(current_date(), interval 1 year), interval 1 day)\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9710135}, "macro.sql_repository_bz.get_financial_year_to_yesterday_date_range": {"unique_id": "macro.sql_repository_bz.get_financial_year_to_yesterday_date_range", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "macros/date_macros/get_financial_year_to_yesterday_date_range.sql", "original_file_path": "macros/date_macros/get_financial_year_to_yesterday_date_range.sql", "name": "get_financial_year_to_yesterday_date_range", "macro_sql": "{% macro get_financial_year_to_yesterday_date_range() %}\r\n    '{{ var(\"start_date_fy\") }}' and date_sub(current_date(), interval 1 day)\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9719546}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9940937}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9958465}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.9970667}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750841.997963}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0003219}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0012035}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.002387}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0028381}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0032742}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0039463}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0044692}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.004977}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0054743}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.006082}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0073717}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0080476}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0090287}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0096142}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0102148}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0153124}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n  \n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0166328}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0229514}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n  \n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0235574}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0251904}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0259173}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0268383}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0367599}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {% endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0472503}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0487058}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0492966}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0515091}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, sql) %}\n\n  {% if '_dbt_max_partition' in sql %}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n  \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0577233}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0596743}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n        \n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0643458}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0674589}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(\n        declare_dbt_max_partition(this, partition_by, sql) + create_table_as(True, tmp_relation, sql)\n      ) %}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0816047}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter's copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0862553}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0881078}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0887012}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0891917}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0912805}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0933447}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0984914}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.0994475}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1001234}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1007056}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1013637}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1066198}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.10737}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1085145}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1091952}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1097782}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1195807}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1201956}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1213918}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1224225}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1236837}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1245024}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.129779}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1308045}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1335313}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1355853}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1360989}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1368825}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.13835}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.14096}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1415777}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.142408}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.143021}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.143975}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1456733}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.155141}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1562781}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1569474}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.157751}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.158599}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.159242}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1601892}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1615489}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.162538}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1644387}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1652527}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1663015}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1682148}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1689243}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.169505}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1702137}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.172182}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1726625}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1732}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.174622}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1766896}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1777017}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1787913}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1804492}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1812763}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1866202}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1875267}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1929798}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.1977966}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.200222}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2009723}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2049582}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.20712}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2082248}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2095604}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2106822}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.212912}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.214466}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2160568}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.217193}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2231328}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2275398}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.228311}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2288344}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2293723}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.229899}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.248092}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2501678}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2509577}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2517176}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2532427}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2576814}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2673242}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2681346}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2697856}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2703874}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2710555}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.2720141}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.290313}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.3119605}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.3320577}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.3408184}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.3453124}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.34813}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.3509305}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.3600657}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.3644135}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.365271}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.3669786}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.3679888}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.3714468}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.3787076}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.3807037}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.3829434}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.4057474}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.414028}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.4193747}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.4211195}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.421692}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.4221458}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.4265277}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.4274025}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.4291477}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.4298508}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.4387}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.4680517}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.470161}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.4800813}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.492857}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5046475}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5060496}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.520446}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5215511}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5223267}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5226862}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5234163}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5326886}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.533445}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5344307}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.536076}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5599074}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5605938}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5614505}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5620072}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5664725}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5690057}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.56964}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5703106}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5739124}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5899684}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5962486}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.5974057}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6381035}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6446178}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6455035}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6465952}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6475723}, "macro.dbt_profiler.type_string": {"unique_id": "macro.dbt_profiler.type_string", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch(\"type_string\", macro_namespace=\"dbt_profiler\")()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.bigquery__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6589944}, "macro.dbt_profiler.default__type_string": {"unique_id": "macro.dbt_profiler.default__type_string", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "default__type_string", "macro_sql": "{%- macro default__type_string() -%}\n  varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6593943}, "macro.dbt_profiler.bigquery__type_string": {"unique_id": "macro.dbt_profiler.bigquery__type_string", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "bigquery__type_string", "macro_sql": "{%- macro bigquery__type_string() -%}\n  string\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6596997}, "macro.dbt_profiler.is_numeric_dtype": {"unique_id": "macro.dbt_profiler.is_numeric_dtype", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "is_numeric_dtype", "macro_sql": "\n\n{%- macro is_numeric_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_numeric_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.default__is_numeric_dtype"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6604393}, "macro.dbt_profiler.default__is_numeric_dtype": {"unique_id": "macro.dbt_profiler.default__is_numeric_dtype", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "default__is_numeric_dtype", "macro_sql": "{%- macro default__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype.startswith(\"int\") or dtype.startswith(\"float\") or \"numeric\" in dtype or \"number\" in dtype or \"double\" in dtype %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6617002}, "macro.dbt_profiler.is_date_or_time_dtype": {"unique_id": "macro.dbt_profiler.is_date_or_time_dtype", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "is_date_or_time_dtype", "macro_sql": "\n\n{%- macro is_date_or_time_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_date_or_time_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.default__is_date_or_time_dtype"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6665883}, "macro.dbt_profiler.default__is_date_or_time_dtype": {"unique_id": "macro.dbt_profiler.default__is_date_or_time_dtype", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "default__is_date_or_time_dtype", "macro_sql": "{%- macro default__is_date_or_time_dtype(dtype) -%}\n  {% set is_date_or_time = dtype.startswith(\"timestamp\") or dtype.startswith(\"date\") %}\n  {% do return(is_date_or_time) %}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6674368}, "macro.dbt_profiler.information_schema": {"unique_id": "macro.dbt_profiler.information_schema", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "information_schema", "macro_sql": "\n\n{%- macro information_schema(relation) -%}\n  {{ return(adapter.dispatch(\"information_schema\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.bigquery__information_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6681504}, "macro.dbt_profiler.default__information_schema": {"unique_id": "macro.dbt_profiler.default__information_schema", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "default__information_schema", "macro_sql": "{%- macro default__information_schema(relation) -%}\n  {{ relation.information_schema() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.668573}, "macro.dbt_profiler.bigquery__information_schema": {"unique_id": "macro.dbt_profiler.bigquery__information_schema", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "bigquery__information_schema", "macro_sql": "{%- macro bigquery__information_schema(relation) -%}\n  {{ adapter.quote(relation.database) }}.{{ adapter.quote(relation.schema) }}.INFORMATION_SCHEMA\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6692626}, "macro.dbt_profiler.select_from_information_schema_columns": {"unique_id": "macro.dbt_profiler.select_from_information_schema_columns", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "select_from_information_schema_columns", "macro_sql": "\n\n{%- macro select_from_information_schema_columns(relation) -%}\n  {{ return(adapter.dispatch(\"select_from_information_schema_columns\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.default__select_from_information_schema_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6699347}, "macro.dbt_profiler.default__select_from_information_schema_columns": {"unique_id": "macro.dbt_profiler.default__select_from_information_schema_columns", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "default__select_from_information_schema_columns", "macro_sql": "{%- macro default__select_from_information_schema_columns(relation) -%}\n  select\n    *\n  from {{ dbt_profiler.information_schema(relation) }}.COLUMNS\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n  order by ordinal_position asc\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6706753}, "macro.dbt_profiler.redshift__select_from_information_schema_columns": {"unique_id": "macro.dbt_profiler.redshift__select_from_information_schema_columns", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "redshift__select_from_information_schema_columns", "macro_sql": "{%- macro redshift__select_from_information_schema_columns(relation) -%}\n  select\n    attr.attname::varchar as column_name,\n    type.typname::varchar as data_type,\n    class.relname::varchar as table_name,\n    namespace.nspname::varchar as table_schema\n  from pg_catalog.pg_attribute as attr\n  join pg_catalog.pg_type as type on (attr.atttypid = type.oid)\n  join pg_catalog.pg_class as class on (attr.attrelid = class.oid)\n  join pg_catalog.pg_namespace as namespace on (class.relnamespace = namespace.oid)\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n    and attr.attnum > 0\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.671323}, "macro.dbt_profiler.print_profile_schema": {"unique_id": "macro.dbt_profiler.print_profile_schema", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/print_profile_schema.sql", "original_file_path": "macros/print_profile_schema.sql", "name": "print_profile_schema", "macro_sql": "{% macro print_profile_schema(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], model_description=\"\", column_description=\"\") %}\n\n{%- set column_dicts = [] -%}\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns) -%}\n\n{% if execute %}\n  {% for row in results.rows %}\n\n    {% set row_dict = row.dict() %}\n    {% set column_name = row_dict.pop(\"column_name\") %}\n\n    {% set meta_dict = {} %}\n    {% for key, value in row_dict.items() %}\n      {% set column = results.columns.get(key) %}\n      {% do meta_dict.update({key: column.data_type.jsonify(value)}) %}\n    {% endfor %}\n\n    {% set column_dict = {\"name\": column_name, \"description\": column_description, \"meta\": meta_dict} %}\n    {% do column_dicts.append(column_dict) %}\n  {% endfor %}\n\n  {% set schema_dict = {\n    \"version\": 2,\n    \"models\": [\n      {\n        \"name\": relation_name,\n        \"description\": model_description,\n        \"columns\": column_dicts\n      }\n    ]\n  } %}\n  {% set schema_yaml = toyaml(schema_dict) %}\n\n  {{ log(schema_yaml, info=True) }}\n  {% do return(schema_dict) %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.6917121}, "macro.dbt_profiler.get_profile": {"unique_id": "macro.dbt_profiler.get_profile", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "name": "get_profile", "macro_sql": "{% macro get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list-%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            cast(count(*) as numeric) as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            sum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as numeric) as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) = count(*) as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}avg({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as avg,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_pop({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_samp({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.assert_relation_exists", "macro.dbt.run_query", "macro.dbt_profiler.select_from_information_schema_columns", "macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_date_or_time_dtype", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.7616582}, "macro.dbt_profiler.get_profile_table": {"unique_id": "macro.dbt_profiler.get_profile_table", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/get_profile_table.sql", "original_file_path": "macros/get_profile_table.sql", "name": "get_profile_table", "macro_sql": "{% macro get_profile_table(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[]) %}\n\n{%- set relation = dbt_profiler.get_relation(\n  relation=relation,\n  relation_name=relation_name,\n  schema=schema,\n  database=database\n) -%}\n{%- set profile_sql = dbt_profiler.get_profile(relation=relation, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns) -%}\n{{ log(profile_sql, info=False) }}\n{% set results = run_query(profile_sql) %}\n{% set results = results.rename(results.column_names | map('lower')) %}\n{% do return(results) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.get_relation", "macro.dbt_profiler.get_profile", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.77782}, "macro.dbt_profiler.print_profile_docs": {"unique_id": "macro.dbt_profiler.print_profile_docs", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/print_profile_docs.sql", "original_file_path": "macros/print_profile_docs.sql", "name": "print_profile_docs", "macro_sql": "{% macro print_profile_docs(relation=none, relation_name=none, docs_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none) %}\n\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns) -%}\n\n{% if docs_name is none %}\n  {% set docs_name = 'dbt_profiler__' + relation_name %}\n{% endif %}\n\n{% if execute %}\n  {{ log('{% docs ' + docs_name + '  %}', info=True) }}\n  {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n  {{ log('{% enddocs %}', info=True) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.7948172}, "macro.dbt_profiler.get_relation": {"unique_id": "macro.dbt_profiler.get_relation", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "name": "get_relation", "macro_sql": "{% macro get_relation(relation=none, relation_name=none, schema=none, database=none) %}\n\n{% if relation is none and relation_name is none %}\n  {{ exceptions.raise_compiler_error(\"Either relation or relation_name must be specified.\") }}\n{% endif %}\n\n{% if relation is none %}\n  {% if schema is none %}\n    {% set schema = target.schema %}\n  {% endif %}\n\n  {% if database is none %}\n    {% set database = target.database %}\n  {% endif %}\n\n  {{ log(\"Get relation %s (database=%s, schema=%s)\" | format(adapter.quote(relation_name), adapter.quote(database), adapter.quote(schema)), info=False) }}\n\n  {%- \n  set relation = adapter.get_relation(\n    database=database,\n    schema=schema,\n    identifier=relation_name\n  ) \n  -%}\n  {% if relation is none %}\n    {{ exceptions.raise_compiler_error(\"Relation \" ~ adapter.quote(relation_name) ~ \" does not exist or not authorized.\") }}\n  {% endif %}\n{% endif %}\n\n{% do return(relation) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8078353}, "macro.dbt_profiler.assert_relation_exists": {"unique_id": "macro.dbt_profiler.assert_relation_exists", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "name": "assert_relation_exists", "macro_sql": "{% macro assert_relation_exists(relation) %}\n\n{% do run_query(\"select * from \" ~ relation ~ \" limit 0\") %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8085117}, "macro.dbt_profiler.print_profile": {"unique_id": "macro.dbt_profiler.print_profile", "package_name": "dbt_profiler", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_profiler", "path": "macros/print_profile.sql", "original_file_path": "macros/print_profile.sql", "name": "print_profile", "macro_sql": "{% macro print_profile(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none) %}\n\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns) -%}\n\n{% if execute %}\n  {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8119245}, "macro.ga4.unnest_key": {"unique_id": "macro.ga4.unnest_key", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "macros/unnest_key.sql", "original_file_path": "macros/unnest_key.sql", "name": "unnest_key", "macro_sql": "\n\n{%- macro unnest_key(column_to_unnest, key_to_extract, value_type = \"string_value\", rename_column = \"default\") -%}\n\n(select value.{{value_type}} from unnest({{column_to_unnest}}) where key = '{{key_to_extract}}') as \n\n    {% if  rename_column == \"default\" -%}\n    {{ key_to_extract }}\n    {%- else -%}\n    {{rename_column}}\n    {%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.814009}, "macro.ga4.stage_custom_parameters": {"unique_id": "macro.ga4.stage_custom_parameters", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "macros/stage_custom_parameters.sql", "original_file_path": "macros/stage_custom_parameters.sql", "name": "stage_custom_parameters", "macro_sql": "{% macro stage_custom_parameters(custom_parameters ) %}\n    {% for cp in custom_parameters %}\n        ,{{ ga4.unnest_key('event_params',  cp.name ,  cp.value_type ) }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.ga4.unnest_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8278627}, "macro.ga4.default_channel_grouping": {"unique_id": "macro.ga4.default_channel_grouping", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "macros/default_channel_grouping.sql", "original_file_path": "macros/default_channel_grouping.sql", "name": "default_channel_grouping", "macro_sql": "{% macro default_channel_grouping(source, medium, source_category) %}\n\ncase \n  when {{source}} is null and {{medium}} is null \n    then 'Direct'\n  when {{source}} = '(direct)'\n    and ({{medium}} = '(none)' or {{medium}} = '(not set)')\n    then 'Direct'\n\n  when REGEXP_CONTAINS({{source}}, r\"^(facebook|instagram|pinterest|reddit|twitter|linkedin)\") = true\n    and REGEXP_CONTAINS({{medium}}, r\"^(cpc|ppc|paid)\") = true\n    then 'Paid Social'\n  when REGEXP_CONTAINS({{source}}, r\"^(facebook|instagram|pinterest|reddit|twitter|linkedin)\") = true\n    or REGEXP_CONTAINS({{medium}}, r\"^(social|social-network|social-media|sm|social network|social media)\") = true\n    or {{source_category}} = 'SOURCE_CATEGORY_SOCIAL' \n    then 'Organic Social'\n  when REGEXP_CONTAINS({{medium}}, r\"email|e-mail|e_mail|e mail\") = true\n    or REGEXP_CONTAINS({{source}}, r\"email|e-mail|e_mail|e mail\") = true\n    then 'Email'\n  when REGEXP_CONTAINS({{medium}}, r\"affiliate|affiliates\") = true\n    then 'Affiliates'\n  when {{medium}} = 'referral'\n    then 'Referral'\n  when {{source_category}} = 'SOURCE_CATEGORY_SHOPPING' and REGEXP_CONTAINS({{medium}},r\"^(.*cp.*|ppc|paid.*)$\")\n    then 'Paid Shopping'\n  when REGEXP_CONTAINS({{medium}}, r\"^(cpc|ppc|paidsearch)$\")\n    then 'Paid Search'\n  when REGEXP_CONTAINS({{medium}}, r\"^(display|cpm|banner)$\")\n    then 'Display'\n  when REGEXP_CONTAINS({{medium}}, r\"^(cpv|cpa|cpp|content-text)$\")\n    then 'Other Advertising'\n  when {{medium}} = 'organic' or {{source_category}} = 'SOURCE_CATEGORY_SEARCH'\n    then 'Organic Search'\n  when REGEXP_CONTAINS({{medium}}, r\"^(.*video.*)$\") or {{source_category}} = 'SOURCE_CATEGORY_VIDEO'\n    then 'Organic Video'\n  when {{source_category}} = 'SOURCE_CATEGORY_SHOPPING'\n    then 'Organic Shopping'\n  when {{medium}} = 'audio'\n    then 'Audio'\n  when {{medium}} = 'sms'\n    then 'SMS'\n  else '(Other)' \nend \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8354847}, "macro.ga4.extract_hostname_from_url": {"unique_id": "macro.ga4.extract_hostname_from_url", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "macros/url_parsing.sql", "original_file_path": "macros/url_parsing.sql", "name": "extract_hostname_from_url", "macro_sql": "{% macro extract_hostname_from_url(url) %}\n    REGEXP_EXTRACT({{ url }}, '(?:http[s]?://)?(?:www\\\\.)?(.*?)(?:(?:/|:)(?:.)*|$)')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8367388}, "macro.ga4.extract_query_string_from_url": {"unique_id": "macro.ga4.extract_query_string_from_url", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "macros/url_parsing.sql", "original_file_path": "macros/url_parsing.sql", "name": "extract_query_string_from_url", "macro_sql": "{% macro extract_query_string_from_url(url) %}\n    REGEXP_EXTRACT({{ url }}, '\\\\?(.+)')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8371334}, "macro.ga4.remove_query_parameters": {"unique_id": "macro.ga4.remove_query_parameters", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "macros/url_parsing.sql", "original_file_path": "macros/url_parsing.sql", "name": "remove_query_parameters", "macro_sql": "{% macro remove_query_parameters(url, parameters)%}\nREGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE({{url}}, '(\\\\?|&)({{ parameters|join(\"|\") }})=[^&]*', '\\\\1'), '\\\\?&+', '?'), '&+', '&'), '\\\\?$|&$', '')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.83777}, "macro.ga4.unpack_struct": {"unique_id": "macro.ga4.unpack_struct", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "macros/unpack_struct.sql", "original_file_path": "macros/unpack_struct.sql", "name": "unpack_struct", "macro_sql": "{%- macro unpack_struct(column_to_unpack, fields) -%}\n{% for field in fields %}\n{{column_to_unpack}}.{{field}} as {{column_to_unpack}}_{{field}} {% if not loop.last %},{% endif %}\n{% endfor %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8476565}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8495467}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8500636}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8507395}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8512802}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8547132}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8566022}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8568609}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8570983}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.857361}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8576038}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8581328}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8597338}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.860404}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8610644}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8620222}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8634152}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8638163}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8641965}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8645678}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.866046}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8663552}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8666158}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8668907}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8674655}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8677518}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8680253}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8682826}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8818038}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.8838956}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.885716}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9035206}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9067695}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9077535}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9097319}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9111555}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9115307}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9148593}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9171898}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9258888}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.939483}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.944713}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.949087}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9516869}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9652088}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9677906}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.971671}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9737027}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9845371}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_utils.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.987368}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9909093}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750842.9925916}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0048687}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0065494}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0082107}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.016249}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0173025}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.019136}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.024049}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0290952}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.033727}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0360036}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0404391}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0462017}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0478382}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.049181}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0544467}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0572808}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0631146}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.065208}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0680027}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0717425}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0739467}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.077464}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0796008}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0818923}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0846887}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0865436}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0905044}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0934966}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0965328}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.097628}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.0993545}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1044698}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.108375}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.109632}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1115818}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1146445}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1166973}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.129861}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1403005}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.141991}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1458519}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1511517}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1538436}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1572018}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1602085}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1631732}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1657746}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1686103}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.171793}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1750658}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.17774}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1814013}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1844487}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.187372}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1916897}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.193431}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.1965487}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.199723}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2023683}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2040904}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2059326}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2075636}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2088768}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2106404}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2126937}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2139146}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.214679}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2168107}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2181444}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2187748}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.219987}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2206178}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.22221}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.224473}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2267811}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2295277}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.235}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2419045}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.244583}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2466063}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2474341}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.248731}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2523446}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.253372}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2558866}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2590406}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2621639}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.263704}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.264419}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2662902}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.268427}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.271811}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2734308}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2750835}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2770236}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2780743}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.280864}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2847593}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.286569}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2881646}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.292008}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.2976213}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.299669}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3000004}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.300313}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3006275}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3089116}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3207176}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3222756}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3232079}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.325901}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3297927}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3322232}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.336558}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3380167}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3394992}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3511}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3521438}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3548794}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.356763}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3660104}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.369235}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.377805}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3832443}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.384047}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3847659}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3853781}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3860357}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.388289}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3891833}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3904243}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3910697}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.3986757}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4004638}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4013789}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.404679}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4062145}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.411456}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4120004}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4125907}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4131658}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.420692}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4213202}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4221582}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4234514}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4247708}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4261236}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.436331}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4370022}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4376552}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4382179}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4401772}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4406786}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4414346}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4419177}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.443924}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4445415}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.449218}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.45077}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4511588}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.451551}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4549172}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4553263}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.455704}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4560802}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4576411}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4581356}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4586542}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4600084}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4605405}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4610167}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.473516}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4741342}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4747965}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4813328}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4820752}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4883072}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4887395}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.489015}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4892805}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4898694}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.490554}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4910958}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.491507}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4920034}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.4941301}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5026731}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5030737}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5054412}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5060782}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.506733}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5073373}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5080535}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5100935}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5123649}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5133402}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5211627}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5230544}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5237172}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.526491}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.526776}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5270386}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.527301}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5275686}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5281568}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.52846}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.528747}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5290287}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.529631}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5299075}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5365431}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.537219}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5375044}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5377746}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.538392}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5386705}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.53895}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5395248}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5398037}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5400639}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5415423}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.542097}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5425434}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.544208}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.544708}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5452008}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5494497}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5598252}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5616148}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.56237}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5657578}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5689378}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.569332}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5697112}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5710192}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5714877}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5730307}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5735428}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5740502}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5796685}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5907664}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5926483}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5937102}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.5951707}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.602806}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6046436}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6051652}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6058722}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.615035}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6165178}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6168413}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6171231}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6192381}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6200933}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6206152}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6211066}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6215951}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6376061}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6435335}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6446347}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6463451}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.669833}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6717987}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6725323}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.674452}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6757476}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6782374}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6807613}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6872232}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6894917}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6915019}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6925986}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6944563}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.6950946}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7015696}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7028725}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7154772}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.721796}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7236898}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7242534}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7260146}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7267988}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7287898}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7306318}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7319293}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7325666}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7339954}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7356284}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.737275}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7391427}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.741801}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7451332}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7473383}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7485833}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.750681}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7521353}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.776508}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.7907925}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8002062}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8041317}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.806945}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8094354}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.811624}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8123932}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.81315}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.813925}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8147693}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8170135}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8176012}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.818714}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8196964}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8209603}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8221176}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8231263}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8249211}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.825617}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.826167}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8318634}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8329802}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8348682}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8359485}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8375242}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8389614}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.840289}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8415406}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8430355}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8471115}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8480968}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.849071}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8508437}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8523316}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8540697}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8563619}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.857096}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8576267}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8581212}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.858713}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8601165}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8606515}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.861176}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8624735}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8636043}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.865233}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8663518}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8680706}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.869905}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8711982}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8722582}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8729541}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.874821}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8753679}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8759062}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8766017}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8789666}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8797398}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8805134}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8812535}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8820074}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8918703}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8929565}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.894656}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8967314}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8973534}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8978987}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8984728}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.8990204}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9012117}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9020135}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.902582}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9031155}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9041994}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9052427}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9107645}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9113197}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9118621}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9122732}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.914361}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.914919}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9156814}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9164176}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9248102}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.926125}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9268687}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9274998}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9287558}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9294782}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9349666}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9512758}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9537401}, "macro.codegen.get_tables_in_schema": {"unique_id": "macro.codegen.get_tables_in_schema", "package_name": "codegen", "root_path": "/tmp/jobs/83484262/target/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.9852}, "macro.codegen.generate_source": {"unique_id": "macro.codegen.generate_source", "package_name": "codegen", "root_path": "/tmp/jobs/83484262/target/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='', name=schema_name, table_names=None) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750843.994344}, "macro.codegen.generate_column_yaml": {"unique_id": "macro.codegen.generate_column_yaml", "package_name": "codegen", "root_path": "/tmp/jobs/83484262/target/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, parent_column_name=\"\") %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0009513}, "macro.codegen.generate_model_yaml": {"unique_id": "macro.codegen.generate_model_yaml", "package_name": "codegen", "root_path": "/tmp/jobs/83484262/target/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name, upstream_descriptions=False) %}\n\n{% set model_yaml=[] %}\n{% set column_desc_dict =  codegen.build_dict_column_descriptions(model_name) if upstream_descriptions else {} %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    description: \"\"') %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict) %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0052307}, "macro.codegen.generate_base_model": {"unique_id": "macro.codegen.generate_base_model", "package_name": "codegen", "root_path": "/tmp/jobs/83484262/target/dbt_packages/codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "name": "generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0160308}, "macro.codegen.get_model_dependencies": {"unique_id": "macro.codegen.get_model_dependencies", "package_name": "codegen", "root_path": "/tmp/jobs/83484262/target/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0272686}, "macro.codegen.add_model_column_descriptions_to_dict": {"unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "package_name": "codegen", "root_path": "/tmp/jobs/83484262/target/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0291243}, "macro.codegen.build_dict_column_descriptions": {"unique_id": "macro.codegen.build_dict_column_descriptions", "package_name": "codegen", "root_path": "/tmp/jobs/83484262/target/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.034866}, "macro.dbt_meta_testing.fetch_configured_models": {"unique_id": "macro.dbt_meta_testing.fetch_configured_models", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/fetch_configured_models.sql", "original_file_path": "macros/fetch_configured_models.sql", "name": "fetch_configured_models", "macro_sql": "{% macro fetch_configured_models(meta_config, models=none, resource_type=\"model\") %}\n\t{{ return(adapter.dispatch(\"fetch_configured_models\", \"dbt_meta_testing\")(meta_config, models, resource_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__fetch_configured_models"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.040622}, "macro.dbt_meta_testing.default__fetch_configured_models": {"unique_id": "macro.dbt_meta_testing.default__fetch_configured_models", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/fetch_configured_models.sql", "original_file_path": "macros/fetch_configured_models.sql", "name": "default__fetch_configured_models", "macro_sql": "{% macro default__fetch_configured_models(meta_config, models, resource_type) %}\n\n    {% set configured_models = [] %}\n\n    {{ dbt_meta_testing.logger(\"var `models` is: \" ~ models) }}\n\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", resource_type) %}\n\n        {% if meta_config in node.config.keys() %}\n\n            {% do configured_models.append(node) %}\n\n        {% endif %}\n\n    {% endfor %}\n\n    /* \n    If arg `models` is provided, filter fetched models to only those\n    provided, either in space delimited string or via `dbt list -m <selection_syntax>`.\n\n    See documentation here for more details: https://github.com/tnightengale/quality-assurance-dbt.\n    */\n    {% if models is not none and resource_type == \"model\" %}\n\n        {% set filtered_models_list = [] %}\n        {% set final_models_list = [] %}\n        {% set models_list = models.split(\" \") %}\n\n        {{ dbt_meta_testing.logger(\"Building `filtered_models_list`:\") }}\n        {% for m in models_list %}\n\n            /* \n            Assumes \".\" delimited string is output from `dbt list` and the last\n            delimitee is the model name, eg. dbt_meta_testing.example.model_1\n            */\n            {% if \".\" in m %} {% set m = m.split(\".\")[-1] %} {% endif %}\n\n            {% do filtered_models_list.append(m) %}\n            {{ dbt_meta_testing.logger(\"Appended to `filtered_models_list`: \" ~ m) }}\n\n        {% endfor %}\n\n        {{ dbt_meta_testing.logger(\"`filtered_models_list` is: \" ~ filtered_models_list) }}\n        {% for m in configured_models %}\n\n\n            {{ dbt_meta_testing.logger(\"`filtered_models_loop: \" ~ loop.index ~ \" \" ~ m.name in filtered_models_list)}}\n            {% if m.name in filtered_models_list %}\n\n                {% do final_models_list.append(m) %}\n                {{ dbt_meta_testing.logger(\"m is: \" ~ m) }}\n            \n            {% endif %}\n\n        {% endfor %}\n    \n    {% else %}\n\n        {{ dbt_meta_testing.logger(\"else in fetch models triggered, configured is: \" ~ configured_models) }}\n        {% set final_models_list = configured_models %}\n\n    {% endif %}\n\n    {{ dbt_meta_testing.logger(\"`final_models_list` is: \" ~ final_models_list) }}\n    {{ return(final_models_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.logger"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0534873}, "macro.dbt_meta_testing.logger": {"unique_id": "macro.dbt_meta_testing.logger", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/logger.sql", "original_file_path": "macros/logger.sql", "name": "logger", "macro_sql": "{% macro logger(log_message, log_level=\"DEBUG\", format='%H:%M:%S') %}\n\t{{ return(adapter.dispatch(\"logger\", \"dbt_meta_testing\")(log_message, log_level=\"DEBUG\", format='%H:%M:%S')) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__logger"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.056355}, "macro.dbt_meta_testing.default__logger": {"unique_id": "macro.dbt_meta_testing.default__logger", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/logger.sql", "original_file_path": "macros/logger.sql", "name": "default__logger", "macro_sql": "{% macro default__logger(log_message, log_level=\"DEBUG\", format='%H:%M:%S') %}\n\n    {% set log_levels = {\n        \"DEBUG\": 0,\n        \"INFO\": 1,\n        \"WARNING\": 2,\n        \"ERROR\": 3,\n        \"CRITICAL\": 4\n    } %}\n\n    {% set setting_level = var(\"logging_level\", \"INFO\") %}\n\n    {% if not log_level in log_levels.keys() %}\n        {% set formatted_keys = log_levels.keys() | list | join(',') %}\n        {{ \n            exceptions.raise_compiler_error(\n                \"Invalid logging level. Got '\" ~ level ~ \"'. Require one of: '\" \n                ~ formatted_keys ~ \"'\") \n        }}\n    {% endif %}\n    \n    {% set log_bool = log_levels[log_level] >= log_levels[setting_level] %}\n    {{ log(modules.datetime.datetime.now() ~ ' ' ~ log_level ~ ':' ~ this ~ ':' ~ log_message, info=log_bool) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0598786}, "macro.dbt_meta_testing.required_docs": {"unique_id": "macro.dbt_meta_testing.required_docs", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/required_docs.sql", "original_file_path": "macros/required_docs.sql", "name": "required_docs", "macro_sql": "{% macro required_docs(models=none) %}\n\t{{ return(adapter.dispatch(\"required_docs\", \"dbt_meta_testing\")(models))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__required_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0625992}, "macro.dbt_meta_testing.default__required_docs": {"unique_id": "macro.dbt_meta_testing.default__required_docs", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/required_docs.sql", "original_file_path": "macros/required_docs.sql", "name": "default__required_docs", "macro_sql": "{% macro default__required_docs(models) %}\n\n    -- Start\n    {% set start_msg = \"Checking `required_docs` config...\" %}\n    {% if not var(\"running_intergration_tests\", false) is true %}{{ log(start_msg, info=true) }}{% endif %}\n\n    -- Fetch models based on config and `models` var\n    {% set filtered_models = dbt_meta_testing.fetch_configured_models('required_docs', models) %}\n\n    -- Validate configuration\n    {% set any_error = dbt_meta_testing.validate_required_docs(filtered_models) %}\n    {% if any_error is not none %}\n\n        {% set result = dbt_meta_testing.format_raise_error(any_error) %}\n        \n    {% endif %}\n\n    -- Evaluate configuration\n    {% set any_error = dbt_meta_testing.evaluate_required_docs(filtered_models) %}\n    {% if any_error is not none %}\n        \n        {% set result = dbt_meta_testing.format_raise_error(any_error) %}\n\n    {% else %}\n\n        {% set result = \"Success: `required_docs` passed.\" %}\n        {% if not var(\"running_intergration_tests\", false) is true %}{{ log(result, info=true) }}{% endif %}\n\n    {% endif %}\n\n    {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.fetch_configured_models", "macro.dbt_meta_testing.validate_required_docs", "macro.dbt_meta_testing.format_raise_error", "macro.dbt_meta_testing.evaluate_required_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0663235}, "macro.dbt_meta_testing.required_tests": {"unique_id": "macro.dbt_meta_testing.required_tests", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/required_tests.sql", "original_file_path": "macros/required_tests.sql", "name": "required_tests", "macro_sql": "{% macro required_tests(models=none) %}\n\t{{ return(adapter.dispatch(\"required_tests\", \"dbt_meta_testing\")(models)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__required_tests"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0689313}, "macro.dbt_meta_testing.default__required_tests": {"unique_id": "macro.dbt_meta_testing.default__required_tests", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/required_tests.sql", "original_file_path": "macros/required_tests.sql", "name": "default__required_tests", "macro_sql": "{% macro default__required_tests(models) %}\n\n    -- Start\n    {% set start_msg = \"Checking `required_tests` config...\" %}\n    {% if not var(\"running_intergration_tests\", false) is true %}{{ log(start_msg, info=true) }}{% endif %}\n\n    -- Fetch models based on config and `models` var\n    {% set filtered_models = dbt_meta_testing.fetch_configured_models('required_tests', models) %}\n\n    -- Validate configuration\n    {% set any_error = dbt_meta_testing.validate_required_tests(filtered_models) %}\n    {% if any_error is not none %}\n    \n        {{ return(dbt_meta_testing.format_raise_error(any_error)) }}\n        \n    {% endif %}\n\n    -- Evaluate configuration\n    {% set any_error = dbt_meta_testing.evaluate_required_tests(filtered_models) %}\n    {% if any_error is not none %}\n\n        {% set result = dbt_meta_testing.format_raise_error(any_error) %}\n\n    {% else %}\n\n        {% set result = \"Success. `required_tests` passed.\" %}\n        {% if not var(\"running_intergration_tests\", false) is true %}{{ log(result, info=true) }}{% endif %}\n\n    {% endif %}\n\n    {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.fetch_configured_models", "macro.dbt_meta_testing.validate_required_tests", "macro.dbt_meta_testing.format_raise_error", "macro.dbt_meta_testing.evaluate_required_tests"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0768938}, "macro.dbt_meta_testing._get_meta_test_namespaces": {"unique_id": "macro.dbt_meta_testing._get_meta_test_namespaces", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/_get_meta_tests_namespace.sql", "original_file_path": "macros/utils/_get_meta_tests_namespace.sql", "name": "_get_meta_test_namespaces", "macro_sql": "{% macro _get_meta_test_namespaces() %}\n  {% set override_namespaces = var('dbt_meta_test_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_meta_testing']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0787582}, "macro.dbt_meta_testing.validate_required_docs": {"unique_id": "macro.dbt_meta_testing.validate_required_docs", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/required_docs/validate_required_docs.sql", "original_file_path": "macros/utils/required_docs/validate_required_docs.sql", "name": "validate_required_docs", "macro_sql": "{% macro validate_required_docs(models_to_validate) %}\n\t{{ return(adapter.dispatch(\"validate_required_docs\", \"dbt_meta_testing\")(models_to_validate))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__validate_required_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.080388}, "macro.dbt_meta_testing.default__validate_required_docs": {"unique_id": "macro.dbt_meta_testing.default__validate_required_docs", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/required_docs/validate_required_docs.sql", "original_file_path": "macros/utils/required_docs/validate_required_docs.sql", "name": "default__validate_required_docs", "macro_sql": "{% macro default__validate_required_docs(models_to_validate) %}\n\n    {# /*\n    Validate that all +required_docs configs are bool.\n    */ #}\n\n    {{ dbt_meta_testing.logger('models to validate are ' ~ models_to_validate) }}\n\n    {% for model in models_to_validate %}\n\n        {% if not model.config.required_docs is boolean %}\n\n            {{ return(dbt_meta_testing.error_invalid_config_docs(config, model.name)) }}\n\n        {% endif %}\n\n    {% endfor %}\n\n    {{ return(none) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.logger", "macro.dbt_meta_testing.error_invalid_config_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.081958}, "macro.dbt_meta_testing.evaluate_required_docs": {"unique_id": "macro.dbt_meta_testing.evaluate_required_docs", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/required_docs/evaluate_required_docs.sql", "original_file_path": "macros/utils/required_docs/evaluate_required_docs.sql", "name": "evaluate_required_docs", "macro_sql": "{% macro evaluate_required_docs(models_to_evaluate) %}\n\t{{ return(adapter.dispatch(\"evaluate_required_docs\", \"dbt_meta_testing\")(models_to_evaluate))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__evaluate_required_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0867445}, "macro.dbt_meta_testing.default__evaluate_required_docs": {"unique_id": "macro.dbt_meta_testing.default__evaluate_required_docs", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/required_docs/evaluate_required_docs.sql", "original_file_path": "macros/utils/required_docs/evaluate_required_docs.sql", "name": "default__evaluate_required_docs", "macro_sql": "{% macro default__evaluate_required_docs(models_to_evaluate) %}\n\n    {# /*\n    Evaluate if each model meets +required_docs config.\n    */ #}\n\n    {% set missing_model_errors = [] %}\n    {% set missing_columns_errors = [] %}\n    {% set missing_description_errors = [] %}\n\n    {% for model in models_to_evaluate %}\n\n        {% if model.config.required_docs==True and model.config.get(\"materialized\", \"\") not in (\"\", \"ephemeral\")%}\n            \n            {% set model_columns = adapter.get_columns_in_relation(ref(model.package_name, model.name)) \n                | map(attribute=\"column\") | list %}\n            {{ dbt_meta_testing.logger(model_columns | map(attribute=\"column\") | list) }}\n\n            {% if model.description == \"\" %}\n\n                {% do missing_model_errors.append(model.name) %}\n\n            {% endif %}\n\n            {% for column in model_columns %}\n\n                {% set column = column | lower %}\n\n                {% if column in model.columns.keys() %}\n\n                    {{ dbt_meta_testing.logger(column ~ \" is in \" ~ model.columns.keys()) }}\n                    {% if model.columns[column].description == \"\" %}\n\n                        {% do missing_description_errors.append((model.name, column)) %}\n\n                    {% endif %}\n                \n                {% else %}\n\n                    {% do missing_columns_errors.append((model.name, column)) %}\n\n                {% endif %}\n\n            {% endfor %}\n        \n        {% endif %}\n\n    {% endfor %}\n\n    {% set errors = missing_model_errors + missing_columns_errors + missing_description_errors %}\n    {% if errors | length > 0 %}\n\n        {{ dbt_meta_testing.logger(missing_model_errors) }}\n        {{ dbt_meta_testing.logger(missing_columns_errors) }}\n        {{ dbt_meta_testing.logger(missing_description_errors) }}\n\n        {% set result = dbt_meta_testing.error_required_docs(\n            missing_model_errors, \n            missing_columns_errors, \n            missing_description_errors\n            )\n        %}\n\n    {% else %}\n\n        {% set result = none %}\n\n    {% endif %}\n\n    {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.logger", "macro.dbt_meta_testing.error_required_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0936291}, "macro.dbt_meta_testing.evaluate_required_tests": {"unique_id": "macro.dbt_meta_testing.evaluate_required_tests", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/required_tests/evaluate_required_tests.sql", "original_file_path": "macros/utils/required_tests/evaluate_required_tests.sql", "name": "evaluate_required_tests", "macro_sql": "{% macro evaluate_required_tests(models_to_evaluate) %}\n\t{{ return(adapter.dispatch(\"evaluate_required_tests\", \"dbt_meta_testing\")(models_to_evaluate))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__evaluate_required_tests"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.0961962}, "macro.dbt_meta_testing.default__evaluate_required_tests": {"unique_id": "macro.dbt_meta_testing.default__evaluate_required_tests", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/required_tests/evaluate_required_tests.sql", "original_file_path": "macros/utils/required_tests/evaluate_required_tests.sql", "name": "default__evaluate_required_tests", "macro_sql": "{% macro default__evaluate_required_tests(models_to_evaluate) %}\n\n    {# /*\n    Evaluate if each model meets +required_tests minimum.\n    */ #}\n    \n    {% set tests_per_model = dbt_meta_testing.tests_per_model() %}\n    {% set test_errors = [] %}\n\n    {% for model in models_to_evaluate %}{% if model.config.required_tests is mapping %}\n        {% for test_key in model.config.required_tests.keys() %}\n\n            {% set provided_test_list = tests_per_model[model.unique_id] %}\n\n            {% set required_test_count = model.config.required_tests[test_key] %}\n            {% set matching_test_count = dbt_meta_testing.get_regex_match_count(provided_test_list, test_key) %}\n            \n            {% if matching_test_count < required_test_count %} \n                {% do test_errors.append((model.name, test_key, matching_test_count, required_test_count)) %}\n            {% endif %}\n            \n        {% endfor %}{% endif %}\n    {% endfor %}\n\n\n    {% if test_errors | length > 0 %}\n        {% set result = dbt_meta_testing.error_required_tests(test_errors) %}\n    {% else %}\n        {% set result = none %}\n    {% endif %}\n\n    {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.tests_per_model", "macro.dbt_meta_testing.get_regex_match_count", "macro.dbt_meta_testing.error_required_tests"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1002164}, "macro.dbt_meta_testing.get_regex_match_count": {"unique_id": "macro.dbt_meta_testing.get_regex_match_count", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/required_tests/get_regex_match_count.sql", "original_file_path": "macros/utils/required_tests/get_regex_match_count.sql", "name": "get_regex_match_count", "macro_sql": "{% macro get_regex_match_count(list_of_strings, regex_to_check) %}\n\t{{ return(adapter.dispatch(\"get_regex_match_count\", \"dbt_meta_testing\")(list_of_strings, regex_to_check))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__get_regex_match_count"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1019037}, "macro.dbt_meta_testing.default__get_regex_match_count": {"unique_id": "macro.dbt_meta_testing.default__get_regex_match_count", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/required_tests/get_regex_match_count.sql", "original_file_path": "macros/utils/required_tests/get_regex_match_count.sql", "name": "default__get_regex_match_count", "macro_sql": "{% macro default__get_regex_match_count(list_of_strings, regex_to_check) %}\n\n    {# Return count of strings in list_of_strings that match regex_to_check #}\n    {% set matches = [] %}\n    {% for string in list_of_strings %}\n        {% set match = modules.re.fullmatch(regex_to_check, string) %}\n        {% if match %}{% do matches.append(match) %}{% endif %}\n    {% endfor %}\n\n    {% do return(matches | length) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1036}, "macro.dbt_meta_testing.validate_required_tests": {"unique_id": "macro.dbt_meta_testing.validate_required_tests", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/required_tests/validate_required_tests.sql", "original_file_path": "macros/utils/required_tests/validate_required_tests.sql", "name": "validate_required_tests", "macro_sql": "{% macro validate_required_tests(models_to_validate) %}\n\t{{ return(adapter.dispatch(\"validate_required_tests\", \"dbt_meta_testing\")(models_to_validate))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__validate_required_tests"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1090567}, "macro.dbt_meta_testing.default__validate_required_tests": {"unique_id": "macro.dbt_meta_testing.default__validate_required_tests", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/required_tests/validate_required_tests.sql", "original_file_path": "macros/utils/required_tests/validate_required_tests.sql", "name": "default__validate_required_tests", "macro_sql": "{% macro default__validate_required_tests(models_to_validate) %}\n\n    {# /*\n    Validate that all +required_tests configs are either dict or None \n    and that all keys in a dict are defined tests.\n    */ #}\n\n    {{ dbt_meta_testing.logger('models to validate are ' ~ models_to_validate) }}\n\n    -- # TO DO: break out into function that asserts against a contract\n    -- Fetch unique tests from +required_tests config\n    {% set all_required_tests = [] %}\n\n    {% for model in models_to_validate %}\n\n        {% set config = model.config.required_tests %}\n\n        {{ dbt_meta_testing.logger('config is: ' ~ config) }}\n\n        -- Validate that config is dict or none\n        {% if config is mapping %}\n\n            {% for k in config.keys() %} \n\n                {% do all_required_tests.append(k) %}\n\n            {% endfor %}\n        \n        {% elif config is none %}\n            \n            -- Pass\n            {{ dbt_meta_testing.logger(\"model '\" ~ model.name ~ \"' has required_tests=null\") }}\n        \n        {% else %}\n\n            {{ return(dbt_meta_testing.errors_invalid_config_tests(config, model.name)) }}\n        \n        {% endif %}\n\n    {% endfor %}\n\n\n    {% set unique_required_tests = all_required_tests | unique | list %}\n\n    {{ dbt_meta_testing.logger('unique_required_tests: ' ~ unique_required_tests) }}\n\n\n    -- Fetch unique defined tests from graph\n    {% set unique_defined_tests = [] %}\n\n    {% for test_name in graph.nodes.values() \n        | selectattr(\"resource_type\", \"equalto\", \"test\")\n        | selectattr(\"test_metadata\", \"defined\")\n        | map(attribute=\"test_metadata\")\n        | map(attribute=\"name\") \n        | unique %}\n\n        {{ dbt_meta_testing.logger('test name ' ~ loop.index ~ ' ' ~ test_name) }}\n\n        {% do unique_defined_tests.append(test_name) %}\n\n    {% endfor %}\n\n    {{ return(none) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.logger", "macro.dbt_meta_testing.errors_invalid_config_tests"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1142657}, "macro.dbt_meta_testing.tests_per_model": {"unique_id": "macro.dbt_meta_testing.tests_per_model", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/required_tests/tests_per_model.sql", "original_file_path": "macros/utils/required_tests/tests_per_model.sql", "name": "tests_per_model", "macro_sql": "{% macro tests_per_model() %}\n\t{{ return(adapter.dispatch(\"tests_per_model\", \"dbt_meta_testing\")())}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__tests_per_model"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.119779}, "macro.dbt_meta_testing.default__tests_per_model": {"unique_id": "macro.dbt_meta_testing.default__tests_per_model", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/required_tests/tests_per_model.sql", "original_file_path": "macros/utils/required_tests/tests_per_model.sql", "name": "default__tests_per_model", "macro_sql": "{% macro default__tests_per_model() %}\n\n    {# /*\n    Construct a dict of all models and their schema tests in the current project.\n    */ #}\n\n    {% set enabled_model_names = dbt_meta_testing.fetch_configured_models(\"enabled\", resource_type=\"model\") | map(attribute=\"unique_id\") | list %}\n    {% set enabled_test_nodes = dbt_meta_testing.fetch_configured_models(\"enabled\", resource_type=\"test\") %}\n    \n    -- Create `result` dict with all enabled models unique_id's as keys and empty lists as values\n    {% set result = {} %}\n    {% for id in enabled_model_names %}{% do result.update({id: []}) %}{% endfor %}\n    \n    {% for test_node in enabled_test_nodes %}\n        {% for dependent_node in test_node.depends_on.nodes %}\n            {% if dependent_node.startswith('model.') %}\n                -- Use common names for schema tests, (e.g. \"unique\") under the \"test_metadata\" key\n                {% set test_identifier = test_node.get(\"test_metadata\",{}).get(\"name\") or test_node[\"name\"] %}\n                {% do result[dependent_node].append(test_identifier) %}\n            {% endif %}\n        {% endfor %}\n    {% endfor %}\n\n    {% do return(result) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.fetch_configured_models"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1231642}, "macro.dbt_meta_testing.error_required_docs": {"unique_id": "macro.dbt_meta_testing.error_required_docs", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/errors/error_required_docs.sql", "original_file_path": "macros/utils/errors/error_required_docs.sql", "name": "error_required_docs", "macro_sql": "{% macro error_required_docs(missing_model_errors, missing_columns_errors, missing_description_errors) %}\n\t{{ return(\n        adapter.dispatch(\"error_required_docs\", \n        \"dbt_meta_testing\")(\n            missing_model_errors, \n            missing_columns_errors, \n            missing_description_errors\n            )\n        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__error_required_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1254952}, "macro.dbt_meta_testing.default__error_required_docs": {"unique_id": "macro.dbt_meta_testing.default__error_required_docs", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/errors/error_required_docs.sql", "original_file_path": "macros/utils/errors/error_required_docs.sql", "name": "default__error_required_docs", "macro_sql": "{% macro default__error_required_docs(\n            missing_model_errors, \n            missing_columns_errors, \n            missing_description_errors\n            ) %}\n\n    {% set all_errors = [] %}\n    {% if missing_model_errors | length > 0 %}\n\n        {% do all_errors.append(\"The following models are missing descriptions:\") %}\n        {% do all_errors.append(dbt_meta_testing.format_error_docs(missing_model_errors)) %}{% endif %}\n\n    {% if missing_columns_errors | length > 0 %}\n\n        {% do all_errors.append(\"The following columns are missing from the model yml:\") %}\n        {% do all_errors.append(dbt_meta_testing.format_error_docs(missing_columns_errors)) %}{% endif %}\n\n    {% if missing_description_errors | length > 0 %}\n\n        {% do all_errors.append(\"The following columns are missing descriptions:\") %}\n        {% do all_errors.append(dbt_meta_testing.format_error_docs(missing_description_errors)) %}{% endif %}\n\n    {{ return(all_errors | join(\"\\n\")) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.format_error_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1284785}, "macro.dbt_meta_testing.error_required_tests": {"unique_id": "macro.dbt_meta_testing.error_required_tests", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/errors/error_required_tests.sql", "original_file_path": "macros/utils/errors/error_required_tests.sql", "name": "error_required_tests", "macro_sql": "{% macro error_required_tests() %}\n\t{{ return(adapter.dispatch(\"error_required_tests\", \"dbt_meta_testing\")(varargs))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__error_required_tests"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1298554}, "macro.dbt_meta_testing.default__error_required_tests": {"unique_id": "macro.dbt_meta_testing.default__error_required_tests", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/errors/error_required_tests.sql", "original_file_path": "macros/utils/errors/error_required_tests.sql", "name": "default__error_required_tests", "macro_sql": "{% macro default__error_required_tests(varargs) %}\n\n    {% set all_errors = [\"Insufficient test coverage from the 'required_tests' config on the following models:\"]\n        + dbt_meta_testing.format_error_tests(varargs[0]) %}\n        \n    {{ return(all_errors | join('\\n')) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.format_error_tests"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1308208}, "macro.dbt_meta_testing.error_invalid_config_docs": {"unique_id": "macro.dbt_meta_testing.error_invalid_config_docs", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/errors/error_invalid_config_docs.sql", "original_file_path": "macros/utils/errors/error_invalid_config_docs.sql", "name": "error_invalid_config_docs", "macro_sql": "{% macro error_invalid_config_docs() %}\n\t{{ return(adapter.dispatch(\"error_invalid_config_docs\", \"dbt_meta_testing\")(varargs))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__error_invalid_config_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1322875}, "macro.dbt_meta_testing.default__error_invalid_config_docs": {"unique_id": "macro.dbt_meta_testing.default__error_invalid_config_docs", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/errors/error_invalid_config_docs.sql", "original_file_path": "macros/utils/errors/error_invalid_config_docs.sql", "name": "default__error_invalid_config_docs", "macro_sql": "{% macro default__error_invalid_config_docs(varargs) %}\n   \n    {% set error %}\n    Invalid 'required_docs' configuration.  \n    Expected boolean. Received: '{{ varargs[0] }}'\n    on model '{{ varargs[1] }}'\n    {% endset %}\n\n    {{ return(error) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1332204}, "macro.dbt_meta_testing.errors_invalid_config_tests": {"unique_id": "macro.dbt_meta_testing.errors_invalid_config_tests", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/errors/error_invalid_config_tests.sql", "original_file_path": "macros/utils/errors/error_invalid_config_tests.sql", "name": "errors_invalid_config_tests", "macro_sql": "{% macro errors_invalid_config_tests() %}\n\t{{ return(adapter.dispatch(\"errors_invalid_config_tests\", \"dbt_meta_testing\")(varargs))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__errors_invalid_config_tests"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1346376}, "macro.dbt_meta_testing.default__errors_invalid_config_tests": {"unique_id": "macro.dbt_meta_testing.default__errors_invalid_config_tests", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/errors/error_invalid_config_tests.sql", "original_file_path": "macros/utils/errors/error_invalid_config_tests.sql", "name": "default__errors_invalid_config_tests", "macro_sql": "{% macro default__errors_invalid_config_tests(varargs) %}\n\n    {% set error %}\n    Invalid 'required_tests' configuration.\n    Expected dict or None. Received: '{{ varargs[0] }}'\n    on model '{{ varargs[1] }}'\n    {% endset %}\n\n    {{ return(error) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.13554}, "macro.dbt_meta_testing.format_error_docs": {"unique_id": "macro.dbt_meta_testing.format_error_docs", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/formatters/format_error_docs.sql", "original_file_path": "macros/utils/formatters/format_error_docs.sql", "name": "format_error_docs", "macro_sql": "{% macro format_error_docs(error_list) %}\n\t{{ return(adapter.dispatch(\"format_error_docs\", \"dbt_meta_testing\")(error_list))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__format_error_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1371927}, "macro.dbt_meta_testing.default__format_error_docs": {"unique_id": "macro.dbt_meta_testing.default__format_error_docs", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/formatters/format_error_docs.sql", "original_file_path": "macros/utils/formatters/format_error_docs.sql", "name": "default__format_error_docs", "macro_sql": "{% macro default__format_error_docs(error_list) %}\n\n{# /*\nFormats a list of either strings or tuples into a bulleted list for error output in error_required_docs.\n*/ #}\n\n    {% set output_list = [] %}\n\n    {% for obj in error_list %}\n\n        {% if obj is string %}\n\n            {% do output_list.append(\" - \" ~ obj) %}\n\n        {% elif obj is iterable %}\n\n            {% do output_list.append(\" - \" ~ obj[0] ~ \".\" ~ obj[1]) %}\n\n        {% else %}\n\n            {{ exceptions.raise_compiler_error(\"List elements must be string or tuple.\") }}\n\n        {% endif %}\n\n    {% endfor %}\n\n    {{ return(output_list | sort | join(\"\\n\")) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1396809}, "macro.dbt_meta_testing.format_raise_error": {"unique_id": "macro.dbt_meta_testing.format_raise_error", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/formatters/format_raise_error.sql", "original_file_path": "macros/utils/formatters/format_raise_error.sql", "name": "format_raise_error", "macro_sql": "{% macro format_raise_error(error_to_raise) %}\n\t{{ return(adapter.dispatch(\"format_raise_error\", \"dbt_meta_testing\")(error_to_raise))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__format_raise_error"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1410835}, "macro.dbt_meta_testing.default__format_raise_error": {"unique_id": "macro.dbt_meta_testing.default__format_raise_error", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/formatters/format_raise_error.sql", "original_file_path": "macros/utils/formatters/format_raise_error.sql", "name": "default__format_raise_error", "macro_sql": "{% macro default__format_raise_error(error_to_raise) %}\n\n    {% if var(\"running_intergration_tests\", false) is true %}\n\n        {{ return(error_to_raise) }}\n\n    {% else %}\n\n        {{ exceptions.raise_compiler_error(error_to_raise) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1420743}, "macro.dbt_meta_testing.format_error_tests": {"unique_id": "macro.dbt_meta_testing.format_error_tests", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/formatters/format_error_tests.sql", "original_file_path": "macros/utils/formatters/format_error_tests.sql", "name": "format_error_tests", "macro_sql": "{% macro format_error_tests(error_list) %}\n\t{{ return(adapter.dispatch(\"format_error_tests\", \"dbt_meta_testing\")(error_list))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_meta_testing.default__format_error_tests"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.1436965}, "macro.dbt_meta_testing.default__format_error_tests": {"unique_id": "macro.dbt_meta_testing.default__format_error_tests", "package_name": "dbt_meta_testing", "root_path": "/tmp/jobs/83484262/target/dbt_packages/dbt_meta_testing", "path": "macros/utils/formatters/format_error_tests.sql", "original_file_path": "macros/utils/formatters/format_error_tests.sql", "name": "default__format_error_tests", "macro_sql": "{% macro default__format_error_tests(error_list) %}\n\n{# /*\nFormats a list of tuples into a bulleted list for error output in error_required_tests.\n*/ #}\n\n    {% set output_list = [] %}\n\n    {% for obj in error_list %}\n\n        {% if obj is iterable %}\n\n            {% do output_list.append(\"- Model: '\" ~ obj[0] ~ \"' Test: '\" ~ obj[1] ~ \"' Got: \" ~ obj[2] ~ \" Expected: \"  ~ obj[3]) %}\n\n        {% else %}\n\n            {{ exceptions.raise_compiler_error(\"List elements must be ordered tuple of (model, test, required, provided).\") }}\n\n        {% endif %}\n\n    {% endfor %}\n\n    {{ return(output_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663750844.145733}}, "docs": {"sql_repository_bz.description_gsc_data": {"unique_id": "sql_repository_bz.description_gsc_data", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_search_console/_overview_gsc.md", "original_file_path": "models/01_staging/google_search_console/_overview_gsc.md", "name": "description_gsc_data", "block_contents": "### Description\r\n\r\nA daily cloud function that fetches all Google search console data for all properties, for the two search appearances web and image.\r\n\r\n### When does the job run and how?\r\n\r\n* The two [daily cloud scheduler jobs in the \"bergzeit\" project]https://console.cloud.google.com/cloudscheduler?project=bergzeit) triggers a cloud function to store all daily GSC Data to Cloud Storage.\r\n* The [gsc cloud function](https://console.cloud.google.com/functions/details/europe-west3/runGscDataSave?project=bergzeit&tab=source) takes one argument \"search_type\" to either fetch web or image data. \r\n* The scheduler jobs run daily from 5pm to 10m, every 30min, to reliably fetch all GSC for three days prior. There is no guarantee that the data will be available at 5pm, thus multiple runs are triggered to be safe.\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* The  dataframes are [directly written to Cloud Storage to the \"gsc_data_bz\" bucket](https://console.cloud.google.com/storage/browser/gsc_data_bz;tab=objects?forceOnBucketsSortingFiltering=false&project=bergzeit&prefix=&forceOnObjectsSortingFiltering=false) via the to_gbq method.\r\n* A [data transfer job](https://console.cloud.google.com/bigquery/transfers?project=bergzeit) fetches the two cloud storage csv files and loads them into a date-partitioned BQ table. \r\n\r\n### What type of table is it?\r\n\r\n[Native, date-partitioned table named \"query_site_report_by_page\"](https://console.cloud.google.com/bigquery?project=bergzeit&ws=!1m19!1m4!4m3!1sbergzeit!2sdbt_sea_analytics!3sgads_ads_for_url_check!1m3!8m2!1s266126070320!2s5fb42a821d61412cb497f41a99291ba7!1m4!4m3!1sbergzeit!2sdbt_analytics_staging!3sstg_awin_orders_all!1m4!4m3!1sbergzeit!2sgoogle_search_console!3squery_site_report_by_page&d=dbt_analytics_staging&p=bergzeit&t=stg_awin_orders_all&page=table).\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. A regular check is performed in the Bergzeit cloud function overview page and on the [Analytics Admin dashboard](https://datastudio.google.com/s/iUprJbY3B2Y), code execution failures are alerted via email and GCP App.\r\n\r\n### Who is the business stakeholder? \r\n\r\nDanny Zidaric\r\n\r\n### Which ticket does the feature refer to?\r\n\r\nThe latest update to the import pipeline was performed in [WEBA-719](https://bergzeit.atlassian.net/browse/WEBA-719)\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\n* Cloud function failure alerts in GCP\r\n* dbt datepart test, expecting the last three days to be missing, but complete coverage prior to that"}, "sql_repository_bz.description_source_consentless_ishop": {"unique_id": "sql_repository_bz.description_source_consentless_ishop", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/consentless/_overview_consentless.md", "original_file_path": "models/01_staging/consentless/_overview_consentless.md", "name": "description_source_consentless_ishop", "block_contents": "### Description\r\n\r\n...\r\n\r\n### When does the job run and how?\r\n\r\n* ...\r\n\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* ...\r\n* ...\r\n\r\n### What type of table is it?\r\n\r\n...\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. ...\r\n\r\n### Who is the business stakeholder? \r\n\r\n...\r\n\r\n### Which ticket does the feature refer to?\r\n\r\nWEBA-...\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\n..."}, "sql_repository_bz.description_awin_orders": {"unique_id": "sql_repository_bz.description_awin_orders", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/affiliate_awin/_overview_awin.md", "original_file_path": "models/01_staging/affiliate_awin/_overview_awin.md", "name": "description_awin_orders", "block_contents": "### Description\r\n\r\nA cloud function that fetches all Awin orders of the last 120 days via the API across all countries. \r\n\r\n### When does the job run and how?\r\n\r\n* The [daily cloud scheduler job in the \"adsdataprediction\" project](https://console.cloud.google.com/cloudscheduler/jobs/edit/europe-west1/get_awin_orders?project=adsdataprediction) triggers [a cloud function](https://console.cloud.google.com/functions/details/europe-west3/get_awin_orders?env=gen1&project=adsdataprediction) to store all Awin orders to Cloud Storage in one csv file per country.\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* The output dataframes are [directly written to BigQuery](https://console.cloud.google.com/bigquery?project=bergzeit&ws=!1m9!1m4!4m3!1sbergzeit!2sdbt_sea_analytics!3sgads_ads_for_url_check!1m3!3m2!1sadsdataprediction!2sawin&d=awin&p=adsdataprediction&page=dataset) via the to_gbq method.\r\n\r\n### What type of table is it?\r\n\r\nNative table, overwritten on every run.\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. A regular check is performed in the [cloud function overview page](https://console.cloud.google.com/functions/list?project=adsdataprediction) and on the [Analytics Admin dashboard](https://datastudio.google.com/s/iUprJbY3B2Y)\r\n\r\n### Who is the business stakeholder? \r\n\r\nEric Estel\r\n\r\n### Which ticket does the feature refer to?\r\n\r\n[WEBA-261](https://bergzeit.atlassian.net/browse/WEBA-261)\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\ndbt test coverage (see model yml) and Cloud function failure alerts"}, "sql_repository_bz.description_pagespeed_data": {"unique_id": "sql_repository_bz.description_pagespeed_data", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/google_pagespeed/_overview_pagespeed.md", "original_file_path": "models/01_staging/google_pagespeed/_overview_pagespeed.md", "name": "description_pagespeed_data", "block_contents": "### Description\r\n\r\nA cloud function that fetches Pagespeed API and Webvitals data for a sample of URLs across Bergzeit and select competitors.\r\n\r\n### When does the job run and how?\r\n\r\n* The [daily cloud scheduler job in the \"bergzeit\" project](https://console.cloud.google.com/cloudscheduler?authuser=0&orgonly=true&project=bergzeit&supportedpurview=organizationId,folder,project) to store API responses directly in BigQuery.\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* The output dataframes are [directly written to BigQuery (Dataset:seo_analytics, Table:pagespeed_api_metrics)](https://console.cloud.google.com/bigquery?project=bergzeit&ws=!1m5!1m4!4m3!1sbergzeit!2sseo_analytics!3spagespeed_api_metrics) via the pandas' to_gbq method.\r\n\r\n### What type of table is it?\r\n\r\nNative table, daily updates appended on every run.\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. A regular check is performed via the [cloud function excecution error dashboard](https://console.cloud.google.com/monitoring/dashboards/builder/5c7d78d3-6b1c-4469-be3d-3bb466940bcc?project=bergzeit&dashboardBuilderState=%257B%2522editModeEnabled%2522:false%257D&timeDomain=1m) and on the [Analytics Admin dashboard](https://datastudio.google.com/s/iUprJbY3B2Y)\r\n\r\n### Who is the business stakeholder? \r\n\r\nDanny Zidaric\r\n\r\n### Which ticket does the feature refer to?\r\n\r\n[WEBA-702](https://bergzeit.atlassian.net/browse/WEBA-702)\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\ndbt test coverage (see model yml) and Cloud function failure alerts"}, "sql_repository_bz.description_channel_pilot_source_feeds": {"unique_id": "sql_repository_bz.description_channel_pilot_source_feeds", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "01_staging/channelpilot_source/_overview_channel_pilot.md", "original_file_path": "models/01_staging/channelpilot_source/_overview_channel_pilot.md", "name": "description_channel_pilot_source_feeds", "block_contents": "### Description\r\n\r\nA scheduled Vertex AI Jupyter notebook that fetches all country feeds from the BZ rocks SFTP and writes to BigQuery.\r\n\r\n### When does the job run and how?\r\n\r\n* [A cron scheduled notebook machine](https://console.cloud.google.com/vertex-ai/workbench/list/managed?project=bergzeit) in the \"Bergzeit\" project executes Python code and loads the product feeds via the Pandas GBQ package\r\n\r\n### How does the data land in BigQuery?\r\n\r\n* The full output dataframes of all combined feeds are [written to BigQuery](https://console.cloud.google.com/bigquery?project=bergzeit&ws=!1m5!1m4!4m3!1sbergzeit!2sproduct_inventory!3schannelpilot_source_feeds_all) via the to_gbq method and fixed schema, which is freshly queried via the INFORMATION_SCHEMA.table service.\r\n\r\n### What type of table is it?\r\n\r\nNative table, overwritten on every run.\r\n\r\n### How oversees the data pipeline and how? \r\n\r\nChristopher Gutknecht. Notebook execution alerts are reported via Email, further dbt tests secure the data quality.\r\n\r\n### Who is the business stakeholder? \r\n\r\nEric Estel\r\n\r\n### Which ticket does the feature refer to?\r\n\r\n[WEBA-877](https://bergzeit.atlassian.net/browse/WEBA-877)\r\n\r\n### Which further test coverage and alerts exist beyond dbt?\r\n\r\ndbt test coverage (see model yml) and Notebook execution failure alerts"}, "sql_repository_bz.description_weather_avg_temp_to_monthly_avg": {"unique_id": "sql_repository_bz.description_weather_avg_temp_to_monthly_avg", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/weather_data/_overview_weather.md", "original_file_path": "models/03_marts/weather_data/_overview_weather.md", "name": "description_weather_avg_temp_to_monthly_avg", "block_contents": "### Description\r\n\r\nThis dashboard chart shows the average temperature per country and day, compared to the monthly average. \r\nThe goal is to show unusually warm and cold days, as they influence session and order value\r\n\r\n### What happens after dbt? Final data product and process from marts table\r\n\r\n* A data studio dashboard fetches the marts table as a data source: https://datastudio.google.com/s/o0wAtYRBrl0\r\n\r\n### How oversees the data product and how? \r\n\r\nChristopher Gutknecht. A set of daily data tests check the quality and freshness of data. \r\n\r\n### Is there a visual flow chart for the entire data pipeline\r\n\r\nNot necessary, it is only an exposed marts table.\r\n\r\n### Which branch and ticket does the feature refer to?\r\n\r\nWEBA-597\r\n\r\n### Which further test coverage exists beyond dbt?\r\n\r\nNone."}, "sql_repository_bz.description_link_checker": {"unique_id": "sql_repository_bz.description_link_checker", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/link_checker/_overview_sea_link_checker.md", "original_file_path": "models/03_marts/sea_analytics/link_checker/_overview_sea_link_checker.md", "name": "description_link_checker", "block_contents": "### Description\r\n\r\nCloud function to csv to Google Ads bulk upload to pause ads and ad groups with error statuses\r\n\r\n### What happens after dbt? Final data product and process from marts table\r\n\r\n* ...\r\n* ...\r\n\r\n### How oversees the data product and how? \r\n\r\nChristopher Gutknecht. ...\r\n\r\n### Is there a visual flow chart for the entire data pipeline\r\n\r\nConfluence ...\r\n\r\n### Which branch and ticket does the feature refer to?\r\n\r\nWEBA-...\r\n\r\n### Which further test coverage exists beyond dbt?\r\n\r\nAlerts on ..."}, "sql_repository_bz.description_gads_conversion_backfill": {"unique_id": "sql_repository_bz.description_gads_conversion_backfill", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/conversion_backfill/_overview_sea_conversion_backfill.md", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_overview_sea_conversion_backfill.md", "name": "description_gads_conversion_backfill", "block_contents": "### Description\r\n\r\nAll consentless transactions with a gclid that were not found in the GA transactions are pushed to Google Ads via daily conversion import\r\n\r\n### What happens after dbt? Final data product and process from marts table\r\n\r\n* A [pubsub subscription](https://console.cloud.google.com/cloudpubsub/topic/detail/run-dbt-job?project=bergzeit) waits for the GA daily session table to be updated \r\n* This triggers a [cloud function](https://console.cloud.google.com/functions/details/europe-west3/write_table_to_csv_conv_backfill?env=gen1&project=bergzeit) which creates the export csv file in Cloud Storage\r\n* The [cloud storage file](https://console.cloud.google.com/storage/browser/bz_all_conversion_import;tab=objects?forceOnBucketsSortingFiltering=false&project=adsdataprediction&prefix=&forceOnObjectsSortingFiltering=false) is fetched from a [Google Ads Import schedule](https://ads.google.com/aw/conversions/uploads?ocid=100612924&euid=104065204&__u=5886578196&uscid=100612924&__c=2650192476&authuser=0&subid=de-de-et-g-aw-c-home-awhp_xin1_signin%21o2-awhp-hv-01-22)\r\n* The result of imported conversions can be seen in the [Google Ads Conversion Import summary](https://ads.google.com/aw/conversions?ocid=100612924&euid=104065204&__u=5886578196&uscid=100612924&__c=2650192476&authuser=0&subid=de-de-et-g-aw-c-home-awhp_xin1_signin%21o2-awhp-hv-01-22)\r\n\r\n### How oversees the data product and how? \r\n\r\nChristopher Gutknecht. \r\n* The daily GA table update is monitored with a dbt job message in teams\r\n* The marts table has several data quality test that would alert to teams before the import runs \r\n\r\n### Is there a visual flow chart for the entire data pipeline\r\n\r\nSee the [Confluence flow chart](https://bergzeit.atlassian.net/wiki/spaces/IPIM/pages/4067721274/Google+Ads+Import+fehlender+Conversions) in MEAS\r\n\r\n### Which branch and ticket does the feature refer to?\r\n\r\n[MEAS-367](https://bergzeit.atlassian.net/browse/MEAS-367)\r\n\r\n### Which further test coverage exists beyond dbt?\r\n\r\nNo."}, "sql_repository_bz.description_sma_sho_refresher": {"unique_id": "sql_repository_bz.description_sma_sho_refresher", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/smart_shopping_refresher/description_sma_sho_refresher.md", "original_file_path": "models/03_marts/sea_analytics/smart_shopping_refresher/description_sma_sho_refresher.md", "name": "description_sma_sho_refresher", "block_contents": "### Description\r\n\r\nJSON file that stores the model output for use in a Google Ads script\r\n\r\n### What happens after dbt? Final data product and process from marts table\r\n\r\n* ...\r\n* ...\r\n\r\n### How oversees the data product and how? \r\n\r\nChristopher Gutknecht. ...\r\n\r\n### Is there a visual flow chart for the entire data pipeline\r\n\r\nConfluence ...\r\n\r\n### Which branch and ticket does the feature refer to?\r\n\r\nWEBA-...\r\n\r\n### Which further test coverage exists beyond dbt?\r\n\r\nAlerts on ..."}, "sql_repository_bz.description_sea_manufacturer_cost_by_brand": {"unique_id": "sql_repository_bz.description_sea_manufacturer_cost_by_brand", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/manufacturer_reports/_overview_sea_manufacturer_reports.md", "original_file_path": "models/03_marts/sea_analytics/manufacturer_reports/_overview_sea_manufacturer_reports.md", "name": "description_sea_manufacturer_cost_by_brand", "block_contents": "### Description\r\n\r\nData Studio data source of SEA manufacturer performance KPIs, including all Google Ads cost across shopping, DSA, SQA and search by brand\r\n    \r\n### What happens after dbt? Final data product and process from marts table\r\n\r\n* ...\r\n* ...\r\n\r\n### How oversees the data product and how? \r\n\r\nChristopher Gutknecht. ...\r\n\r\n### Is there a visual flow chart for the entire data pipeline\r\n\r\nConfluence ...\r\n\r\n### Which branch and ticket does the feature refer to?\r\n\r\nWEBA-...\r\n\r\n### Which further test coverage exists beyond dbt?\r\n\r\nAlerts on ..."}, "sql_repository_bz.description_awin_return_adjustment": {"unique_id": "sql_repository_bz.description_awin_return_adjustment", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/affiliate_awin/_overview_awin_return_adjustment.md", "original_file_path": "models/03_marts/affiliate_awin/_overview_awin_return_adjustment.md", "name": "description_awin_return_adjustment", "block_contents": "### Description\r\n\r\nThis cloud function updates all pending Awin sales with return and cancellation adjustments\r\n\r\n### What happens after dbt? Final data product and process from marts table\r\n\r\n* A daily cloud scheduler cron job per country triggers a cloud function to update the changed transactions to the Awin API \r\n* All update errors are stored back to Cloud Storage here. The csv file is currently overwritten every day. \r\n* This BigQuery table shows all upload errors across all countries\r\n* The list of current Awin countries can be found in the dbt_project.yml file\r\n\r\n### How oversees the data product and how? \r\n\r\nChristopher Gutknecht. A regular check of the scripts executions is performed to monitor the health of the full data product.\r\n\r\n### Is there a visual flow chart for the entire data pipeline\r\n\r\nConfluence tbd\r\n\r\n### Which branch and ticket does the feature refer to?\r\n\r\nWEBA-...\r\n\r\n### Which further test coverage exists beyond dbt?\r\n\r\nAlerts on cloud function and Google Ads scripts executions exist, sending emails to the main owner."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {"exposure.sql_repository_bz.Repurchase Forecast": {"fqn": ["sql_repository_bz", "03_marts", "zz_predictive_input", "Repurchase Forecast"], "unique_id": "exposure.sql_repository_bz.Repurchase Forecast", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/zz_predictive_input/_exposures_predictive.yml", "original_file_path": "models/03_marts/zz_predictive_input/_exposures_predictive.yml", "name": "Repurchase Forecast", "type": "ml", "owner": {"email": "stephanie.hubert@bergzeit.de", "name": "Stephanie Hubert"}, "resource_type": "exposure", "description": "ML models for repurchase prediction", "maturity": null, "meta": {}, "tags": [], "url": "https://console.cloud.google.com/bigquery?project=bergzeit&d=ml_models&p=bergzeit&page=dataset&ws=!1m4!1m3!3m2!1sbergzeit!2sml_models", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.pred_repurchase_model_input"]}, "refs": [["pred_repurchase_model_input"]], "sources": [], "created_at": 1663750853.2969465}, "exposure.sql_repository_bz.BZ OXID Revenue Daily": {"fqn": ["sql_repository_bz", "03_marts", "transaction", "BZ OXID Revenue Daily"], "unique_id": "exposure.sql_repository_bz.BZ OXID Revenue Daily", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/transaction/_exposures_transactions.yml", "original_file_path": "models/03_marts/transaction/_exposures_transactions.yml", "name": "BZ OXID Revenue Daily", "type": "application", "owner": {"email": "eric.estel@bergzeit.de", "name": "Eric Estel"}, "resource_type": "exposure", "description": "Soll ist performance report", "maturity": null, "meta": {}, "tags": [], "url": "https://docs.google.com/spreadsheets/d/1fNbE7c8GzJhqlPi13Qw1X4ZOH5j36WzRXtffsS3TMEY/edit?usp=sharing", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.transaction_order_value_daily_by_country"]}, "refs": [["transaction_order_value_daily_by_country"]], "sources": [], "created_at": 1663750853.3025656}, "exposure.sql_repository_bz.Bergzeit Management Report": {"fqn": ["sql_repository_bz", "03_marts", "transaction", "Bergzeit Management Report"], "unique_id": "exposure.sql_repository_bz.Bergzeit Management Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/transaction/_exposures_transactions.yml", "original_file_path": "models/03_marts/transaction/_exposures_transactions.yml", "name": "Bergzeit Management Report", "type": "dashboard", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "Management report with overarching kpis and shop performance metrics", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/s/ozPSg-xF6qA", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.transaction_ga_nav_attributes", "model.sql_repository_bz.onsite_cookie_consent_event_values", "model.sql_repository_bz.alerts_datadiff_consentless_ga_1d", "model.sql_repository_bz.onsite_ga_reco_performance", "model.sql_repository_bz.onsite_ga_list_page_events", "model.sql_repository_bz.stg_weather_dach_daily", "model.sql_repository_bz.weather_avg_temp_to_monthly_avg"]}, "refs": [["transaction_ga_nav_attributes"], ["onsite_cookie_consent_event_values"], ["alerts_datadiff_consentless_ga_1d"], ["onsite_ga_reco_performance"], ["onsite_ga_list_page_events"], ["stg_weather_dach_daily"], ["weather_avg_temp_to_monthly_avg"]], "sources": [], "created_at": 1663750853.3119078}, "exposure.sql_repository_bz.BZ Performance Soll Ist": {"fqn": ["sql_repository_bz", "03_marts", "transaction", "BZ Performance Soll Ist"], "unique_id": "exposure.sql_repository_bz.BZ Performance Soll Ist", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/transaction/_exposures_transactions.yml", "original_file_path": "models/03_marts/transaction/_exposures_transactions.yml", "name": "BZ Performance Soll Ist", "type": "application", "owner": {"email": "eric.estel@bergzeit.de", "name": "Eric Estel"}, "resource_type": "exposure", "description": "Bergzeit performance soll ist report for the current financial year", "maturity": null, "meta": {}, "tags": [], "url": "https://docs.google.com/spreadsheets/d/1OSEmLde7TR8L4pLtG_0LYMVVTLyl9HZYggSVo_P6Urs/edit#gid=879679338", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.transaction_value_consentless_soll_ist_report"]}, "refs": [["transaction_value_consentless_soll_ist_report"]], "sources": [], "created_at": 1663750853.3188932}, "exposure.sql_repository_bz.Affiliate Gutscheinexport": {"fqn": ["sql_repository_bz", "03_marts", "transaction", "Affiliate Gutscheinexport"], "unique_id": "exposure.sql_repository_bz.Affiliate Gutscheinexport", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/transaction/_exposures_transactions.yml", "original_file_path": "models/03_marts/transaction/_exposures_transactions.yml", "name": "Affiliate Gutscheinexport", "type": "application", "owner": {"email": "eric.estel@bergzeit.de", "name": "Eric Estel"}, "resource_type": "exposure", "description": "Google sheet that uses a dbt table via OWOX connector to extract specific voucher series", "maturity": null, "meta": {}, "tags": [], "url": "https://docs.google.com/spreadsheets/d/11cu4y0M_WixeD0H-Xy7N1_IKFyM_hK6cqtx9UVJFnu0", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.transaction_voucher_data"]}, "refs": [["transaction_voucher_data"]], "sources": [], "created_at": 1663750853.3252125}, "exposure.sql_repository_bz.Profit Bidding Upload CSV": {"fqn": ["sql_repository_bz", "03_marts", "profit_bidding", "Profit Bidding Upload CSV"], "unique_id": "exposure.sql_repository_bz.Profit Bidding Upload CSV", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/profit_bidding/_exposures_profit_bidding.yml", "original_file_path": "models/03_marts/profit_bidding/_exposures_profit_bidding.yml", "name": "Profit Bidding Upload CSV", "type": "application", "owner": {"email": "stephanie.hubert@bergzeit.de", "name": "Stephanie Hubert"}, "resource_type": "exposure", "description": "CSV-export to upload calculated profit bidding data for to Google Ads via conversion import", "maturity": null, "meta": {}, "tags": [], "url": "https://console.cloud.google.com/storage/browser?authuser=0&project=adsdataprediction", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.pb_full_working_query"]}, "refs": [["pb_full_working_query"]], "sources": [], "created_at": 1663750853.415027}, "exposure.sql_repository_bz.Shop_Filter Report": {"fqn": ["sql_repository_bz", "03_marts", "onsite", "Shop_Filter Report"], "unique_id": "exposure.sql_repository_bz.Shop_Filter Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/_exposures_onsite.yml", "original_file_path": "models/03_marts/onsite/_exposures_onsite.yml", "name": "Shop_Filter Report", "type": "dashboard", "owner": {"email": "ulrike.heidinger@bergzeit.de", "name": "Ulrike Heidinger"}, "resource_type": "exposure", "description": "Filter usage report", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_bigquery"], "url": "https://datastudio.google.com/u/0/reporting/963306ea-aceb-4b1b-84c2-12c750283bcc/page/BNhSC", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.onsite_ga_filter_usage"]}, "refs": [["onsite_ga_filter_usage"]], "sources": [], "created_at": 1663750853.4218097}, "exposure.sql_repository_bz.Shop_Page_Tracking_Check": {"fqn": ["sql_repository_bz", "03_marts", "onsite", "Shop_Page_Tracking_Check"], "unique_id": "exposure.sql_repository_bz.Shop_Page_Tracking_Check", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/_exposures_onsite.yml", "original_file_path": "models/03_marts/onsite/_exposures_onsite.yml", "name": "Shop_Page_Tracking_Check", "type": "dashboard", "owner": {"email": "ulrike.heidinger@bergzeit.de", "name": "Ulrike Heidinger"}, "resource_type": "exposure", "description": "Teaser report, including duplicate impressions", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_bigquery", "ga3_connector"], "url": "https://datastudio.google.com/s/qDodWIYtcHE", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all", "model.sql_repository_bz.onsite_duplicate_teaser_events"]}, "refs": [["onsite_duplicate_teaser_events"]], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.4300554}, "exposure.sql_repository_bz.Shop_Beratungs-Report": {"fqn": ["sql_repository_bz", "03_marts", "onsite", "Shop_Beratungs-Report"], "unique_id": "exposure.sql_repository_bz.Shop_Beratungs-Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/_exposures_onsite.yml", "original_file_path": "models/03_marts/onsite/_exposures_onsite.yml", "name": "Shop_Beratungs-Report", "type": "dashboard", "owner": {"email": "dorle.freismuth@bergzeit.de", "name": "Dorle Freismuth"}, "resource_type": "exposure", "description": "Analyses relevant for consulting", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_bigquery", "ga3_connector"], "url": "https://datastudio.google.com/reporting/caece8cb-893a-47c8-8434-f13a582a9118/page/W5e7B", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all", "model.sql_repository_bz.onsite_pdp_testberichte"]}, "refs": [["onsite_pdp_testberichte"]], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.4388623}, "exposure.sql_repository_bz.Coops_CSR Marketing Report": {"fqn": ["sql_repository_bz", "03_marts", "onsite", "Coops_CSR Marketing Report"], "unique_id": "exposure.sql_repository_bz.Coops_CSR Marketing Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/_exposures_onsite.yml", "original_file_path": "models/03_marts/onsite/_exposures_onsite.yml", "name": "Coops_CSR Marketing Report", "type": "dashboard", "owner": {"email": "verena.hofstetter@bergzeit.de", "name": "Verena Hofstetter"}, "resource_type": "exposure", "description": "MUT product performance", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_bigquery", "ga3_connector"], "url": "https://datastudio.google.com/s/l6UOxyjmaBk", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all", "model.sql_repository_bz.onsite_pdp_mut_share_per_day", "model.sql_repository_bz.onsite_pdp_product_attributes"]}, "refs": [["onsite_pdp_mut_share_per_day"], ["onsite_pdp_product_attributes"]], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.4479916}, "exposure.sql_repository_bz.GA4 Data Validation": {"fqn": ["sql_repository_bz", "03_marts", "onsite", "GA4 Data Validation"], "unique_id": "exposure.sql_repository_bz.GA4 Data Validation", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/onsite/_exposures_onsite.yml", "original_file_path": "models/03_marts/onsite/_exposures_onsite.yml", "name": "GA4 Data Validation", "type": "dashboard", "owner": {"email": "helena.steurer@bergzeit.de", "name": "Helena Steurer"}, "resource_type": "exposure", "description": "GA3 and GA4 daily metric comparison", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_bigquery"], "url": "https://datastudio.google.com/reporting/30db4885-bba6-4e9a-b728-c74a5ea1081e/", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.onsite_ga4_metric_comparison", "model.sql_repository_bz.stg_gcp_bigquery_table_storage"]}, "refs": [["onsite_ga4_metric_comparison"], ["stg_gcp_bigquery_table_storage"]], "sources": [], "created_at": 1663750853.4565306}, "exposure.sql_repository_bz.Coops_Bergzeit - Adidas - Retail Partner Performance Dashboard": {"fqn": ["sql_repository_bz", "03_marts", "_datastudio_without_dbt", "Coops_Bergzeit - Adidas - Retail Partner Performance Dashboard"], "unique_id": "exposure.sql_repository_bz.Coops_Bergzeit - Adidas - Retail Partner Performance Dashboard", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "original_file_path": "models/03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "name": "Coops_Bergzeit - Adidas - Retail Partner Performance Dashboard", "type": "dashboard", "owner": {"email": "stephanie.hubert@bergzeit.de", "name": "Stephanie Hubert"}, "resource_type": "exposure", "description": "Report created by Adidas, that shows retail performance (shared with Adidas team - view access)", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_connector"], "url": "https://datastudio.google.com/s/noK5X5XpYUc", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.5959415}, "exposure.sql_repository_bz.Shop_Performance Overview | DACH": {"fqn": ["sql_repository_bz", "03_marts", "_datastudio_without_dbt", "Shop_Performance Overview | DACH"], "unique_id": "exposure.sql_repository_bz.Shop_Performance Overview | DACH", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "original_file_path": "models/03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "name": "Shop_Performance Overview | DACH", "type": "dashboard", "owner": {"email": "ulrike.heidinger@bergzeit.de", "name": "Ulrike Heidinger"}, "resource_type": "exposure", "description": "Monthly Performance KPIs from various sources (Qlik, GA, ...)", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_connector"], "url": "https://datastudio.google.com/reporting/72b5168c-da0f-406d-87a2-94ccf8e3a03a/page/p_tep91h9xmc", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.602709}, "exposure.sql_repository_bz.Shop_Configurator Report": {"fqn": ["sql_repository_bz", "03_marts", "_datastudio_without_dbt", "Shop_Configurator Report"], "unique_id": "exposure.sql_repository_bz.Shop_Configurator Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "original_file_path": "models/03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "name": "Shop_Configurator Report", "type": "dashboard", "owner": {"email": "ulrike.heidinger@bergzeit.de", "name": "Ulrike Heidinger"}, "resource_type": "exposure", "description": "Performance metrics for the cofigurator pages", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_connector"], "url": "https://datastudio.google.com/reporting/30773e3c-ef41-4a0c-87f4-87b5d17bffae/", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.6097484}, "exposure.sql_repository_bz.Shop_Flyout Report": {"fqn": ["sql_repository_bz", "03_marts", "_datastudio_without_dbt", "Shop_Flyout Report"], "unique_id": "exposure.sql_repository_bz.Shop_Flyout Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "original_file_path": "models/03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "name": "Shop_Flyout Report", "type": "dashboard", "owner": {"email": "ulrike.heidinger@bergzeit.de", "name": "Ulrike Heidinger"}, "resource_type": "exposure", "description": "Performance metrics for the shop flyout", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_connector"], "url": "https://datastudio.google.com/reporting/f744dae4-eae5-47e1-ad35-ad3de5950406/", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.61647}, "exposure.sql_repository_bz.BZ-SEA Dashboard": {"fqn": ["sql_repository_bz", "03_marts", "_datastudio_without_dbt", "BZ-SEA Dashboard"], "unique_id": "exposure.sql_repository_bz.BZ-SEA Dashboard", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "original_file_path": "models/03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "name": "BZ-SEA Dashboard", "type": "dashboard", "owner": {"email": "mcc@bergzeit.de", "name": "Bergzeit MCC"}, "resource_type": "exposure", "description": "SEA performance metrics", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_connector"], "url": "https://datastudio.google.com/reporting/f744dae4-eae5-47e1-ad35-ad3de5950406/", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.6234593}, "exposure.sql_repository_bz.Shop_Brand Report": {"fqn": ["sql_repository_bz", "03_marts", "_datastudio_without_dbt", "Shop_Brand Report"], "unique_id": "exposure.sql_repository_bz.Shop_Brand Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "original_file_path": "models/03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "name": "Shop_Brand Report", "type": "dashboard", "owner": {"email": "del_vincent.raschke@bergzeit.de", "name": "Vincent Raschke"}, "resource_type": "exposure", "description": "Performance metrics for brand products, search queries and brandpages", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_connector"], "url": "https://datastudio.google.com/reporting/ed0138bb-fabc-4c8c-98b7-c8968b5a2832/", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.6300833}, "exposure.sql_repository_bz.Shop_Benelux Market Analysis": {"fqn": ["sql_repository_bz", "03_marts", "_datastudio_without_dbt", "Shop_Benelux Market Analysis"], "unique_id": "exposure.sql_repository_bz.Shop_Benelux Market Analysis", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "original_file_path": "models/03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "name": "Shop_Benelux Market Analysis", "type": "dashboard", "owner": {"email": "paul.galama@bergzeit.de", "name": "Paul Galama"}, "resource_type": "exposure", "description": "Performance metrics for the countries NL and BE", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_connector"], "url": "https://datastudio.google.com/reporting/851d829b-e611-4ca4-baea-e648c1316ef4/", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.637048}, "exposure.sql_repository_bz.Shop_Focus Markets Performance Overview": {"fqn": ["sql_repository_bz", "03_marts", "_datastudio_without_dbt", "Shop_Focus Markets Performance Overview"], "unique_id": "exposure.sql_repository_bz.Shop_Focus Markets Performance Overview", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "original_file_path": "models/03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "name": "Shop_Focus Markets Performance Overview", "type": "dashboard", "owner": {"email": "paul.galama@bergzeit.de", "name": "Paul Galama"}, "resource_type": "exposure", "description": "Performance metrics for the focus market countries", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_connector"], "url": "https://datastudio.google.com/reporting/320ed734-daf2-413a-81cc-60dc747fa882/", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.647823}, "exposure.sql_repository_bz.Shop_BZ Startseite Overall": {"fqn": ["sql_repository_bz", "03_marts", "_datastudio_without_dbt", "Shop_BZ Startseite Overall"], "unique_id": "exposure.sql_repository_bz.Shop_BZ Startseite Overall", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "original_file_path": "models/03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "name": "Shop_BZ Startseite Overall", "type": "dashboard", "owner": {"email": "ulrike.heidinger@bergzeit.de", "name": "Ulrike Heidinger"}, "resource_type": "exposure", "description": "Performance metrics for elements on the home page", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_connector"], "url": "https://datastudio.google.com/reporting/9b2c9960-9c43-4a4f-b050-c77b1c3fbb50/", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.656772}, "exposure.sql_repository_bz.Shop_BZ Startseite": {"fqn": ["sql_repository_bz", "03_marts", "_datastudio_without_dbt", "Shop_BZ Startseite"], "unique_id": "exposure.sql_repository_bz.Shop_BZ Startseite", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "original_file_path": "models/03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "name": "Shop_BZ Startseite", "type": "dashboard", "owner": {"email": "sebastian.kraus@bergzeit.de", "name": "Sebastian Kraus"}, "resource_type": "exposure", "description": "Performance metrics for elements on the home page", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_connector"], "url": "https://datastudio.google.com/reporting/0d66227b-f917-4ed7-9cc5-3b56559894a5/", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.6670666}, "exposure.sql_repository_bz.CRM - eMail Analyse": {"fqn": ["sql_repository_bz", "03_marts", "_datastudio_without_dbt", "CRM - eMail Analyse"], "unique_id": "exposure.sql_repository_bz.CRM - eMail Analyse", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "original_file_path": "models/03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "name": "CRM - eMail Analyse", "type": "dashboard", "owner": {"email": "christoph.pippert-winter@bergzeit.de", "name": "Christoph Pippert-Winter"}, "resource_type": "exposure", "description": "Performance metrics for Newsletter campaigns", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_connector"], "url": "https://datastudio.google.com/reporting/2ee7abaa-39a7-40eb-8e18-d32bd2e8d9e6/page/p_r6h7s1enyc?s=n6vdXRNLj0I", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.6744106}, "exposure.sql_repository_bz.Shop_Market Analysis | Italia": {"fqn": ["sql_repository_bz", "03_marts", "_datastudio_without_dbt", "Shop_Market Analysis | Italia"], "unique_id": "exposure.sql_repository_bz.Shop_Market Analysis | Italia", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "original_file_path": "models/03_marts/_datastudio_without_dbt/_exposures_analytics.yml", "name": "Shop_Market Analysis | Italia", "type": "dashboard", "owner": {"email": "francesco.maggi@bergzeit.de", "name": "Francesco Maggi"}, "resource_type": "exposure", "description": "Performance metrics for Italy", "maturity": null, "meta": {}, "tags": ["ga4_migration_open", "ga3_connector"], "url": "https://datastudio.google.com/reporting/1f149061-7548-4ae4-8bfb-2840e0165648/page/wfw7B", "depends_on": {"macros": [], "nodes": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"]}, "refs": [], "sources": [["ga_bz_master_view_overall", "ga_sessions_all"]], "created_at": 1663750853.681254}, "exposure.sql_repository_bz.Alert Consentless Offline Pages": {"fqn": ["sql_repository_bz", "03_marts", "alerting", "Alert Consentless Offline Pages"], "unique_id": "exposure.sql_repository_bz.Alert Consentless Offline Pages", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/alerting/_exposures_alerting.yml", "original_file_path": "models/03_marts/alerting/_exposures_alerting.yml", "name": "Alert Consentless Offline Pages", "type": "application", "owner": {"email": "stephanie.hubert@bergzeit.de", "name": "Stephanie Hubert"}, "resource_type": "exposure", "description": "Cloud function that checks number of offline pageviews every 10 min", "maturity": null, "meta": {}, "tags": [], "url": "https://console.cloud.google.com/functions/details/europe-west3/check_offline_pages_ishop?env=gen1&project=bergzeit", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.alerts_consentless_offline_pages"]}, "refs": [["alerts_consentless_offline_pages"]], "sources": [], "created_at": 1663750853.6974704}, "exposure.sql_repository_bz.Alert Consentless Missing Transactions": {"fqn": ["sql_repository_bz", "03_marts", "alerting", "Alert Consentless Missing Transactions"], "unique_id": "exposure.sql_repository_bz.Alert Consentless Missing Transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/alerting/_exposures_alerting.yml", "original_file_path": "models/03_marts/alerting/_exposures_alerting.yml", "name": "Alert Consentless Missing Transactions", "type": "application", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "This alert checks the last few hours of consentless transactions, to validate the orders are being processed", "maturity": null, "meta": {}, "tags": [], "url": "https://console.cloud.google.com/cloudscheduler/jobs/edit/europe-west1/check_transactions_ishop?orgonly=true&project=bergzeit&supportedpurview=organizationId,folder,project", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.alerts_consentless_transactions_last_hrs"]}, "refs": [["alerts_consentless_transactions_last_hrs"]], "sources": [], "created_at": 1663750853.708016}, "exposure.sql_repository_bz.Alert Consentless Missing Consent Events": {"fqn": ["sql_repository_bz", "03_marts", "alerting", "Alert Consentless Missing Consent Events"], "unique_id": "exposure.sql_repository_bz.Alert Consentless Missing Consent Events", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/alerting/_exposures_alerting.yml", "original_file_path": "models/03_marts/alerting/_exposures_alerting.yml", "name": "Alert Consentless Missing Consent Events", "type": "application", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "This alert checks the last few hours of consentless consent interactions, to validate the orders are being processed", "maturity": null, "meta": {}, "tags": [], "url": "https://console.cloud.google.com/cloudscheduler/jobs/edit/europe-west1/check_consent_events__ishop?orgonly=true&project=bergzeit&supportedpurview=organizationId,folder,project", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.alerts_consentless_consent_events_last_hrs"]}, "refs": [["alerts_consentless_consent_events_last_hrs"]], "sources": [], "created_at": 1663750853.7158227}, "exposure.sql_repository_bz.Alert Consentless Missing Magazine Pageviews": {"fqn": ["sql_repository_bz", "03_marts", "alerting", "Alert Consentless Missing Magazine Pageviews"], "unique_id": "exposure.sql_repository_bz.Alert Consentless Missing Magazine Pageviews", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/alerting/_exposures_alerting.yml", "original_file_path": "models/03_marts/alerting/_exposures_alerting.yml", "name": "Alert Consentless Missing Magazine Pageviews", "type": "application", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "This alert checks the last few hours of consentless magazin pageviews, to validate a functioning cookie banner", "maturity": null, "meta": {}, "tags": [], "url": "https://console.cloud.google.com/cloudscheduler/jobs/edit/europe-west1/check_consent_events__magazin?orgonly=true&project=bergzeit&supportedpurview=organizationId,folder,project", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.alerts_consentless_pageviews_magazine_last_hrs"]}, "refs": [["alerts_consentless_pageviews_magazine_last_hrs"]], "sources": [], "created_at": 1663750853.7218115}, "exposure.sql_repository_bz.CRM_BZ Club Analysis": {"fqn": ["sql_repository_bz", "03_marts", "customer", "CRM_BZ Club Analysis"], "unique_id": "exposure.sql_repository_bz.CRM_BZ Club Analysis", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/customer/_exposures_customer.yml", "original_file_path": "models/03_marts/customer/_exposures_customer.yml", "name": "CRM_BZ Club Analysis", "type": "dashboard", "owner": {"email": "thorsten.eder@bergzeit.de", "name": "Thorsten Eder"}, "resource_type": "exposure", "description": "This report analyses the Bergzeit club performance in detail", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/u/0/reporting/9a950bf5-1208-4072-b1da-ed19f710d153/page/p_ew5ctsr7oc", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.cust_club_retention_rate", "model.sql_repository_bz.cust_cohort_club_metrics_new_returning", "model.sql_repository_bz.cust_cohort_club_metrics", "model.sql_repository_bz.cust_club_margin_calculation"]}, "refs": [["cust_club_retention_rate"], ["cust_cohort_club_metrics_new_returning"], ["cust_cohort_club_metrics"], ["cust_club_margin_calculation"]], "sources": [], "created_at": 1663750853.7410872}, "exposure.sql_repository_bz.All_Market Review": {"fqn": ["sql_repository_bz", "03_marts", "customer", "All_Market Review"], "unique_id": "exposure.sql_repository_bz.All_Market Review", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/customer/_exposures_customer.yml", "original_file_path": "models/03_marts/customer/_exposures_customer.yml", "name": "All_Market Review", "type": "dashboard", "owner": {"email": "thorsten.eder@bergzeit.de", "name": "Thorsten Eder"}, "resource_type": "exposure", "description": "Bergzeit market review report", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/u/0/reporting/f037ef8c-1314-4068-8ed5-d59feb9f0d18/page/DlCGC", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.cust_new_returning_visitors_30d"]}, "refs": [["cust_new_returning_visitors_30d"]], "sources": [], "created_at": 1663750853.749102}, "exposure.sql_repository_bz.CRM_Kundenanalysen Explorativ": {"fqn": ["sql_repository_bz", "03_marts", "customer", "CRM_Kundenanalysen Explorativ"], "unique_id": "exposure.sql_repository_bz.CRM_Kundenanalysen Explorativ", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/customer/_exposures_customer.yml", "original_file_path": "models/03_marts/customer/_exposures_customer.yml", "name": "CRM_Kundenanalysen Explorativ", "type": "dashboard", "owner": {"email": "stephanie.hubert@bergzeit.de", "name": "Stephanie Hubert"}, "resource_type": "exposure", "description": "Explorative customer analysis Datastudio report", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/s/t4A_y2zFqNM", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.cust_cohort_revenue_per_year", "model.sql_repository_bz.cust_customer_metrics"]}, "refs": [["cust_cohort_revenue_per_year"], ["cust_customer_metrics"]], "sources": [], "created_at": 1663750853.755365}, "exposure.sql_repository_bz.Multichannel Attribution Dashboard": {"fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "budget_planning", "Multichannel Attribution Dashboard"], "unique_id": "exposure.sql_repository_bz.Multichannel Attribution Dashboard", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/budget_planning/_exposures_soll_ist.yml", "original_file_path": "models/03_marts/sea_analytics/budget_planning/_exposures_soll_ist.yml", "name": "Multichannel Attribution Dashboard", "type": "dashboard", "owner": {"email": "stephanie.hubert@bergzeit.de", "name": "Stephanie Hubert"}, "resource_type": "exposure", "description": "Internal dashboard that shows differences in attribution output per month and channel", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/s/ricVzohHvpU", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_channelattribution_channel_level"]}, "refs": [["stg_channelattribution_channel_level"]], "sources": [], "created_at": 1663750853.783089}, "exposure.sql_repository_bz.Channel Level Attribution Notebook (attribution-calculation)": {"fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "budget_planning", "Channel Level Attribution Notebook (attribution-calculation)"], "unique_id": "exposure.sql_repository_bz.Channel Level Attribution Notebook (attribution-calculation)", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/budget_planning/_exposures_soll_ist.yml", "original_file_path": "models/03_marts/sea_analytics/budget_planning/_exposures_soll_ist.yml", "name": "Channel Level Attribution Notebook (attribution-calculation)", "type": "application", "owner": {"email": "stephanie.hubert@bergzeit.de", "name": "Stephanie Hubert"}, "resource_type": "exposure", "description": "daily automated calculation of channel level attribution", "maturity": null, "meta": {}, "tags": [], "url": "https://console.cloud.google.com/vertex-ai/workbench/list/instances?project=bergzeit", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga_sessions_attribution_calculation"]}, "refs": [["stg_ga_sessions_attribution_calculation"]], "sources": [], "created_at": 1663750853.7885537}, "exposure.sql_repository_bz.Path Level Attribution Notebook (r-3-steffi)": {"fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "budget_planning", "Path Level Attribution Notebook (r-3-steffi)"], "unique_id": "exposure.sql_repository_bz.Path Level Attribution Notebook (r-3-steffi)", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/budget_planning/_exposures_soll_ist.yml", "original_file_path": "models/03_marts/sea_analytics/budget_planning/_exposures_soll_ist.yml", "name": "Path Level Attribution Notebook (r-3-steffi)", "type": "application", "owner": {"email": "stephanie.hubert@bergzeit.de", "name": "Stephanie Hubert"}, "resource_type": "exposure", "description": "weekly manual calculation of path level attribution", "maturity": null, "meta": {}, "tags": [], "url": "https://console.cloud.google.com/vertex-ai/workbench/list/instances?project=bergzeit", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.stg_ga_sessions_attribution_calculation"]}, "refs": [["stg_ga_sessions_attribution_calculation"]], "sources": [], "created_at": 1663750853.79446}, "exposure.sql_repository_bz.BZ-Performance_SOLL-IST_GJ 22/23": {"fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "budget_planning", "BZ-Performance_SOLL-IST_GJ 22/23"], "unique_id": "exposure.sql_repository_bz.BZ-Performance_SOLL-IST_GJ 22/23", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/budget_planning/_exposures_soll_ist.yml", "original_file_path": "models/03_marts/sea_analytics/budget_planning/_exposures_soll_ist.yml", "name": "BZ-Performance_SOLL-IST_GJ 22/23", "type": "dashboard", "owner": {"email": "eric.estel@bergzeit.de", "name": "Eric Estel"}, "resource_type": "exposure", "description": "budget planning sheet FJ 22/23", "maturity": null, "meta": {}, "tags": [], "url": "https://docs.google.com/spreadsheets/d/1OSEmLde7TR8L4pLtG_0LYMVVTLyl9HZYggSVo_P6Urs/edit#gid=76727755", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.budget_plan_markov_channel_level"]}, "refs": [["budget_plan_markov_channel_level"]], "sources": [], "created_at": 1663750853.7996552}, "exposure.sql_repository_bz.GA Data Validation - AdCost Validation": {"fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "budget_planning", "GA Data Validation - AdCost Validation"], "unique_id": "exposure.sql_repository_bz.GA Data Validation - AdCost Validation", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/budget_planning/_exposures_soll_ist.yml", "original_file_path": "models/03_marts/sea_analytics/budget_planning/_exposures_soll_ist.yml", "name": "GA Data Validation - AdCost Validation", "type": "dashboard", "owner": {"email": "helena.steurer@bergzeit.de", "name": "Helena Steurer"}, "resource_type": "exposure", "description": "charts that visualize the data deviation between the fresh api data and historical BQ cost data", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/reporting/30db4885-bba6-4e9a-b728-c74a5ea1081e/page/p_fyf5ezs6xc", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.budget_plan_daily_adcost_validation"]}, "refs": [["budget_plan_daily_adcost_validation"]], "sources": [], "created_at": 1663750853.8048034}, "exposure.sql_repository_bz.Adgroups With Error Ads Upload to be Paused": {"fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "link_checker", "Adgroups With Error Ads Upload to be Paused"], "unique_id": "exposure.sql_repository_bz.Adgroups With Error Ads Upload to be Paused", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/link_checker/_exposures_sea_link_checker.yml", "original_file_path": "models/03_marts/sea_analytics/link_checker/_exposures_sea_link_checker.yml", "name": "Adgroups With Error Ads Upload to be Paused", "type": "application", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "### Description\r\n\r\nCloud function to csv to Google Ads bulk upload to pause ads and ad groups with error statuses\r\n\r\n### What happens after dbt? Final data product and process from marts table\r\n\r\n* ...\r\n* ...\r\n\r\n### How oversees the data product and how? \r\n\r\nChristopher Gutknecht. ...\r\n\r\n### Is there a visual flow chart for the entire data pipeline\r\n\r\nConfluence ...\r\n\r\n### Which branch and ticket does the feature refer to?\r\n\r\nWEBA-...\r\n\r\n### Which further test coverage exists beyond dbt?\r\n\r\nAlerts on ...", "maturity": null, "meta": {}, "tags": [], "url": "xxx", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.gads_crawled_urls_with_status"]}, "refs": [["gads_crawled_urls_with_status"]], "sources": [], "created_at": 1663750853.8318539}, "exposure.sql_repository_bz.Google Ads URLs Crawler": {"fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "link_checker", "Google Ads URLs Crawler"], "unique_id": "exposure.sql_repository_bz.Google Ads URLs Crawler", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/link_checker/_exposures_sea_link_checker.yml", "original_file_path": "models/03_marts/sea_analytics/link_checker/_exposures_sea_link_checker.yml", "name": "Google Ads URLs Crawler", "type": "notebook", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "Jupyter notebook with weekly schedule that checks links and outputs to Cloud Storage, then imported as data source", "maturity": null, "meta": {}, "tags": [], "url": "https://console.cloud.google.com/vertex-ai/workbench/details/locations/us-central1/runtimes/googleshopping-ratings-transfer?project=bergzeit", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.gads_ads_for_url_check"]}, "refs": [["gads_ads_for_url_check"]], "sources": [], "created_at": 1663750853.8372}, "exposure.sql_repository_bz.GAds Stats and Attributes Table": {"fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "feed_campaign_input", "GAds Stats and Attributes Table"], "unique_id": "exposure.sql_repository_bz.GAds Stats and Attributes Table", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/feed_campaign_input/_exposures_sea_feed_campaign_input.yml", "original_file_path": "models/03_marts/sea_analytics/feed_campaign_input/_exposures_sea_feed_campaign_input.yml", "name": "GAds Stats and Attributes Table", "type": "application", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "Input for dbt project feed campaigns, used in separate dbt project", "maturity": null, "meta": {}, "tags": [], "url": "https://cloud.getdbt.com/#/accounts/12532/projects/26527/dashboard/", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.gads_adstats_and_attributes"]}, "refs": [["gads_adstats_and_attributes"]], "sources": [], "created_at": 1663750853.8685925}, "exposure.sql_repository_bz.Gads Backfill Consentless Transactions": {"fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "conversion_backfill", "Gads Backfill Consentless Transactions"], "unique_id": "exposure.sql_repository_bz.Gads Backfill Consentless Transactions", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/conversion_backfill/_exposures_sea_conversion_backfill.yml", "original_file_path": "models/03_marts/sea_analytics/conversion_backfill/_exposures_sea_conversion_backfill.yml", "name": "Gads Backfill Consentless Transactions", "type": "application", "owner": {"email": "stephanie.hubert@bergzeit.de", "name": "Stephanie Hubert"}, "resource_type": "exposure", "description": "### Description\r\n\r\nAll consentless transactions with a gclid that were not found in the GA transactions are pushed to Google Ads via daily conversion import\r\n\r\n### What happens after dbt? Final data product and process from marts table\r\n\r\n* A [pubsub subscription](https://console.cloud.google.com/cloudpubsub/topic/detail/run-dbt-job?project=bergzeit) waits for the GA daily session table to be updated \r\n* This triggers a [cloud function](https://console.cloud.google.com/functions/details/europe-west3/write_table_to_csv_conv_backfill?env=gen1&project=bergzeit) which creates the export csv file in Cloud Storage\r\n* The [cloud storage file](https://console.cloud.google.com/storage/browser/bz_all_conversion_import;tab=objects?forceOnBucketsSortingFiltering=false&project=adsdataprediction&prefix=&forceOnObjectsSortingFiltering=false) is fetched from a [Google Ads Import schedule](https://ads.google.com/aw/conversions/uploads?ocid=100612924&euid=104065204&__u=5886578196&uscid=100612924&__c=2650192476&authuser=0&subid=de-de-et-g-aw-c-home-awhp_xin1_signin%21o2-awhp-hv-01-22)\r\n* The result of imported conversions can be seen in the [Google Ads Conversion Import summary](https://ads.google.com/aw/conversions?ocid=100612924&euid=104065204&__u=5886578196&uscid=100612924&__c=2650192476&authuser=0&subid=de-de-et-g-aw-c-home-awhp_xin1_signin%21o2-awhp-hv-01-22)\r\n\r\n### How oversees the data product and how? \r\n\r\nChristopher Gutknecht. \r\n* The daily GA table update is monitored with a dbt job message in teams\r\n* The marts table has several data quality test that would alert to teams before the import runs \r\n\r\n### Is there a visual flow chart for the entire data pipeline\r\n\r\nSee the [Confluence flow chart](https://bergzeit.atlassian.net/wiki/spaces/IPIM/pages/4067721274/Google+Ads+Import+fehlender+Conversions) in MEAS\r\n\r\n### Which branch and ticket does the feature refer to?\r\n\r\n[MEAS-367](https://bergzeit.atlassian.net/browse/MEAS-367)\r\n\r\n### Which further test coverage exists beyond dbt?\r\n\r\nNo.", "maturity": null, "meta": {}, "tags": [], "url": "xxx", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.gads_backfill_consentless_transactions"]}, "refs": [["gads_backfill_consentless_transactions"]], "sources": [], "created_at": 1663750853.8740304}, "exposure.sql_repository_bz.Channelpilot Feed Input Hygiene": {"fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "feed_hygiene", "Channelpilot Feed Input Hygiene"], "unique_id": "exposure.sql_repository_bz.Channelpilot Feed Input Hygiene", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/feed_hygiene/_exposures_sea_feed_hygiene.yml", "original_file_path": "models/03_marts/sea_analytics/feed_hygiene/_exposures_sea_feed_hygiene.yml", "name": "Channelpilot Feed Input Hygiene", "type": "dashboard", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "Overview of channelpilot feed hygiene errors", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/s/hAqv6kilZi8", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.gads_channel_pilot_feeds_with_errors"]}, "refs": [["gads_channel_pilot_feeds_with_errors"]], "sources": [], "created_at": 1663750853.9603724}, "exposure.sql_repository_bz.Missing Products in SMA Shopping Campaigns per Account": {"fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "smart_shopping_refresher", "Missing Products in SMA Shopping Campaigns per Account"], "unique_id": "exposure.sql_repository_bz.Missing Products in SMA Shopping Campaigns per Account", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/smart_shopping_refresher/_exposures_smart_sho_refresh.yml", "original_file_path": "models/03_marts/sea_analytics/smart_shopping_refresher/_exposures_smart_sho_refresh.yml", "name": "Missing Products in SMA Shopping Campaigns per Account", "type": "application", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "### Description\r\n\r\nJSON file that stores the model output for use in a Google Ads script\r\n\r\n### What happens after dbt? Final data product and process from marts table\r\n\r\n* ...\r\n* ...\r\n\r\n### How oversees the data product and how? \r\n\r\nChristopher Gutknecht. ...\r\n\r\n### Is there a visual flow chart for the entire data pipeline\r\n\r\nConfluence ...\r\n\r\n### Which branch and ticket does the feature refer to?\r\n\r\nWEBA-...\r\n\r\n### Which further test coverage exists beyond dbt?\r\n\r\nAlerts on ...", "maturity": null, "meta": {}, "tags": [], "url": "https://console.cloud.google.com/storage/browser/gads_data_misc;tab=objects?forceOnBucketsSortingFiltering=false&project=adsdataprediction&prefix=&forceOnObjectsSortingFiltering=false", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.gmc_missing_brands_per_country"]}, "refs": [["gmc_missing_brands_per_country"]], "sources": [], "created_at": 1663750853.991014}, "exposure.sql_repository_bz.Google Ads Script to Upload the Json File to Google Ads": {"fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "smart_shopping_refresher", "Google Ads Script to Upload the Json File to Google Ads"], "unique_id": "exposure.sql_repository_bz.Google Ads Script to Upload the Json File to Google Ads", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/smart_shopping_refresher/_exposures_smart_sho_refresh.yml", "original_file_path": "models/03_marts/sea_analytics/smart_shopping_refresher/_exposures_smart_sho_refresh.yml", "name": "Google Ads Script to Upload the Json File to Google Ads", "type": "application", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "Procedure to upload missing shopping adgroups to google ads", "maturity": null, "meta": {}, "tags": [], "url": "https://ads.google.com/aw/bulk/scripts/edit?ocid=100612924&scriptId=4842226&euid=104065204&__u=5886578196&uscid=100612924&__c=2650192476&authuser=0&subid=de-de-et-g-aw-c-home-awhp_xin1_signin%21o2", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.gmc_missing_brands_per_country"]}, "refs": [["gmc_missing_brands_per_country"]], "sources": [], "created_at": 1663750853.9962752}, "exposure.sql_repository_bz.Vorlage Hersteller Report (extern)": {"fqn": ["sql_repository_bz", "03_marts", "sea_analytics", "manufacturer_reports", "Vorlage Hersteller Report (extern)"], "unique_id": "exposure.sql_repository_bz.Vorlage Hersteller Report (extern)", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/sea_analytics/manufacturer_reports/_exposures_sea_manufacturer_reports.yml", "original_file_path": "models/03_marts/sea_analytics/manufacturer_reports/_exposures_sea_manufacturer_reports.yml", "name": "Vorlage Hersteller Report (extern)", "type": "dashboard", "owner": {"email": "lena.leitner@bergzeit.de", "name": "Lena Leitner"}, "resource_type": "exposure", "description": "", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/s/qi0qfWzAvmQ", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.gads_all_cost_by_brand"]}, "refs": [["gads_all_cost_by_brand"]], "sources": [], "created_at": 1663750854.0016475}, "exposure.sql_repository_bz.Awin Sales Comparison Cloud Function": {"fqn": ["sql_repository_bz", "03_marts", "affiliate_awin", "Awin Sales Comparison Cloud Function"], "unique_id": "exposure.sql_repository_bz.Awin Sales Comparison Cloud Function", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/affiliate_awin/_exposures_awin_return_adjustment.yml", "original_file_path": "models/03_marts/affiliate_awin/_exposures_awin_return_adjustment.yml", "name": "Awin Sales Comparison Cloud Function", "type": "application", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "### Description\r\n\r\nThis cloud function updates all pending Awin sales with return and cancellation adjustments\r\n\r\n### What happens after dbt? Final data product and process from marts table\r\n\r\n* A daily cloud scheduler cron job per country triggers a cloud function to update the changed transactions to the Awin API \r\n* All update errors are stored back to Cloud Storage here. The csv file is currently overwritten every day. \r\n* This BigQuery table shows all upload errors across all countries\r\n* The list of current Awin countries can be found in the dbt_project.yml file\r\n\r\n### How oversees the data product and how? \r\n\r\nChristopher Gutknecht. A regular check of the scripts executions is performed to monitor the health of the full data product.\r\n\r\n### Is there a visual flow chart for the entire data pipeline\r\n\r\nConfluence tbd\r\n\r\n### Which branch and ticket does the feature refer to?\r\n\r\nWEBA-...\r\n\r\n### Which further test coverage exists beyond dbt?\r\n\r\nAlerts on cloud function and Google Ads scripts executions exist, sending emails to the main owner.", "maturity": null, "meta": {}, "tags": [], "url": "https://console.cloud.google.com/functions/details/europe-west3/update_awin_open_orders?env=gen1&project=bergzeit", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.awin_transactions_pending_with_returns"]}, "refs": [["awin_transactions_pending_with_returns"]], "sources": [], "created_at": 1663750854.0117214}, "exposure.sql_repository_bz.Awin Publisher Dashboard": {"fqn": ["sql_repository_bz", "03_marts", "affiliate_awin", "Awin Publisher Dashboard"], "unique_id": "exposure.sql_repository_bz.Awin Publisher Dashboard", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/affiliate_awin/_exposures_awin_return_adjustment.yml", "original_file_path": "models/03_marts/affiliate_awin/_exposures_awin_return_adjustment.yml", "name": "Awin Publisher Dashboard", "type": "dashboard", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "this dashboard show", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/s/ga9H2SUkT1Y", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.awin_transactions_pending_with_returns", "model.sql_repository_bz.stg_awin_orders_all"]}, "refs": [["awin_transactions_pending_with_returns"], ["stg_awin_orders_all"]], "sources": [], "created_at": 1663750854.017984}, "exposure.sql_repository_bz.Test Errors and Warnings to Teams Cloud Function": {"fqn": ["sql_repository_bz", "03_marts", "_dbt_metadata", "Test Errors and Warnings to Teams Cloud Function"], "unique_id": "exposure.sql_repository_bz.Test Errors and Warnings to Teams Cloud Function", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/_dbt_metadata/_exposures_metadata.yml", "original_file_path": "models/03_marts/_dbt_metadata/_exposures_metadata.yml", "name": "Test Errors and Warnings to Teams Cloud Function", "type": "application", "owner": {"email": "stephanie.hubert@bergzeit.de", "name": "Stephanie Hubert"}, "resource_type": "exposure", "description": "A cloud function that takes the test results logs and pushes test error and warnings to Teams", "maturity": null, "meta": {}, "tags": [], "url": "https://console.cloud.google.com/functions/details/europe-west3/dbt-test-results-notification?env=gen1&orgonly=true&project=bergzeit", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.test_results_latest_errors"]}, "refs": [["test_results_latest_errors"]], "sources": [], "created_at": 1663750854.0936973}, "exposure.sql_repository_bz.Analytics Admin Report (GCP & GA360)": {"fqn": ["sql_repository_bz", "03_marts", "cloud_platform", "Analytics Admin Report (GCP & GA360)"], "unique_id": "exposure.sql_repository_bz.Analytics Admin Report (GCP & GA360)", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/cloud_platform/_exposures_gcp.yml", "original_file_path": "models/03_marts/cloud_platform/_exposures_gcp.yml", "name": "Analytics Admin Report (GCP & GA360)", "type": "dashboard", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "Daily cost and job export of all GCP services, and daily differences between GA (after consent) and minubo data or consentless transactions", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/s/nlyxx9Of9V8", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.gcp_cost_export", "model.sql_repository_bz.onsite_ga_sessions_by_hit_count_bucket", "model.sql_repository_bz.onsite_hits_by_property_and_day", "model.sql_repository_bz.gcp_bigquery_job_cost", "model.sql_repository_bz.alerts_datadiff_consentless_ga_1d", "model.sql_repository_bz.alerts_datadiff_ga_minubo", "model.sql_repository_bz.test_results_all_historic"]}, "refs": [["gcp_cost_export"], ["onsite_ga_sessions_by_hit_count_bucket"], ["onsite_hits_by_property_and_day"], ["gcp_bigquery_job_cost"], ["alerts_datadiff_consentless_ga_1d"], ["alerts_datadiff_ga_minubo"], ["test_results_all_historic"]], "sources": [], "created_at": 1663750854.1075387}, "exposure.sql_repository_bz.B&S_Produkt Performance Report": {"fqn": ["sql_repository_bz", "03_marts", "product_inventory", "B&S_Produkt Performance Report"], "unique_id": "exposure.sql_repository_bz.B&S_Produkt Performance Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/_exposures_product.yml", "original_file_path": "models/03_marts/product_inventory/_exposures_product.yml", "name": "B&S_Produkt Performance Report", "type": "dashboard", "owner": {"email": "eric.estel@bergzeit.de", "name": "Eric Estel"}, "resource_type": "exposure", "description": "All product performance analyses", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/s/pgvFBflkXXs", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.product_attributes_and_stock_by_day", "model.sql_repository_bz.product_parentid_stats_by_day", "model.sql_repository_bz.product_sku_count_by_day", "model.sql_repository_bz.product_attributes_and_ga_data_by_day", "model.sql_repository_bz.product_attr_and_shopping_by_day", "model.sql_repository_bz.product_brand_entrance_transactions"]}, "refs": [["product_attributes_and_stock_by_day"], ["product_parentid_stats_by_day"], ["product_sku_count_by_day"], ["product_attributes_and_ga_data_by_day"], ["product_attr_and_shopping_by_day"], ["product_brand_entrance_transactions"]], "sources": [], "created_at": 1663750854.1799097}, "exposure.sql_repository_bz.B&S_Sales Aktionen Report": {"fqn": ["sql_repository_bz", "03_marts", "product_inventory", "B&S_Sales Aktionen Report"], "unique_id": "exposure.sql_repository_bz.B&S_Sales Aktionen Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/_exposures_product.yml", "original_file_path": "models/03_marts/product_inventory/_exposures_product.yml", "name": "B&S_Sales Aktionen Report", "type": "dashboard", "owner": {"email": "lisa.stimpel@bergzeit.de", "name": "Lisa Stimpel"}, "resource_type": "exposure", "description": "Performance of sales initiatives including price discount information", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/reporting/52e3b522-2206-4dff-82ef-802a05f8f950/page/p_3koxtvstrc", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.product_attributes_and_ga_data_by_day", "model.sql_repository_bz.transaction_voucher_data"]}, "refs": [["product_attributes_and_ga_data_by_day"], ["transaction_voucher_data"]], "sources": [], "created_at": 1663750854.1890924}, "exposure.sql_repository_bz.Shop_Merchandising Report": {"fqn": ["sql_repository_bz", "03_marts", "product_inventory", "Shop_Merchandising Report"], "unique_id": "exposure.sql_repository_bz.Shop_Merchandising Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/_exposures_product.yml", "original_file_path": "models/03_marts/product_inventory/_exposures_product.yml", "name": "Shop_Merchandising Report", "type": "dashboard", "owner": {"email": "dan.giersdorf@bergzeit.de", "name": "Dan Giersdorf"}, "resource_type": "exposure", "description": "Product information for merchandising purposes", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/u/0/reporting/d1aa22ab-797e-4382-ba9e-dd34e44a2c0f", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.product_ga_data_and_adcost", "model.sql_repository_bz.onsite_ga_internal_search"]}, "refs": [["product_ga_data_and_adcost"], ["onsite_ga_internal_search"]], "sources": [], "created_at": 1663750854.1953027}, "exposure.sql_repository_bz.B&S_Warenkorb Analyse": {"fqn": ["sql_repository_bz", "03_marts", "product_inventory", "B&S_Warenkorb Analyse"], "unique_id": "exposure.sql_repository_bz.B&S_Warenkorb Analyse", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/_exposures_product.yml", "original_file_path": "models/03_marts/product_inventory/_exposures_product.yml", "name": "B&S_Warenkorb Analyse", "type": "dashboard", "owner": {"email": "stephanie.hubert@bergzeit.de", "name": "Stephanie Hubert"}, "resource_type": "exposure", "description": "Analysis of cart specific metrics", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/s/geWxNbpO_zU", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.product_cart_analysis_selective_orders_category", "model.sql_repository_bz.product_cart_analysis_selective_orders_parentid"]}, "refs": [["product_cart_analysis_selective_orders_category"], ["product_cart_analysis_selective_orders_parentid"]], "sources": [], "created_at": 1663750854.2015257}, "exposure.sql_repository_bz.B&S_Fremdlager PowerBI Report": {"fqn": ["sql_repository_bz", "03_marts", "product_inventory", "B&S_Fremdlager PowerBI Report"], "unique_id": "exposure.sql_repository_bz.B&S_Fremdlager PowerBI Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/_exposures_product.yml", "original_file_path": "models/03_marts/product_inventory/_exposures_product.yml", "name": "B&S_Fremdlager PowerBI Report", "type": "dashboard", "owner": {"email": "barbara.strobl@bergzeit.de", "name": "Barbara Strobl"}, "resource_type": "exposure", "description": "Foreign stock analysis with ga order value and product attributes", "maturity": null, "meta": {}, "tags": [], "url": "https://app.powerbi.com/groups/63c081f8-6dbe-425a-992c-3f63d9db846c/reports/99ae2a2e-774a-4088-aa95-f2e2592a2d42/ReportSection7c8b205b62c9efe6b70d", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.product_inventory_brand_aggregates", "model.sql_repository_bz.product_inventory_product_performance_metrics"]}, "refs": [["product_inventory_brand_aggregates"], ["product_inventory_product_performance_metrics"]], "sources": [], "created_at": 1663750854.2081964}, "exposure.sql_repository_bz.B&S_Pricing PowerBI Report": {"fqn": ["sql_repository_bz", "03_marts", "product_inventory", "B&S_Pricing PowerBI Report"], "unique_id": "exposure.sql_repository_bz.B&S_Pricing PowerBI Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/_exposures_product.yml", "original_file_path": "models/03_marts/product_inventory/_exposures_product.yml", "name": "B&S_Pricing PowerBI Report", "type": "dashboard", "owner": {"email": "carolin.mangol@bergzeit.de", "name": "Carolin Mangol"}, "resource_type": "exposure", "description": "Foreign stock analysis with ga order value and product attributes", "maturity": null, "meta": {}, "tags": [], "url": "https://app.powerbi.com/groups/63c081f8-6dbe-425a-992c-3f63d9db846c/reports/8c8e53fa-4cad-419f-88dd-cd36269fc8ab/ReportSectionfb18c845dd204e1a99e9", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.product_inventory_brand_aggregates"]}, "refs": [["product_inventory_brand_aggregates"]], "sources": [], "created_at": 1663750854.2138832}, "exposure.sql_repository_bz.B&S_Topseller OutofStock Report": {"fqn": ["sql_repository_bz", "03_marts", "product_inventory", "B&S_Topseller OutofStock Report"], "unique_id": "exposure.sql_repository_bz.B&S_Topseller OutofStock Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/product_inventory/_exposures_product.yml", "original_file_path": "models/03_marts/product_inventory/_exposures_product.yml", "name": "B&S_Topseller OutofStock Report", "type": "dashboard", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "Performance of product top seller with currently no stock", "maturity": null, "meta": {}, "tags": [], "url": "https://docs.google.com/spreadsheets/d/1t2Q5op-mpkRwgzDSNholIvoOqsjE1fTT0dkuX84d6Yo/edit#gid=528521734", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.product_sku_and_season"]}, "refs": [["product_sku_and_season"]], "sources": [], "created_at": 1663750854.2196229}, "exposure.sql_repository_bz.SEO_Overall Report": {"fqn": ["sql_repository_bz", "03_marts", "seo_analytics", "SEO_Overall Report"], "unique_id": "exposure.sql_repository_bz.SEO_Overall Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/seo_analytics/_exposures_seo_analytics.yml", "original_file_path": "models/03_marts/seo_analytics/_exposures_seo_analytics.yml", "name": "SEO_Overall Report", "type": "dashboard", "owner": {"email": "daniel-juraj.zidaric@bergzeit.de", "name": "Danny Zidaric"}, "resource_type": "exposure", "description": "SEO kpis and metrics", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/s/nfVTHBmq9kY", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.seo_crawl_lp_in_sitemap", "model.sql_repository_bz.seo_ga_pagespeed_sessions_transactions", "model.sql_repository_bz.seo_gsc_data_for_top_pages", "model.sql_repository_bz.seo_gsc_ga_data_for_mag_reworked", "model.sql_repository_bz.seo_gsc_url_age", "model.sql_repository_bz.seo_search_query_by_brand", "model.sql_repository_bz.seo_jira_finished_ifront_tickets", "model.sql_repository_bz.seo_pagespeed_web_vitals_data"]}, "refs": [["seo_crawl_lp_in_sitemap"], ["seo_ga_pagespeed_sessions_transactions"], ["seo_gsc_data_for_top_pages"], ["seo_gsc_ga_data_for_mag_reworked"], ["seo_gsc_url_age"], ["seo_search_query_by_brand"], ["seo_jira_finished_ifront_tickets"], ["seo_pagespeed_web_vitals_data"]], "sources": [], "created_at": 1663750854.2707505}, "exposure.sql_repository_bz.SEO_Pagespeed Report": {"fqn": ["sql_repository_bz", "03_marts", "seo_analytics", "SEO_Pagespeed Report"], "unique_id": "exposure.sql_repository_bz.SEO_Pagespeed Report", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/seo_analytics/_exposures_seo_analytics.yml", "original_file_path": "models/03_marts/seo_analytics/_exposures_seo_analytics.yml", "name": "SEO_Pagespeed Report", "type": "dashboard", "owner": {"email": "christopher.gutknecht@bergzeit.de", "name": "Christopher Gutknecht"}, "resource_type": "exposure", "description": "", "maturity": null, "meta": {}, "tags": [], "url": null, "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.seo_pagespeed_web_vitals_data"]}, "refs": [["seo_pagespeed_web_vitals_data"]], "sources": [], "created_at": 1663750854.277563}, "exposure.sql_repository_bz.LP SEO Monitor": {"fqn": ["sql_repository_bz", "03_marts", "seo_analytics", "LP SEO Monitor"], "unique_id": "exposure.sql_repository_bz.LP SEO Monitor", "package_name": "sql_repository_bz", "root_path": "/tmp/jobs/83484262/target", "path": "03_marts/seo_analytics/_exposures_seo_analytics.yml", "original_file_path": "models/03_marts/seo_analytics/_exposures_seo_analytics.yml", "name": "LP SEO Monitor", "type": "dashboard", "owner": {"email": "corinna.trube@bergzeit.de", "name": "Corinna Trube"}, "resource_type": "exposure", "description": "Landing page KPIs for bergzeit.de", "maturity": null, "meta": {}, "tags": [], "url": "https://datastudio.google.com/u/0/reporting/60ec3498-61e3-497a-ae85-23395af5cd38/page/04R2", "depends_on": {"macros": [], "nodes": ["model.sql_repository_bz.seo_crawl_lp_in_sitemap"]}, "refs": [["seo_crawl_lp_in_sitemap"]], "sources": [], "created_at": 1663750854.2828815}}, "metrics": {}, "selectors": {}, "disabled": {"model.ga4.stg_ga4__derived_user_properties": [{"raw_sql": "{{ config(\n  enabled = true if var('derived_user_properties', false) else false,\n  materialized = \"table\"\n) }}\n\n-- Remove null user_keys (users with privacy enabled)\nwith events_from_valid_users as (\n    select * from {{ref('stg_ga4__events')}}\n    where user_key is not null\n),\nunnest_user_properties as\n(\n    select \n        user_key,\n        event_timestamp\n        {% for up in var('derived_user_properties', []) %}\n            ,{{ ga4.unnest_key('event_params',  up.event_parameter ,  up.value_type ) }}\n        {% endfor %}\n    from events_from_valid_users\n)\n-- create 1 CTE per user property that pulls only events with non-null values for that event parameters. \n-- Find the most recent property for that user and join later\n{% for up in var('derived_user_properties', []) %}\n,non_null_{{up.event_parameter}} as\n(\n    select\n        user_key,\n        event_timestamp,\n        {{up.event_parameter}}\n    from unnest_user_properties\n    where\n        {{up.event_parameter}} is not null\n),\nlast_value_{{up.event_parameter}} as \n(\n    select\n        user_key,\n        LAST_VALUE({{ up.event_parameter }}) OVER (PARTITION BY user_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS {{up.user_property_name}}\n    from non_null_{{up.event_parameter}}\n),\nlast_value_{{up.event_parameter}}_grouped as \n(\n    select\n        user_key,\n        {{up.user_property_name}}\n    from last_value_{{up.event_parameter}}\n    group by user_key, {{up.user_property_name}}\n)\n{% endfor %}\n,\nuser_keys as \n(\n    select distinct\n        user_key\n    from events_from_valid_users\n),\njoin_properties as \n(\n    select\n        user_key\n        {% for up in var('derived_user_properties', []) %}\n        ,last_value_{{up.event_parameter}}_grouped.{{up.user_property_name}}\n        {% endfor %}\n    from user_keys\n    {% for up in var('derived_user_properties', []) %}\n    left join last_value_{{up.event_parameter}}_grouped using (user_key)\n    {% endfor %}\n)\n\n\nselect distinct * from join_properties", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "stg_ga4__derived_user_properties"], "unique_id": "model.ga4.stg_ga4__derived_user_properties", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/stg_ga4__derived_user_properties.sql", "original_file_path": "models/staging/ga4/stg_ga4__derived_user_properties.sql", "name": "stg_ga4__derived_user_properties", "alias": "stg_ga4__derived_user_properties", "checksum": {"name": "sha256", "checksum": "944d714cdfdcb22a5e7a38047916d6f8296f87674391953058ad42d3f776d843"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1663750849.7365937}], "model.ga4.stg_ga4__user_properties": [{"raw_sql": "{{ config(\n  enabled = true if var('user_properties', false) else false,\n  materialized = \"table\"\n) }}\n\n-- Remove null user_keys (users with privacy enabled)\nwith events_from_valid_users as (\n    select * from {{ref('stg_ga4__events')}}\n    where user_key is not null\n),\nunnest_user_properties as\n(\n    select \n        user_key,\n        event_timestamp\n        {% for up in var('user_properties', []) %}\n            ,{{ ga4.unnest_key('user_properties',  up.user_property_name ,  up.value_type ) }}\n        {% endfor %}\n    from events_from_valid_users\n)\n-- create 1 CTE per user property \n{% for up in var('user_properties', []) %}\n,non_null_{{up.user_property_name}} as\n(\n    select\n        user_key,\n        event_timestamp,\n        {{up.user_property_name}}\n    from unnest_user_properties\n    where\n        {{up.user_property_name}} is not null\n),\nlast_value_{{up.user_property_name}} as \n(\n    select\n        user_key,\n        LAST_VALUE({{ up.user_property_name }}) OVER (PARTITION BY user_key ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS {{up.user_property_name}}\n    from non_null_{{up.user_property_name}}\n),\nlast_value_{{up.user_property_name}}_grouped as \n(\n    select\n        user_key,\n        {{up.user_property_name}}\n    from last_value_{{up.user_property_name}}\n    group by user_key, {{up.user_property_name}}\n)\n{% endfor %}\n,\nuser_keys as \n(\n    select distinct\n        user_key\n    from events_from_valid_users\n),\njoin_properties as \n(\n    select\n        user_key\n        {% for up in var('user_properties', []) %}\n        ,last_value_{{up.user_property_name}}_grouped.{{up.user_property_name}}\n        {% endfor %}\n    from user_keys\n    {% for up in var('user_properties', []) %}\n    left join last_value_{{up.user_property_name}}_grouped using (user_key)\n    {% endfor %}\n)\n\n\nselect distinct * from join_properties", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "stg_ga4__user_properties"], "unique_id": "model.ga4.stg_ga4__user_properties", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/stg_ga4__user_properties.sql", "original_file_path": "models/staging/ga4/stg_ga4__user_properties.sql", "name": "stg_ga4__user_properties", "alias": "stg_ga4__user_properties", "checksum": {"name": "sha256", "checksum": "bb4d7a489c59b19d26360248eeb8bb502dc6765039ff195f15992c7d94f088f2"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1663750849.7576668}], "model.ga4.stg_ga4__session_conversions": [{"raw_sql": "{{ config(\n  enabled= var('conversion_events', false) != false\n) }}\n\nwith events as (\n    select \n        1 as event_count, \n        session_key, \n        event_name\n    from {{ref('stg_ga4__events')}}\n),\nsessions as (\n    select \n        distinct session_key\n    from events\n)\n-- For loop that creates 1 cte per conversions, grouped by session key\n{% for ce in var('conversion_events',[]) %}\n,\nconversion_{{ce}} as (\n    select\n        session_key,\n        sum(event_count) as conversion_count\n    from events\n    where event_name = '{{ce}}'\n    group by session_key\n)\n\n{% endfor %}\n\n,\n-- Finally, join in each conversion count as a new column\nfinal_pivot as (\n    select \n        session_key\n        {% for ce in var('conversion_events',[]) %}\n        , ifnull(conversion_{{ce}}.conversion_count,0) as {{ce}}_count\n        {% endfor %}\n    from sessions\n    {% for ce in var('conversion_events',[]) %}\n    left join conversion_{{ce}} using (session_key)\n    {% endfor %}\n)\n\nselect * from final_pivot", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "stg_ga4__session_conversions"], "unique_id": "model.ga4.stg_ga4__session_conversions", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/stg_ga4__session_conversions.sql", "original_file_path": "models/staging/ga4/stg_ga4__session_conversions.sql", "name": "stg_ga4__session_conversions", "alias": "stg_ga4__session_conversions", "checksum": {"name": "sha256", "checksum": "719e1891bb7d996a6cc7c2dbdcf250b0a172d873012f0f28884816431860d11c"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750849.7813768}], "model.ga4.stg_ga4__page_conversions": [{"raw_sql": "{{ config(\n  enabled= var('conversion_events', false) != false\n) }}\nwith events as (\n    select \n        1 as event_count,\n        event_name,\n        event_date_dt,\n        extract( hour from (select  timestamp_micros(event_timestamp))) as hour,\n        page_location\n    from {{ref('stg_ga4__events')}}\n),\npk as (\n    select\n        distinct (concat( cast(event_date_dt as string), cast(hour as string), page_location )) as page_key,\n    from events\n)\n-- For loop that creates 1 cte per conversions, grouped by page_location\n{% for ce in var('conversion_events',[]) %}\n,\nconversion_{{ce}} as (\n    select\n        distinct (concat( cast(event_date_dt as string), cast(hour as string), page_location )) as page_key,\n        sum(event_count) as conversion_count,\n    from events\n    where event_name = '{{ce}}'\n    group by page_key\n)\n\n{% endfor %}\n\n,\n-- Finally, join in each conversion count as a new column\nfinal_pivot as (\n    select \n        page_key\n        {% for ce in var('conversion_events',[]) %}\n        , ifnull(conversion_{{ce}}.conversion_count,0) as {{ce}}_count\n        {% endfor %}\n    from pk\n    {% for ce in var('conversion_events',[]) %}\n    left join conversion_{{ce}} using (page_key)\n    {% endfor %}\n)\n\nselect * from final_pivot", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "stg_ga4__page_conversions"], "unique_id": "model.ga4.stg_ga4__page_conversions", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/stg_ga4__page_conversions.sql", "original_file_path": "models/staging/ga4/stg_ga4__page_conversions.sql", "name": "stg_ga4__page_conversions", "alias": "stg_ga4__page_conversions", "checksum": {"name": "sha256", "checksum": "acca540c5b1894e9d517e307c6997c37814203890a1ef0bc30ffde18d84a2890"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750849.812998}], "model.ga4.stg_ga4__event_remove_from_cart": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\nwith remove_from_cart_with_params as (\n  select * except (items),\n  (select items from unnest(items) items limit 1) as items\n  {% if var(\"remove_from_cart_custom_parameters\", \"none\") != \"none\" %}\n      {{ ga4.stage_custom_parameters( var(\"remove_from_cart_custom_parameters\") )}}\n  {% endif %}\nfrom {{ref('stg_ga4__events')}}, \nunnest(items)\n where event_name = 'remove_from_cart'\n)\n\nselect * from remove_from_cart_with_params", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_remove_from_cart"], "unique_id": "model.ga4.stg_ga4__event_remove_from_cart", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_remove_from_cart.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_remove_from_cart.sql", "name": "stg_ga4__event_remove_from_cart", "alias": "stg_ga4__event_remove_from_cart", "checksum": {"name": "sha256", "checksum": "91765a023889f1fb56daad7cd5c9c5309c26ef3e2e04c11040981b29ac34a13f"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750849.871662}], "model.ga4.stg_ga4__event_add_payment_info": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\n\n with add_payment_info_with_params as (\n   select *,\n      {{ ga4.unnest_key('event_params', 'coupon') }},\n      {{ ga4.unnest_key('event_params', 'currency') }},\n      {{ ga4.unnest_key('event_params', 'payment_type') }},\n      {{ ga4.unnest_key('event_params', 'value', 'float_value') }}\n      {% if var(\"add_payment_info_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"add_payment_info_custom_parameters\") )}}\n      {% endif %}\n from {{ref('stg_ga4__events')}}\n where event_name = 'add_payment_info'\n)\n\nselect * from add_payment_info_with_params", "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_add_payment_info"], "unique_id": "model.ga4.stg_ga4__event_add_payment_info", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_add_payment_info.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_add_payment_info.sql", "name": "stg_ga4__event_add_payment_info", "alias": "stg_ga4__event_add_payment_info", "checksum": {"name": "sha256", "checksum": "e7bd8bcf5128af2477b71793ffaad9bd926bf2a89e556be146c4309ca6ca5b6d"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750849.8821719}], "model.ga4.stg_ga4__event_select_promotion": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\nwith select_promotion_with_params as (\n  select * except (items),\n  (select items from unnest(items) items limit 1) as items\n  {% if var(\"select_promotion_custom_parameters\", \"none\") != \"none\" %}\n    {{ ga4.stage_custom_parameters( var(\"select_promotion_custom_parameters\") )}}\n  {% endif %}\n from {{ref('stg_ga4__events')}}, \n  unnest(items)\n where event_name = 'select_promotion'\n)\n\nselect * from select_promotion_with_params", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_select_promotion"], "unique_id": "model.ga4.stg_ga4__event_select_promotion", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_select_promotion.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_select_promotion.sql", "name": "stg_ga4__event_select_promotion", "alias": "stg_ga4__event_select_promotion", "checksum": {"name": "sha256", "checksum": "d133d7438b10bdcb304d43454a8a2dab77c3c2a69cb1a4f7b386d80893e751d2"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750849.89357}], "model.ga4.stg_ga4__event_add_to_cart": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\n with add_to_cart_with_params as (\n   select *except (items),\n   (select items FROM UNNEST(items) items LIMIT 1) as items\n    {% if var(\"add_to_cart_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"add_to_cart_custom_parameters\") )}}\n    {% endif %}\n from {{ref('stg_ga4__events')}}, \n  unnest(items)\n where event_name = 'add_to_cart'\n)\n\nselect * from add_to_cart_with_params", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_add_to_cart"], "unique_id": "model.ga4.stg_ga4__event_add_to_cart", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_add_to_cart.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_add_to_cart.sql", "name": "stg_ga4__event_add_to_cart", "alias": "stg_ga4__event_add_to_cart", "checksum": {"name": "sha256", "checksum": "607aad180f7a6421b9b6a49c701c70d70c73f88e5a389f072a5fcea2396f1f75"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750849.9034975}], "model.ga4.stg_ga4__event_view_item": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\nwith view_item_with_params as (\n  select * except (items),\n  (select items from unnest(items) items limit 1) as items\n  {% if var(\"view_item_custom_parameters\", \"none\") != \"none\" %}\n      {{ ga4.stage_custom_parameters( var(\"view_item_custom_parameters\") )}}\n  {% endif %}\n from {{ref('stg_ga4__events')}}, \n  unnest(items)\n where event_name = 'view_item'\n)\n\nselect * from view_item_with_params", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_view_item"], "unique_id": "model.ga4.stg_ga4__event_view_item", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_view_item.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_view_item.sql", "name": "stg_ga4__event_view_item", "alias": "stg_ga4__event_view_item", "checksum": {"name": "sha256", "checksum": "72e6a2415bfcc19eda8dcda8a6fd4766bc7f17704b9f0c7be1eaa8e0b9fb72b7"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750849.9165754}], "model.ga4.stg_ga4__event_purchase": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\nwith purchase_with_params as (\n  select * except (ecommerce),\n    ecommerce.total_item_quantity,\n    ecommerce.purchase_revenue_in_usd,\n    ecommerce.purchase_revenue,\n    ecommerce.shipping_value_in_usd,\n    ecommerce.shipping_value,\n    ecommerce.tax_value_in_usd,\n    ecommerce.tax_value,\n    ecommerce.unique_items,\n    {{ ga4.unnest_key('event_params', 'coupon') }},\n    {{ ga4.unnest_key('event_params', 'transaction_id') }},\n    {{ ga4.unnest_key('event_params', 'currency') }},\n    {{ ga4.unnest_key('event_params', 'value', 'float_value') }},\n    {{ ga4.unnest_key('event_params', 'tax', 'float_value') }},\n    {{ ga4.unnest_key('event_params', 'shipping', 'float_value') }},\n    {{ ga4.unnest_key('event_params', 'affiliation') }}\n    {% if var(\"purchase_custom_parameters\", \"none\") != \"none\" %}\n      {{ ga4.stage_custom_parameters( var(\"purchase_custom_parameters\") )}}\n    {% endif %}\n from {{ref('stg_ga4__events')}}\n where event_name = 'purchase'\n)\n\nselect * from purchase_with_params", "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_purchase"], "unique_id": "model.ga4.stg_ga4__event_purchase", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_purchase.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_purchase.sql", "name": "stg_ga4__event_purchase", "alias": "stg_ga4__event_purchase", "checksum": {"name": "sha256", "checksum": "47d4202a01bc9ca318a9644bcd70ecf9ad798cade1d888f4ee912752d017715d"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750849.9286988}], "model.ga4.stg_ga4__event_select_item": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\nwith select_item_with_params as (\n  select * except (items),\n  (select items from unnest(items) items limit 1) as items\n  {% if var(\"select_item_custom_parameters\", \"none\") != \"none\" %}\n      {{ ga4.stage_custom_parameters( var(\"select_item_custom_parameters\") )}}\n  {% endif %}\n from {{ref('stg_ga4__events')}},\n  unnest(items)   \n where event_name = 'select_item'\n)\n\nselect * from select_item_with_params", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_select_item"], "unique_id": "model.ga4.stg_ga4__event_select_item", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_select_item.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_select_item.sql", "name": "stg_ga4__event_select_item", "alias": "stg_ga4__event_select_item", "checksum": {"name": "sha256", "checksum": "fb310552253c7e62c5a539b7c055879f7078f0087d936c1eea056c857e2639fd"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750849.9431286}], "model.ga4.stg_ga4__event_view_cart": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\nwith view_cart_with_params as (\n  select *,\n    {{ ga4.unnest_key('event_params', 'currency') }},\n    {{ ga4.unnest_key('event_params', 'value', 'float_value') }}\n    {% if var(\"view_cart_custom_parameters\", \"none\") != \"none\" %}\n      {{ ga4.stage_custom_parameters( var(\"view_cart_custom_parameters\") )}}\n    {% endif %}\n from {{ref('stg_ga4__events')}}\n where event_name = 'view_cart'\n)\n\nselect * from view_cart_with_params", "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_view_cart"], "unique_id": "model.ga4.stg_ga4__event_view_cart", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_view_cart.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_view_cart.sql", "name": "stg_ga4__event_view_cart", "alias": "stg_ga4__event_view_cart", "checksum": {"name": "sha256", "checksum": "2850dd137d7ac5dca8be3f44a39a1b41dbee12ccc3e0d0dee0568590cb71c8c7"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750849.9536965}], "model.ga4.stg_ga4__event_view_item_list": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\nwith view_item_list_with_params as (\n  select *\n  {% if var(\"view_item_list_custom_parameters\", \"none\") != \"none\" %}\n    {{ ga4.stage_custom_parameters( var(\"view_item_list_custom_parameters\") )}}\n  {% endif %}\n from {{ref('stg_ga4__events')}}    \n where event_name = 'view_item_list'\n)\n\nselect * from view_item_list_with_params", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_view_item_list"], "unique_id": "model.ga4.stg_ga4__event_view_item_list", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_view_item_list.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_view_item_list.sql", "name": "stg_ga4__event_view_item_list", "alias": "stg_ga4__event_view_item_list", "checksum": {"name": "sha256", "checksum": "9cb243d6707bc51c4bcda014aabbe70bf899f3a62bc08783440866f355d87a8e"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750849.9660888}], "model.ga4.stg_ga4__event_begin_checkout": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\n with begin_checkout_with_params as (\n   select *\n    {% if var(\"begin_checkout_custom_parameters\", \"none\") != \"none\" %}\n      {{ ga4.stage_custom_parameters( var(\"begin_checkout_custom_parameters\") )}}\n    {% endif %}\n from {{ref('stg_ga4__events')}}    \n where event_name = 'begin_checkout'\n)\n\nselect * from begin_checkout_with_params", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_begin_checkout"], "unique_id": "model.ga4.stg_ga4__event_begin_checkout", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_begin_checkout.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_begin_checkout.sql", "name": "stg_ga4__event_begin_checkout", "alias": "stg_ga4__event_begin_checkout", "checksum": {"name": "sha256", "checksum": "e56332691578771a21da0d96f5a27b64f8f9815111092b187a302f7cbe76323e"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750849.9841042}], "model.ga4.stg_ga4__event_add_shipping_info": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\n with add_shipping_info_with_params as (\n   select *,\n      {{ ga4.unnest_key('event_params', 'coupon') }},\n      {{ ga4.unnest_key('event_params', 'currency') }},\n      {{ ga4.unnest_key('event_params', 'shipping_tier') }},\n      {{ ga4.unnest_key('event_params', 'value', 'float_value') }}\n      {% if var(\"add_shipping_info_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"add_shipping_info_custom_parameters\") )}}\n      {% endif %}\n from {{ref('stg_ga4__events')}}\n where event_name = 'add_shipping_info'\n)\n\nselect * from add_shipping_info_with_params", "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_add_shipping_info"], "unique_id": "model.ga4.stg_ga4__event_add_shipping_info", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_add_shipping_info.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_add_shipping_info.sql", "name": "stg_ga4__event_add_shipping_info", "alias": "stg_ga4__event_add_shipping_info", "checksum": {"name": "sha256", "checksum": "cfa02054adf102b78b29760d95e025adbffb0f2d8d8ca9672dc75033996ee8db"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750849.997487}], "model.ga4.stg_ga4__event_view_promotion": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\nwith view_promotion_with_params as (\n  select * except (items),\n  (select items from unnest(items) items limit 1) as items\n  {% if var(\"view_promotion_custom_parameters\", \"none\") != \"none\" %}\n    {{ ga4.stage_custom_parameters( var(\"view_promotion_custom_parameters\") )}}\n  {% endif %}\n from {{ref('stg_ga4__events')}}, \n  unnest(items)\n where event_name = 'view_promotion'\n)\n\nselect * from view_promotion_with_params", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_view_promotion"], "unique_id": "model.ga4.stg_ga4__event_view_promotion", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_view_promotion.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_view_promotion.sql", "name": "stg_ga4__event_view_promotion", "alias": "stg_ga4__event_view_promotion", "checksum": {"name": "sha256", "checksum": "e78d9f66c86b390abce89c6b9e177b20ddf06c831847840675f2283a72d90326"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750850.011386}], "model.ga4.stg_ga4__event_add_to_wishlist": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\n with add_to_wishlist_with_params as (\n   select * except (items),\n   (select items FROM unnest(items) items LIMIT 1) as items,\n      {{ ga4.unnest_key('event_params', 'currency') }},\n      {{ ga4.unnest_key('event_params', 'value', 'float_value') }}\n      {% if var(\"add_to_wishlist_custom_parameters\", \"none\") != \"none\" %}\n        {{ ga4.stage_custom_parameters( var(\"add_to_wishlist_custom_parameters\") )}}\n      {% endif %}\n from {{ref('stg_ga4__events')}}, \n  unnest(items)\n where event_name = 'add_to_wishlist'\n)\n\nselect * from add_to_wishlist_with_params", "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_add_to_wishlist"], "unique_id": "model.ga4.stg_ga4__event_add_to_wishlist", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_add_to_wishlist.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_add_to_wishlist.sql", "name": "stg_ga4__event_add_to_wishlist", "alias": "stg_ga4__event_add_to_wishlist", "checksum": {"name": "sha256", "checksum": "0809909e3c4da768b091e5d09fce8a0ac6b6cdd1b8e3ec96580fa4ce4c45ff79"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750850.0226374}], "model.ga4.stg_ga4__event_refund": [{"raw_sql": "{{\n  config(\n      enabled = false,\n  )\n}}\nwith refund_with_params as (\n  select * except (ecommerce),\n    ecommerce.total_item_quantity,\n    ecommerce.purchase_revenue_in_usd,\n    ecommerce.purchase_revenue,\n    ecommerce.shipping_value_in_usd,\n    ecommerce.shipping_value,\n    ecommerce.refund_value_in_usd,\n    ecommerce.refund_value,\n    ecommerce.tax_value_in_usd,\n    ecommerce.tax_value,\n    ecommerce.unique_items,\n    {{ ga4.unnest_key('event_params', 'coupon') }},\n    {{ ga4.unnest_key('event_params', 'transaction_id') }},\n    {{ ga4.unnest_key('event_params', 'currency') }},\n    {{ ga4.unnest_key('event_params', 'value', 'float_value') }},\n    {{ ga4.unnest_key('event_params', 'tax', 'float_value') }},\n    {{ ga4.unnest_key('event_params', 'shipping', 'float_value') }},\n    {{ ga4.unnest_key('event_params', 'affiliation') }},\n    {% if var(\"refund_custom_parameters\", \"none\") != \"none\" %}\n      {{ ga4.stage_custom_parameters( var(\"refund_custom_parameters\") )}}\n    {% endif %}\n from {{ref('stg_ga4__events')}}\n where event_name = 'refund'\n)\n\nselect * from refund_with_params", "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "recommended_events", "stg_ga4__event_refund"], "unique_id": "model.ga4.stg_ga4__event_refund", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/recommended_events/stg_ga4__event_refund.sql", "original_file_path": "models/staging/ga4/recommended_events/stg_ga4__event_refund.sql", "name": "stg_ga4__event_refund", "alias": "stg_ga4__event_refund", "checksum": {"name": "sha256", "checksum": "5929b1c256b946bb87ce04303cd75194e481e9bf55f3976b0a85ea7dff16bb59"}, "tags": [], "refs": [["stg_ga4__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750850.0349035}], "model.ga4.base_ga4__events_intraday": [{"raw_sql": "{% if var('frequency', 'daily') == 'daily+streaming' %}\n    {{ config(\n    enabled = true \n    ) }}\n{% else %}\n    {{ config(\n    enabled = false \n    ) }}\n{% endif %}\n\n-- This model will be unioned with `base_ga4__events` which means that their columns must match\nwith source as (\n    select \n        parse_date('%Y%m%d',event_date) as event_date_dt,\n        event_timestamp,\n        event_name,\n        event_params,\n        event_previous_timestamp,\n        event_value_in_usd,\n        event_bundle_sequence_id,\n        event_server_timestamp_offset,\n        user_id,\n        user_pseudo_id,\n        privacy_info,\n        user_properties,\n        user_first_touch_timestamp,\n        user_ltv,\n        device,\n        geo,\n        app_info,\n        traffic_source,\n        stream_id,\n        platform,\n        ecommerce,\n        items,\n    from {{ source('ga4', 'events_intraday') }}\n),\nrenamed as (\n    select \n        event_date_dt,\n        event_timestamp,\n        lower(replace(trim(event_name), \" \", \"_\")) as event_name, -- Clean up all event names to be snake cased\n        event_params,\n        event_previous_timestamp,\n        event_value_in_usd,\n        event_bundle_sequence_id,\n        event_server_timestamp_offset,\n        user_id,\n        user_pseudo_id,\n        privacy_info,\n        user_properties,\n        user_first_touch_timestamp,\n        user_ltv,\n        device,\n        geo,\n        app_info,\n        traffic_source,\n        stream_id,\n        platform,\n        ecommerce,\n        items,\n        {{ ga4.unnest_key('event_params', 'ga_session_id', 'int_value') }},\n        {{ ga4.unnest_key('event_params', 'page_location') }},\n        {{ ga4.unnest_key('event_params', 'ga_session_number',  'int_value') }},\n        (case when (SELECT value.string_value FROM unnest(event_params) WHERE key = \"session_engaged\") = \"1\" then 1 end) as session_engaged,\n        {{ ga4.unnest_key('event_params', 'engagement_time_msec', 'int_value') }},\n        {{ ga4.unnest_key('event_params', 'page_title') }},\n        {{ ga4.unnest_key('event_params', 'page_referrer') }},\n        {{ ga4.unnest_key('event_params', 'source') }},\n        {{ ga4.unnest_key('event_params', 'medium') }},\n        {{ ga4.unnest_key('event_params', 'campaign') }},\n        CASE \n            WHEN event_name = 'page_view' THEN 1\n            ELSE 0\n        END AS is_page_view,\n        CASE \n            WHEN event_name = 'purchase' THEN 1\n            ELSE 0\n        END AS is_purchase\n    from source\n)\n\nselect * from renamed", "resource_type": "model", "depends_on": {"macros": ["macro.ga4.unnest_key"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "bergzeit", "schema": "dbt", "fqn": ["ga4", "staging", "ga4", "base", "base_ga4__events_intraday"], "unique_id": "model.ga4.base_ga4__events_intraday", "package_name": "ga4", "root_path": "/tmp/jobs/83484262/target/dbt_packages/ga4", "path": "staging/ga4/base/base_ga4__events_intraday.sql", "original_file_path": "models/staging/ga4/base/base_ga4__events_intraday.sql", "name": "base_ga4__events_intraday", "alias": "base_ga4__events_intraday", "checksum": {"name": "sha256", "checksum": "eeeaabb8251f0f2e81137943907242b7b49c65a9957f883b4799e1ae1c931ed5"}, "tags": [], "refs": [], "sources": [["ga4", "events_intraday"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ga4://models/staging/ga4/stg_ga4.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1663750850.2232976}]}, "parent_map": {"model.sql_repository_bz.int_attribution_markov_path_level_monthly": ["model.sql_repository_bz.stg_channelattribution_path_level"], "model.sql_repository_bz.int_weather_avg_temp_to_monthly_avg": ["model.sql_repository_bz.int_weather_avg_temp_by_country", "model.sql_repository_bz.stg_weather_dach_daily"], "model.sql_repository_bz.int_weather_avg_temp_by_country": ["model.sql_repository_bz.stg_weather_dach_daily"], "model.sql_repository_bz.int_gads_de_adstats_and_attributes": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current", "model.sql_repository_bz.stg_gads_all_ads_info_current", "model.sql_repository_bz.stg_gads_all_ads_stats", "model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "model.sql_repository_bz.int_gads_all_query_stats": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_query_stats"], "model.sql_repository_bz.int_gads_all_crawled_ads_urls_classified": ["model.sql_repository_bz.stg_gads_all_crawled_ads_urls"], "model.sql_repository_bz.int_gads_all_feedadgroups": [], "model.sql_repository_bz.int_gads_product_data_and_shopping_by_day": ["model.sql_repository_bz.int_gads_product_stats_by_day", "model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day"], "model.sql_repository_bz.int_gads_all_shopping_criteria": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current", "model.sql_repository_bz.stg_gads_all_campaigns_info_current", "model.sql_repository_bz.stg_gads_all_criteria_info_current"], "model.sql_repository_bz.int_gads_product_stats_by_day": ["model.sql_repository_bz.stg_gads_all_product_stats"], "model.sql_repository_bz.int_gads_campaign_stats_by_brand": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_campaign_stats"], "model.sql_repository_bz.int_gads_all_product_stats_by_brand": ["model.sql_repository_bz.stg_gads_all_product_stats"], "model.sql_repository_bz.int_gads_all_dynamic_query_cost_by_brand": ["model.sql_repository_bz.int_gads_all_query_stats", "model.sql_repository_bz.stg_gmc_product_brands"], "model.sql_repository_bz.int_cp_product_attributes_90d": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"], "model.sql_repository_bz.int_cp_product_price_overall": ["model.sql_repository_bz.int_cp_product_attributes_90d"], "model.sql_repository_bz.int_cp_source_feeds_with_errors": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "model.sql_repository_bz.int_cp_product_price_per_day": ["model.sql_repository_bz.int_cp_product_attributes_90d"], "model.sql_repository_bz.int_gmc_most_recent_prod_attr": ["model.sql_repository_bz.stg_gmc_all_products", "model.sql_repository_bz.stg_gmc_product_attributes_daily"], "model.sql_repository_bz.int_gmc_prices_chf_to_eur": ["model.sql_repository_bz.stg_gmc_all_products"], "model.sql_repository_bz.int_gmc_current_brands": ["model.sql_repository_bz.stg_gmc_all_products"], "model.sql_repository_bz.int_gmc_stock_feeds_consolidated": ["model.sql_repository_bz.stg_gmc_product_attributes_daily", "model.sql_repository_bz.stg_gmc_product_stock"], "model.sql_repository_bz.int_gmc_max_sku_count_by_parent": ["model.sql_repository_bz.stg_gmc_all_products"], "model.sql_repository_bz.int_gmc_avg_return_rates_by_country": ["model.sql_repository_bz.stg_qlik_return_rates"], "model.sql_repository_bz.int_gmc_avg_return_rates_overall": ["model.sql_repository_bz.stg_qlik_return_rates"], "model.sql_repository_bz.int_gmc_current_brands_and_countries": ["model.sql_repository_bz.int_gmc_current_brands"], "model.sql_repository_bz.int_gmc_current_season": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"], "model.sql_repository_bz.int_gmc_current_parent_ids": ["model.sql_repository_bz.stg_gmc_all_products"], "model.sql_repository_bz.int_gmc_brands_to_url_format": ["model.sql_repository_bz.stg_gmc_product_brands"], "model.sql_repository_bz.int_gmc_product_categories": ["model.sql_repository_bz.stg_gmc_all_products", "model.sql_repository_bz.stg_gmc_all_products"], "model.sql_repository_bz.int_gmc_missing_product_groups": ["model.sql_repository_bz.int_gads_all_shopping_criteria", "model.sql_repository_bz.int_gmc_current_brands_and_countries"], "model.sql_repository_bz.int_gmc_sku_count_by_day": ["model.sql_repository_bz.int_gmc_current_parent_ids", "model.sql_repository_bz.int_gmc_max_sku_count_by_parent", "model.sql_repository_bz.stg_gmc_all_products"], "model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day": ["model.sql_repository_bz.int_gmc_most_recent_prod_attr", "model.sql_repository_bz.int_gmc_stock_feeds_consolidated", "model.sql_repository_bz.stg_gmc_all_products", "model.sql_repository_bz.stg_gmc_product_attributes_daily"], "model.sql_repository_bz.int_consentless_transactions_eur": ["model.sql_repository_bz.stg_consentless_transactions", "model.sql_repository_bz.stg_gsheets_currency_factor_all_countries"], "model.sql_repository_bz.int_consentless_offline_pages": ["model.sql_repository_bz.stg_consentless_page_views_live"], "model.sql_repository_bz.int_consentless_transactions_aggr_by_day_country": ["model.sql_repository_bz.int_consentless_transactions_eur"], "model.sql_repository_bz.int_awin_transactions_pending": ["model.sql_repository_bz.stg_awin_orders_all", "model.sql_repository_bz.stg_awin_orders_all"], "model.sql_repository_bz.int_ga_cart_products_and_prod_attr": ["model.sql_repository_bz.stg_ga_product_checkouts", "model.sql_repository_bz.stg_gmc_product_attributes_daily"], "model.sql_repository_bz.int_ga_list_page_events": ["model.sql_repository_bz.stg_ga_events_per_page"], "model.sql_repository_bz.int_ga_product_eecactions_by_day": ["model.sql_repository_bz.stg_ga_ecommerce_actions"], "model.sql_repository_bz.int_ga_product_performance_with_ad_touchpoints": ["model.sql_repository_bz.stg_ga_product_performance_profit_bidding", "model.sql_repository_bz.stg_ga_transactions_with_adclick_involvement"], "model.sql_repository_bz.int_ga_order_value_by_month_channel": ["model.sql_repository_bz.stg_ga_transactions"], "model.sql_repository_bz.int_ga_eecactions_revenue": ["model.sql_repository_bz.int_ga_product_checkouts_by_day", "model.sql_repository_bz.int_ga_product_eecactions_by_day", "model.sql_repository_bz.int_ga_product_eecactions_by_day"], "model.sql_repository_bz._int_page_views_and_events_plp": ["model.sql_repository_bz.int_ga_page_views_and_types", "model.sql_repository_bz.int_ga_page_views_and_types"], "model.sql_repository_bz.int_ga_product_list": ["model.sql_repository_bz.stg_ga_products"], "model.sql_repository_bz.int_ga_pdp_entrances_transactions": ["model.sql_repository_bz.int_gmc_most_recent_prod_attr", "model.sql_repository_bz.stg_ga_product_checkouts", "model.sql_repository_bz.stg_ga_product_detail_pages"], "model.sql_repository_bz.int_ga_product_attr_and_ga_data_by_day": ["model.sql_repository_bz.int_ga_eecactions_revenue", "model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day"], "model.sql_repository_bz.int_ga_pdp_pageviews": ["model.sql_repository_bz.stg_ga_product_detail_pages"], "model.sql_repository_bz.int_ga_sessions_transactions": ["model.sql_repository_bz.stg_ga_session_totals", "model.sql_repository_bz.stg_ga_transactions"], "model.sql_repository_bz.int_ga_page_views_and_types": ["model.sql_repository_bz.stg_ga_page_types", "model.sql_repository_bz.stg_ga_pageviews"], "model.sql_repository_bz.int_ga_product_checkouts_by_day": ["model.sql_repository_bz.stg_ga_product_checkouts"], "model.sql_repository_bz.int_ga_performance_cost_monthly_by_channel": ["model.sql_repository_bz.int_ga_performance_cost_daily_by_channel"], "model.sql_repository_bz.int_ga_performance_cost_daily_by_channel": ["model.sql_repository_bz.stg_ga_performance_costs"], "model.sql_repository_bz.int_ga_performance_cost_daily_validation": ["model.sql_repository_bz.stg_ga_performance_cost_validation", "model.sql_repository_bz.stg_ga_performance_costs"], "model.sql_repository_bz.int_ga4_sessions_transactions": ["model.sql_repository_bz.int_ga4_aggr_sessions", "model.sql_repository_bz.int_ga4_aggr_transactions"], "model.sql_repository_bz.int_ga_duplicate_teaser_events": ["model.sql_repository_bz.stg_ga_events_promotion"], "model.sql_repository_bz.int_ga4_aggr_sessions": ["model.sql_repository_bz.stg_ga4_events_standard"], "model.sql_repository_bz.int_ga4_aggr_transactions": ["model.sql_repository_bz.stg_ga4_events_checkout"], "model.sql_repository_bz.int_ga4_pageviews": ["model.sql_repository_bz.stg_ga4_events_standard"], "model.sql_repository_bz.int_ga_sessions_by_hit_count_bucket": ["model.sql_repository_bz.stg_ga_session_totals"], "model.sql_repository_bz.int_ga_average_hits_per_day": ["model.sql_repository_bz.stg_ga_session_totals"], "model.sql_repository_bz.int_ga_teaser_test": ["model.sql_repository_bz.stg_ga_events_promotion"], "model.sql_repository_bz.int_ga4_aggr_event_count": ["model.sql_repository_bz.stg_ga4_events_checkout", "model.sql_repository_bz.stg_ga4_events_custom", "model.sql_repository_bz.stg_ga4_events_standard"], "model.sql_repository_bz.int_ga_hits_by_property_and_day": ["model.sql_repository_bz.stg_ga_hits_all_properties"], "model.sql_repository_bz.int_gsc_query_by_brand": ["model.sql_repository_bz.int_gmc_product_categories", "model.sql_repository_bz.stg_gmc_product_brands", "model.sql_repository_bz.stg_gsc_data"], "model.sql_repository_bz.int_crawl_de_brg": ["model.sql_repository_bz.stg_crawl_gbot_logfiles"], "model.sql_repository_bz.int_gsc_and_crawl_data": ["model.sql_repository_bz.stg_crawl_gbot_logfiles", "model.sql_repository_bz.stg_gsc_data"], "model.sql_repository_bz.int_crawl_nondach_recent": ["model.sql_repository_bz.stg_crawl_gbot_logfiles"], "model.sql_repository_bz.int_sitemap_and_crawl_and_gsc_data": ["model.sql_repository_bz.stg_crawl_gbot_logfiles", "model.sql_repository_bz.stg_crawl_sitemap_urls_all", "model.sql_repository_bz.stg_gsc_data"], "model.sql_repository_bz.int_gsc_data_for_top_pages": ["model.sql_repository_bz.stg_gsc_data", "model.sql_repository_bz.stg_gsheets_seo_top_pages"], "model.sql_repository_bz.int_gsc_ga_urlage_def": ["model.sql_repository_bz.int_gsc_sitemap_urlage_def", "model.sql_repository_bz.int_gsc_sitemap_urlage_def", "model.sql_repository_bz.stg_ga_page_types", "model.sql_repository_bz.stg_ga_page_types"], "model.sql_repository_bz.int_gsc_data_shop_mag_label": ["model.sql_repository_bz.stg_gsc_data"], "model.sql_repository_bz.int_gsc_data_mag_reworked": ["model.sql_repository_bz.stg_ga_magazin_custom_dims", "model.sql_repository_bz.stg_gsc_data", "model.sql_repository_bz.stg_gsheets_seo_magazin_reworked"], "model.sql_repository_bz.int_gsc_sitemap_urlage_def": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all", "model.sql_repository_bz.stg_crawl_sitemap_urls_all", "model.sql_repository_bz.stg_gsc_data"], "model.sql_repository_bz.int_crawl_de_lp_in_sitemap": ["model.sql_repository_bz.stg_crawl_sitemap_urls_de"], "model.sql_repository_bz.int_nav_invoice_crmemo_combined": ["model.sql_repository_bz.int_nav_crmemo_line_aggregated", "model.sql_repository_bz.int_nav_invoice_line_aggregated"], "model.sql_repository_bz.int_nav_transactions_session_customer_attributes": ["model.sql_repository_bz.int_nav_invoice_crmemo_combined", "model.sql_repository_bz.stg_antavo_club_optins", "model.sql_repository_bz.stg_ga_transactions", "model.sql_repository_bz.stg_nav_customers"], "model.sql_repository_bz.int_nav_crmemo_line_aggregated": ["model.sql_repository_bz.stg_nav_credit_memo_header_and_lines"], "model.sql_repository_bz.int_nav_products_and_attributes": ["model.sql_repository_bz.int_gmc_most_recent_prod_attr", "model.sql_repository_bz.int_nav_products"], "model.sql_repository_bz.int_nav_transactions_and_customers": ["model.sql_repository_bz.stg_nav_customers", "model.sql_repository_bz.stg_nav_sales_channel_description", "model.sql_repository_bz.stg_nav_transactions"], "model.sql_repository_bz.int_nav_invoice_line_aggregated": ["model.sql_repository_bz.stg_nav_invoice_header_and_lines", "model.sql_repository_bz.stg_nav_sales_channel_description"], "model.sql_repository_bz.int_nav_invoice_crmemo_customer": ["model.sql_repository_bz.int_nav_invoice_crmemo_combined", "model.sql_repository_bz.stg_nav_customers"], "model.sql_repository_bz.int_nav_products": ["model.sql_repository_bz.stg_nav_credit_memo_header_and_lines", "model.sql_repository_bz.stg_nav_invoice_header_and_lines", "model.sql_repository_bz.stg_nav_sales_channel_description"], "model.sql_repository_bz.stg_channelattribution_channel_level": ["source.sql_repository_bz.channel_attribution.markov_attribution_channel_level"], "model.sql_repository_bz.stg_channelattribution_path_level": ["source.sql_repository_bz.channel_attribution.markov_attribution_path_level"], "model.sql_repository_bz.stg_weather_dach_daily": ["source.sql_repository_bz.weather_data.weather_dach_daily"], "model.sql_repository_bz.stg_weather_dach_7d_forecast": ["source.sql_repository_bz.weather_data.weather_dach_7d_forecast"], "model.sql_repository_bz.stg_gads_all_campaign_names": ["source.sql_repository_bz.google_ads_transfer_at.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_be.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_ch.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_cz.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_de.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_dk.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_fi.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_fr.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_it.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_nl.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_se.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_uk.gads_campaigns"], "model.sql_repository_bz.stg_gads_all_crawled_ads_urls": ["source.sql_repository_bz.crawled_ad_urls.crawled_ad_urls"], "model.sql_repository_bz.stg_gads_all_product_stats": ["source.sql_repository_bz.google_ads_transfer_at.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_be.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_ch.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_cz.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_de.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_dk.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_fi.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_fr.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_it.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_nl.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_se.gads_shopping_product_stats", "source.sql_repository_bz.google_ads_transfer_uk.gads_shopping_product_stats"], "model.sql_repository_bz.stg_gads_all_ads_stats": ["source.sql_repository_bz.google_ads_transfer_at.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_be.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_ch.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_cz.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_de.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_dk.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_fi.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_fr.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_it.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_nl.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_se.gads_ads_stats", "source.sql_repository_bz.google_ads_transfer_uk.gads_ads_stats"], "model.sql_repository_bz.stg_gads_all_campaign_stats": ["source.sql_repository_bz.google_ads_transfer_at.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_be.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_ch.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_cz.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_de.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_dk.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_fi.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_fr.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_it.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_nl.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_se.gads_campaign_stats", "source.sql_repository_bz.google_ads_transfer_uk.gads_campaign_stats"], "model.sql_repository_bz.stg_gads_all_ads_info_current": ["source.sql_repository_bz.google_ads_transfer_at.gads_ads", "source.sql_repository_bz.google_ads_transfer_be.gads_ads", "source.sql_repository_bz.google_ads_transfer_ch.gads_ads", "source.sql_repository_bz.google_ads_transfer_cz.gads_ads", "source.sql_repository_bz.google_ads_transfer_de.gads_ads", "source.sql_repository_bz.google_ads_transfer_dk.gads_ads", "source.sql_repository_bz.google_ads_transfer_fi.gads_ads", "source.sql_repository_bz.google_ads_transfer_fr.gads_ads", "source.sql_repository_bz.google_ads_transfer_it.gads_ads", "source.sql_repository_bz.google_ads_transfer_nl.gads_ads", "source.sql_repository_bz.google_ads_transfer_se.gads_ads", "source.sql_repository_bz.google_ads_transfer_uk.gads_ads"], "model.sql_repository_bz.stg_gads_all_adgroups_info_current": ["source.sql_repository_bz.google_ads_transfer_at.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_be.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_ch.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_cz.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_de.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_dk.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_fi.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_fr.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_it.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_nl.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_se.gads_adgroups", "source.sql_repository_bz.google_ads_transfer_uk.gads_adgroups"], "model.sql_repository_bz.stg_gads_all_query_stats": ["source.sql_repository_bz.google_ads_transfer_at.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_be.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_ch.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_cz.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_de.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_dk.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_fi.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_fr.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_it.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_nl.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_se.gads_search_query_stats", "source.sql_repository_bz.google_ads_transfer_uk.gads_search_query_stats"], "model.sql_repository_bz.stg_gads_all_campaigns_info_current": ["source.sql_repository_bz.google_ads_transfer_at.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_be.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_ch.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_cz.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_de.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_dk.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_fi.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_fr.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_it.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_nl.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_se.gads_campaigns", "source.sql_repository_bz.google_ads_transfer_uk.gads_campaigns"], "model.sql_repository_bz.stg_gads_all_criteria_info_current": ["source.sql_repository_bz.google_ads_transfer_at.gads_criteria", "source.sql_repository_bz.google_ads_transfer_be.gads_criteria", "source.sql_repository_bz.google_ads_transfer_ch.gads_criteria", "source.sql_repository_bz.google_ads_transfer_cz.gads_criteria", "source.sql_repository_bz.google_ads_transfer_de.gads_criteria", "source.sql_repository_bz.google_ads_transfer_dk.gads_criteria", "source.sql_repository_bz.google_ads_transfer_fi.gads_criteria", "source.sql_repository_bz.google_ads_transfer_fr.gads_criteria", "source.sql_repository_bz.google_ads_transfer_it.gads_criteria", "source.sql_repository_bz.google_ads_transfer_nl.gads_criteria", "source.sql_repository_bz.google_ads_transfer_se.gads_criteria", "source.sql_repository_bz.google_ads_transfer_uk.gads_criteria"], "model.sql_repository_bz.stg_test_results_last_run": ["source.sql_repository_bz.dbt_test_results.test_results_central"], "model.sql_repository_bz.stg_test_results_historic": ["source.sql_repository_bz.dbt_test_results.test_results_history"], "model.sql_repository_bz.stg_gsc_data": ["source.sql_repository_bz.google_search_console.gsc_data"], "model.sql_repository_bz.stg_gmc_product_brands": ["source.sql_repository_bz.merchant_center_transfer_de.mc_products_de"], "model.sql_repository_bz.stg_gmc_product_attributes_daily": ["source.sql_repository_bz.product_inventory.cp_product_attributes_daily"], "model.sql_repository_bz.zz_stg_gmc_price_benchmarks": ["source.sql_repository_bz.merchant_center_transfer_de.mc_product_price_benchmark_de"], "model.sql_repository_bz.stg_gmc_product_stock": ["source.sql_repository_bz.merchant_center_transfer_de.mc_product_stock_de"], "model.sql_repository_bz.stg_qlik_return_rates": ["source.sql_repository_bz.merchant_center_transfer_de.mc_return_rates"], "model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d": ["source.sql_repository_bz.product_inventory.cp_product_attributes_daily"], "model.sql_repository_bz.stg_gmc_all_products": ["source.sql_repository_bz.merchant_center_transfer_de.mc_products_ch", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_de"], "model.sql_repository_bz.stg_gmc_margins_all": ["source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_ch", "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_de", "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_int", "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_it", "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_uk"], "model.sql_repository_bz.zz_stg_gmc_product_margins": ["source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins"], "model.sql_repository_bz.stg_gmc_product_issues": ["source.sql_repository_bz.merchant_center_transfer_de.mc_products_at", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_at", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_ch", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_ch", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_de", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_de", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_it", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_it", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_nl", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_nl", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_uk", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_uk"], "model.sql_repository_bz.stg_jira_finished_seo_tickets": ["source.sql_repository_bz.seo_analytics.finished_seo_jira_tickets"], "model.sql_repository_bz.stg_minubo_ga_kpis_daily": ["source.sql_repository_bz.analytics_datamart.minubo_ga_export"], "model.sql_repository_bz.stg_antavo_club_optins": ["source.sql_repository_bz.customer_analytics.antavo_optins"], "model.sql_repository_bz.stg_consentless_transactions_live": ["source.sql_repository_bz.consentless_tracking.ishop_consentless_prod"], "model.sql_repository_bz.stg_consentless_page_views_live": ["source.sql_repository_bz.consentless_tracking.ishop_consentless_prod"], "model.sql_repository_bz.stg_consentless_consent_interaction": ["source.sql_repository_bz.consentless_tracking.ishop_consentless_prod"], "model.sql_repository_bz.stg_consentless_transactions": ["source.sql_repository_bz.consentless_tracking.ishop_consentless_prod"], "model.sql_repository_bz.stg_gcp_cost_export": ["source.sql_repository_bz.gcp_cost.gcp_cost_data", "source.sql_repository_bz.gcp_cost.gcp_cost_data_legacy"], "model.sql_repository_bz.stg_gcp_bigquery_table_storage": ["source.sql_repository_bz.bz_information_schema.TABLE_STORAGE"], "model.sql_repository_bz.stg_gcp_bigquery_job_cost": ["source.sql_repository_bz.bz_information_schema.bigquery_jobs"], "model.sql_repository_bz.stg_trusted_shops_reviews": ["source.sql_repository_bz.trusted_shops.ts_reviews_all"], "model.sql_repository_bz.stg_gsheets_currency_factor_all_countries": ["model.sql_repository_bz.stg_gsheets_currency_factor_ch", "model.sql_repository_bz.stg_gsheets_currency_factor_gb"], "model.sql_repository_bz.stg_gsheets_currency_factor_ch": ["source.sql_repository_bz.price_intelligence.currency_factor_chf"], "model.sql_repository_bz.stg_gsheets_seo_magazin_reworked": ["source.sql_repository_bz.seo_analytics.magazin_posts_reworked_input_list"], "model.sql_repository_bz.stg_gsheets_currency_factor_gb": ["source.sql_repository_bz.price_intelligence.currency_factor_gbp"], "model.sql_repository_bz.stg_gsheets_order_value_planned": ["source.sql_repository_bz.price_intelligence.budgetplan_soll"], "model.sql_repository_bz.stg_gsheets_seo_top_pages": ["source.sql_repository_bz.seo_analytics.top_pages_input_list"], "model.sql_repository_bz.stg_gsheets_channel_shares_planned": ["source.sql_repository_bz.price_intelligence.budgetplan_soll_channels"], "model.sql_repository_bz.stg_awin_orders_all": ["source.sql_repository_bz.awin.awin_orders_all_ch", "source.sql_repository_bz.awin.awin_orders_all_deat", "source.sql_repository_bz.awin.awin_orders_all_it", "source.sql_repository_bz.awin.awin_orders_all_nl", "source.sql_repository_bz.awin.awin_orders_all_uk"], "model.sql_repository_bz.stg_awin_return_adjustment_errors": ["source.sql_repository_bz.awin.awin_return_adjustment_errors"], "model.sql_repository_bz.stg_emarsys_ids": ["source.sql_repository_bz.customer_analytics.emarsys_ids"], "model.sql_repository_bz.stg_pagespeed_url_data": ["source.sql_repository_bz.pagespeed_measurement.pagespeed_api_metrics"], "model.sql_repository_bz.stg_ga_performance_costs_CH": ["model.sql_repository_bz.stg_gsheets_currency_factor_ch", "source.sql_repository_bz.performance_cost.performance_cost_CH"], "model.sql_repository_bz.stg_ga_performance_cost_validation": ["source.sql_repository_bz.performance_cost.performance_cost_validation_all_views"], "model.sql_repository_bz.stg_ga_performance_costs_UK": ["model.sql_repository_bz.stg_gsheets_currency_factor_gb", "source.sql_repository_bz.performance_cost.performance_cost_UK"], "model.sql_repository_bz.stg_ga_performance_costs": ["model.sql_repository_bz.stg_ga_performance_costs_CH", "model.sql_repository_bz.stg_ga_performance_costs_UK", "source.sql_repository_bz.performance_cost.performance_cost_AT", "source.sql_repository_bz.performance_cost.performance_cost_BE", "source.sql_repository_bz.performance_cost.performance_cost_CZ", "source.sql_repository_bz.performance_cost.performance_cost_DE", "source.sql_repository_bz.performance_cost.performance_cost_DK", "source.sql_repository_bz.performance_cost.performance_cost_FI", "source.sql_repository_bz.performance_cost.performance_cost_FR", "source.sql_repository_bz.performance_cost.performance_cost_IT", "source.sql_repository_bz.performance_cost.performance_cost_NL", "source.sql_repository_bz.performance_cost.performance_cost_NO", "source.sql_repository_bz.performance_cost.performance_cost_PL", "source.sql_repository_bz.performance_cost.performance_cost_SE"], "model.sql_repository_bz.stg_ga_product_detail_pages": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_internal_search": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_page_types": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_pageviews": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_pagespeed_per_pagetype": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_product_performance_profit_bidding": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_product_checkouts": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga4_products": ["source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events"], "model.sql_repository_bz.stg_ga_products": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_sessions_attribution_calculation": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_session_totals": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_ecommerce_actions": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_filter_events": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_hits_all_properties": ["source.sql_repository_bz.ga_bz_master_view_at.ga_sessions_at", "source.sql_repository_bz.ga_bz_master_view_ch.ga_sessions_ch", "source.sql_repository_bz.ga_bz_master_view_de.ga_sessions_de", "source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_events_promotion": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga4_events_checkout": ["source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events"], "model.sql_repository_bz.stg_ga4_events_custom": ["source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events"], "model.sql_repository_bz.stg_ga_events_per_page": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_events": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga4_events_standard": ["source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events"], "model.sql_repository_bz.stg_ga_magazin_custom_dims": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_transactions_conversion_backfill": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_transactions_with_adclick_involvement": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all", "source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_ga_transactions": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim": ["source.sql_repository_bz.product_inventory.channelpilot_source_feeds_all"], "model.sql_repository_bz.stg_crawl_sitemap_urls_bergfreunde": ["source.sql_repository_bz.crawl_data.bf_sitemap_current"], "model.sql_repository_bz.stg_crawl_gbot_logfiles": ["source.sql_repository_bz.crawl_data.gbot_crawl_data"], "model.sql_repository_bz.stg_crawl_sitemap_urls_all": ["source.sql_repository_bz.crawl_data.sitemap_data_de", "source.sql_repository_bz.crawl_data.sitemap_data_it", "source.sql_repository_bz.crawl_data.sitemap_data_nl", "source.sql_repository_bz.crawl_data.sitemap_data_uk"], "model.sql_repository_bz.stg_crawl_advertools_logs": ["source.sql_repository_bz.crawl_data.crawl_advertools_logs"], "model.sql_repository_bz.stg_crawl_sitemap_urls_de": ["source.sql_repository_bz.crawl_data.sitemap_data_de"], "model.sql_repository_bz.stg_nav_credit_memo_header_and_lines": ["source.sql_repository_bz.azure_dwh_discovery.nav_credit_memo_header", "source.sql_repository_bz.azure_dwh_discovery.nav_credit_memo_line"], "model.sql_repository_bz.stg_nav_customers_new_id": ["source.sql_repository_bz.azure_dwh_discovery.nav_customers_new_id"], "model.sql_repository_bz.stg_nav_sales_channel_description": ["source.sql_repository_bz.azure_dwh_discovery.nav_sales_channel"], "model.sql_repository_bz.stg_nav_transactions": ["source.sql_repository_bz.azure_dwh_discovery.nav_transactions"], "model.sql_repository_bz.stg_nav_invoice_header_and_lines": ["source.sql_repository_bz.azure_dwh_discovery.nav_invoice_header", "source.sql_repository_bz.azure_dwh_discovery.nav_invoice_line"], "model.sql_repository_bz.stg_nav_customers": ["source.sql_repository_bz.azure_dwh_discovery.nav_customers"], "model.sql_repository_bz.weather_avg_temp_to_monthly_avg": ["model.sql_repository_bz.int_weather_avg_temp_to_monthly_avg"], "model.sql_repository_bz.stg_ga_de_overall_session_attributes": ["source.sql_repository_bz.ga_bz_master_view_de.ga_sessions_de"], "model.sql_repository_bz.pred_repurchase_model_input": ["model.sql_repository_bz.pred_repurchase_model_transactions"], "model.sql_repository_bz.pred_repurchase_model_transactions": ["model.sql_repository_bz.int_gmc_most_recent_prod_attr", "model.sql_repository_bz.int_nav_invoice_line_aggregated", "model.sql_repository_bz.int_nav_transactions_and_customers", "model.sql_repository_bz.stg_emarsys_ids", "model.sql_repository_bz.stg_ga_de_overall_session_attributes"], "model.sql_repository_bz.transaction_value_consentless_soll_ist_report": ["model.sql_repository_bz.int_consentless_transactions_aggr_by_day_country"], "model.sql_repository_bz.transaction_voucher_data": ["model.sql_repository_bz.int_nav_invoice_crmemo_combined", "model.sql_repository_bz.stg_nav_invoice_header_and_lines"], "model.sql_repository_bz.transaction_ga_nav_attributes": ["model.sql_repository_bz.int_nav_invoice_crmemo_combined", "model.sql_repository_bz.stg_ga_transactions"], "model.sql_repository_bz.transaction_order_value_daily_by_country": ["model.sql_repository_bz.int_nav_transactions_and_customers"], "model.sql_repository_bz.pb_order_margins_after_returns": ["model.sql_repository_bz.pb_product_revenue_margins_returns"], "model.sql_repository_bz.pb_full_working_query": ["model.sql_repository_bz.pb_order_margins_after_returns"], "model.sql_repository_bz.pb_product_revenue_margins_returns": ["model.sql_repository_bz.int_cp_product_price_overall", "model.sql_repository_bz.int_cp_product_price_per_day", "model.sql_repository_bz.int_ga_product_performance_with_ad_touchpoints", "model.sql_repository_bz.int_gmc_avg_return_rates_by_country", "model.sql_repository_bz.int_gmc_avg_return_rates_overall", "model.sql_repository_bz.stg_qlik_return_rates"], "model.sql_repository_bz.onsite_pdp_mut_share_per_day": ["model.sql_repository_bz.onsite_pdp_product_attributes"], "model.sql_repository_bz.onsite_hits_by_property_and_day": ["model.sql_repository_bz.int_ga_hits_by_property_and_day"], "model.sql_repository_bz.onsite_ga_filter_usage": ["model.sql_repository_bz.stg_ga_filter_events", "model.sql_repository_bz.stg_ga_pageviews"], "model.sql_repository_bz.onsite_ga4_metric_comparison": ["model.sql_repository_bz.int_ga4_sessions_transactions", "model.sql_repository_bz.int_ga_sessions_transactions"], "model.sql_repository_bz.onsite_pdp_product_attributes": ["model.sql_repository_bz.int_ga_eecactions_revenue", "model.sql_repository_bz.stg_gmc_product_attributes_daily"], "model.sql_repository_bz.onsite_cookie_consent_event_values": ["model.sql_repository_bz.stg_consentless_consent_interaction"], "model.sql_repository_bz.onsite_ga_sessions_by_hit_count_bucket": ["model.sql_repository_bz.int_ga_sessions_by_hit_count_bucket"], "model.sql_repository_bz.onsite_ga_list_page_events": ["model.sql_repository_bz.int_ga_list_page_events"], "model.sql_repository_bz.onsite_duplicate_teaser_events": ["model.sql_repository_bz.int_ga_duplicate_teaser_events"], "model.sql_repository_bz.onsite_pdp_testberichte": ["model.sql_repository_bz.int_ga_pdp_pageviews", "model.sql_repository_bz.stg_ga_events_per_page", "model.sql_repository_bz.stg_ga_events_per_page"], "model.sql_repository_bz.onsite_ga_internal_search": ["model.sql_repository_bz.stg_ga_internal_search", "model.sql_repository_bz.stg_gmc_product_brands"], "model.sql_repository_bz.onsite_ga_reco_performance": ["model.sql_repository_bz.int_ga_product_list", "model.sql_repository_bz.stg_ga_session_totals"], "model.sql_repository_bz.alerts_datadiff_ga_minubo": ["model.sql_repository_bz.int_ga_product_eecactions_by_day", "model.sql_repository_bz.stg_ga_pageviews", "model.sql_repository_bz.stg_ga_session_totals", "model.sql_repository_bz.stg_minubo_ga_kpis_daily"], "model.sql_repository_bz.alerts_ga4_daily_metric_changes": ["model.sql_repository_bz.int_ga4_aggr_event_count", "model.sql_repository_bz.int_ga4_sessions_transactions"], "model.sql_repository_bz.alerts_datadiff_consentless_ga_1d": ["model.sql_repository_bz.int_consentless_transactions_eur", "model.sql_repository_bz.stg_consentless_consent_interaction", "model.sql_repository_bz.stg_ga_transactions"], "model.sql_repository_bz.alerts_consentless_pageviews_magazine_last_hrs": ["model.sql_repository_bz.stg_consentless_page_views_live"], "model.sql_repository_bz.alerts_consentless_transactions_last_hrs": ["model.sql_repository_bz.stg_consentless_transactions_live"], "model.sql_repository_bz.alerts_consentless_offline_pages": ["model.sql_repository_bz.int_consentless_offline_pages"], "model.sql_repository_bz.alerts_consentless_consent_events_last_hrs": ["model.sql_repository_bz.stg_consentless_consent_interaction"], "model.sql_repository_bz.cust_cohort_revenue_per_year": ["model.sql_repository_bz.int_nav_transactions_and_customers"], "model.sql_repository_bz.cust_customer_metrics": ["model.sql_repository_bz.int_nav_transactions_and_customers"], "model.sql_repository_bz.cust_new_returning_visitors_30d": ["model.sql_repository_bz.int_nav_transactions_and_customers"], "model.sql_repository_bz.cust_perf_cost_mapping": ["model.sql_repository_bz.int_ga_performance_cost_monthly_by_channel", "model.sql_repository_bz.int_nav_transactions_session_customer_attributes"], "model.sql_repository_bz.cust_cohort_club_metrics_new_returning": ["model.sql_repository_bz.cust_club_retention_rate"], "model.sql_repository_bz.cust_cohort_club_metrics": ["model.sql_repository_bz.cust_club_retention_rate"], "model.sql_repository_bz.cust_club_retention_rate": ["model.sql_repository_bz.int_nav_transactions_session_customer_attributes"], "model.sql_repository_bz.cust_club_margin_calculation": ["model.sql_repository_bz.cust_club_retention_rate", "model.sql_repository_bz.cust_perf_cost_mapping"], "model.sql_repository_bz.budget_plan_ga_and_markov_data": ["model.sql_repository_bz.int_attribution_markov_path_level_monthly", "model.sql_repository_bz.int_ga_order_value_by_month_channel"], "model.sql_repository_bz.budget_plan_actual_metrics": ["model.sql_repository_bz.budget_plan_ga_and_markov_data", "model.sql_repository_bz.int_ga_performance_cost_monthly_by_channel"], "model.sql_repository_bz.budget_plan_markov_channel_level": ["model.sql_repository_bz.stg_channelattribution_channel_level"], "model.sql_repository_bz.consentless_datadiff_ga": ["model.sql_repository_bz.int_consentless_transactions_eur", "model.sql_repository_bz.int_ga_order_value_by_month_channel"], "model.sql_repository_bz.budget_plan_target_metrics": ["model.sql_repository_bz.budget_plan_planned_input", "model.sql_repository_bz.consentless_datadiff_ga"], "model.sql_repository_bz.budget_plan_planned_input": ["model.sql_repository_bz.stg_gsheets_channel_shares_planned", "model.sql_repository_bz.stg_gsheets_order_value_planned"], "model.sql_repository_bz.budget_plan_output_metrics": ["model.sql_repository_bz.budget_plan_actual_metrics", "model.sql_repository_bz.budget_plan_target_metrics"], "model.sql_repository_bz.budget_plan_daily_adcost_validation": ["model.sql_repository_bz.int_ga_performance_cost_daily_validation"], "model.sql_repository_bz.gads_ads_for_url_check": ["model.sql_repository_bz.int_gads_all_feedadgroups", "model.sql_repository_bz.int_gads_de_adstats_and_attributes"], "model.sql_repository_bz.gads_crawled_urls_with_status": ["model.sql_repository_bz.int_gads_all_crawled_ads_urls_classified"], "model.sql_repository_bz.gads_adstats_and_attributes": ["model.sql_repository_bz.int_gads_de_adstats_and_attributes", "model.sql_repository_bz.int_gads_de_adstats_and_attributes"], "model.sql_repository_bz.gads_backfill_consentless_transactions": ["model.sql_repository_bz.stg_consentless_transactions", "model.sql_repository_bz.stg_ga_transactions_conversion_backfill", "model.sql_repository_bz.stg_ga_transactions_conversion_backfill"], "model.sql_repository_bz.gads_channel_pilot_feeds_with_errors": ["model.sql_repository_bz.int_cp_source_feeds_with_errors"], "model.sql_repository_bz.gmc_missing_brands_per_country": ["model.sql_repository_bz.int_gads_all_shopping_criteria", "model.sql_repository_bz.int_gmc_missing_product_groups"], "model.sql_repository_bz.gads_all_cost_by_brand": ["model.sql_repository_bz.int_gads_all_dynamic_query_cost_by_brand", "model.sql_repository_bz.int_gads_all_product_stats_by_brand", "model.sql_repository_bz.int_gads_campaign_stats_by_brand"], "model.sql_repository_bz.awin_transactions_pending_with_returns": ["model.sql_repository_bz.int_awin_transactions_pending", "model.sql_repository_bz.int_nav_invoice_crmemo_combined"], "model.sql_repository_bz.test_results_latest_errors": ["model.sql_repository_bz.stg_test_results_last_run"], "model.sql_repository_bz.test_results_all_historic": ["model.sql_repository_bz.stg_test_results_historic"], "model.sql_repository_bz.gcp_cost_export": ["model.sql_repository_bz.stg_gcp_cost_export", "model.sql_repository_bz.stg_gcp_cost_export"], "model.sql_repository_bz.gcp_bigquery_job_cost": ["model.sql_repository_bz.stg_gcp_bigquery_job_cost", "model.sql_repository_bz.stg_gcp_bigquery_job_cost"], "model.sql_repository_bz.product_sku_count_by_day": ["model.sql_repository_bz.int_gmc_sku_count_by_day", "model.sql_repository_bz.int_gmc_sku_count_by_day"], "model.sql_repository_bz.product_attributes_and_ga_data_by_day": ["model.sql_repository_bz.int_ga_product_attr_and_ga_data_by_day"], "model.sql_repository_bz.product_ga_data_and_adcost": ["model.sql_repository_bz.int_ga_eecactions_revenue", "model.sql_repository_bz.int_gads_product_stats_by_day"], "model.sql_repository_bz.product_brand_entrance_transactions": ["model.sql_repository_bz.int_ga_pdp_entrances_transactions"], "model.sql_repository_bz.product_gmc_prices_chf_to_eur": ["model.sql_repository_bz.int_gmc_prices_chf_to_eur"], "model.sql_repository_bz.product_source_feed_skus_with_errors": ["model.sql_repository_bz.int_cp_source_feeds_with_errors"], "model.sql_repository_bz.product_cart_analysis_selective_orders_parentid": ["model.sql_repository_bz.int_ga_cart_products_and_prod_attr"], "model.sql_repository_bz.product_sku_and_season": ["model.sql_repository_bz.int_gmc_current_season"], "model.sql_repository_bz.product_nav_items_and_attributes": ["model.sql_repository_bz.int_nav_products_and_attributes"], "model.sql_repository_bz.zz_product_price_benchmark_and_product_attr": ["model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day", "model.sql_repository_bz.stg_gmc_all_products", "model.sql_repository_bz.stg_gmc_product_stock", "model.sql_repository_bz.zz_stg_gmc_price_benchmarks", "model.sql_repository_bz.zz_stg_gmc_product_margins"], "model.sql_repository_bz.product_attributes_and_stock_by_day": ["model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day"], "model.sql_repository_bz.product_parentid_stats_by_day": ["model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day"], "model.sql_repository_bz.product_cart_analysis_selective_orders_category": ["model.sql_repository_bz.int_ga_cart_products_and_prod_attr"], "model.sql_repository_bz.product_attr_and_shopping_by_day": ["model.sql_repository_bz.int_gads_product_data_and_shopping_by_day"], "model.sql_repository_bz.product_inventory_brand_aggregates": ["model.sql_repository_bz.int_ga_product_checkouts_by_day", "model.sql_repository_bz.stg_gmc_product_attributes_daily"], "model.sql_repository_bz.product_inventory_product_performance_metrics": ["model.sql_repository_bz.int_ga_product_checkouts_by_day", "model.sql_repository_bz.stg_gmc_product_attributes_daily"], "model.sql_repository_bz.seo_crawl_lp_in_sitemap": ["model.sql_repository_bz.int_crawl_de_lp_in_sitemap"], "model.sql_repository_bz.seo_ga_pagespeed_sessions_transactions": ["model.sql_repository_bz.int_ga_sessions_transactions", "model.sql_repository_bz.stg_ga_pagespeed_per_pagetype"], "model.sql_repository_bz.seo_crawl_data_advertools": ["model.sql_repository_bz.stg_crawl_advertools_logs"], "model.sql_repository_bz.seo_jira_finished_ifront_tickets": ["model.sql_repository_bz.stg_jira_finished_seo_tickets"], "model.sql_repository_bz.seo_gsc_ga_data_for_mag_reworked": ["model.sql_repository_bz.int_gsc_data_mag_reworked"], "model.sql_repository_bz.seo_sitemap_efficiency": ["model.sql_repository_bz.int_sitemap_and_crawl_and_gsc_data"], "model.sql_repository_bz.seo_gsc_data_for_top_pages": ["model.sql_repository_bz.int_gsc_data_for_top_pages"], "model.sql_repository_bz.seo_gsc_url_age": ["model.sql_repository_bz.int_gsc_ga_urlage_def"], "model.sql_repository_bz.seo_pagespeed_web_vitals_data": ["model.sql_repository_bz.stg_pagespeed_url_data"], "model.sql_repository_bz.seo_search_query_by_brand": ["model.sql_repository_bz.int_gsc_query_by_brand"], "model.sql_repository_bz.zoovu_sessions_and_direct_product_revenue": [], "model.sql_repository_bz.avg_temp_by_country_day": [], "model.sql_repository_bz.daily_diff_consentless_to_ga": [], "model.sql_repository_bz.oxid_consentless_tracking_consentrate": [], "model.sql_repository_bz.oxid_consentless_tracking_date": [], "model.sql_repository_bz.oxid_consentless_tracking_site": [], "analysis.sql_repository_bz.pbid_return_data": ["model.sql_repository_bz.int_nav_products_and_attributes"], "analysis.sql_repository_bz.attribution_model_comparison": [], "analysis.sql_repository_bz.sitemap_crawl_and_gsc_data_by_url_path": [], "analysis.sql_repository_bz.oxid_product_ratings": [], "analysis.sql_repository_bz.shopping_data_product_info_daily": [], "analysis.sql_repository_bz.sessions_by_channel_with_true_direct": [], "analysis.sql_repository_bz.zoovu_wirksamkeitsanalyse": [], "analysis.sql_repository_bz.teaser_grouping_old_names": [], "analysis.sql_repository_bz.onsite_acquisition_channel_structure": ["model.sql_repository_bz.transaction_ga_nav_attributes"], "analysis.sql_repository_bz.auswertung_pws_202012_retouren": [], "analysis.sql_repository_bz.auswertung_pws_202012_folgekaeufe": [], "analysis.sql_repository_bz.emarsys_stats_daily": [], "analysis.sql_repository_bz.product_attributes_daily_view": [], "analysis.sql_repository_bz.bm_product_kpis_daily": [], "analysis.sql_repository_bz.available_products_by_country": ["source.sql_repository_bz.merchant_center_transfer_de.mc_products_at", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_ch", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_de", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_it", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_nl", "source.sql_repository_bz.merchant_center_transfer_de.mc_products_uk"], "analysis.sql_repository_bz.ga_prudsys_export_eecevents": [], "analysis.sql_repository_bz.extract_event_params_data_type": ["source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events"], "analysis.sql_repository_bz.return_data_by_sales_channel": ["model.sql_repository_bz.int_nav_transactions_and_customers"], "analysis.sql_repository_bz.plausi": [], "analysis.sql_repository_bz.transactions_with_high_order_value": [], "analysis.sql_repository_bz.transactions_oms_and_consentless": [], "analysis.sql_repository_bz.transactions_voucher_grouping_logic": ["model.sql_repository_bz.stg_nav_invoice_header_and_lines"], "operation.sql_repository_bz.sql_repository_bz-on-run-end-0": [], "model.ga4.dim_ga4__sessions": ["model.ga4.stg_ga4__event_session_start", "model.ga4.stg_ga4__sessions_traffic_sources"], "model.ga4.fct_ga4__pages": ["model.ga4.stg_ga4__event_page_view", "model.ga4.stg_ga4__event_scroll"], "model.ga4.fct_ga4__sessions": ["model.ga4.stg_ga4__events"], "model.ga4.dim_ga4__users": ["model.ga4.stg_ga4__events", "model.ga4.stg_ga4__users_first_last_events", "model.ga4.stg_ga4__users_first_last_pageviews"], "model.ga4.stg_ga4__event_items": ["model.ga4.stg_ga4__events"], "model.ga4.stg_ga4__users_first_last_events": ["model.ga4.stg_ga4__events", "model.ga4.stg_ga4__events", "model.ga4.stg_ga4__events"], "model.ga4.stg_ga4__sessions_traffic_sources": ["model.ga4.stg_ga4__events", "seed.ga4.ga4_source_categories"], "model.ga4.stg_ga4__event_to_query_string_params": ["model.ga4.stg_ga4__events"], "model.ga4.stg_ga4__users_first_last_pageviews": ["model.ga4.stg_ga4__event_page_view", "model.ga4.stg_ga4__event_page_view", "model.ga4.stg_ga4__event_page_view"], "model.ga4.stg_ga4__sessions_first_last_pageviews": ["model.ga4.stg_ga4__events"], "model.ga4.stg_ga4__events": ["model.ga4.base_ga4__events"], "model.ga4.stg_ga4__event_session_start": ["model.ga4.stg_ga4__events"], "model.ga4.stg_ga4__event_user_engagement": ["model.ga4.stg_ga4__events"], "model.ga4.stg_ga4__event_view_search_results": ["model.ga4.stg_ga4__events"], "model.ga4.stg_ga4__event_video_start": ["model.ga4.stg_ga4__events"], "model.ga4.stg_ga4__event_video_complete": ["model.ga4.stg_ga4__events"], "model.ga4.stg_ga4__event_first_visit": ["model.ga4.stg_ga4__events"], "model.ga4.stg_ga4__event_scroll": ["model.ga4.stg_ga4__events"], "model.ga4.stg_ga4__event_click": ["model.ga4.stg_ga4__events"], "model.ga4.stg_ga4__event_file_download": ["model.ga4.stg_ga4__events"], "model.ga4.stg_ga4__event_page_view": ["model.ga4.stg_ga4__events", "model.ga4.stg_ga4__sessions_first_last_pageviews"], "model.ga4.base_ga4__events": ["source.ga4.ga4.events"], "seed.ga4.ga4_source_categories": [], "test.sql_repository_bz.not_null_int_ga_sessions_by_hit_count_bucket_hit_count_bucket.9e72d30e37": ["model.sql_repository_bz.int_ga_sessions_by_hit_count_bucket"], "test.sql_repository_bz.dbt_utils_at_least_one_int_ga_sessions_by_hit_count_bucket_hit_count_bucket.735e0efb5d": ["model.sql_repository_bz.int_ga_sessions_by_hit_count_bucket"], "test.sql_repository_bz.accepted_values_int_ga_teaser_test_underscores_count__False__8.1d077d2f26": ["model.sql_repository_bz.int_ga_teaser_test"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_match_regex_int_ga_teaser_test_promo_name_date__20_0_9_2_0_1_9_1_0_2_0_1_9_12_0_9_3_0_1_.692d2b6cbe": ["model.sql_repository_bz.int_ga_teaser_test"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_average_hits_per_day_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_.e739dc0e22": ["model.sql_repository_bz.int_ga_average_hits_per_day"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_hits_by_property_and_day_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.753a2a3d4e": ["model.sql_repository_bz.int_ga_hits_by_property_and_day"], "test.sql_repository_bz.unique_stg_channelattribution_channel_level_sk_id.db1204caf4": ["model.sql_repository_bz.stg_channelattribution_channel_level"], "test.sql_repository_bz.unique_stg_channelattribution_path_level_sk_id.3487d69530": ["model.sql_repository_bz.stg_channelattribution_path_level"], "test.sql_repository_bz.unique_stg_weather_dach_7d_forecast_town_datetime_id.750831b756": ["model.sql_repository_bz.stg_weather_dach_7d_forecast"], "test.sql_repository_bz.not_null_stg_weather_dach_7d_forecast_town_datetime_id.451adf1bbb": ["model.sql_repository_bz.stg_weather_dach_7d_forecast"], "test.sql_repository_bz.unique_stg_weather_dach_daily_town_datetime_id.6e81ec24a4": ["model.sql_repository_bz.stg_weather_dach_daily"], "test.sql_repository_bz.not_null_stg_weather_dach_daily_town_datetime_id.7e0843fed4": ["model.sql_repository_bz.stg_weather_dach_daily"], "test.sql_repository_bz.not_null_stg_weather_dach_daily_date.ec486e9787": ["model.sql_repository_bz.stg_weather_dach_daily"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_weather_dach_daily_date.48252d1406": ["model.sql_repository_bz.stg_weather_dach_daily"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_weather_dach_daily_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_.8c82d80c49": ["model.sql_repository_bz.stg_weather_dach_daily"], "test.sql_repository_bz.not_null_stg_gads_all_adgroups_info_current_AdGroupId.e206713d85": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "test.sql_repository_bz.unique_stg_gads_all_adgroups_info_current_AdGroupId.6f372302b0": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "test.sql_repository_bz.not_null_stg_gads_all_ads_info_current_sk_id.0ef72507fb": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "test.sql_repository_bz.unique_stg_gads_all_ads_info_current_sk_id.01d3196c71": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "test.sql_repository_bz.not_null_stg_gads_all_ads_stats_sk_id.d81f874bc8": ["model.sql_repository_bz.stg_gads_all_ads_stats"], "test.sql_repository_bz.unique_stg_gads_all_campaign_names_campaign_id.f84b6db6cc": ["model.sql_repository_bz.stg_gads_all_campaign_names"], "test.sql_repository_bz.not_null_stg_gads_all_campaign_names_campaign_id.82e2901272": ["model.sql_repository_bz.stg_gads_all_campaign_names"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_campaign_names_campaign_id.500b398953": ["model.sql_repository_bz.stg_gads_all_campaign_names"], "test.sql_repository_bz.not_null_stg_gads_all_campaign_stats_sk_id.9aa3c18eae": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "test.sql_repository_bz.unique_stg_gads_all_campaign_stats_sk_id.bf47b9bd4b": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "test.sql_repository_bz.not_null_stg_gads_all_campaigns_info_current_sk_id.bb43587aaf": ["model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "test.sql_repository_bz.unique_stg_gads_all_campaigns_info_current_sk_id.46b2aeea38": ["model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_campaigns_info_current_sk_id.94c525a35d": ["model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "test.sql_repository_bz.unique_stg_gads_all_crawled_ads_urls_sk_id.6b8361d78a": ["model.sql_repository_bz.stg_gads_all_crawled_ads_urls"], "test.sql_repository_bz.not_null_stg_gads_all_crawled_ads_urls_sk_id.4b227b9a82": ["model.sql_repository_bz.stg_gads_all_crawled_ads_urls"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_crawled_ads_urls_sk_id.40242bb775": ["model.sql_repository_bz.stg_gads_all_crawled_ads_urls"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_in_set_stg_gads_all_crawled_ads_urls_status__429__500.e3333a724f": ["model.sql_repository_bz.stg_gads_all_crawled_ads_urls"], "test.sql_repository_bz.not_null_stg_gads_all_crawled_ads_urls_status.f06717230b": ["model.sql_repository_bz.stg_gads_all_crawled_ads_urls"], "test.sql_repository_bz.unique_stg_gads_all_criteria_info_current_sk_id.f99a0510c0": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "test.sql_repository_bz.not_null_stg_gads_all_criteria_info_current_sk_id.fbc40009ae": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_criteria_info_current_sk_id.3b91bc6d12": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "test.sql_repository_bz.not_null_stg_gads_all_product_stats_sk_id.1df63efcb7": ["model.sql_repository_bz.stg_gads_all_product_stats"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gads_all_product_stats_date__day__date_current_date___2022_03_01.81d8651d1b": ["model.sql_repository_bz.stg_gads_all_product_stats"], "test.sql_repository_bz.not_null_stg_gads_all_query_stats_sk_id.bc3fb6fd52": ["model.sql_repository_bz.stg_gads_all_query_stats"], "test.sql_repository_bz.unique_stg_test_results_last_run_test_run_id.05d5976f68": ["model.sql_repository_bz.stg_test_results_last_run"], "test.sql_repository_bz.not_null_stg_test_results_last_run_test_run_id.db432a0868": ["model.sql_repository_bz.stg_test_results_last_run"], "test.sql_repository_bz.unique_stg_test_results_historic_test_run_id.1c6e8316cb": ["model.sql_repository_bz.stg_test_results_historic"], "test.sql_repository_bz.not_null_stg_test_results_historic_test_run_id.271cb7516f": ["model.sql_repository_bz.stg_test_results_historic"], "test.sql_repository_bz.not_null_stg_gsc_data_page.0c6cad32c4": ["model.sql_repository_bz.stg_gsc_data"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gsc_data_page.6a172b3849": ["model.sql_repository_bz.stg_gsc_data"], "test.sql_repository_bz.accepted_values_stg_gsc_data_search_type__web__image.212c9832ed": ["model.sql_repository_bz.stg_gsc_data"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_gsc_data_impressions__0.6dd8a7d2f2": ["model.sql_repository_bz.stg_gsc_data"], "test.sql_repository_bz.unique_stg_gsc_data_sk_id.202e6087b9": ["model.sql_repository_bz.stg_gsc_data"], "test.sql_repository_bz.not_null_stg_gsc_data_sk_id.bbf442b1a0": ["model.sql_repository_bz.stg_gsc_data"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gsc_data_gsc_date__day__gsc_date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_4_day_.d86929e308": ["model.sql_repository_bz.stg_gsc_data"], "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gsc_data_gsc_date__gsc_country__query__page__device__search_type__time_stamp__clicks__impressions__ctr__position__False__gsc_date_current_date_60.22759fc007": ["model.sql_repository_bz.stg_gsc_data"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_attributes_daily_product_id.63ff91169b": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_attributes_daily_product_id.178c7163e6": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"], "test.sql_repository_bz.not_null_stg_gmc_product_attributes_daily_product_id.deeed4d82d": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"], "test.sql_repository_bz.unique_stg_gmc_product_attributes_daily_sk_id.e0693e88d3": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"], "test.sql_repository_bz.not_null_stg_gmc_product_attributes_daily_sk_id.28d02641a8": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_product_attributes_daily_date__day__2022_08_19.50cabb8518": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"], "test.sql_repository_bz.max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_product_attributes_daily_50__date.d225ea8e3f": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"], "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_product_attributes_daily_date__product_id__any_value_is_missing__False__date_current_date_1.c4d572905f": ["model.sql_repository_bz.stg_gmc_product_attributes_daily"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_channel_pilot_profit_bidding_90d_product_id.27bcb103e9": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_channel_pilot_profit_bidding_90d_product_id.e693c05e3a": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"], "test.sql_repository_bz.not_null_stg_channel_pilot_profit_bidding_90d_product_id.5e32943a74": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"], "test.sql_repository_bz.unique_stg_channel_pilot_profit_bidding_90d_sk_id.995d943cbe": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"], "test.sql_repository_bz.not_null_stg_channel_pilot_profit_bidding_90d_sk_id.265b2eb3d7": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_channel_pilot_profit_bidding_90d_date__day__2022_08_19.60031b7aac": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d"], "test.sql_repository_bz.unique_stg_gmc_all_products_sk_id.1d7ee0d57d": ["model.sql_repository_bz.stg_gmc_all_products"], "test.sql_repository_bz.not_null_stg_gmc_all_products_sk_id.0ea44e4472": ["model.sql_repository_bz.stg_gmc_all_products"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_p_date.59bfafd202": ["model.sql_repository_bz.stg_gmc_all_products"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_all_products_p_date.63890ebb46": ["model.sql_repository_bz.stg_gmc_all_products"], "test.sql_repository_bz.not_null_stg_gmc_all_products_p_date.7cca799e9b": ["model.sql_repository_bz.stg_gmc_all_products"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_offer_id.f963ef99ea": ["model.sql_repository_bz.stg_gmc_all_products"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_all_products_offer_id.3f83de7e64": ["model.sql_repository_bz.stg_gmc_all_products"], "test.sql_repository_bz.not_null_stg_gmc_all_products_offer_id.9de99eaf8b": ["model.sql_repository_bz.stg_gmc_all_products"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_top_category.443c1ce984": ["model.sql_repository_bz.stg_gmc_all_products"], "test.sql_repository_bz.not_null_stg_gmc_all_products_top_category.f00aad3a5c": ["model.sql_repository_bz.stg_gmc_all_products"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_all_products_p_date__day__p_date_current_date_180.5c5e20286a": ["model.sql_repository_bz.stg_gmc_all_products"], "test.sql_repository_bz.max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_all_products_50__p_date.6cab71d571": ["model.sql_repository_bz.stg_gmc_all_products"], "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_all_products_p_date__offer_id__all_values_are_missing__False__products_country_de_and_p_date_2022_04_09_.5a02919780": ["model.sql_repository_bz.stg_gmc_all_products"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_issues_offer_id.65f05265df": ["model.sql_repository_bz.stg_gmc_product_issues"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_issues_offer_id.1e69f3a871": ["model.sql_repository_bz.stg_gmc_product_issues"], "test.sql_repository_bz.not_null_stg_gmc_product_issues_offer_id.ea3a032de0": ["model.sql_repository_bz.stg_gmc_product_issues"], "test.sql_repository_bz.unique_stg_qlik_return_rates_sk_id.c01170b5d2": ["model.sql_repository_bz.stg_qlik_return_rates"], "test.sql_repository_bz.not_null_stg_qlik_return_rates_sk_id.e224007779": ["model.sql_repository_bz.stg_qlik_return_rates"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_qlik_return_rates_brand.9f3e8adba5": ["model.sql_repository_bz.stg_qlik_return_rates"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_qlik_return_rates_brand.a1363e28e5": ["model.sql_repository_bz.stg_qlik_return_rates"], "test.sql_repository_bz.not_null_stg_qlik_return_rates_brand.0e6dc5c9d5": ["model.sql_repository_bz.stg_qlik_return_rates"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_stock_stock_product_id.ef77ca4d90": ["model.sql_repository_bz.stg_gmc_product_stock"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_stock_stock_product_id.6ef41bbbc2": ["model.sql_repository_bz.stg_gmc_product_stock"], "test.sql_repository_bz.not_null_stg_gmc_product_stock_stock_product_id.28086e6f00": ["model.sql_repository_bz.stg_gmc_product_stock"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_brands_brand.524479c5dc": ["model.sql_repository_bz.stg_gmc_product_brands"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_brands_brand.20946638eb": ["model.sql_repository_bz.stg_gmc_product_brands"], "test.sql_repository_bz.not_null_stg_gmc_product_brands_brand.ab3c6ef00c": ["model.sql_repository_bz.stg_gmc_product_brands"], "test.sql_repository_bz.unique_stg_gmc_product_brands_brand.2cd4635233": ["model.sql_repository_bz.stg_gmc_product_brands"], "test.sql_repository_bz.unique_stg_gmc_margins_all_sk_id.236d6ee406": ["model.sql_repository_bz.stg_gmc_margins_all"], "test.sql_repository_bz.not_null_stg_gmc_margins_all_sk_id.0cecb41021": ["model.sql_repository_bz.stg_gmc_margins_all"], "test.sql_repository_bz.not_null_stg_jira_finished_seo_tickets_ticket_number.0b2925852b": ["model.sql_repository_bz.stg_jira_finished_seo_tickets"], "test.sql_repository_bz.unique_stg_jira_finished_seo_tickets_ticket_number.3e097897e1": ["model.sql_repository_bz.stg_jira_finished_seo_tickets"], "test.sql_repository_bz.dbt_utils_recency_stg_jira_finished_seo_tickets_day__load_timestamp__1.1c81e510ae": ["model.sql_repository_bz.stg_jira_finished_seo_tickets"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_date.6d82b037c0": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"], "test.sql_repository_bz.not_null_stg_minubo_ga_kpis_daily_minubo_ga_date.bdfd966551": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"], "test.sql_repository_bz.unique_stg_minubo_ga_kpis_daily_minubo_ga_date.e30f85f645": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_sessions.c6d114792d": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_minubo_ga_kpis_daily_minubo_ga_sessions.73742e66cc": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_page_views.c232337fa3": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_detail_views.ddbbe3e43d": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_add_to_carts.eed43303f2": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_minubo_ga_kpis_daily_minubo_ga_date__day__minubo_ga_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.b4cfc89a19": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"], "test.sql_repository_bz.unique_stg_antavo_club_optins_antavo_customer_id.c7eb84e6cf": ["model.sql_repository_bz.stg_antavo_club_optins"], "test.sql_repository_bz.not_null_stg_antavo_club_optins_antavo_customer_id.303711e666": ["model.sql_repository_bz.stg_antavo_club_optins"], "test.sql_repository_bz.unique_stg_consentless_transactions_live_transaction_id.869dd889ff": ["model.sql_repository_bz.stg_consentless_transactions_live"], "test.sql_repository_bz.not_null_stg_consentless_transactions_live_transaction_id.bb1b2d2782": ["model.sql_repository_bz.stg_consentless_transactions_live"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_consentless_transactions_live_transaction_id.14d47953bf": ["model.sql_repository_bz.stg_consentless_transactions_live"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_live_transaction_id.9c2d55e45a": ["model.sql_repository_bz.stg_consentless_transactions_live"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_transaction_id__date_date_sub_current_date_interval_30_day_.0f4661f728": ["model.sql_repository_bz.stg_consentless_transactions"], "test.sql_repository_bz.not_null_stg_consentless_transactions_transaction_id.5b50a5a325": ["model.sql_repository_bz.stg_consentless_transactions"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_consentless_transactions_transaction_id.c46db33851": ["model.sql_repository_bz.stg_consentless_transactions"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_id.7bdf407d52": ["model.sql_repository_bz.stg_consentless_transactions"], "test.sql_repository_bz.not_null_stg_consentless_transactions_transaction_value.b3798794cd": ["model.sql_repository_bz.stg_consentless_transactions"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_value.dbb049c070": ["model.sql_repository_bz.stg_consentless_transactions"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_gclid__date_date_sub_current_date_interval_30_day_.eb1701f63a": ["model.sql_repository_bz.stg_consentless_transactions"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_gclid.48578c8780": ["model.sql_repository_bz.stg_consentless_transactions"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_consentless_transactions_date__day.7500829a42": ["model.sql_repository_bz.stg_consentless_transactions"], "test.sql_repository_bz.not_null_stg_consentless_consent_interaction_consent_event_id.1d9a27acff": ["model.sql_repository_bz.stg_consentless_consent_interaction"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_consent_interaction_consent_event_id__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.8960ea6730": ["model.sql_repository_bz.stg_consentless_consent_interaction"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_consent_interaction_consent_event_id.d2d3a28519": ["model.sql_repository_bz.stg_consentless_consent_interaction"], "test.sql_repository_bz.not_null_stg_consentless_page_views_live_pageview_event_id.97f8a40159": ["model.sql_repository_bz.stg_consentless_page_views_live"], "test.sql_repository_bz.unique_stg_consentless_page_views_live_pageview_event_id.1337a78cbf": ["model.sql_repository_bz.stg_consentless_page_views_live"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_page_views_live_pageview_event_id.3c2c68eb0f": ["model.sql_repository_bz.stg_consentless_page_views_live"], "test.sql_repository_bz.not_null_stg_gcp_bigquery_job_cost_sk_id.b4c10abd3f": ["model.sql_repository_bz.stg_gcp_bigquery_job_cost"], "test.sql_repository_bz.not_null_stg_gcp_cost_export_cost_entry_id.21de0cfd4f": ["model.sql_repository_bz.stg_gcp_cost_export"], "test.sql_repository_bz.unique_stg_gcp_bigquery_table_storage_table_creation_id.fd77db0431": ["model.sql_repository_bz.stg_gcp_bigquery_table_storage"], "test.sql_repository_bz.not_null_stg_gcp_bigquery_table_storage_table_creation_id.b24d8f11ad": ["model.sql_repository_bz.stg_gcp_bigquery_table_storage"], "test.sql_repository_bz.not_null_stg_gcp_bigquery_table_storage_total_rows.801a97c96f": ["model.sql_repository_bz.stg_gcp_bigquery_table_storage"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_gcp_bigquery_table_storage_total_rows__0.d218a50205": ["model.sql_repository_bz.stg_gcp_bigquery_table_storage"], "test.sql_repository_bz.unique_stg_trusted_shops_reviews_review_id.949835d18d": ["model.sql_repository_bz.stg_trusted_shops_reviews"], "test.sql_repository_bz.not_null_stg_trusted_shops_reviews_review_id.77ca29d3c0": ["model.sql_repository_bz.stg_trusted_shops_reviews"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_trusted_shops_reviews_review_id.44892f2ea9": ["model.sql_repository_bz.stg_trusted_shops_reviews"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_review_id.ea887442e7": ["model.sql_repository_bz.stg_trusted_shops_reviews"], "test.sql_repository_bz.not_null_stg_trusted_shops_reviews_date.81dcacb8ea": ["model.sql_repository_bz.stg_trusted_shops_reviews"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_date.480d173b22": ["model.sql_repository_bz.stg_trusted_shops_reviews"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_trusted_shops_reviews_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_.ff0cd72a6e": ["model.sql_repository_bz.stg_trusted_shops_reviews"], "test.sql_repository_bz.unique_stg_gsheets_currency_factor_ch_currency_date.dadb8f5b80": ["model.sql_repository_bz.stg_gsheets_currency_factor_ch"], "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_ch_currency_date.8caf318b93": ["model.sql_repository_bz.stg_gsheets_currency_factor_ch"], "test.sql_repository_bz.unique_stg_gsheets_currency_factor_gb_currency_date.dc6df0c420": ["model.sql_repository_bz.stg_gsheets_currency_factor_gb"], "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_gb_currency_date.60c08266a3": ["model.sql_repository_bz.stg_gsheets_currency_factor_gb"], "test.sql_repository_bz.unique_stg_gsheets_currency_factor_all_countries_sk_id.d65e47a9df": ["model.sql_repository_bz.stg_gsheets_currency_factor_all_countries"], "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_all_countries_sk_id.46183c91bf": ["model.sql_repository_bz.stg_gsheets_currency_factor_all_countries"], "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_country_soll.375d5a033e": ["model.sql_repository_bz.stg_gsheets_order_value_planned"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gsheets_order_value_planned_country_soll.b550d014a1": ["model.sql_repository_bz.stg_gsheets_order_value_planned"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_in_set_stg_gsheets_order_value_planned_country_soll__de__at__ch__it__nl__uk__int.38a8c54181": ["model.sql_repository_bz.stg_gsheets_order_value_planned"], "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_month_soll.18b7a3df24": ["model.sql_repository_bz.stg_gsheets_order_value_planned"], "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_order_value_soll_overall.24d2f1b2f5": ["model.sql_repository_bz.stg_gsheets_order_value_planned"], "test.sql_repository_bz.unique_stg_gsheets_order_value_planned_sk_id.ef401765b3": ["model.sql_repository_bz.stg_gsheets_order_value_planned"], "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_sk_id.7015de60fd": ["model.sql_repository_bz.stg_gsheets_order_value_planned"], "test.sql_repository_bz.unique_stg_gsheets_channel_shares_planned_sk_id.badaec310f": ["model.sql_repository_bz.stg_gsheets_channel_shares_planned"], "test.sql_repository_bz.not_null_stg_gsheets_channel_shares_planned_sk_id.3653da3a29": ["model.sql_repository_bz.stg_gsheets_channel_shares_planned"], "test.sql_repository_bz.unique_stg_gsheets_seo_top_pages_url_noutm.7212c20bfa": ["model.sql_repository_bz.stg_gsheets_seo_top_pages"], "test.sql_repository_bz.not_null_stg_gsheets_seo_top_pages_url_noutm.110efcbb9c": ["model.sql_repository_bz.stg_gsheets_seo_top_pages"], "test.sql_repository_bz.unique_stg_gsheets_seo_magazin_reworked_url_noutm.685baa01e6": ["model.sql_repository_bz.stg_gsheets_seo_magazin_reworked"], "test.sql_repository_bz.not_null_stg_gsheets_seo_magazin_reworked_url_noutm.dbd0d88abf": ["model.sql_repository_bz.stg_gsheets_seo_magazin_reworked"], "test.sql_repository_bz.unique_stg_awin_return_adjustment_errors_order_id_awin.04b602641e": ["model.sql_repository_bz.stg_awin_return_adjustment_errors"], "test.sql_repository_bz.not_null_stg_awin_return_adjustment_errors_order_id_awin.85c503044f": ["model.sql_repository_bz.stg_awin_return_adjustment_errors"], "test.sql_repository_bz.not_null_stg_awin_return_adjustment_errors_inv_h_shop_order_id.96a5995894": ["model.sql_repository_bz.stg_awin_return_adjustment_errors"], "test.sql_repository_bz.unique_stg_awin_return_adjustment_errors_inv_h_shop_order_id.2bd5e7e3da": ["model.sql_repository_bz.stg_awin_return_adjustment_errors"], "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_stg_awin_return_adjustment_errors_15__False.4bcfe012bd": ["model.sql_repository_bz.stg_awin_return_adjustment_errors"], "test.sql_repository_bz.not_null_stg_awin_orders_all_order_id_awin.b7a1da485c": ["model.sql_repository_bz.stg_awin_orders_all"], "test.sql_repository_bz.unique_stg_awin_orders_all_order_id_awin.1ec1a6104e": ["model.sql_repository_bz.stg_awin_orders_all"], "test.sql_repository_bz.unique_stg_awin_orders_all_order_id.2f1c74c206": ["model.sql_repository_bz.stg_awin_orders_all"], "test.sql_repository_bz.not_null_stg_awin_orders_all_order_id.587cb4b3c0": ["model.sql_repository_bz.stg_awin_orders_all"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_awin_orders_all_order_id.2506a6b5f5": ["model.sql_repository_bz.stg_awin_orders_all"], "test.sql_repository_bz.not_null_stg_awin_orders_all_sale_amount_awin.cfd6a08f74": ["model.sql_repository_bz.stg_awin_orders_all"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__1__awin_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.ce4c453dd9": ["model.sql_repository_bz.stg_awin_orders_all"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__5000__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_.a4cb09bf6b": ["model.sql_repository_bz.stg_awin_orders_all"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_awin_orders_all_awin_date__day__awin_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.6b0230aaa7": ["model.sql_repository_bz.stg_awin_orders_all"], "test.sql_repository_bz.max_row_count_change_from_prev_day_to_yesterday_in_percent_stg_awin_orders_all_100__awin_date.b4c3180cdc": ["model.sql_repository_bz.stg_awin_orders_all"], "test.sql_repository_bz.not_null_stg_pagespeed_url_data_date_url_id.022036751d": ["model.sql_repository_bz.stg_pagespeed_url_data"], "test.sql_repository_bz.unique_stg_pagespeed_url_data_date_url_id.df1b23f779": ["model.sql_repository_bz.stg_pagespeed_url_data"], "test.sql_repository_bz.not_null_stg_pagespeed_url_data_date.de9a6dd3e8": ["model.sql_repository_bz.stg_pagespeed_url_data"], "test.sql_repository_bz.not_null_stg_pagespeed_url_data_country.b705d25b17": ["model.sql_repository_bz.stg_pagespeed_url_data"], "test.sql_repository_bz.not_null_stg_pagespeed_url_data_domain.13cc19c93c": ["model.sql_repository_bz.stg_pagespeed_url_data"], "test.sql_repository_bz.not_null_stg_pagespeed_url_data_cumulative_layout_shift_s.22056433d4": ["model.sql_repository_bz.stg_pagespeed_url_data"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_pagespeed_url_data_cumulative_layout_shift_s__5__0__date_2022_09_09_.868a68f183": ["model.sql_repository_bz.stg_pagespeed_url_data"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_pagespeed_url_data_date__day.b864fe735a": ["model.sql_repository_bz.stg_pagespeed_url_data"], "test.sql_repository_bz.unique_stg_ga_performance_costs_sk_id.bf171ab0d3": ["model.sql_repository_bz.stg_ga_performance_costs"], "test.sql_repository_bz.not_null_stg_ga_performance_costs_sk_id.3dbb6b9b6a": ["model.sql_repository_bz.stg_ga_performance_costs"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_performance_costs_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.6f52d48874": ["model.sql_repository_bz.stg_ga_performance_costs"], "test.sql_repository_bz.unique_stg_ga_performance_cost_validation_sk_id.1458d8ac6d": ["model.sql_repository_bz.stg_ga_performance_cost_validation"], "test.sql_repository_bz.not_null_stg_ga_performance_cost_validation_sk_id.1f89130650": ["model.sql_repository_bz.stg_ga_performance_cost_validation"], "test.sql_repository_bz.unique_stg_ga_pagespeed_per_pagetype_sk_id.9eddc42fea": ["model.sql_repository_bz.stg_ga_pagespeed_per_pagetype"], "test.sql_repository_bz.not_null_stg_ga_pagespeed_per_pagetype_sk_id.7aec915dea": ["model.sql_repository_bz.stg_ga_pagespeed_per_pagetype"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pagespeed_per_pagetype_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.50512cba29": ["model.sql_repository_bz.stg_ga_pagespeed_per_pagetype"], "test.sql_repository_bz.not_null_stg_ga_page_types_date.013abb6e60": ["model.sql_repository_bz.stg_ga_page_types"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_page_types_date.d195ea7cc4": ["model.sql_repository_bz.stg_ga_page_types"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_page_types_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.dd4ba2f67e": ["model.sql_repository_bz.stg_ga_page_types"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pageviews_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.b28b8c6670": ["model.sql_repository_bz.stg_ga_pageviews"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_detail_pages_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.e2cd1791a2": ["model.sql_repository_bz.stg_ga_product_detail_pages"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_internal_search_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.d3b47f08ba": ["model.sql_repository_bz.stg_ga_internal_search"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_checkouts_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.68a80f7534": ["model.sql_repository_bz.stg_ga_product_checkouts"], "test.sql_repository_bz.not_null_stg_ga_products_sk_id.df1d8c24ac": ["model.sql_repository_bz.stg_ga_products"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_products_sk_id__date_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_.9642857c67": ["model.sql_repository_bz.stg_ga_products"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_products_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.2773918a90": ["model.sql_repository_bz.stg_ga_products"], "test.sql_repository_bz.not_null_stg_ga4_products_sk_id.b1a82e3783": ["model.sql_repository_bz.stg_ga4_products"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_products_sk_id__event_date_dt_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_.d99030f1d4": ["model.sql_repository_bz.stg_ga4_products"], "test.sql_repository_bz.unique_stg_ga_session_totals_sk_id.5a638092dc": ["model.sql_repository_bz.stg_ga_session_totals"], "test.sql_repository_bz.not_null_stg_ga_session_totals_channel_grouping.21feb97e6a": ["model.sql_repository_bz.stg_ga_session_totals"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_ga_session_totals_channel_grouping.ac3f4db203": ["model.sql_repository_bz.stg_ga_session_totals"], "test.sql_repository_bz.not_null_stg_ga_session_totals_hits.462e48d6f1": ["model.sql_repository_bz.stg_ga_session_totals"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_session_totals_hits.049b727064": ["model.sql_repository_bz.stg_ga_session_totals"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_ga_session_totals_hits.e9c650e839": ["model.sql_repository_bz.stg_ga_session_totals"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_ga_session_totals_hits__499__1__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day___False.e0582a4e16": ["model.sql_repository_bz.stg_ga_session_totals"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_session_totals_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.bf9ac5798f": ["model.sql_repository_bz.stg_ga_session_totals"], "test.sql_repository_bz.accepted_values_stg_ga4_events_custom_event_name___custom_category_tree_click___custom_filter_click___custom_flyout_click___custom_magazine_click___custom_search_suggest_click___custom_sort_click___custom_triggermail_entrance___custom_wishlist_click___custom_magazine_product_carousel_click.0dab3351b0": ["model.sql_repository_bz.stg_ga4_events_custom"], "test.sql_repository_bz.not_null_stg_ga4_events_custom_sk_id.41a4aba218": ["model.sql_repository_bz.stg_ga4_events_custom"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_custom_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.c255fac6ff": ["model.sql_repository_bz.stg_ga4_events_custom"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_custom_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.c3deba17f9": ["model.sql_repository_bz.stg_ga4_events_custom"], "test.sql_repository_bz.not_null_stg_ga4_events_checkout_sk_id.4597eea933": ["model.sql_repository_bz.stg_ga4_events_checkout"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_checkout_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.db7ab27ce1": ["model.sql_repository_bz.stg_ga4_events_checkout"], "test.sql_repository_bz.accepted_values_stg_ga4_events_checkout_event_name__add_to_cart__view_cart__remove_from_cart__begin_checkout__add_payment_info__purchase.543e26a8f4": ["model.sql_repository_bz.stg_ga4_events_checkout"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_checkout_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.476c8ec576": ["model.sql_repository_bz.stg_ga4_events_checkout"], "test.sql_repository_bz.accepted_values_stg_ga4_events_standard_event_name__view_item__view_item_list__select_item__view_promotion__select_promotion__session_start__first_visit__user_engagement__click__page_view__file_download__scroll__view_search_results__video_start__video_progress__video_complete.9fca75c894": ["model.sql_repository_bz.stg_ga4_events_standard"], "test.sql_repository_bz.not_null_stg_ga4_events_standard_sk_id.8ed9669bdb": ["model.sql_repository_bz.stg_ga4_events_standard"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_standard_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.e66abf2b96": ["model.sql_repository_bz.stg_ga4_events_standard"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_standard_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.5d7a41328b": ["model.sql_repository_bz.stg_ga4_events_standard"], "test.sql_repository_bz.not_null_stg_ga_events_per_page_sk_id.0055b71d8c": ["model.sql_repository_bz.stg_ga_events_per_page"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_per_page_sk_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.3b4617b45a": ["model.sql_repository_bz.stg_ga_events_per_page"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_per_page_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.e5e16acb72": ["model.sql_repository_bz.stg_ga_events_per_page"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_promotion_teaser_event_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.689eb79adf": ["model.sql_repository_bz.stg_ga_events_promotion"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_name__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.7cb01b44eb": ["model.sql_repository_bz.stg_ga_events_promotion"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_creative__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.874b0d1267": ["model.sql_repository_bz.stg_ga_events_promotion"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_promotion_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.3233811fec": ["model.sql_repository_bz.stg_ga_events_promotion"], "test.sql_repository_bz.not_null_stg_ga_events_event_id.197c93642a": ["model.sql_repository_bz.stg_ga_events"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_event_id__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_and_event_action_eec_promoView_.a4d39cc847": ["model.sql_repository_bz.stg_ga_events"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.a8d306408b": ["model.sql_repository_bz.stg_ga_events"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_filter_events_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.832cc46197": ["model.sql_repository_bz.stg_ga_filter_events"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_hits_all_properties_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.741ff36f99": ["model.sql_repository_bz.stg_ga_hits_all_properties"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_ecommerce_actions_c_date__day__c_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.53ae9161a9": ["model.sql_repository_bz.stg_ga_ecommerce_actions"], "test.sql_repository_bz.unique_stg_ga_magazin_custom_dims_sk_id.e9d73751a1": ["model.sql_repository_bz.stg_ga_magazin_custom_dims"], "test.sql_repository_bz.not_null_stg_ga_magazin_custom_dims_sk_id.27c359e513": ["model.sql_repository_bz.stg_ga_magazin_custom_dims"], "test.sql_repository_bz.unique_stg_ga_transactions_with_adclick_involvement_ad_transactionid.2e94cfb8df": ["model.sql_repository_bz.stg_ga_transactions_with_adclick_involvement"], "test.sql_repository_bz.not_null_stg_ga_transactions_with_adclick_involvement_ad_transactionid.93f103603a": ["model.sql_repository_bz.stg_ga_transactions_with_adclick_involvement"], "test.sql_repository_bz.unique_stg_ga_transactions_conversion_backfill_ga_transaction_id.ff960f4d00": ["model.sql_repository_bz.stg_ga_transactions_conversion_backfill"], "test.sql_repository_bz.not_null_stg_ga_transactions_conversion_backfill_ga_transaction_id.85403ad4fb": ["model.sql_repository_bz.stg_ga_transactions_conversion_backfill"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_transactions_ga_transaction_id__ga_date_2022_03_22_.deb23661cb": ["model.sql_repository_bz.stg_ga_transactions"], "test.sql_repository_bz.not_null_stg_ga_transactions_ga_transaction_id.ffcd5181e4": ["model.sql_repository_bz.stg_ga_transactions"], "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_transactions_ga_transaction_id.ebc24c41f0": ["model.sql_repository_bz.stg_ga_transactions"], "test.sql_repository_bz.not_null_stg_ga_transactions_sk_id.a9e4fe4e7f": ["model.sql_repository_bz.stg_ga_transactions"], "test.sql_repository_bz.not_null_stg_ga_transactions_ga_date.043a94113f": ["model.sql_repository_bz.stg_ga_transactions"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_recent_data_stg_ga_transactions_ga_date__day__2.51546af5d3": ["model.sql_repository_bz.stg_ga_transactions"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_transactions_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.be9d909b40": ["model.sql_repository_bz.stg_ga_transactions"], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_country_product_id.4ecced115b": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.unique_stg_channel_pilot_source_feeds_ipim_country_product_id.091cd5d960": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_productid.97767b6846": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_short_description.169591f8d7": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_brand.4619596cbd": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_category_path.993b592a57": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_verkaufspreis.7239cac51f": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_verkaufspreis__0__verkaufspreis_is_not_null.9b96c4e3f5": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_uvp.dafb6006e2": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_uvp__0.20a3b1aa3b": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_ean.6548678f49": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_base_title.6b55a746de": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_externeid.7830fb5a2b": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.dbt_expectations_expect_table_column_count_to_equal_stg_channel_pilot_source_feeds_ipim_32.b369279dc6": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_stg_channel_pilot_source_feeds_ipim_1800000.011dcf5879": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.dbt_expectations_expect_grouped_row_values_to_have_recent_data_stg_channel_pilot_source_feeds_ipim_day__country__1__file_datetime.1016f9cf03": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_channel_pilot_source_feeds_ipim_uvp__verkaufspreis__True__uvp_is_not_null_and_verkaufspreis_is_not_null.11b9601583": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_crawl_advertools_logs_url_crawl_id__parse_date_Y_m_d_date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.afc25836a7": ["model.sql_repository_bz.stg_crawl_advertools_logs"], "test.sql_repository_bz.not_null_stg_crawl_advertools_logs_url_crawl_id.ec4d5af0b4": ["model.sql_repository_bz.stg_crawl_advertools_logs"], "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_de_sitemap_name.70f5d2f525": ["model.sql_repository_bz.stg_crawl_sitemap_urls_de"], "test.sql_repository_bz.accepted_values_stg_crawl_sitemap_urls_de_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special.1a7d3b09cb": ["model.sql_repository_bz.stg_crawl_sitemap_urls_de"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_crawl_sitemap_urls_all_sk_id__crawl_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.0365716f95": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all"], "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_all_sk_id.9c86037f76": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all"], "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_all_sitemap_name.cba5f2461b": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all"], "test.sql_repository_bz.accepted_values_stg_crawl_sitemap_urls_all_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special.9e60cd2c50": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_crawl_sitemap_urls_all_crawl_date__day.10793617ba": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all"], "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_bergfreunde_url.4aef2acff8": ["model.sql_repository_bz.stg_crawl_sitemap_urls_bergfreunde"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_invoice_header_and_lines_order_date__day__order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_.b1c83b7d54": ["model.sql_repository_bz.stg_nav_invoice_header_and_lines"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_transactions_T_order_date__day__T_order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_.a042accd5a": ["model.sql_repository_bz.stg_nav_transactions"], "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_date.2c0e5f7ac3": ["model.sql_repository_bz.weather_avg_temp_to_monthly_avg"], "test.sql_repository_bz.dbt_utils_at_least_one_weather_avg_temp_to_monthly_avg_date.c88ebad30c": ["model.sql_repository_bz.weather_avg_temp_to_monthly_avg"], "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_avg_temp.8fd2bfd46b": ["model.sql_repository_bz.weather_avg_temp_to_monthly_avg"], "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_m_avg_temp.2a744adda8": ["model.sql_repository_bz.weather_avg_temp_to_monthly_avg"], "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_temp_diff_to_m_avg.8c30a0bda6": ["model.sql_repository_bz.weather_avg_temp_to_monthly_avg"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_weather_avg_temp_to_monthly_avg_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_.bc1cde2c30": ["model.sql_repository_bz.weather_avg_temp_to_monthly_avg"], "test.sql_repository_bz.not_null_pb_full_working_query_date.db6859164d": ["model.sql_repository_bz.pb_full_working_query"], "test.sql_repository_bz.dbt_utils_at_least_one_pb_full_working_query_date.183367a5f0": ["model.sql_repository_bz.pb_full_working_query"], "test.sql_repository_bz.not_null_pb_full_working_query_conversion_name.38941044cd": ["model.sql_repository_bz.pb_full_working_query"], "test.sql_repository_bz.not_null_pb_full_working_query_transactionId.3b1bdf2539": ["model.sql_repository_bz.pb_full_working_query"], "test.sql_repository_bz.unique_pb_full_working_query_transactionId.12c3f941a2": ["model.sql_repository_bz.pb_full_working_query"], "test.sql_repository_bz.not_null_pb_full_working_query_totalRevenue.7d8ef55f4a": ["model.sql_repository_bz.pb_full_working_query"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_totalRevenue__0_01.194e5ddff4": ["model.sql_repository_bz.pb_full_working_query"], "test.sql_repository_bz.not_null_pb_full_working_query_order_margins_after_returns.93f374c0c2": ["model.sql_repository_bz.pb_full_working_query"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_order_margins_after_returns__0_01.9a575baf5e": ["model.sql_repository_bz.pb_full_working_query"], "test.sql_repository_bz.unique_onsite_duplicate_teaser_events_teaser_event_id.795ca7b5f0": ["model.sql_repository_bz.onsite_duplicate_teaser_events"], "test.sql_repository_bz.not_null_onsite_duplicate_teaser_events_teaser_event_id.1439c5bb2b": ["model.sql_repository_bz.onsite_duplicate_teaser_events"], "test.sql_repository_bz.not_null_onsite_ga_filter_usage_page.036c570431": ["model.sql_repository_bz.onsite_ga_filter_usage"], "test.sql_repository_bz.dbt_utils_at_least_one_onsite_ga_filter_usage_page.62acd149c6": ["model.sql_repository_bz.onsite_ga_filter_usage"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_page.bcc635be0c": ["model.sql_repository_bz.onsite_ga_filter_usage"], "test.sql_repository_bz.not_null_onsite_ga_filter_usage_filter_type.76df520867": ["model.sql_repository_bz.onsite_ga_filter_usage"], "test.sql_repository_bz.dbt_utils_at_least_one_onsite_ga_filter_usage_filter_type.feb7c119d7": ["model.sql_repository_bz.onsite_ga_filter_usage"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_filter_type.299c4c09a8": ["model.sql_repository_bz.onsite_ga_filter_usage"], "test.sql_repository_bz.not_null_onsite_hits_by_property_and_day_ga_property.96f9de3646": ["model.sql_repository_bz.onsite_hits_by_property_and_day"], "test.sql_repository_bz.dbt_utils_at_least_one_onsite_hits_by_property_and_day_ga_property.3dbf7c98a2": ["model.sql_repository_bz.onsite_hits_by_property_and_day"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_hits_by_property_and_day_ga_property.5dd838d10e": ["model.sql_repository_bz.onsite_hits_by_property_and_day"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_sessions_comp__1_2__0_8__date_date_sub_current_date_interval_2_day_.13395bde30": ["model.sql_repository_bz.onsite_ga4_metric_comparison"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_transactions_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_.1d297b4e98": ["model.sql_repository_bz.onsite_ga4_metric_comparison"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_order_value_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_.66d53dfc73": ["model.sql_repository_bz.onsite_ga4_metric_comparison"], "test.sql_repository_bz.dbt_utils_at_least_one_gads_ads_for_url_check_final_url.9cafbd858b": ["model.sql_repository_bz.gads_ads_for_url_check"], "test.sql_repository_bz.not_null_gads_adstats_and_attributes_adgroup_id.edb7c2279b": ["model.sql_repository_bz.gads_adstats_and_attributes"], "test.sql_repository_bz.dbt_utils_at_least_one_gads_adstats_and_attributes_adgroup_id.e490c275df": ["model.sql_repository_bz.gads_adstats_and_attributes"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_name.80647eef58": ["model.sql_repository_bz.gads_backfill_consentless_transactions"], "test.sql_repository_bz.dbt_utils_at_least_one_gads_backfill_consentless_transactions_conversion_name.dc61bca00f": ["model.sql_repository_bz.gads_backfill_consentless_transactions"], "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_name.a4be000e25": ["model.sql_repository_bz.gads_backfill_consentless_transactions"], "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_value.ee7967395f": ["model.sql_repository_bz.gads_backfill_consentless_transactions"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_value.1ebff85aae": ["model.sql_repository_bz.gads_backfill_consentless_transactions"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_gads_backfill_consentless_transactions_google_click_id__conversion_name_in_Sale_PB_AT_Import_Sale_PB_NL_Import_Sale_PB_IT_Import_Sale_DE_Import_Sale_CH_Import_Sale_UK_Import_Sale__Import_.9d7b13ec85": ["model.sql_repository_bz.gads_backfill_consentless_transactions"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_google_click_id.4197bfa548": ["model.sql_repository_bz.gads_backfill_consentless_transactions"], "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_google_click_id.73d41f11b3": ["model.sql_repository_bz.gads_backfill_consentless_transactions"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_time.c7b1d11e16": ["model.sql_repository_bz.gads_backfill_consentless_transactions"], "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_time.300785956b": ["model.sql_repository_bz.gads_backfill_consentless_transactions"], "test.sql_repository_bz.dbt_expectations_expect_table_column_count_to_equal_gads_backfill_consentless_transactions_5.29426e22c7": ["model.sql_repository_bz.gads_backfill_consentless_transactions"], "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_gads_backfill_consentless_transactions_1000__200__False.0096963cea": ["model.sql_repository_bz.gads_backfill_consentless_transactions"], "test.sql_repository_bz.dbt_utils_at_least_one_gmc_missing_brands_per_country_country.7c615e55c7": ["model.sql_repository_bz.gmc_missing_brands_per_country"], "test.sql_repository_bz.dbt_utils_at_least_one_gmc_missing_brands_per_country_account_id.066b1cb92a": ["model.sql_repository_bz.gmc_missing_brands_per_country"], "test.sql_repository_bz.not_null_gmc_missing_brands_per_country_product_group.faa607cf81": ["model.sql_repository_bz.gmc_missing_brands_per_country"], "test.sql_repository_bz.not_null_awin_transactions_pending_with_returns_order_id_awin.9d5fb70f34": ["model.sql_repository_bz.awin_transactions_pending_with_returns"], "test.sql_repository_bz.dbt_utils_at_least_one_awin_transactions_pending_with_returns_order_id_awin.ada8261cb8": ["model.sql_repository_bz.awin_transactions_pending_with_returns"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_order_id_awin.47c5befa4a": ["model.sql_repository_bz.awin_transactions_pending_with_returns"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_order_id_awin__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_.9a103157be": ["model.sql_repository_bz.awin_transactions_pending_with_returns"], "test.sql_repository_bz.not_null_awin_transactions_pending_with_returns_sale_amount_awin.e764fc75bc": ["model.sql_repository_bz.awin_transactions_pending_with_returns"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_inv_h_shop_order_id.40f8727dcc": ["model.sql_repository_bz.awin_transactions_pending_with_returns"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_inv_h_shop_order_id.177285c64b": ["model.sql_repository_bz.awin_transactions_pending_with_returns"], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_umsatz_netto.a5b484a50a": ["model.sql_repository_bz.awin_transactions_pending_with_returns"], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_awin_transactions_pending_with_returns_umsatz_netto__inv_h_shop_order_id_is_not_null.40fdd0e1d0": ["model.sql_repository_bz.awin_transactions_pending_with_returns"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_ga_data_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.8ed5bd2364": ["model.sql_repository_bz.product_attributes_and_ga_data_by_day"], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_stock_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.06519299f6": ["model.sql_repository_bz.product_attributes_and_stock_by_day"], "test.ga4.unique_dim_ga4__sessions_session_key.5ade237063": ["model.ga4.dim_ga4__sessions"], "test.ga4.unique_dim_ga4__users_user_key.bdf442708d": ["model.ga4.dim_ga4__users"], "test.ga4.unique_fct_ga4__sessions_session_key.93f6a798f0": ["model.ga4.fct_ga4__sessions"], "test.ga4.not_null_stg_ga4__event_page_view_page_location.8b37318084": ["model.ga4.stg_ga4__event_page_view"], "test.ga4.unique_stg_ga4__users_first_last_pageviews_user_key.3c574733bb": ["model.ga4.stg_ga4__users_first_last_pageviews"], "test.ga4.unique_stg_ga4__users_first_last_events_user_key.dc787935d6": ["model.ga4.stg_ga4__users_first_last_events"], "test.ga4.unique_stg_ga4__events_event_key.985cc306e5": ["model.ga4.stg_ga4__events"], "test.ga4.unique_stg_ga4__derived_user_properties_user_key.8ef3970648": [], "test.ga4.unique_stg_ga4__sessions_traffic_sources_session_key.417549e35d": ["model.ga4.stg_ga4__sessions_traffic_sources"], "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_source.49313fe211": ["model.ga4.stg_ga4__sessions_traffic_sources"], "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_medium.90883df125": ["model.ga4.stg_ga4__sessions_traffic_sources"], "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_campaign.63d42c772d": ["model.ga4.stg_ga4__sessions_traffic_sources"], "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_channel_attribution_markov_attribution_channel_level_country_grouping__date__date_2022_05_20_and_country_grouping_de___19.3eefbef85f": ["source.sql_repository_bz.channel_attribution.markov_attribution_channel_level"], "test.sql_repository_bz.dbt_expectations_source_expect_row_values_to_have_recent_data_channel_attribution_markov_attribution_channel_level_date__hour__39.07f7fbb608": ["source.sql_repository_bz.channel_attribution.markov_attribution_channel_level"], "test.sql_repository_bz.dbt_expectations_source_expect_row_values_to_have_data_for_every_n_datepart_dbt_test_results_test_results_history_test_date__day__2022_07_01.ef831ae303": ["source.sql_repository_bz.dbt_test_results.test_results_history"], "test.sql_repository_bz.dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_Land__Monat__Wert.b09caac309": ["source.sql_repository_bz.price_intelligence.budgetplan_soll"], "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__Monat__1.5d85f3b378": ["source.sql_repository_bz.price_intelligence.budgetplan_soll"], "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__12.888a866c6b": ["source.sql_repository_bz.price_intelligence.budgetplan_soll"], "test.sql_repository_bz.dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_channels_Land__Channel__Anteil__KUR.754e05eaad": ["source.sql_repository_bz.price_intelligence.budgetplan_soll_channels"], "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_channels_Land__Channel__Land_is_not_null_and_Channel_is_not_null__1.f09a2be471": ["source.sql_repository_bz.price_intelligence.budgetplan_soll_channels"], "source.sql_repository_bz.channel_attribution.markov_attribution_channel_level": [], "source.sql_repository_bz.channel_attribution.markov_attribution_path_level": [], "source.sql_repository_bz.weather_data.weather_dach_daily": [], "source.sql_repository_bz.weather_data.weather_dach_7d_forecast": [], "source.sql_repository_bz.google_ads_transfer_de.gads_shopping_product_stats": [], "source.sql_repository_bz.google_ads_transfer_de.gads_search_query_stats": [], "source.sql_repository_bz.google_ads_transfer_de.gads_campaigns": [], "source.sql_repository_bz.google_ads_transfer_de.gads_campaign_stats": [], "source.sql_repository_bz.google_ads_transfer_de.gads_ads_stats": [], "source.sql_repository_bz.google_ads_transfer_de.gads_ads": [], "source.sql_repository_bz.google_ads_transfer_de.gads_adgroups": [], "source.sql_repository_bz.google_ads_transfer_de.gads_adgroup_stats": [], "source.sql_repository_bz.google_ads_transfer_de.gads_criteria": [], "source.sql_repository_bz.google_ads_transfer_at.gads_shopping_product_stats": [], "source.sql_repository_bz.google_ads_transfer_at.gads_search_query_stats": [], "source.sql_repository_bz.google_ads_transfer_at.gads_campaigns": [], "source.sql_repository_bz.google_ads_transfer_at.gads_campaign_stats": [], "source.sql_repository_bz.google_ads_transfer_at.gads_ads_stats": [], "source.sql_repository_bz.google_ads_transfer_at.gads_ads": [], "source.sql_repository_bz.google_ads_transfer_at.gads_adgroups": [], "source.sql_repository_bz.google_ads_transfer_at.gads_criteria": [], "source.sql_repository_bz.google_ads_transfer_ch.gads_shopping_product_stats": [], "source.sql_repository_bz.google_ads_transfer_ch.gads_search_query_stats": [], "source.sql_repository_bz.google_ads_transfer_ch.gads_campaigns": [], "source.sql_repository_bz.google_ads_transfer_ch.gads_campaign_stats": [], "source.sql_repository_bz.google_ads_transfer_ch.gads_ads_stats": [], "source.sql_repository_bz.google_ads_transfer_ch.gads_ads": [], "source.sql_repository_bz.google_ads_transfer_ch.gads_adgroups": [], "source.sql_repository_bz.google_ads_transfer_ch.gads_criteria": [], "source.sql_repository_bz.google_ads_transfer_nl.gads_shopping_product_stats": [], "source.sql_repository_bz.google_ads_transfer_nl.gads_search_query_stats": [], "source.sql_repository_bz.google_ads_transfer_nl.gads_campaigns": [], "source.sql_repository_bz.google_ads_transfer_nl.gads_campaign_stats": [], "source.sql_repository_bz.google_ads_transfer_nl.gads_ads_stats": [], "source.sql_repository_bz.google_ads_transfer_nl.gads_ads": [], "source.sql_repository_bz.google_ads_transfer_nl.gads_adgroups": [], "source.sql_repository_bz.google_ads_transfer_nl.gads_criteria": [], "source.sql_repository_bz.google_ads_transfer_be.gads_shopping_product_stats": [], "source.sql_repository_bz.google_ads_transfer_be.gads_search_query_stats": [], "source.sql_repository_bz.google_ads_transfer_be.gads_campaigns": [], "source.sql_repository_bz.google_ads_transfer_be.gads_campaign_stats": [], "source.sql_repository_bz.google_ads_transfer_be.gads_ads_stats": [], "source.sql_repository_bz.google_ads_transfer_be.gads_ads": [], "source.sql_repository_bz.google_ads_transfer_be.gads_adgroups": [], "source.sql_repository_bz.google_ads_transfer_be.gads_criteria": [], "source.sql_repository_bz.google_ads_transfer_it.gads_shopping_product_stats": [], "source.sql_repository_bz.google_ads_transfer_it.gads_search_query_stats": [], "source.sql_repository_bz.google_ads_transfer_it.gads_campaigns": [], "source.sql_repository_bz.google_ads_transfer_it.gads_campaign_stats": [], "source.sql_repository_bz.google_ads_transfer_it.gads_ads_stats": [], "source.sql_repository_bz.google_ads_transfer_it.gads_ads": [], "source.sql_repository_bz.google_ads_transfer_it.gads_adgroups": [], "source.sql_repository_bz.google_ads_transfer_it.gads_criteria": [], "source.sql_repository_bz.google_ads_transfer_uk.gads_shopping_product_stats": [], "source.sql_repository_bz.google_ads_transfer_uk.gads_search_query_stats": [], "source.sql_repository_bz.google_ads_transfer_uk.gads_campaigns": [], "source.sql_repository_bz.google_ads_transfer_uk.gads_campaign_stats": [], "source.sql_repository_bz.google_ads_transfer_uk.gads_ads_stats": [], "source.sql_repository_bz.google_ads_transfer_uk.gads_ads": [], "source.sql_repository_bz.google_ads_transfer_uk.gads_adgroups": [], "source.sql_repository_bz.google_ads_transfer_uk.gads_criteria": [], "source.sql_repository_bz.google_ads_transfer_dk.gads_shopping_product_stats": [], "source.sql_repository_bz.google_ads_transfer_dk.gads_search_query_stats": [], "source.sql_repository_bz.google_ads_transfer_dk.gads_campaigns": [], "source.sql_repository_bz.google_ads_transfer_dk.gads_campaign_stats": [], "source.sql_repository_bz.google_ads_transfer_dk.gads_ads_stats": [], "source.sql_repository_bz.google_ads_transfer_dk.gads_ads": [], "source.sql_repository_bz.google_ads_transfer_dk.gads_adgroups": [], "source.sql_repository_bz.google_ads_transfer_dk.gads_criteria": [], "source.sql_repository_bz.google_ads_transfer_se.gads_shopping_product_stats": [], "source.sql_repository_bz.google_ads_transfer_se.gads_search_query_stats": [], "source.sql_repository_bz.google_ads_transfer_se.gads_campaigns": [], "source.sql_repository_bz.google_ads_transfer_se.gads_campaign_stats": [], "source.sql_repository_bz.google_ads_transfer_se.gads_ads_stats": [], "source.sql_repository_bz.google_ads_transfer_se.gads_ads": [], "source.sql_repository_bz.google_ads_transfer_se.gads_adgroups": [], "source.sql_repository_bz.google_ads_transfer_se.gads_criteria": [], "source.sql_repository_bz.google_ads_transfer_fr.gads_shopping_product_stats": [], "source.sql_repository_bz.google_ads_transfer_fr.gads_search_query_stats": [], "source.sql_repository_bz.google_ads_transfer_fr.gads_campaigns": [], "source.sql_repository_bz.google_ads_transfer_fr.gads_campaign_stats": [], "source.sql_repository_bz.google_ads_transfer_fr.gads_ads_stats": [], "source.sql_repository_bz.google_ads_transfer_fr.gads_ads": [], "source.sql_repository_bz.google_ads_transfer_fr.gads_adgroups": [], "source.sql_repository_bz.google_ads_transfer_fr.gads_criteria": [], "source.sql_repository_bz.google_ads_transfer_fi.gads_shopping_product_stats": [], "source.sql_repository_bz.google_ads_transfer_fi.gads_search_query_stats": [], "source.sql_repository_bz.google_ads_transfer_fi.gads_campaigns": [], "source.sql_repository_bz.google_ads_transfer_fi.gads_campaign_stats": [], "source.sql_repository_bz.google_ads_transfer_fi.gads_ads_stats": [], "source.sql_repository_bz.google_ads_transfer_fi.gads_ads": [], "source.sql_repository_bz.google_ads_transfer_fi.gads_adgroups": [], "source.sql_repository_bz.google_ads_transfer_fi.gads_criteria": [], "source.sql_repository_bz.google_ads_transfer_cz.gads_shopping_product_stats": [], "source.sql_repository_bz.google_ads_transfer_cz.gads_search_query_stats": [], "source.sql_repository_bz.google_ads_transfer_cz.gads_campaigns": [], "source.sql_repository_bz.google_ads_transfer_cz.gads_campaign_stats": [], "source.sql_repository_bz.google_ads_transfer_cz.gads_ads_stats": [], "source.sql_repository_bz.google_ads_transfer_cz.gads_ads": [], "source.sql_repository_bz.google_ads_transfer_cz.gads_adgroups": [], "source.sql_repository_bz.google_ads_transfer_cz.gads_criteria": [], "source.sql_repository_bz.crawled_ad_urls.crawled_ad_urls": [], "source.sql_repository_bz.dbt_test_results.test_results_central": [], "source.sql_repository_bz.dbt_test_results.test_results_history": [], "source.sql_repository_bz.google_search_console.gsc_data": [], "source.sql_repository_bz.product_inventory.cp_product_attributes_daily": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_products_de": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_products_uk": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_products_ch": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_products_at": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_products_nl": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_products_it": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_stock_de": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_price_benchmark_de": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_return_rates": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_de": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_ch": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_int": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_it": [], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_uk": [], "source.sql_repository_bz.seo_analytics.finished_seo_jira_tickets": [], "source.sql_repository_bz.analytics_datamart.minubo_ga_export": [], "source.sql_repository_bz.customer_analytics.antavo_optins": [], "source.sql_repository_bz.consentless_tracking.ishop_consentless_prod": [], "source.sql_repository_bz.consentless_tracking.ishop_consentless_staging": [], "source.sql_repository_bz.bz_information_schema.TABLE_STORAGE": [], "source.sql_repository_bz.bz_information_schema.bigquery_jobs": [], "source.sql_repository_bz.gcp_cost.gcp_cost_data": [], "source.sql_repository_bz.gcp_cost.gcp_cost_data_legacy": [], "source.sql_repository_bz.gcp_cloud_logs.cloudscheduler_executions": [], "source.sql_repository_bz.trusted_shops.ts_reviews_all": [], "source.sql_repository_bz.price_intelligence.currency_factor_chf": [], "source.sql_repository_bz.price_intelligence.currency_factor_gbp": [], "source.sql_repository_bz.price_intelligence.budgetplan_soll": [], "source.sql_repository_bz.price_intelligence.budgetplan_soll_channels": [], "source.sql_repository_bz.seo_analytics.top_pages_input_list": [], "source.sql_repository_bz.seo_analytics.magazin_posts_reworked_input_list": [], "source.sql_repository_bz.awin.awin_orders_all_ch": [], "source.sql_repository_bz.awin.awin_orders_all_deat": [], "source.sql_repository_bz.awin.awin_orders_all_it": [], "source.sql_repository_bz.awin.awin_orders_all_uk": [], "source.sql_repository_bz.awin.awin_orders_all_nl": [], "source.sql_repository_bz.awin.awin_return_adjustment_errors": [], "source.sql_repository_bz.customer_analytics.emarsys_ids": [], "source.sql_repository_bz.pagespeed_measurement.pagespeed_api_metrics": [], "source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all": [], "source.sql_repository_bz.ga_bz_master_view_de.ga_sessions_de": [], "source.sql_repository_bz.ga_bz_master_view_at.ga_sessions_at": [], "source.sql_repository_bz.ga_bz_master_view_ch.ga_sessions_ch": [], "source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events": [], "source.sql_repository_bz.performance_cost.performance_cost_DE": [], "source.sql_repository_bz.performance_cost.performance_cost_AT": [], "source.sql_repository_bz.performance_cost.performance_cost_CH": [], "source.sql_repository_bz.performance_cost.performance_cost_BE": [], "source.sql_repository_bz.performance_cost.performance_cost_UK": [], "source.sql_repository_bz.performance_cost.performance_cost_CZ": [], "source.sql_repository_bz.performance_cost.performance_cost_DK": [], "source.sql_repository_bz.performance_cost.performance_cost_FI": [], "source.sql_repository_bz.performance_cost.performance_cost_FR": [], "source.sql_repository_bz.performance_cost.performance_cost_IT": [], "source.sql_repository_bz.performance_cost.performance_cost_NL": [], "source.sql_repository_bz.performance_cost.performance_cost_NO": [], "source.sql_repository_bz.performance_cost.performance_cost_PL": [], "source.sql_repository_bz.performance_cost.performance_cost_SE": [], "source.sql_repository_bz.performance_cost.performance_cost_validation_all_views": [], "source.sql_repository_bz.product_inventory.channelpilot_source_feeds_all": [], "source.sql_repository_bz.crawl_data.crawl_advertools_logs": [], "source.sql_repository_bz.crawl_data.gbot_crawl_data": [], "source.sql_repository_bz.crawl_data.sitemap_data_de": [], "source.sql_repository_bz.crawl_data.sitemap_data_it": [], "source.sql_repository_bz.crawl_data.sitemap_data_nl": [], "source.sql_repository_bz.crawl_data.sitemap_data_uk": [], "source.sql_repository_bz.crawl_data.bf_sitemap_current": [], "source.sql_repository_bz.crawl_data.backlinks_and_inlinks_per_url": [], "source.sql_repository_bz.azure_dwh_discovery.nav_transactions": [], "source.sql_repository_bz.azure_dwh_discovery.nav_customers": [], "source.sql_repository_bz.azure_dwh_discovery.nav_invoice_line": [], "source.sql_repository_bz.azure_dwh_discovery.nav_invoice_header": [], "source.sql_repository_bz.azure_dwh_discovery.nav_credit_memo_line": [], "source.sql_repository_bz.azure_dwh_discovery.nav_credit_memo_header": [], "source.sql_repository_bz.azure_dwh_discovery.nav_sales_channel": [], "source.sql_repository_bz.azure_dwh_discovery.nav_customers_new_id": [], "source.sql_repository_bz.analytics_datamart.return_rates_country_brand_topcat": [], "source.ga4.ga4.events": [], "source.ga4.ga4.events_intraday": [], "exposure.sql_repository_bz.Repurchase Forecast": ["model.sql_repository_bz.pred_repurchase_model_input"], "exposure.sql_repository_bz.BZ OXID Revenue Daily": ["model.sql_repository_bz.transaction_order_value_daily_by_country"], "exposure.sql_repository_bz.Bergzeit Management Report": ["model.sql_repository_bz.alerts_datadiff_consentless_ga_1d", "model.sql_repository_bz.onsite_cookie_consent_event_values", "model.sql_repository_bz.onsite_ga_list_page_events", "model.sql_repository_bz.onsite_ga_reco_performance", "model.sql_repository_bz.stg_weather_dach_daily", "model.sql_repository_bz.transaction_ga_nav_attributes", "model.sql_repository_bz.weather_avg_temp_to_monthly_avg"], "exposure.sql_repository_bz.BZ Performance Soll Ist": ["model.sql_repository_bz.transaction_value_consentless_soll_ist_report"], "exposure.sql_repository_bz.Affiliate Gutscheinexport": ["model.sql_repository_bz.transaction_voucher_data"], "exposure.sql_repository_bz.Profit Bidding Upload CSV": ["model.sql_repository_bz.pb_full_working_query"], "exposure.sql_repository_bz.Shop_Filter Report": ["model.sql_repository_bz.onsite_ga_filter_usage"], "exposure.sql_repository_bz.Shop_Page_Tracking_Check": ["model.sql_repository_bz.onsite_duplicate_teaser_events", "source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.Shop_Beratungs-Report": ["model.sql_repository_bz.onsite_pdp_testberichte", "source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.Coops_CSR Marketing Report": ["model.sql_repository_bz.onsite_pdp_mut_share_per_day", "model.sql_repository_bz.onsite_pdp_product_attributes", "source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.GA4 Data Validation": ["model.sql_repository_bz.onsite_ga4_metric_comparison", "model.sql_repository_bz.stg_gcp_bigquery_table_storage"], "exposure.sql_repository_bz.Coops_Bergzeit - Adidas - Retail Partner Performance Dashboard": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.Shop_Performance Overview | DACH": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.Shop_Configurator Report": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.Shop_Flyout Report": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.BZ-SEA Dashboard": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.Shop_Brand Report": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.Shop_Benelux Market Analysis": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.Shop_Focus Markets Performance Overview": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.Shop_BZ Startseite Overall": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.Shop_BZ Startseite": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.CRM - eMail Analyse": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.Shop_Market Analysis | Italia": ["source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all"], "exposure.sql_repository_bz.Alert Consentless Offline Pages": ["model.sql_repository_bz.alerts_consentless_offline_pages"], "exposure.sql_repository_bz.Alert Consentless Missing Transactions": ["model.sql_repository_bz.alerts_consentless_transactions_last_hrs"], "exposure.sql_repository_bz.Alert Consentless Missing Consent Events": ["model.sql_repository_bz.alerts_consentless_consent_events_last_hrs"], "exposure.sql_repository_bz.Alert Consentless Missing Magazine Pageviews": ["model.sql_repository_bz.alerts_consentless_pageviews_magazine_last_hrs"], "exposure.sql_repository_bz.CRM_BZ Club Analysis": ["model.sql_repository_bz.cust_club_margin_calculation", "model.sql_repository_bz.cust_club_retention_rate", "model.sql_repository_bz.cust_cohort_club_metrics", "model.sql_repository_bz.cust_cohort_club_metrics_new_returning"], "exposure.sql_repository_bz.All_Market Review": ["model.sql_repository_bz.cust_new_returning_visitors_30d"], "exposure.sql_repository_bz.CRM_Kundenanalysen Explorativ": ["model.sql_repository_bz.cust_cohort_revenue_per_year", "model.sql_repository_bz.cust_customer_metrics"], "exposure.sql_repository_bz.Multichannel Attribution Dashboard": ["model.sql_repository_bz.stg_channelattribution_channel_level"], "exposure.sql_repository_bz.Channel Level Attribution Notebook (attribution-calculation)": ["model.sql_repository_bz.stg_ga_sessions_attribution_calculation"], "exposure.sql_repository_bz.Path Level Attribution Notebook (r-3-steffi)": ["model.sql_repository_bz.stg_ga_sessions_attribution_calculation"], "exposure.sql_repository_bz.BZ-Performance_SOLL-IST_GJ 22/23": ["model.sql_repository_bz.budget_plan_markov_channel_level"], "exposure.sql_repository_bz.GA Data Validation - AdCost Validation": ["model.sql_repository_bz.budget_plan_daily_adcost_validation"], "exposure.sql_repository_bz.Adgroups With Error Ads Upload to be Paused": ["model.sql_repository_bz.gads_crawled_urls_with_status"], "exposure.sql_repository_bz.Google Ads URLs Crawler": ["model.sql_repository_bz.gads_ads_for_url_check"], "exposure.sql_repository_bz.GAds Stats and Attributes Table": ["model.sql_repository_bz.gads_adstats_and_attributes"], "exposure.sql_repository_bz.Gads Backfill Consentless Transactions": ["model.sql_repository_bz.gads_backfill_consentless_transactions"], "exposure.sql_repository_bz.Channelpilot Feed Input Hygiene": ["model.sql_repository_bz.gads_channel_pilot_feeds_with_errors"], "exposure.sql_repository_bz.Missing Products in SMA Shopping Campaigns per Account": ["model.sql_repository_bz.gmc_missing_brands_per_country"], "exposure.sql_repository_bz.Google Ads Script to Upload the Json File to Google Ads": ["model.sql_repository_bz.gmc_missing_brands_per_country"], "exposure.sql_repository_bz.Vorlage Hersteller Report (extern)": ["model.sql_repository_bz.gads_all_cost_by_brand"], "exposure.sql_repository_bz.Awin Sales Comparison Cloud Function": ["model.sql_repository_bz.awin_transactions_pending_with_returns"], "exposure.sql_repository_bz.Awin Publisher Dashboard": ["model.sql_repository_bz.awin_transactions_pending_with_returns", "model.sql_repository_bz.stg_awin_orders_all"], "exposure.sql_repository_bz.Test Errors and Warnings to Teams Cloud Function": ["model.sql_repository_bz.test_results_latest_errors"], "exposure.sql_repository_bz.Analytics Admin Report (GCP & GA360)": ["model.sql_repository_bz.alerts_datadiff_consentless_ga_1d", "model.sql_repository_bz.alerts_datadiff_ga_minubo", "model.sql_repository_bz.gcp_bigquery_job_cost", "model.sql_repository_bz.gcp_cost_export", "model.sql_repository_bz.onsite_ga_sessions_by_hit_count_bucket", "model.sql_repository_bz.onsite_hits_by_property_and_day", "model.sql_repository_bz.test_results_all_historic"], "exposure.sql_repository_bz.B&S_Produkt Performance Report": ["model.sql_repository_bz.product_attr_and_shopping_by_day", "model.sql_repository_bz.product_attributes_and_ga_data_by_day", "model.sql_repository_bz.product_attributes_and_stock_by_day", "model.sql_repository_bz.product_brand_entrance_transactions", "model.sql_repository_bz.product_parentid_stats_by_day", "model.sql_repository_bz.product_sku_count_by_day"], "exposure.sql_repository_bz.B&S_Sales Aktionen Report": ["model.sql_repository_bz.product_attributes_and_ga_data_by_day", "model.sql_repository_bz.transaction_voucher_data"], "exposure.sql_repository_bz.Shop_Merchandising Report": ["model.sql_repository_bz.onsite_ga_internal_search", "model.sql_repository_bz.product_ga_data_and_adcost"], "exposure.sql_repository_bz.B&S_Warenkorb Analyse": ["model.sql_repository_bz.product_cart_analysis_selective_orders_category", "model.sql_repository_bz.product_cart_analysis_selective_orders_parentid"], "exposure.sql_repository_bz.B&S_Fremdlager PowerBI Report": ["model.sql_repository_bz.product_inventory_brand_aggregates", "model.sql_repository_bz.product_inventory_product_performance_metrics"], "exposure.sql_repository_bz.B&S_Pricing PowerBI Report": ["model.sql_repository_bz.product_inventory_brand_aggregates"], "exposure.sql_repository_bz.B&S_Topseller OutofStock Report": ["model.sql_repository_bz.product_sku_and_season"], "exposure.sql_repository_bz.SEO_Overall Report": ["model.sql_repository_bz.seo_crawl_lp_in_sitemap", "model.sql_repository_bz.seo_ga_pagespeed_sessions_transactions", "model.sql_repository_bz.seo_gsc_data_for_top_pages", "model.sql_repository_bz.seo_gsc_ga_data_for_mag_reworked", "model.sql_repository_bz.seo_gsc_url_age", "model.sql_repository_bz.seo_jira_finished_ifront_tickets", "model.sql_repository_bz.seo_pagespeed_web_vitals_data", "model.sql_repository_bz.seo_search_query_by_brand"], "exposure.sql_repository_bz.SEO_Pagespeed Report": ["model.sql_repository_bz.seo_pagespeed_web_vitals_data"], "exposure.sql_repository_bz.LP SEO Monitor": ["model.sql_repository_bz.seo_crawl_lp_in_sitemap"]}, "child_map": {"model.sql_repository_bz.int_attribution_markov_path_level_monthly": ["model.sql_repository_bz.budget_plan_ga_and_markov_data"], "model.sql_repository_bz.int_weather_avg_temp_to_monthly_avg": ["model.sql_repository_bz.weather_avg_temp_to_monthly_avg"], "model.sql_repository_bz.int_weather_avg_temp_by_country": ["model.sql_repository_bz.int_weather_avg_temp_to_monthly_avg"], "model.sql_repository_bz.int_gads_de_adstats_and_attributes": ["model.sql_repository_bz.gads_ads_for_url_check", "model.sql_repository_bz.gads_adstats_and_attributes", "model.sql_repository_bz.gads_adstats_and_attributes"], "model.sql_repository_bz.int_gads_all_query_stats": ["model.sql_repository_bz.int_gads_all_dynamic_query_cost_by_brand"], "model.sql_repository_bz.int_gads_all_crawled_ads_urls_classified": ["model.sql_repository_bz.gads_crawled_urls_with_status"], "model.sql_repository_bz.int_gads_all_feedadgroups": ["model.sql_repository_bz.gads_ads_for_url_check"], "model.sql_repository_bz.int_gads_product_data_and_shopping_by_day": ["model.sql_repository_bz.product_attr_and_shopping_by_day"], "model.sql_repository_bz.int_gads_all_shopping_criteria": ["model.sql_repository_bz.gmc_missing_brands_per_country", "model.sql_repository_bz.int_gmc_missing_product_groups"], "model.sql_repository_bz.int_gads_product_stats_by_day": ["model.sql_repository_bz.int_gads_product_data_and_shopping_by_day", "model.sql_repository_bz.product_ga_data_and_adcost"], "model.sql_repository_bz.int_gads_campaign_stats_by_brand": ["model.sql_repository_bz.gads_all_cost_by_brand"], "model.sql_repository_bz.int_gads_all_product_stats_by_brand": ["model.sql_repository_bz.gads_all_cost_by_brand"], "model.sql_repository_bz.int_gads_all_dynamic_query_cost_by_brand": ["model.sql_repository_bz.gads_all_cost_by_brand"], "model.sql_repository_bz.int_cp_product_attributes_90d": ["model.sql_repository_bz.int_cp_product_price_overall", "model.sql_repository_bz.int_cp_product_price_per_day"], "model.sql_repository_bz.int_cp_product_price_overall": ["model.sql_repository_bz.pb_product_revenue_margins_returns"], "model.sql_repository_bz.int_cp_source_feeds_with_errors": ["model.sql_repository_bz.gads_channel_pilot_feeds_with_errors", "model.sql_repository_bz.product_source_feed_skus_with_errors"], "model.sql_repository_bz.int_cp_product_price_per_day": ["model.sql_repository_bz.pb_product_revenue_margins_returns"], "model.sql_repository_bz.int_gmc_most_recent_prod_attr": ["model.sql_repository_bz.int_ga_pdp_entrances_transactions", "model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day", "model.sql_repository_bz.int_nav_products_and_attributes", "model.sql_repository_bz.pred_repurchase_model_transactions"], "model.sql_repository_bz.int_gmc_prices_chf_to_eur": ["model.sql_repository_bz.product_gmc_prices_chf_to_eur"], "model.sql_repository_bz.int_gmc_current_brands": ["model.sql_repository_bz.int_gmc_current_brands_and_countries"], "model.sql_repository_bz.int_gmc_stock_feeds_consolidated": ["model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day"], "model.sql_repository_bz.int_gmc_max_sku_count_by_parent": ["model.sql_repository_bz.int_gmc_sku_count_by_day"], "model.sql_repository_bz.int_gmc_avg_return_rates_by_country": ["model.sql_repository_bz.pb_product_revenue_margins_returns"], "model.sql_repository_bz.int_gmc_avg_return_rates_overall": ["model.sql_repository_bz.pb_product_revenue_margins_returns"], "model.sql_repository_bz.int_gmc_current_brands_and_countries": ["model.sql_repository_bz.int_gmc_missing_product_groups"], "model.sql_repository_bz.int_gmc_current_season": ["model.sql_repository_bz.product_sku_and_season"], "model.sql_repository_bz.int_gmc_current_parent_ids": ["model.sql_repository_bz.int_gmc_sku_count_by_day"], "model.sql_repository_bz.int_gmc_brands_to_url_format": [], "model.sql_repository_bz.int_gmc_product_categories": ["model.sql_repository_bz.int_gsc_query_by_brand"], "model.sql_repository_bz.int_gmc_missing_product_groups": ["model.sql_repository_bz.gmc_missing_brands_per_country"], "model.sql_repository_bz.int_gmc_sku_count_by_day": ["model.sql_repository_bz.product_sku_count_by_day", "model.sql_repository_bz.product_sku_count_by_day"], "model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day": ["model.sql_repository_bz.int_ga_product_attr_and_ga_data_by_day", "model.sql_repository_bz.int_gads_product_data_and_shopping_by_day", "model.sql_repository_bz.product_attributes_and_stock_by_day", "model.sql_repository_bz.product_parentid_stats_by_day", "model.sql_repository_bz.zz_product_price_benchmark_and_product_attr"], "model.sql_repository_bz.int_consentless_transactions_eur": ["model.sql_repository_bz.alerts_datadiff_consentless_ga_1d", "model.sql_repository_bz.consentless_datadiff_ga", "model.sql_repository_bz.int_consentless_transactions_aggr_by_day_country"], "model.sql_repository_bz.int_consentless_offline_pages": ["model.sql_repository_bz.alerts_consentless_offline_pages"], "model.sql_repository_bz.int_consentless_transactions_aggr_by_day_country": ["model.sql_repository_bz.transaction_value_consentless_soll_ist_report"], "model.sql_repository_bz.int_awin_transactions_pending": ["model.sql_repository_bz.awin_transactions_pending_with_returns"], "model.sql_repository_bz.int_ga_cart_products_and_prod_attr": ["model.sql_repository_bz.product_cart_analysis_selective_orders_category", "model.sql_repository_bz.product_cart_analysis_selective_orders_parentid"], "model.sql_repository_bz.int_ga_list_page_events": ["model.sql_repository_bz.onsite_ga_list_page_events"], "model.sql_repository_bz.int_ga_product_eecactions_by_day": ["model.sql_repository_bz.alerts_datadiff_ga_minubo", "model.sql_repository_bz.int_ga_eecactions_revenue", "model.sql_repository_bz.int_ga_eecactions_revenue"], "model.sql_repository_bz.int_ga_product_performance_with_ad_touchpoints": ["model.sql_repository_bz.pb_product_revenue_margins_returns"], "model.sql_repository_bz.int_ga_order_value_by_month_channel": ["model.sql_repository_bz.budget_plan_ga_and_markov_data", "model.sql_repository_bz.consentless_datadiff_ga"], "model.sql_repository_bz.int_ga_eecactions_revenue": ["model.sql_repository_bz.int_ga_product_attr_and_ga_data_by_day", "model.sql_repository_bz.onsite_pdp_product_attributes", "model.sql_repository_bz.product_ga_data_and_adcost"], "model.sql_repository_bz._int_page_views_and_events_plp": [], "model.sql_repository_bz.int_ga_product_list": ["model.sql_repository_bz.onsite_ga_reco_performance"], "model.sql_repository_bz.int_ga_pdp_entrances_transactions": ["model.sql_repository_bz.product_brand_entrance_transactions"], "model.sql_repository_bz.int_ga_product_attr_and_ga_data_by_day": ["model.sql_repository_bz.product_attributes_and_ga_data_by_day"], "model.sql_repository_bz.int_ga_pdp_pageviews": ["model.sql_repository_bz.onsite_pdp_testberichte"], "model.sql_repository_bz.int_ga_sessions_transactions": ["model.sql_repository_bz.onsite_ga4_metric_comparison", "model.sql_repository_bz.seo_ga_pagespeed_sessions_transactions"], "model.sql_repository_bz.int_ga_page_views_and_types": ["model.sql_repository_bz._int_page_views_and_events_plp", "model.sql_repository_bz._int_page_views_and_events_plp"], "model.sql_repository_bz.int_ga_product_checkouts_by_day": ["model.sql_repository_bz.int_ga_eecactions_revenue", "model.sql_repository_bz.product_inventory_brand_aggregates", "model.sql_repository_bz.product_inventory_product_performance_metrics"], "model.sql_repository_bz.int_ga_performance_cost_monthly_by_channel": ["model.sql_repository_bz.budget_plan_actual_metrics", "model.sql_repository_bz.cust_perf_cost_mapping"], "model.sql_repository_bz.int_ga_performance_cost_daily_by_channel": ["model.sql_repository_bz.int_ga_performance_cost_monthly_by_channel"], "model.sql_repository_bz.int_ga_performance_cost_daily_validation": ["model.sql_repository_bz.budget_plan_daily_adcost_validation"], "model.sql_repository_bz.int_ga4_sessions_transactions": ["model.sql_repository_bz.alerts_ga4_daily_metric_changes", "model.sql_repository_bz.onsite_ga4_metric_comparison"], "model.sql_repository_bz.int_ga_duplicate_teaser_events": ["model.sql_repository_bz.onsite_duplicate_teaser_events"], "model.sql_repository_bz.int_ga4_aggr_sessions": ["model.sql_repository_bz.int_ga4_sessions_transactions"], "model.sql_repository_bz.int_ga4_aggr_transactions": ["model.sql_repository_bz.int_ga4_sessions_transactions"], "model.sql_repository_bz.int_ga4_pageviews": [], "model.sql_repository_bz.int_ga_sessions_by_hit_count_bucket": ["model.sql_repository_bz.onsite_ga_sessions_by_hit_count_bucket", "test.sql_repository_bz.dbt_utils_at_least_one_int_ga_sessions_by_hit_count_bucket_hit_count_bucket.735e0efb5d", "test.sql_repository_bz.not_null_int_ga_sessions_by_hit_count_bucket_hit_count_bucket.9e72d30e37"], "model.sql_repository_bz.int_ga_average_hits_per_day": ["test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_average_hits_per_day_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_.e739dc0e22"], "model.sql_repository_bz.int_ga_teaser_test": ["test.sql_repository_bz.accepted_values_int_ga_teaser_test_underscores_count__False__8.1d077d2f26", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_match_regex_int_ga_teaser_test_promo_name_date__20_0_9_2_0_1_9_1_0_2_0_1_9_12_0_9_3_0_1_.692d2b6cbe"], "model.sql_repository_bz.int_ga4_aggr_event_count": ["model.sql_repository_bz.alerts_ga4_daily_metric_changes"], "model.sql_repository_bz.int_ga_hits_by_property_and_day": ["model.sql_repository_bz.onsite_hits_by_property_and_day", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_hits_by_property_and_day_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.753a2a3d4e"], "model.sql_repository_bz.int_gsc_query_by_brand": ["model.sql_repository_bz.seo_search_query_by_brand"], "model.sql_repository_bz.int_crawl_de_brg": [], "model.sql_repository_bz.int_gsc_and_crawl_data": [], "model.sql_repository_bz.int_crawl_nondach_recent": [], "model.sql_repository_bz.int_sitemap_and_crawl_and_gsc_data": ["model.sql_repository_bz.seo_sitemap_efficiency"], "model.sql_repository_bz.int_gsc_data_for_top_pages": ["model.sql_repository_bz.seo_gsc_data_for_top_pages"], "model.sql_repository_bz.int_gsc_ga_urlage_def": ["model.sql_repository_bz.seo_gsc_url_age"], "model.sql_repository_bz.int_gsc_data_shop_mag_label": [], "model.sql_repository_bz.int_gsc_data_mag_reworked": ["model.sql_repository_bz.seo_gsc_ga_data_for_mag_reworked"], "model.sql_repository_bz.int_gsc_sitemap_urlage_def": ["model.sql_repository_bz.int_gsc_ga_urlage_def", "model.sql_repository_bz.int_gsc_ga_urlage_def"], "model.sql_repository_bz.int_crawl_de_lp_in_sitemap": ["model.sql_repository_bz.seo_crawl_lp_in_sitemap"], "model.sql_repository_bz.int_nav_invoice_crmemo_combined": ["model.sql_repository_bz.awin_transactions_pending_with_returns", "model.sql_repository_bz.int_nav_invoice_crmemo_customer", "model.sql_repository_bz.int_nav_transactions_session_customer_attributes", "model.sql_repository_bz.transaction_ga_nav_attributes", "model.sql_repository_bz.transaction_voucher_data"], "model.sql_repository_bz.int_nav_transactions_session_customer_attributes": ["model.sql_repository_bz.cust_club_retention_rate", "model.sql_repository_bz.cust_perf_cost_mapping"], "model.sql_repository_bz.int_nav_crmemo_line_aggregated": ["model.sql_repository_bz.int_nav_invoice_crmemo_combined"], "model.sql_repository_bz.int_nav_products_and_attributes": ["analysis.sql_repository_bz.pbid_return_data", "model.sql_repository_bz.product_nav_items_and_attributes"], "model.sql_repository_bz.int_nav_transactions_and_customers": ["analysis.sql_repository_bz.return_data_by_sales_channel", "model.sql_repository_bz.cust_cohort_revenue_per_year", "model.sql_repository_bz.cust_customer_metrics", "model.sql_repository_bz.cust_new_returning_visitors_30d", "model.sql_repository_bz.pred_repurchase_model_transactions", "model.sql_repository_bz.transaction_order_value_daily_by_country"], "model.sql_repository_bz.int_nav_invoice_line_aggregated": ["model.sql_repository_bz.int_nav_invoice_crmemo_combined", "model.sql_repository_bz.pred_repurchase_model_transactions"], "model.sql_repository_bz.int_nav_invoice_crmemo_customer": [], "model.sql_repository_bz.int_nav_products": ["model.sql_repository_bz.int_nav_products_and_attributes"], "model.sql_repository_bz.stg_channelattribution_channel_level": ["exposure.sql_repository_bz.Multichannel Attribution Dashboard", "model.sql_repository_bz.budget_plan_markov_channel_level", "test.sql_repository_bz.unique_stg_channelattribution_channel_level_sk_id.db1204caf4"], "model.sql_repository_bz.stg_channelattribution_path_level": ["model.sql_repository_bz.int_attribution_markov_path_level_monthly", "test.sql_repository_bz.unique_stg_channelattribution_path_level_sk_id.3487d69530"], "model.sql_repository_bz.stg_weather_dach_daily": ["exposure.sql_repository_bz.Bergzeit Management Report", "model.sql_repository_bz.int_weather_avg_temp_by_country", "model.sql_repository_bz.int_weather_avg_temp_to_monthly_avg", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_weather_dach_daily_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_.8c82d80c49", "test.sql_repository_bz.dbt_utils_at_least_one_stg_weather_dach_daily_date.48252d1406", "test.sql_repository_bz.not_null_stg_weather_dach_daily_date.ec486e9787", "test.sql_repository_bz.not_null_stg_weather_dach_daily_town_datetime_id.7e0843fed4", "test.sql_repository_bz.unique_stg_weather_dach_daily_town_datetime_id.6e81ec24a4"], "model.sql_repository_bz.stg_weather_dach_7d_forecast": ["test.sql_repository_bz.not_null_stg_weather_dach_7d_forecast_town_datetime_id.451adf1bbb", "test.sql_repository_bz.unique_stg_weather_dach_7d_forecast_town_datetime_id.750831b756"], "model.sql_repository_bz.stg_gads_all_campaign_names": ["model.sql_repository_bz.int_gads_all_query_stats", "model.sql_repository_bz.int_gads_campaign_stats_by_brand", "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_campaign_names_campaign_id.500b398953", "test.sql_repository_bz.not_null_stg_gads_all_campaign_names_campaign_id.82e2901272", "test.sql_repository_bz.unique_stg_gads_all_campaign_names_campaign_id.f84b6db6cc"], "model.sql_repository_bz.stg_gads_all_crawled_ads_urls": ["model.sql_repository_bz.int_gads_all_crawled_ads_urls_classified", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_in_set_stg_gads_all_crawled_ads_urls_status__429__500.e3333a724f", "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_crawled_ads_urls_sk_id.40242bb775", "test.sql_repository_bz.not_null_stg_gads_all_crawled_ads_urls_sk_id.4b227b9a82", "test.sql_repository_bz.not_null_stg_gads_all_crawled_ads_urls_status.f06717230b", "test.sql_repository_bz.unique_stg_gads_all_crawled_ads_urls_sk_id.6b8361d78a"], "model.sql_repository_bz.stg_gads_all_product_stats": ["model.sql_repository_bz.int_gads_all_product_stats_by_brand", "model.sql_repository_bz.int_gads_product_stats_by_day", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gads_all_product_stats_date__day__date_current_date___2022_03_01.81d8651d1b", "test.sql_repository_bz.not_null_stg_gads_all_product_stats_sk_id.1df63efcb7"], "model.sql_repository_bz.stg_gads_all_ads_stats": ["model.sql_repository_bz.int_gads_de_adstats_and_attributes", "test.sql_repository_bz.not_null_stg_gads_all_ads_stats_sk_id.d81f874bc8"], "model.sql_repository_bz.stg_gads_all_campaign_stats": ["model.sql_repository_bz.int_gads_campaign_stats_by_brand", "test.sql_repository_bz.not_null_stg_gads_all_campaign_stats_sk_id.9aa3c18eae", "test.sql_repository_bz.unique_stg_gads_all_campaign_stats_sk_id.bf47b9bd4b"], "model.sql_repository_bz.stg_gads_all_ads_info_current": ["model.sql_repository_bz.int_gads_de_adstats_and_attributes", "test.sql_repository_bz.not_null_stg_gads_all_ads_info_current_sk_id.0ef72507fb", "test.sql_repository_bz.unique_stg_gads_all_ads_info_current_sk_id.01d3196c71"], "model.sql_repository_bz.stg_gads_all_adgroups_info_current": ["model.sql_repository_bz.int_gads_all_shopping_criteria", "model.sql_repository_bz.int_gads_de_adstats_and_attributes", "test.sql_repository_bz.not_null_stg_gads_all_adgroups_info_current_AdGroupId.e206713d85", "test.sql_repository_bz.unique_stg_gads_all_adgroups_info_current_AdGroupId.6f372302b0"], "model.sql_repository_bz.stg_gads_all_query_stats": ["model.sql_repository_bz.int_gads_all_query_stats", "test.sql_repository_bz.not_null_stg_gads_all_query_stats_sk_id.bc3fb6fd52"], "model.sql_repository_bz.stg_gads_all_campaigns_info_current": ["model.sql_repository_bz.int_gads_all_shopping_criteria", "model.sql_repository_bz.int_gads_de_adstats_and_attributes", "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_campaigns_info_current_sk_id.94c525a35d", "test.sql_repository_bz.not_null_stg_gads_all_campaigns_info_current_sk_id.bb43587aaf", "test.sql_repository_bz.unique_stg_gads_all_campaigns_info_current_sk_id.46b2aeea38"], "model.sql_repository_bz.stg_gads_all_criteria_info_current": ["model.sql_repository_bz.int_gads_all_shopping_criteria", "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_criteria_info_current_sk_id.3b91bc6d12", "test.sql_repository_bz.not_null_stg_gads_all_criteria_info_current_sk_id.fbc40009ae", "test.sql_repository_bz.unique_stg_gads_all_criteria_info_current_sk_id.f99a0510c0"], "model.sql_repository_bz.stg_test_results_last_run": ["model.sql_repository_bz.test_results_latest_errors", "test.sql_repository_bz.not_null_stg_test_results_last_run_test_run_id.db432a0868", "test.sql_repository_bz.unique_stg_test_results_last_run_test_run_id.05d5976f68"], "model.sql_repository_bz.stg_test_results_historic": ["model.sql_repository_bz.test_results_all_historic", "test.sql_repository_bz.not_null_stg_test_results_historic_test_run_id.271cb7516f", "test.sql_repository_bz.unique_stg_test_results_historic_test_run_id.1c6e8316cb"], "model.sql_repository_bz.stg_gsc_data": ["model.sql_repository_bz.int_gsc_and_crawl_data", "model.sql_repository_bz.int_gsc_data_for_top_pages", "model.sql_repository_bz.int_gsc_data_mag_reworked", "model.sql_repository_bz.int_gsc_data_shop_mag_label", "model.sql_repository_bz.int_gsc_query_by_brand", "model.sql_repository_bz.int_gsc_sitemap_urlage_def", "model.sql_repository_bz.int_sitemap_and_crawl_and_gsc_data", "test.sql_repository_bz.accepted_values_stg_gsc_data_search_type__web__image.212c9832ed", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_gsc_data_impressions__0.6dd8a7d2f2", "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gsc_data_gsc_date__gsc_country__query__page__device__search_type__time_stamp__clicks__impressions__ctr__position__False__gsc_date_current_date_60.22759fc007", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gsc_data_gsc_date__day__gsc_date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_4_day_.d86929e308", "test.sql_repository_bz.dbt_utils_at_least_one_stg_gsc_data_page.6a172b3849", "test.sql_repository_bz.not_null_stg_gsc_data_page.0c6cad32c4", "test.sql_repository_bz.not_null_stg_gsc_data_sk_id.bbf442b1a0", "test.sql_repository_bz.unique_stg_gsc_data_sk_id.202e6087b9"], "model.sql_repository_bz.stg_gmc_product_brands": ["model.sql_repository_bz.int_gads_all_dynamic_query_cost_by_brand", "model.sql_repository_bz.int_gmc_brands_to_url_format", "model.sql_repository_bz.int_gsc_query_by_brand", "model.sql_repository_bz.onsite_ga_internal_search", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_brands_brand.524479c5dc", "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_brands_brand.20946638eb", "test.sql_repository_bz.not_null_stg_gmc_product_brands_brand.ab3c6ef00c", "test.sql_repository_bz.unique_stg_gmc_product_brands_brand.2cd4635233"], "model.sql_repository_bz.stg_gmc_product_attributes_daily": ["model.sql_repository_bz.int_ga_cart_products_and_prod_attr", "model.sql_repository_bz.int_gmc_current_season", "model.sql_repository_bz.int_gmc_most_recent_prod_attr", "model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day", "model.sql_repository_bz.int_gmc_stock_feeds_consolidated", "model.sql_repository_bz.onsite_pdp_product_attributes", "model.sql_repository_bz.product_inventory_brand_aggregates", "model.sql_repository_bz.product_inventory_product_performance_metrics", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_attributes_daily_product_id.63ff91169b", "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_product_attributes_daily_date__product_id__any_value_is_missing__False__date_current_date_1.c4d572905f", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_product_attributes_daily_date__day__2022_08_19.50cabb8518", "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_attributes_daily_product_id.178c7163e6", "test.sql_repository_bz.max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_product_attributes_daily_50__date.d225ea8e3f", "test.sql_repository_bz.not_null_stg_gmc_product_attributes_daily_product_id.deeed4d82d", "test.sql_repository_bz.not_null_stg_gmc_product_attributes_daily_sk_id.28d02641a8", "test.sql_repository_bz.unique_stg_gmc_product_attributes_daily_sk_id.e0693e88d3"], "model.sql_repository_bz.zz_stg_gmc_price_benchmarks": ["model.sql_repository_bz.zz_product_price_benchmark_and_product_attr"], "model.sql_repository_bz.stg_gmc_product_stock": ["model.sql_repository_bz.int_gmc_stock_feeds_consolidated", "model.sql_repository_bz.zz_product_price_benchmark_and_product_attr", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_stock_stock_product_id.ef77ca4d90", "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_stock_stock_product_id.6ef41bbbc2", "test.sql_repository_bz.not_null_stg_gmc_product_stock_stock_product_id.28086e6f00"], "model.sql_repository_bz.stg_qlik_return_rates": ["model.sql_repository_bz.int_gmc_avg_return_rates_by_country", "model.sql_repository_bz.int_gmc_avg_return_rates_overall", "model.sql_repository_bz.pb_product_revenue_margins_returns", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_qlik_return_rates_brand.9f3e8adba5", "test.sql_repository_bz.dbt_utils_at_least_one_stg_qlik_return_rates_brand.a1363e28e5", "test.sql_repository_bz.not_null_stg_qlik_return_rates_brand.0e6dc5c9d5", "test.sql_repository_bz.not_null_stg_qlik_return_rates_sk_id.e224007779", "test.sql_repository_bz.unique_stg_qlik_return_rates_sk_id.c01170b5d2"], "model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d": ["model.sql_repository_bz.int_cp_product_attributes_90d", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_channel_pilot_profit_bidding_90d_product_id.27bcb103e9", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_channel_pilot_profit_bidding_90d_date__day__2022_08_19.60031b7aac", "test.sql_repository_bz.dbt_utils_at_least_one_stg_channel_pilot_profit_bidding_90d_product_id.e693c05e3a", "test.sql_repository_bz.not_null_stg_channel_pilot_profit_bidding_90d_product_id.5e32943a74", "test.sql_repository_bz.not_null_stg_channel_pilot_profit_bidding_90d_sk_id.265b2eb3d7", "test.sql_repository_bz.unique_stg_channel_pilot_profit_bidding_90d_sk_id.995d943cbe"], "model.sql_repository_bz.stg_gmc_all_products": ["model.sql_repository_bz.int_gmc_current_brands", "model.sql_repository_bz.int_gmc_current_parent_ids", "model.sql_repository_bz.int_gmc_max_sku_count_by_parent", "model.sql_repository_bz.int_gmc_most_recent_prod_attr", "model.sql_repository_bz.int_gmc_prices_chf_to_eur", "model.sql_repository_bz.int_gmc_product_attr_and_stock_by_day", "model.sql_repository_bz.int_gmc_product_categories", "model.sql_repository_bz.int_gmc_product_categories", "model.sql_repository_bz.int_gmc_sku_count_by_day", "model.sql_repository_bz.zz_product_price_benchmark_and_product_attr", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_offer_id.f963ef99ea", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_p_date.59bfafd202", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_top_category.443c1ce984", "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_all_products_p_date__offer_id__all_values_are_missing__False__products_country_de_and_p_date_2022_04_09_.5a02919780", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_all_products_p_date__day__p_date_current_date_180.5c5e20286a", "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_all_products_offer_id.3f83de7e64", "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_all_products_p_date.63890ebb46", "test.sql_repository_bz.max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_all_products_50__p_date.6cab71d571", "test.sql_repository_bz.not_null_stg_gmc_all_products_offer_id.9de99eaf8b", "test.sql_repository_bz.not_null_stg_gmc_all_products_p_date.7cca799e9b", "test.sql_repository_bz.not_null_stg_gmc_all_products_sk_id.0ea44e4472", "test.sql_repository_bz.not_null_stg_gmc_all_products_top_category.f00aad3a5c", "test.sql_repository_bz.unique_stg_gmc_all_products_sk_id.1d7ee0d57d"], "model.sql_repository_bz.stg_gmc_margins_all": ["test.sql_repository_bz.not_null_stg_gmc_margins_all_sk_id.0cecb41021", "test.sql_repository_bz.unique_stg_gmc_margins_all_sk_id.236d6ee406"], "model.sql_repository_bz.zz_stg_gmc_product_margins": ["model.sql_repository_bz.zz_product_price_benchmark_and_product_attr"], "model.sql_repository_bz.stg_gmc_product_issues": ["test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_issues_offer_id.65f05265df", "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_issues_offer_id.1e69f3a871", "test.sql_repository_bz.not_null_stg_gmc_product_issues_offer_id.ea3a032de0"], "model.sql_repository_bz.stg_jira_finished_seo_tickets": ["model.sql_repository_bz.seo_jira_finished_ifront_tickets", "test.sql_repository_bz.dbt_utils_recency_stg_jira_finished_seo_tickets_day__load_timestamp__1.1c81e510ae", "test.sql_repository_bz.not_null_stg_jira_finished_seo_tickets_ticket_number.0b2925852b", "test.sql_repository_bz.unique_stg_jira_finished_seo_tickets_ticket_number.3e097897e1"], "model.sql_repository_bz.stg_minubo_ga_kpis_daily": ["model.sql_repository_bz.alerts_datadiff_ga_minubo", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_add_to_carts.eed43303f2", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_date.6d82b037c0", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_detail_views.ddbbe3e43d", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_page_views.c232337fa3", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_sessions.c6d114792d", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_minubo_ga_kpis_daily_minubo_ga_date__day__minubo_ga_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.b4cfc89a19", "test.sql_repository_bz.dbt_utils_at_least_one_stg_minubo_ga_kpis_daily_minubo_ga_sessions.73742e66cc", "test.sql_repository_bz.not_null_stg_minubo_ga_kpis_daily_minubo_ga_date.bdfd966551", "test.sql_repository_bz.unique_stg_minubo_ga_kpis_daily_minubo_ga_date.e30f85f645"], "model.sql_repository_bz.stg_antavo_club_optins": ["model.sql_repository_bz.int_nav_transactions_session_customer_attributes", "test.sql_repository_bz.not_null_stg_antavo_club_optins_antavo_customer_id.303711e666", "test.sql_repository_bz.unique_stg_antavo_club_optins_antavo_customer_id.c7eb84e6cf"], "model.sql_repository_bz.stg_consentless_transactions_live": ["model.sql_repository_bz.alerts_consentless_transactions_last_hrs", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_live_transaction_id.9c2d55e45a", "test.sql_repository_bz.dbt_utils_at_least_one_stg_consentless_transactions_live_transaction_id.14d47953bf", "test.sql_repository_bz.not_null_stg_consentless_transactions_live_transaction_id.bb1b2d2782", "test.sql_repository_bz.unique_stg_consentless_transactions_live_transaction_id.869dd889ff"], "model.sql_repository_bz.stg_consentless_page_views_live": ["model.sql_repository_bz.alerts_consentless_pageviews_magazine_last_hrs", "model.sql_repository_bz.int_consentless_offline_pages", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_page_views_live_pageview_event_id.3c2c68eb0f", "test.sql_repository_bz.not_null_stg_consentless_page_views_live_pageview_event_id.97f8a40159", "test.sql_repository_bz.unique_stg_consentless_page_views_live_pageview_event_id.1337a78cbf"], "model.sql_repository_bz.stg_consentless_consent_interaction": ["model.sql_repository_bz.alerts_consentless_consent_events_last_hrs", "model.sql_repository_bz.alerts_datadiff_consentless_ga_1d", "model.sql_repository_bz.onsite_cookie_consent_event_values", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_consent_interaction_consent_event_id.d2d3a28519", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_consent_interaction_consent_event_id__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.8960ea6730", "test.sql_repository_bz.not_null_stg_consentless_consent_interaction_consent_event_id.1d9a27acff"], "model.sql_repository_bz.stg_consentless_transactions": ["model.sql_repository_bz.gads_backfill_consentless_transactions", "model.sql_repository_bz.int_consentless_transactions_eur", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_gclid.48578c8780", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_id.7bdf407d52", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_value.dbb049c070", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_gclid__date_date_sub_current_date_interval_30_day_.eb1701f63a", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_transaction_id__date_date_sub_current_date_interval_30_day_.0f4661f728", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_consentless_transactions_date__day.7500829a42", "test.sql_repository_bz.dbt_utils_at_least_one_stg_consentless_transactions_transaction_id.c46db33851", "test.sql_repository_bz.not_null_stg_consentless_transactions_transaction_id.5b50a5a325", "test.sql_repository_bz.not_null_stg_consentless_transactions_transaction_value.b3798794cd"], "model.sql_repository_bz.stg_gcp_cost_export": ["model.sql_repository_bz.gcp_cost_export", "model.sql_repository_bz.gcp_cost_export", "test.sql_repository_bz.not_null_stg_gcp_cost_export_cost_entry_id.21de0cfd4f"], "model.sql_repository_bz.stg_gcp_bigquery_table_storage": ["exposure.sql_repository_bz.GA4 Data Validation", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_gcp_bigquery_table_storage_total_rows__0.d218a50205", "test.sql_repository_bz.not_null_stg_gcp_bigquery_table_storage_table_creation_id.b24d8f11ad", "test.sql_repository_bz.not_null_stg_gcp_bigquery_table_storage_total_rows.801a97c96f", "test.sql_repository_bz.unique_stg_gcp_bigquery_table_storage_table_creation_id.fd77db0431"], "model.sql_repository_bz.stg_gcp_bigquery_job_cost": ["model.sql_repository_bz.gcp_bigquery_job_cost", "model.sql_repository_bz.gcp_bigquery_job_cost", "test.sql_repository_bz.not_null_stg_gcp_bigquery_job_cost_sk_id.b4c10abd3f"], "model.sql_repository_bz.stg_trusted_shops_reviews": ["test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_date.480d173b22", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_review_id.ea887442e7", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_trusted_shops_reviews_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_.ff0cd72a6e", "test.sql_repository_bz.dbt_utils_at_least_one_stg_trusted_shops_reviews_review_id.44892f2ea9", "test.sql_repository_bz.not_null_stg_trusted_shops_reviews_date.81dcacb8ea", "test.sql_repository_bz.not_null_stg_trusted_shops_reviews_review_id.77ca29d3c0", "test.sql_repository_bz.unique_stg_trusted_shops_reviews_review_id.949835d18d"], "model.sql_repository_bz.stg_gsheets_currency_factor_all_countries": ["model.sql_repository_bz.int_consentless_transactions_eur", "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_all_countries_sk_id.46183c91bf", "test.sql_repository_bz.unique_stg_gsheets_currency_factor_all_countries_sk_id.d65e47a9df"], "model.sql_repository_bz.stg_gsheets_currency_factor_ch": ["model.sql_repository_bz.stg_ga_performance_costs_CH", "model.sql_repository_bz.stg_gsheets_currency_factor_all_countries", "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_ch_currency_date.8caf318b93", "test.sql_repository_bz.unique_stg_gsheets_currency_factor_ch_currency_date.dadb8f5b80"], "model.sql_repository_bz.stg_gsheets_seo_magazin_reworked": ["model.sql_repository_bz.int_gsc_data_mag_reworked", "test.sql_repository_bz.not_null_stg_gsheets_seo_magazin_reworked_url_noutm.dbd0d88abf", "test.sql_repository_bz.unique_stg_gsheets_seo_magazin_reworked_url_noutm.685baa01e6"], "model.sql_repository_bz.stg_gsheets_currency_factor_gb": ["model.sql_repository_bz.stg_ga_performance_costs_UK", "model.sql_repository_bz.stg_gsheets_currency_factor_all_countries", "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_gb_currency_date.60c08266a3", "test.sql_repository_bz.unique_stg_gsheets_currency_factor_gb_currency_date.dc6df0c420"], "model.sql_repository_bz.stg_gsheets_order_value_planned": ["model.sql_repository_bz.budget_plan_planned_input", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_in_set_stg_gsheets_order_value_planned_country_soll__de__at__ch__it__nl__uk__int.38a8c54181", "test.sql_repository_bz.dbt_utils_at_least_one_stg_gsheets_order_value_planned_country_soll.b550d014a1", "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_country_soll.375d5a033e", "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_month_soll.18b7a3df24", "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_order_value_soll_overall.24d2f1b2f5", "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_sk_id.7015de60fd", "test.sql_repository_bz.unique_stg_gsheets_order_value_planned_sk_id.ef401765b3"], "model.sql_repository_bz.stg_gsheets_seo_top_pages": ["model.sql_repository_bz.int_gsc_data_for_top_pages", "test.sql_repository_bz.not_null_stg_gsheets_seo_top_pages_url_noutm.110efcbb9c", "test.sql_repository_bz.unique_stg_gsheets_seo_top_pages_url_noutm.7212c20bfa"], "model.sql_repository_bz.stg_gsheets_channel_shares_planned": ["model.sql_repository_bz.budget_plan_planned_input", "test.sql_repository_bz.not_null_stg_gsheets_channel_shares_planned_sk_id.3653da3a29", "test.sql_repository_bz.unique_stg_gsheets_channel_shares_planned_sk_id.badaec310f"], "model.sql_repository_bz.stg_awin_orders_all": ["exposure.sql_repository_bz.Awin Publisher Dashboard", "model.sql_repository_bz.int_awin_transactions_pending", "model.sql_repository_bz.int_awin_transactions_pending", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__1__awin_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.ce4c453dd9", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__5000__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_.a4cb09bf6b", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_awin_orders_all_awin_date__day__awin_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.6b0230aaa7", "test.sql_repository_bz.dbt_utils_at_least_one_stg_awin_orders_all_order_id.2506a6b5f5", "test.sql_repository_bz.max_row_count_change_from_prev_day_to_yesterday_in_percent_stg_awin_orders_all_100__awin_date.b4c3180cdc", "test.sql_repository_bz.not_null_stg_awin_orders_all_order_id.587cb4b3c0", "test.sql_repository_bz.not_null_stg_awin_orders_all_order_id_awin.b7a1da485c", "test.sql_repository_bz.not_null_stg_awin_orders_all_sale_amount_awin.cfd6a08f74", "test.sql_repository_bz.unique_stg_awin_orders_all_order_id.2f1c74c206", "test.sql_repository_bz.unique_stg_awin_orders_all_order_id_awin.1ec1a6104e"], "model.sql_repository_bz.stg_awin_return_adjustment_errors": ["test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_stg_awin_return_adjustment_errors_15__False.4bcfe012bd", "test.sql_repository_bz.not_null_stg_awin_return_adjustment_errors_inv_h_shop_order_id.96a5995894", "test.sql_repository_bz.not_null_stg_awin_return_adjustment_errors_order_id_awin.85c503044f", "test.sql_repository_bz.unique_stg_awin_return_adjustment_errors_inv_h_shop_order_id.2bd5e7e3da", "test.sql_repository_bz.unique_stg_awin_return_adjustment_errors_order_id_awin.04b602641e"], "model.sql_repository_bz.stg_emarsys_ids": ["model.sql_repository_bz.pred_repurchase_model_transactions"], "model.sql_repository_bz.stg_pagespeed_url_data": ["model.sql_repository_bz.seo_pagespeed_web_vitals_data", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_pagespeed_url_data_cumulative_layout_shift_s__5__0__date_2022_09_09_.868a68f183", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_pagespeed_url_data_date__day.b864fe735a", "test.sql_repository_bz.not_null_stg_pagespeed_url_data_country.b705d25b17", "test.sql_repository_bz.not_null_stg_pagespeed_url_data_cumulative_layout_shift_s.22056433d4", "test.sql_repository_bz.not_null_stg_pagespeed_url_data_date.de9a6dd3e8", "test.sql_repository_bz.not_null_stg_pagespeed_url_data_date_url_id.022036751d", "test.sql_repository_bz.not_null_stg_pagespeed_url_data_domain.13cc19c93c", "test.sql_repository_bz.unique_stg_pagespeed_url_data_date_url_id.df1b23f779"], "model.sql_repository_bz.stg_ga_performance_costs_CH": ["model.sql_repository_bz.stg_ga_performance_costs"], "model.sql_repository_bz.stg_ga_performance_cost_validation": ["model.sql_repository_bz.int_ga_performance_cost_daily_validation", "test.sql_repository_bz.not_null_stg_ga_performance_cost_validation_sk_id.1f89130650", "test.sql_repository_bz.unique_stg_ga_performance_cost_validation_sk_id.1458d8ac6d"], "model.sql_repository_bz.stg_ga_performance_costs_UK": ["model.sql_repository_bz.stg_ga_performance_costs"], "model.sql_repository_bz.stg_ga_performance_costs": ["model.sql_repository_bz.int_ga_performance_cost_daily_by_channel", "model.sql_repository_bz.int_ga_performance_cost_daily_validation", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_performance_costs_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.6f52d48874", "test.sql_repository_bz.not_null_stg_ga_performance_costs_sk_id.3dbb6b9b6a", "test.sql_repository_bz.unique_stg_ga_performance_costs_sk_id.bf171ab0d3"], "model.sql_repository_bz.stg_ga_product_detail_pages": ["model.sql_repository_bz.int_ga_pdp_entrances_transactions", "model.sql_repository_bz.int_ga_pdp_pageviews", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_detail_pages_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.e2cd1791a2"], "model.sql_repository_bz.stg_ga_internal_search": ["model.sql_repository_bz.onsite_ga_internal_search", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_internal_search_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.d3b47f08ba"], "model.sql_repository_bz.stg_ga_page_types": ["model.sql_repository_bz.int_ga_page_views_and_types", "model.sql_repository_bz.int_gsc_ga_urlage_def", "model.sql_repository_bz.int_gsc_ga_urlage_def", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_page_types_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.dd4ba2f67e", "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_page_types_date.d195ea7cc4", "test.sql_repository_bz.not_null_stg_ga_page_types_date.013abb6e60"], "model.sql_repository_bz.stg_ga_pageviews": ["model.sql_repository_bz.alerts_datadiff_ga_minubo", "model.sql_repository_bz.int_ga_page_views_and_types", "model.sql_repository_bz.onsite_ga_filter_usage", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pageviews_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.b28b8c6670"], "model.sql_repository_bz.stg_ga_pagespeed_per_pagetype": ["model.sql_repository_bz.seo_ga_pagespeed_sessions_transactions", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pagespeed_per_pagetype_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.50512cba29", "test.sql_repository_bz.not_null_stg_ga_pagespeed_per_pagetype_sk_id.7aec915dea", "test.sql_repository_bz.unique_stg_ga_pagespeed_per_pagetype_sk_id.9eddc42fea"], "model.sql_repository_bz.stg_ga_product_performance_profit_bidding": ["model.sql_repository_bz.int_ga_product_performance_with_ad_touchpoints"], "model.sql_repository_bz.stg_ga_product_checkouts": ["model.sql_repository_bz.int_ga_cart_products_and_prod_attr", "model.sql_repository_bz.int_ga_pdp_entrances_transactions", "model.sql_repository_bz.int_ga_product_checkouts_by_day", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_checkouts_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.68a80f7534"], "model.sql_repository_bz.stg_ga4_products": ["test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_products_sk_id__event_date_dt_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_.d99030f1d4", "test.sql_repository_bz.not_null_stg_ga4_products_sk_id.b1a82e3783"], "model.sql_repository_bz.stg_ga_products": ["model.sql_repository_bz.int_ga_product_list", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_products_sk_id__date_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_.9642857c67", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_products_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.2773918a90", "test.sql_repository_bz.not_null_stg_ga_products_sk_id.df1d8c24ac"], "model.sql_repository_bz.stg_ga_sessions_attribution_calculation": ["exposure.sql_repository_bz.Channel Level Attribution Notebook (attribution-calculation)", "exposure.sql_repository_bz.Path Level Attribution Notebook (r-3-steffi)"], "model.sql_repository_bz.stg_ga_session_totals": ["model.sql_repository_bz.alerts_datadiff_ga_minubo", "model.sql_repository_bz.int_ga_average_hits_per_day", "model.sql_repository_bz.int_ga_sessions_by_hit_count_bucket", "model.sql_repository_bz.int_ga_sessions_transactions", "model.sql_repository_bz.onsite_ga_reco_performance", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_ga_session_totals_channel_grouping.ac3f4db203", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_ga_session_totals_hits.e9c650e839", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_ga_session_totals_hits__499__1__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day___False.e0582a4e16", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_session_totals_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.bf9ac5798f", "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_session_totals_hits.049b727064", "test.sql_repository_bz.not_null_stg_ga_session_totals_channel_grouping.21feb97e6a", "test.sql_repository_bz.not_null_stg_ga_session_totals_hits.462e48d6f1", "test.sql_repository_bz.unique_stg_ga_session_totals_sk_id.5a638092dc"], "model.sql_repository_bz.stg_ga_ecommerce_actions": ["model.sql_repository_bz.int_ga_product_eecactions_by_day", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_ecommerce_actions_c_date__day__c_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.53ae9161a9"], "model.sql_repository_bz.stg_ga_filter_events": ["model.sql_repository_bz.onsite_ga_filter_usage", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_filter_events_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.832cc46197"], "model.sql_repository_bz.stg_ga_hits_all_properties": ["model.sql_repository_bz.int_ga_hits_by_property_and_day", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_hits_all_properties_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.741ff36f99"], "model.sql_repository_bz.stg_ga_events_promotion": ["model.sql_repository_bz.int_ga_duplicate_teaser_events", "model.sql_repository_bz.int_ga_teaser_test", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_promotion_teaser_event_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.689eb79adf", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_creative__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.874b0d1267", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_name__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.7cb01b44eb", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_promotion_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.3233811fec"], "model.sql_repository_bz.stg_ga4_events_checkout": ["model.sql_repository_bz.int_ga4_aggr_event_count", "model.sql_repository_bz.int_ga4_aggr_transactions", "test.sql_repository_bz.accepted_values_stg_ga4_events_checkout_event_name__add_to_cart__view_cart__remove_from_cart__begin_checkout__add_payment_info__purchase.543e26a8f4", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_checkout_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.db7ab27ce1", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_checkout_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.476c8ec576", "test.sql_repository_bz.not_null_stg_ga4_events_checkout_sk_id.4597eea933"], "model.sql_repository_bz.stg_ga4_events_custom": ["model.sql_repository_bz.int_ga4_aggr_event_count", "test.sql_repository_bz.accepted_values_stg_ga4_events_custom_event_name___custom_category_tree_click___custom_filter_click___custom_flyout_click___custom_magazine_click___custom_search_suggest_click___custom_sort_click___custom_triggermail_entrance___custom_wishlist_click___custom_magazine_product_carousel_click.0dab3351b0", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_custom_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.c255fac6ff", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_custom_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.c3deba17f9", "test.sql_repository_bz.not_null_stg_ga4_events_custom_sk_id.41a4aba218"], "model.sql_repository_bz.stg_ga_events_per_page": ["model.sql_repository_bz.int_ga_list_page_events", "model.sql_repository_bz.onsite_pdp_testberichte", "model.sql_repository_bz.onsite_pdp_testberichte", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_per_page_sk_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.3b4617b45a", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_per_page_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.e5e16acb72", "test.sql_repository_bz.not_null_stg_ga_events_per_page_sk_id.0055b71d8c"], "model.sql_repository_bz.stg_ga_events": ["test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_event_id__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_and_event_action_eec_promoView_.a4d39cc847", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.a8d306408b", "test.sql_repository_bz.not_null_stg_ga_events_event_id.197c93642a"], "model.sql_repository_bz.stg_ga4_events_standard": ["model.sql_repository_bz.int_ga4_aggr_event_count", "model.sql_repository_bz.int_ga4_aggr_sessions", "model.sql_repository_bz.int_ga4_pageviews", "test.sql_repository_bz.accepted_values_stg_ga4_events_standard_event_name__view_item__view_item_list__select_item__view_promotion__select_promotion__session_start__first_visit__user_engagement__click__page_view__file_download__scroll__view_search_results__video_start__video_progress__video_complete.9fca75c894", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_standard_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.e66abf2b96", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_standard_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.5d7a41328b", "test.sql_repository_bz.not_null_stg_ga4_events_standard_sk_id.8ed9669bdb"], "model.sql_repository_bz.stg_ga_magazin_custom_dims": ["model.sql_repository_bz.int_gsc_data_mag_reworked", "test.sql_repository_bz.not_null_stg_ga_magazin_custom_dims_sk_id.27c359e513", "test.sql_repository_bz.unique_stg_ga_magazin_custom_dims_sk_id.e9d73751a1"], "model.sql_repository_bz.stg_ga_transactions_conversion_backfill": ["model.sql_repository_bz.gads_backfill_consentless_transactions", "model.sql_repository_bz.gads_backfill_consentless_transactions", "test.sql_repository_bz.not_null_stg_ga_transactions_conversion_backfill_ga_transaction_id.85403ad4fb", "test.sql_repository_bz.unique_stg_ga_transactions_conversion_backfill_ga_transaction_id.ff960f4d00"], "model.sql_repository_bz.stg_ga_transactions_with_adclick_involvement": ["model.sql_repository_bz.int_ga_product_performance_with_ad_touchpoints", "test.sql_repository_bz.not_null_stg_ga_transactions_with_adclick_involvement_ad_transactionid.93f103603a", "test.sql_repository_bz.unique_stg_ga_transactions_with_adclick_involvement_ad_transactionid.2e94cfb8df"], "model.sql_repository_bz.stg_ga_transactions": ["model.sql_repository_bz.alerts_datadiff_consentless_ga_1d", "model.sql_repository_bz.int_ga_order_value_by_month_channel", "model.sql_repository_bz.int_ga_sessions_transactions", "model.sql_repository_bz.int_nav_transactions_session_customer_attributes", "model.sql_repository_bz.transaction_ga_nav_attributes", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_transactions_ga_transaction_id__ga_date_2022_03_22_.deb23661cb", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_transactions_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.be9d909b40", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_recent_data_stg_ga_transactions_ga_date__day__2.51546af5d3", "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_transactions_ga_transaction_id.ebc24c41f0", "test.sql_repository_bz.not_null_stg_ga_transactions_ga_date.043a94113f", "test.sql_repository_bz.not_null_stg_ga_transactions_ga_transaction_id.ffcd5181e4", "test.sql_repository_bz.not_null_stg_ga_transactions_sk_id.a9e4fe4e7f"], "model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim": ["model.sql_repository_bz.int_cp_source_feeds_with_errors", "test.sql_repository_bz.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_channel_pilot_source_feeds_ipim_uvp__verkaufspreis__True__uvp_is_not_null_and_verkaufspreis_is_not_null.11b9601583", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_uvp__0.20a3b1aa3b", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_verkaufspreis__0__verkaufspreis_is_not_null.9b96c4e3f5", "test.sql_repository_bz.dbt_expectations_expect_grouped_row_values_to_have_recent_data_stg_channel_pilot_source_feeds_ipim_day__country__1__file_datetime.1016f9cf03", "test.sql_repository_bz.dbt_expectations_expect_table_column_count_to_equal_stg_channel_pilot_source_feeds_ipim_32.b369279dc6", "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_stg_channel_pilot_source_feeds_ipim_1800000.011dcf5879", "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_base_title.6b55a746de", "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_brand.4619596cbd", "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_category_path.993b592a57", "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_country_product_id.4ecced115b", "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_ean.6548678f49", "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_externeid.7830fb5a2b", "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_productid.97767b6846", "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_short_description.169591f8d7", "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_uvp.dafb6006e2", "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_verkaufspreis.7239cac51f", "test.sql_repository_bz.unique_stg_channel_pilot_source_feeds_ipim_country_product_id.091cd5d960"], "model.sql_repository_bz.stg_crawl_sitemap_urls_bergfreunde": ["test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_bergfreunde_url.4aef2acff8"], "model.sql_repository_bz.stg_crawl_gbot_logfiles": ["model.sql_repository_bz.int_crawl_de_brg", "model.sql_repository_bz.int_crawl_nondach_recent", "model.sql_repository_bz.int_gsc_and_crawl_data", "model.sql_repository_bz.int_sitemap_and_crawl_and_gsc_data"], "model.sql_repository_bz.stg_crawl_sitemap_urls_all": ["model.sql_repository_bz.int_gsc_sitemap_urlage_def", "model.sql_repository_bz.int_gsc_sitemap_urlage_def", "model.sql_repository_bz.int_sitemap_and_crawl_and_gsc_data", "test.sql_repository_bz.accepted_values_stg_crawl_sitemap_urls_all_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special.9e60cd2c50", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_crawl_sitemap_urls_all_sk_id__crawl_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.0365716f95", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_crawl_sitemap_urls_all_crawl_date__day.10793617ba", "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_all_sitemap_name.cba5f2461b", "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_all_sk_id.9c86037f76"], "model.sql_repository_bz.stg_crawl_advertools_logs": ["model.sql_repository_bz.seo_crawl_data_advertools", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_crawl_advertools_logs_url_crawl_id__parse_date_Y_m_d_date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.afc25836a7", "test.sql_repository_bz.not_null_stg_crawl_advertools_logs_url_crawl_id.ec4d5af0b4"], "model.sql_repository_bz.stg_crawl_sitemap_urls_de": ["model.sql_repository_bz.int_crawl_de_lp_in_sitemap", "test.sql_repository_bz.accepted_values_stg_crawl_sitemap_urls_de_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special.1a7d3b09cb", "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_de_sitemap_name.70f5d2f525"], "model.sql_repository_bz.stg_nav_credit_memo_header_and_lines": ["model.sql_repository_bz.int_nav_crmemo_line_aggregated", "model.sql_repository_bz.int_nav_products"], "model.sql_repository_bz.stg_nav_customers_new_id": [], "model.sql_repository_bz.stg_nav_sales_channel_description": ["model.sql_repository_bz.int_nav_invoice_line_aggregated", "model.sql_repository_bz.int_nav_products", "model.sql_repository_bz.int_nav_transactions_and_customers"], "model.sql_repository_bz.stg_nav_transactions": ["model.sql_repository_bz.int_nav_transactions_and_customers", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_transactions_T_order_date__day__T_order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_.a042accd5a"], "model.sql_repository_bz.stg_nav_invoice_header_and_lines": ["analysis.sql_repository_bz.transactions_voucher_grouping_logic", "model.sql_repository_bz.int_nav_invoice_line_aggregated", "model.sql_repository_bz.int_nav_products", "model.sql_repository_bz.transaction_voucher_data", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_invoice_header_and_lines_order_date__day__order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_.b1c83b7d54"], "model.sql_repository_bz.stg_nav_customers": ["model.sql_repository_bz.int_nav_invoice_crmemo_customer", "model.sql_repository_bz.int_nav_transactions_and_customers", "model.sql_repository_bz.int_nav_transactions_session_customer_attributes"], "model.sql_repository_bz.weather_avg_temp_to_monthly_avg": ["exposure.sql_repository_bz.Bergzeit Management Report", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_weather_avg_temp_to_monthly_avg_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_.bc1cde2c30", "test.sql_repository_bz.dbt_utils_at_least_one_weather_avg_temp_to_monthly_avg_date.c88ebad30c", "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_avg_temp.8fd2bfd46b", "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_date.2c0e5f7ac3", "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_m_avg_temp.2a744adda8", "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_temp_diff_to_m_avg.8c30a0bda6"], "model.sql_repository_bz.stg_ga_de_overall_session_attributes": ["model.sql_repository_bz.pred_repurchase_model_transactions"], "model.sql_repository_bz.pred_repurchase_model_input": ["exposure.sql_repository_bz.Repurchase Forecast"], "model.sql_repository_bz.pred_repurchase_model_transactions": ["model.sql_repository_bz.pred_repurchase_model_input"], "model.sql_repository_bz.transaction_value_consentless_soll_ist_report": ["exposure.sql_repository_bz.BZ Performance Soll Ist"], "model.sql_repository_bz.transaction_voucher_data": ["exposure.sql_repository_bz.Affiliate Gutscheinexport", "exposure.sql_repository_bz.B&S_Sales Aktionen Report"], "model.sql_repository_bz.transaction_ga_nav_attributes": ["analysis.sql_repository_bz.onsite_acquisition_channel_structure", "exposure.sql_repository_bz.Bergzeit Management Report"], "model.sql_repository_bz.transaction_order_value_daily_by_country": ["exposure.sql_repository_bz.BZ OXID Revenue Daily"], "model.sql_repository_bz.pb_order_margins_after_returns": ["model.sql_repository_bz.pb_full_working_query"], "model.sql_repository_bz.pb_full_working_query": ["exposure.sql_repository_bz.Profit Bidding Upload CSV", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_order_margins_after_returns__0_01.9a575baf5e", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_totalRevenue__0_01.194e5ddff4", "test.sql_repository_bz.dbt_utils_at_least_one_pb_full_working_query_date.183367a5f0", "test.sql_repository_bz.not_null_pb_full_working_query_conversion_name.38941044cd", "test.sql_repository_bz.not_null_pb_full_working_query_date.db6859164d", "test.sql_repository_bz.not_null_pb_full_working_query_order_margins_after_returns.93f374c0c2", "test.sql_repository_bz.not_null_pb_full_working_query_totalRevenue.7d8ef55f4a", "test.sql_repository_bz.not_null_pb_full_working_query_transactionId.3b1bdf2539", "test.sql_repository_bz.unique_pb_full_working_query_transactionId.12c3f941a2"], "model.sql_repository_bz.pb_product_revenue_margins_returns": ["model.sql_repository_bz.pb_order_margins_after_returns"], "model.sql_repository_bz.onsite_pdp_mut_share_per_day": ["exposure.sql_repository_bz.Coops_CSR Marketing Report"], "model.sql_repository_bz.onsite_hits_by_property_and_day": ["exposure.sql_repository_bz.Analytics Admin Report (GCP & GA360)", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_hits_by_property_and_day_ga_property.5dd838d10e", "test.sql_repository_bz.dbt_utils_at_least_one_onsite_hits_by_property_and_day_ga_property.3dbf7c98a2", "test.sql_repository_bz.not_null_onsite_hits_by_property_and_day_ga_property.96f9de3646"], "model.sql_repository_bz.onsite_ga_filter_usage": ["exposure.sql_repository_bz.Shop_Filter Report", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_filter_type.299c4c09a8", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_page.bcc635be0c", "test.sql_repository_bz.dbt_utils_at_least_one_onsite_ga_filter_usage_filter_type.feb7c119d7", "test.sql_repository_bz.dbt_utils_at_least_one_onsite_ga_filter_usage_page.62acd149c6", "test.sql_repository_bz.not_null_onsite_ga_filter_usage_filter_type.76df520867", "test.sql_repository_bz.not_null_onsite_ga_filter_usage_page.036c570431"], "model.sql_repository_bz.onsite_ga4_metric_comparison": ["exposure.sql_repository_bz.GA4 Data Validation", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_order_value_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_.66d53dfc73", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_sessions_comp__1_2__0_8__date_date_sub_current_date_interval_2_day_.13395bde30", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_transactions_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_.1d297b4e98"], "model.sql_repository_bz.onsite_pdp_product_attributes": ["exposure.sql_repository_bz.Coops_CSR Marketing Report", "model.sql_repository_bz.onsite_pdp_mut_share_per_day"], "model.sql_repository_bz.onsite_cookie_consent_event_values": ["exposure.sql_repository_bz.Bergzeit Management Report"], "model.sql_repository_bz.onsite_ga_sessions_by_hit_count_bucket": ["exposure.sql_repository_bz.Analytics Admin Report (GCP & GA360)"], "model.sql_repository_bz.onsite_ga_list_page_events": ["exposure.sql_repository_bz.Bergzeit Management Report"], "model.sql_repository_bz.onsite_duplicate_teaser_events": ["exposure.sql_repository_bz.Shop_Page_Tracking_Check", "test.sql_repository_bz.not_null_onsite_duplicate_teaser_events_teaser_event_id.1439c5bb2b", "test.sql_repository_bz.unique_onsite_duplicate_teaser_events_teaser_event_id.795ca7b5f0"], "model.sql_repository_bz.onsite_pdp_testberichte": ["exposure.sql_repository_bz.Shop_Beratungs-Report"], "model.sql_repository_bz.onsite_ga_internal_search": ["exposure.sql_repository_bz.Shop_Merchandising Report"], "model.sql_repository_bz.onsite_ga_reco_performance": ["exposure.sql_repository_bz.Bergzeit Management Report"], "model.sql_repository_bz.alerts_datadiff_ga_minubo": ["exposure.sql_repository_bz.Analytics Admin Report (GCP & GA360)"], "model.sql_repository_bz.alerts_ga4_daily_metric_changes": [], "model.sql_repository_bz.alerts_datadiff_consentless_ga_1d": ["exposure.sql_repository_bz.Analytics Admin Report (GCP & GA360)", "exposure.sql_repository_bz.Bergzeit Management Report"], "model.sql_repository_bz.alerts_consentless_pageviews_magazine_last_hrs": ["exposure.sql_repository_bz.Alert Consentless Missing Magazine Pageviews"], "model.sql_repository_bz.alerts_consentless_transactions_last_hrs": ["exposure.sql_repository_bz.Alert Consentless Missing Transactions"], "model.sql_repository_bz.alerts_consentless_offline_pages": ["exposure.sql_repository_bz.Alert Consentless Offline Pages"], "model.sql_repository_bz.alerts_consentless_consent_events_last_hrs": ["exposure.sql_repository_bz.Alert Consentless Missing Consent Events"], "model.sql_repository_bz.cust_cohort_revenue_per_year": ["exposure.sql_repository_bz.CRM_Kundenanalysen Explorativ"], "model.sql_repository_bz.cust_customer_metrics": ["exposure.sql_repository_bz.CRM_Kundenanalysen Explorativ"], "model.sql_repository_bz.cust_new_returning_visitors_30d": ["exposure.sql_repository_bz.All_Market Review"], "model.sql_repository_bz.cust_perf_cost_mapping": ["model.sql_repository_bz.cust_club_margin_calculation"], "model.sql_repository_bz.cust_cohort_club_metrics_new_returning": ["exposure.sql_repository_bz.CRM_BZ Club Analysis"], "model.sql_repository_bz.cust_cohort_club_metrics": ["exposure.sql_repository_bz.CRM_BZ Club Analysis"], "model.sql_repository_bz.cust_club_retention_rate": ["exposure.sql_repository_bz.CRM_BZ Club Analysis", "model.sql_repository_bz.cust_club_margin_calculation", "model.sql_repository_bz.cust_cohort_club_metrics", "model.sql_repository_bz.cust_cohort_club_metrics_new_returning"], "model.sql_repository_bz.cust_club_margin_calculation": ["exposure.sql_repository_bz.CRM_BZ Club Analysis"], "model.sql_repository_bz.budget_plan_ga_and_markov_data": ["model.sql_repository_bz.budget_plan_actual_metrics"], "model.sql_repository_bz.budget_plan_actual_metrics": ["model.sql_repository_bz.budget_plan_output_metrics"], "model.sql_repository_bz.budget_plan_markov_channel_level": ["exposure.sql_repository_bz.BZ-Performance_SOLL-IST_GJ 22/23"], "model.sql_repository_bz.consentless_datadiff_ga": ["model.sql_repository_bz.budget_plan_target_metrics"], "model.sql_repository_bz.budget_plan_target_metrics": ["model.sql_repository_bz.budget_plan_output_metrics"], "model.sql_repository_bz.budget_plan_planned_input": ["model.sql_repository_bz.budget_plan_target_metrics"], "model.sql_repository_bz.budget_plan_output_metrics": [], "model.sql_repository_bz.budget_plan_daily_adcost_validation": ["exposure.sql_repository_bz.GA Data Validation - AdCost Validation"], "model.sql_repository_bz.gads_ads_for_url_check": ["exposure.sql_repository_bz.Google Ads URLs Crawler", "test.sql_repository_bz.dbt_utils_at_least_one_gads_ads_for_url_check_final_url.9cafbd858b"], "model.sql_repository_bz.gads_crawled_urls_with_status": ["exposure.sql_repository_bz.Adgroups With Error Ads Upload to be Paused"], "model.sql_repository_bz.gads_adstats_and_attributes": ["exposure.sql_repository_bz.GAds Stats and Attributes Table", "test.sql_repository_bz.dbt_utils_at_least_one_gads_adstats_and_attributes_adgroup_id.e490c275df", "test.sql_repository_bz.not_null_gads_adstats_and_attributes_adgroup_id.edb7c2279b"], "model.sql_repository_bz.gads_backfill_consentless_transactions": ["exposure.sql_repository_bz.Gads Backfill Consentless Transactions", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_name.80647eef58", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_time.c7b1d11e16", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_value.1ebff85aae", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_google_click_id.4197bfa548", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_gads_backfill_consentless_transactions_google_click_id__conversion_name_in_Sale_PB_AT_Import_Sale_PB_NL_Import_Sale_PB_IT_Import_Sale_DE_Import_Sale_CH_Import_Sale_UK_Import_Sale__Import_.9d7b13ec85", "test.sql_repository_bz.dbt_expectations_expect_table_column_count_to_equal_gads_backfill_consentless_transactions_5.29426e22c7", "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_gads_backfill_consentless_transactions_1000__200__False.0096963cea", "test.sql_repository_bz.dbt_utils_at_least_one_gads_backfill_consentless_transactions_conversion_name.dc61bca00f", "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_name.a4be000e25", "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_time.300785956b", "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_value.ee7967395f", "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_google_click_id.73d41f11b3"], "model.sql_repository_bz.gads_channel_pilot_feeds_with_errors": ["exposure.sql_repository_bz.Channelpilot Feed Input Hygiene"], "model.sql_repository_bz.gmc_missing_brands_per_country": ["exposure.sql_repository_bz.Google Ads Script to Upload the Json File to Google Ads", "exposure.sql_repository_bz.Missing Products in SMA Shopping Campaigns per Account", "test.sql_repository_bz.dbt_utils_at_least_one_gmc_missing_brands_per_country_account_id.066b1cb92a", "test.sql_repository_bz.dbt_utils_at_least_one_gmc_missing_brands_per_country_country.7c615e55c7", "test.sql_repository_bz.not_null_gmc_missing_brands_per_country_product_group.faa607cf81"], "model.sql_repository_bz.gads_all_cost_by_brand": ["exposure.sql_repository_bz.Vorlage Hersteller Report (extern)"], "model.sql_repository_bz.awin_transactions_pending_with_returns": ["exposure.sql_repository_bz.Awin Publisher Dashboard", "exposure.sql_repository_bz.Awin Sales Comparison Cloud Function", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_inv_h_shop_order_id.177285c64b", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_order_id_awin.47c5befa4a", "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_umsatz_netto.a5b484a50a", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_inv_h_shop_order_id.40f8727dcc", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_order_id_awin__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_.9a103157be", "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_awin_transactions_pending_with_returns_umsatz_netto__inv_h_shop_order_id_is_not_null.40fdd0e1d0", "test.sql_repository_bz.dbt_utils_at_least_one_awin_transactions_pending_with_returns_order_id_awin.ada8261cb8", "test.sql_repository_bz.not_null_awin_transactions_pending_with_returns_order_id_awin.9d5fb70f34", "test.sql_repository_bz.not_null_awin_transactions_pending_with_returns_sale_amount_awin.e764fc75bc"], "model.sql_repository_bz.test_results_latest_errors": ["exposure.sql_repository_bz.Test Errors and Warnings to Teams Cloud Function"], "model.sql_repository_bz.test_results_all_historic": ["exposure.sql_repository_bz.Analytics Admin Report (GCP & GA360)"], "model.sql_repository_bz.gcp_cost_export": ["exposure.sql_repository_bz.Analytics Admin Report (GCP & GA360)"], "model.sql_repository_bz.gcp_bigquery_job_cost": ["exposure.sql_repository_bz.Analytics Admin Report (GCP & GA360)"], "model.sql_repository_bz.product_sku_count_by_day": ["exposure.sql_repository_bz.B&S_Produkt Performance Report"], "model.sql_repository_bz.product_attributes_and_ga_data_by_day": ["exposure.sql_repository_bz.B&S_Produkt Performance Report", "exposure.sql_repository_bz.B&S_Sales Aktionen Report", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_ga_data_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.8ed5bd2364"], "model.sql_repository_bz.product_ga_data_and_adcost": ["exposure.sql_repository_bz.Shop_Merchandising Report"], "model.sql_repository_bz.product_brand_entrance_transactions": ["exposure.sql_repository_bz.B&S_Produkt Performance Report"], "model.sql_repository_bz.product_gmc_prices_chf_to_eur": [], "model.sql_repository_bz.product_source_feed_skus_with_errors": [], "model.sql_repository_bz.product_cart_analysis_selective_orders_parentid": ["exposure.sql_repository_bz.B&S_Warenkorb Analyse"], "model.sql_repository_bz.product_sku_and_season": ["exposure.sql_repository_bz.B&S_Topseller OutofStock Report"], "model.sql_repository_bz.product_nav_items_and_attributes": [], "model.sql_repository_bz.zz_product_price_benchmark_and_product_attr": [], "model.sql_repository_bz.product_attributes_and_stock_by_day": ["exposure.sql_repository_bz.B&S_Produkt Performance Report", "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_stock_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.06519299f6"], "model.sql_repository_bz.product_parentid_stats_by_day": ["exposure.sql_repository_bz.B&S_Produkt Performance Report"], "model.sql_repository_bz.product_cart_analysis_selective_orders_category": ["exposure.sql_repository_bz.B&S_Warenkorb Analyse"], "model.sql_repository_bz.product_attr_and_shopping_by_day": ["exposure.sql_repository_bz.B&S_Produkt Performance Report"], "model.sql_repository_bz.product_inventory_brand_aggregates": ["exposure.sql_repository_bz.B&S_Fremdlager PowerBI Report", "exposure.sql_repository_bz.B&S_Pricing PowerBI Report"], "model.sql_repository_bz.product_inventory_product_performance_metrics": ["exposure.sql_repository_bz.B&S_Fremdlager PowerBI Report"], "model.sql_repository_bz.seo_crawl_lp_in_sitemap": ["exposure.sql_repository_bz.LP SEO Monitor", "exposure.sql_repository_bz.SEO_Overall Report"], "model.sql_repository_bz.seo_ga_pagespeed_sessions_transactions": ["exposure.sql_repository_bz.SEO_Overall Report"], "model.sql_repository_bz.seo_crawl_data_advertools": [], "model.sql_repository_bz.seo_jira_finished_ifront_tickets": ["exposure.sql_repository_bz.SEO_Overall Report"], "model.sql_repository_bz.seo_gsc_ga_data_for_mag_reworked": ["exposure.sql_repository_bz.SEO_Overall Report"], "model.sql_repository_bz.seo_sitemap_efficiency": [], "model.sql_repository_bz.seo_gsc_data_for_top_pages": ["exposure.sql_repository_bz.SEO_Overall Report"], "model.sql_repository_bz.seo_gsc_url_age": ["exposure.sql_repository_bz.SEO_Overall Report"], "model.sql_repository_bz.seo_pagespeed_web_vitals_data": ["exposure.sql_repository_bz.SEO_Overall Report", "exposure.sql_repository_bz.SEO_Pagespeed Report"], "model.sql_repository_bz.seo_search_query_by_brand": ["exposure.sql_repository_bz.SEO_Overall Report"], "model.sql_repository_bz.zoovu_sessions_and_direct_product_revenue": [], "model.sql_repository_bz.avg_temp_by_country_day": [], "model.sql_repository_bz.daily_diff_consentless_to_ga": [], "model.sql_repository_bz.oxid_consentless_tracking_consentrate": [], "model.sql_repository_bz.oxid_consentless_tracking_date": [], "model.sql_repository_bz.oxid_consentless_tracking_site": [], "analysis.sql_repository_bz.pbid_return_data": [], "analysis.sql_repository_bz.attribution_model_comparison": [], "analysis.sql_repository_bz.sitemap_crawl_and_gsc_data_by_url_path": [], "analysis.sql_repository_bz.oxid_product_ratings": [], "analysis.sql_repository_bz.shopping_data_product_info_daily": [], "analysis.sql_repository_bz.sessions_by_channel_with_true_direct": [], "analysis.sql_repository_bz.zoovu_wirksamkeitsanalyse": [], "analysis.sql_repository_bz.teaser_grouping_old_names": [], "analysis.sql_repository_bz.onsite_acquisition_channel_structure": [], "analysis.sql_repository_bz.auswertung_pws_202012_retouren": [], "analysis.sql_repository_bz.auswertung_pws_202012_folgekaeufe": [], "analysis.sql_repository_bz.emarsys_stats_daily": [], "analysis.sql_repository_bz.product_attributes_daily_view": [], "analysis.sql_repository_bz.bm_product_kpis_daily": [], "analysis.sql_repository_bz.available_products_by_country": [], "analysis.sql_repository_bz.ga_prudsys_export_eecevents": [], "analysis.sql_repository_bz.extract_event_params_data_type": [], "analysis.sql_repository_bz.return_data_by_sales_channel": [], "analysis.sql_repository_bz.plausi": [], "analysis.sql_repository_bz.transactions_with_high_order_value": [], "analysis.sql_repository_bz.transactions_oms_and_consentless": [], "analysis.sql_repository_bz.transactions_voucher_grouping_logic": [], "operation.sql_repository_bz.sql_repository_bz-on-run-end-0": [], "model.ga4.dim_ga4__sessions": ["test.ga4.unique_dim_ga4__sessions_session_key.5ade237063"], "model.ga4.fct_ga4__pages": [], "model.ga4.fct_ga4__sessions": ["test.ga4.unique_fct_ga4__sessions_session_key.93f6a798f0"], "model.ga4.dim_ga4__users": ["test.ga4.unique_dim_ga4__users_user_key.bdf442708d"], "model.ga4.stg_ga4__event_items": [], "model.ga4.stg_ga4__users_first_last_events": ["model.ga4.dim_ga4__users", "test.ga4.unique_stg_ga4__users_first_last_events_user_key.dc787935d6"], "model.ga4.stg_ga4__sessions_traffic_sources": ["model.ga4.dim_ga4__sessions", "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_campaign.63d42c772d", "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_medium.90883df125", "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_source.49313fe211", "test.ga4.unique_stg_ga4__sessions_traffic_sources_session_key.417549e35d"], "model.ga4.stg_ga4__event_to_query_string_params": [], "model.ga4.stg_ga4__users_first_last_pageviews": ["model.ga4.dim_ga4__users", "test.ga4.unique_stg_ga4__users_first_last_pageviews_user_key.3c574733bb"], "model.ga4.stg_ga4__sessions_first_last_pageviews": ["model.ga4.stg_ga4__event_page_view"], "model.ga4.stg_ga4__events": ["model.ga4.dim_ga4__users", "model.ga4.fct_ga4__sessions", "model.ga4.stg_ga4__event_click", "model.ga4.stg_ga4__event_file_download", "model.ga4.stg_ga4__event_first_visit", "model.ga4.stg_ga4__event_items", "model.ga4.stg_ga4__event_page_view", "model.ga4.stg_ga4__event_scroll", "model.ga4.stg_ga4__event_session_start", "model.ga4.stg_ga4__event_to_query_string_params", "model.ga4.stg_ga4__event_user_engagement", "model.ga4.stg_ga4__event_video_complete", "model.ga4.stg_ga4__event_video_start", "model.ga4.stg_ga4__event_view_search_results", "model.ga4.stg_ga4__sessions_first_last_pageviews", "model.ga4.stg_ga4__sessions_traffic_sources", "model.ga4.stg_ga4__users_first_last_events", "model.ga4.stg_ga4__users_first_last_events", "model.ga4.stg_ga4__users_first_last_events", "test.ga4.unique_stg_ga4__events_event_key.985cc306e5"], "model.ga4.stg_ga4__event_session_start": ["model.ga4.dim_ga4__sessions"], "model.ga4.stg_ga4__event_user_engagement": [], "model.ga4.stg_ga4__event_view_search_results": [], "model.ga4.stg_ga4__event_video_start": [], "model.ga4.stg_ga4__event_video_complete": [], "model.ga4.stg_ga4__event_first_visit": [], "model.ga4.stg_ga4__event_scroll": ["model.ga4.fct_ga4__pages"], "model.ga4.stg_ga4__event_click": [], "model.ga4.stg_ga4__event_file_download": [], "model.ga4.stg_ga4__event_page_view": ["model.ga4.fct_ga4__pages", "model.ga4.stg_ga4__users_first_last_pageviews", "model.ga4.stg_ga4__users_first_last_pageviews", "model.ga4.stg_ga4__users_first_last_pageviews", "test.ga4.not_null_stg_ga4__event_page_view_page_location.8b37318084"], "model.ga4.base_ga4__events": ["model.ga4.stg_ga4__events"], "seed.ga4.ga4_source_categories": ["model.ga4.stg_ga4__sessions_traffic_sources"], "test.sql_repository_bz.not_null_int_ga_sessions_by_hit_count_bucket_hit_count_bucket.9e72d30e37": [], "test.sql_repository_bz.dbt_utils_at_least_one_int_ga_sessions_by_hit_count_bucket_hit_count_bucket.735e0efb5d": [], "test.sql_repository_bz.accepted_values_int_ga_teaser_test_underscores_count__False__8.1d077d2f26": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_match_regex_int_ga_teaser_test_promo_name_date__20_0_9_2_0_1_9_1_0_2_0_1_9_12_0_9_3_0_1_.692d2b6cbe": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_average_hits_per_day_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_.e739dc0e22": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_int_ga_hits_by_property_and_day_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.753a2a3d4e": [], "test.sql_repository_bz.unique_stg_channelattribution_channel_level_sk_id.db1204caf4": [], "test.sql_repository_bz.unique_stg_channelattribution_path_level_sk_id.3487d69530": [], "test.sql_repository_bz.unique_stg_weather_dach_7d_forecast_town_datetime_id.750831b756": [], "test.sql_repository_bz.not_null_stg_weather_dach_7d_forecast_town_datetime_id.451adf1bbb": [], "test.sql_repository_bz.unique_stg_weather_dach_daily_town_datetime_id.6e81ec24a4": [], "test.sql_repository_bz.not_null_stg_weather_dach_daily_town_datetime_id.7e0843fed4": [], "test.sql_repository_bz.not_null_stg_weather_dach_daily_date.ec486e9787": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_weather_dach_daily_date.48252d1406": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_weather_dach_daily_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_.8c82d80c49": [], "test.sql_repository_bz.not_null_stg_gads_all_adgroups_info_current_AdGroupId.e206713d85": [], "test.sql_repository_bz.unique_stg_gads_all_adgroups_info_current_AdGroupId.6f372302b0": [], "test.sql_repository_bz.not_null_stg_gads_all_ads_info_current_sk_id.0ef72507fb": [], "test.sql_repository_bz.unique_stg_gads_all_ads_info_current_sk_id.01d3196c71": [], "test.sql_repository_bz.not_null_stg_gads_all_ads_stats_sk_id.d81f874bc8": [], "test.sql_repository_bz.unique_stg_gads_all_campaign_names_campaign_id.f84b6db6cc": [], "test.sql_repository_bz.not_null_stg_gads_all_campaign_names_campaign_id.82e2901272": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_campaign_names_campaign_id.500b398953": [], "test.sql_repository_bz.not_null_stg_gads_all_campaign_stats_sk_id.9aa3c18eae": [], "test.sql_repository_bz.unique_stg_gads_all_campaign_stats_sk_id.bf47b9bd4b": [], "test.sql_repository_bz.not_null_stg_gads_all_campaigns_info_current_sk_id.bb43587aaf": [], "test.sql_repository_bz.unique_stg_gads_all_campaigns_info_current_sk_id.46b2aeea38": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_campaigns_info_current_sk_id.94c525a35d": [], "test.sql_repository_bz.unique_stg_gads_all_crawled_ads_urls_sk_id.6b8361d78a": [], "test.sql_repository_bz.not_null_stg_gads_all_crawled_ads_urls_sk_id.4b227b9a82": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_crawled_ads_urls_sk_id.40242bb775": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_in_set_stg_gads_all_crawled_ads_urls_status__429__500.e3333a724f": [], "test.sql_repository_bz.not_null_stg_gads_all_crawled_ads_urls_status.f06717230b": [], "test.sql_repository_bz.unique_stg_gads_all_criteria_info_current_sk_id.f99a0510c0": [], "test.sql_repository_bz.not_null_stg_gads_all_criteria_info_current_sk_id.fbc40009ae": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gads_all_criteria_info_current_sk_id.3b91bc6d12": [], "test.sql_repository_bz.not_null_stg_gads_all_product_stats_sk_id.1df63efcb7": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gads_all_product_stats_date__day__date_current_date___2022_03_01.81d8651d1b": [], "test.sql_repository_bz.not_null_stg_gads_all_query_stats_sk_id.bc3fb6fd52": [], "test.sql_repository_bz.unique_stg_test_results_last_run_test_run_id.05d5976f68": [], "test.sql_repository_bz.not_null_stg_test_results_last_run_test_run_id.db432a0868": [], "test.sql_repository_bz.unique_stg_test_results_historic_test_run_id.1c6e8316cb": [], "test.sql_repository_bz.not_null_stg_test_results_historic_test_run_id.271cb7516f": [], "test.sql_repository_bz.not_null_stg_gsc_data_page.0c6cad32c4": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gsc_data_page.6a172b3849": [], "test.sql_repository_bz.accepted_values_stg_gsc_data_search_type__web__image.212c9832ed": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_gsc_data_impressions__0.6dd8a7d2f2": [], "test.sql_repository_bz.unique_stg_gsc_data_sk_id.202e6087b9": [], "test.sql_repository_bz.not_null_stg_gsc_data_sk_id.bbf442b1a0": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gsc_data_gsc_date__day__gsc_date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_4_day_.d86929e308": [], "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gsc_data_gsc_date__gsc_country__query__page__device__search_type__time_stamp__clicks__impressions__ctr__position__False__gsc_date_current_date_60.22759fc007": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_attributes_daily_product_id.63ff91169b": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_attributes_daily_product_id.178c7163e6": [], "test.sql_repository_bz.not_null_stg_gmc_product_attributes_daily_product_id.deeed4d82d": [], "test.sql_repository_bz.unique_stg_gmc_product_attributes_daily_sk_id.e0693e88d3": [], "test.sql_repository_bz.not_null_stg_gmc_product_attributes_daily_sk_id.28d02641a8": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_product_attributes_daily_date__day__2022_08_19.50cabb8518": [], "test.sql_repository_bz.max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_product_attributes_daily_50__date.d225ea8e3f": [], "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_product_attributes_daily_date__product_id__any_value_is_missing__False__date_current_date_1.c4d572905f": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_channel_pilot_profit_bidding_90d_product_id.27bcb103e9": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_channel_pilot_profit_bidding_90d_product_id.e693c05e3a": [], "test.sql_repository_bz.not_null_stg_channel_pilot_profit_bidding_90d_product_id.5e32943a74": [], "test.sql_repository_bz.unique_stg_channel_pilot_profit_bidding_90d_sk_id.995d943cbe": [], "test.sql_repository_bz.not_null_stg_channel_pilot_profit_bidding_90d_sk_id.265b2eb3d7": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_channel_pilot_profit_bidding_90d_date__day__2022_08_19.60031b7aac": [], "test.sql_repository_bz.unique_stg_gmc_all_products_sk_id.1d7ee0d57d": [], "test.sql_repository_bz.not_null_stg_gmc_all_products_sk_id.0ea44e4472": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_p_date.59bfafd202": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_all_products_p_date.63890ebb46": [], "test.sql_repository_bz.not_null_stg_gmc_all_products_p_date.7cca799e9b": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_offer_id.f963ef99ea": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_all_products_offer_id.3f83de7e64": [], "test.sql_repository_bz.not_null_stg_gmc_all_products_offer_id.9de99eaf8b": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_all_products_top_category.443c1ce984": [], "test.sql_repository_bz.not_null_stg_gmc_all_products_top_category.f00aad3a5c": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_gmc_all_products_p_date__day__p_date_current_date_180.5c5e20286a": [], "test.sql_repository_bz.max_row_count_change_from_yesterday_to_today_in_percent_stg_gmc_all_products_50__p_date.6cab71d571": [], "test.sql_repository_bz.dbt_expectations_expect_compound_columns_to_be_unique_stg_gmc_all_products_p_date__offer_id__all_values_are_missing__False__products_country_de_and_p_date_2022_04_09_.5a02919780": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_issues_offer_id.65f05265df": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_issues_offer_id.1e69f3a871": [], "test.sql_repository_bz.not_null_stg_gmc_product_issues_offer_id.ea3a032de0": [], "test.sql_repository_bz.unique_stg_qlik_return_rates_sk_id.c01170b5d2": [], "test.sql_repository_bz.not_null_stg_qlik_return_rates_sk_id.e224007779": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_qlik_return_rates_brand.9f3e8adba5": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_qlik_return_rates_brand.a1363e28e5": [], "test.sql_repository_bz.not_null_stg_qlik_return_rates_brand.0e6dc5c9d5": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_stock_stock_product_id.ef77ca4d90": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_stock_stock_product_id.6ef41bbbc2": [], "test.sql_repository_bz.not_null_stg_gmc_product_stock_stock_product_id.28086e6f00": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_gmc_product_brands_brand.524479c5dc": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gmc_product_brands_brand.20946638eb": [], "test.sql_repository_bz.not_null_stg_gmc_product_brands_brand.ab3c6ef00c": [], "test.sql_repository_bz.unique_stg_gmc_product_brands_brand.2cd4635233": [], "test.sql_repository_bz.unique_stg_gmc_margins_all_sk_id.236d6ee406": [], "test.sql_repository_bz.not_null_stg_gmc_margins_all_sk_id.0cecb41021": [], "test.sql_repository_bz.not_null_stg_jira_finished_seo_tickets_ticket_number.0b2925852b": [], "test.sql_repository_bz.unique_stg_jira_finished_seo_tickets_ticket_number.3e097897e1": [], "test.sql_repository_bz.dbt_utils_recency_stg_jira_finished_seo_tickets_day__load_timestamp__1.1c81e510ae": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_date.6d82b037c0": [], "test.sql_repository_bz.not_null_stg_minubo_ga_kpis_daily_minubo_ga_date.bdfd966551": [], "test.sql_repository_bz.unique_stg_minubo_ga_kpis_daily_minubo_ga_date.e30f85f645": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_sessions.c6d114792d": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_minubo_ga_kpis_daily_minubo_ga_sessions.73742e66cc": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_page_views.c232337fa3": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_detail_views.ddbbe3e43d": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_minubo_ga_kpis_daily_minubo_ga_add_to_carts.eed43303f2": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_minubo_ga_kpis_daily_minubo_ga_date__day__minubo_ga_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.b4cfc89a19": [], "test.sql_repository_bz.unique_stg_antavo_club_optins_antavo_customer_id.c7eb84e6cf": [], "test.sql_repository_bz.not_null_stg_antavo_club_optins_antavo_customer_id.303711e666": [], "test.sql_repository_bz.unique_stg_consentless_transactions_live_transaction_id.869dd889ff": [], "test.sql_repository_bz.not_null_stg_consentless_transactions_live_transaction_id.bb1b2d2782": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_consentless_transactions_live_transaction_id.14d47953bf": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_live_transaction_id.9c2d55e45a": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_transaction_id__date_date_sub_current_date_interval_30_day_.0f4661f728": [], "test.sql_repository_bz.not_null_stg_consentless_transactions_transaction_id.5b50a5a325": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_consentless_transactions_transaction_id.c46db33851": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_id.7bdf407d52": [], "test.sql_repository_bz.not_null_stg_consentless_transactions_transaction_value.b3798794cd": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_transaction_value.dbb049c070": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_transactions_gclid__date_date_sub_current_date_interval_30_day_.eb1701f63a": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_transactions_gclid.48578c8780": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_consentless_transactions_date__day.7500829a42": [], "test.sql_repository_bz.not_null_stg_consentless_consent_interaction_consent_event_id.1d9a27acff": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_consentless_consent_interaction_consent_event_id__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.8960ea6730": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_consent_interaction_consent_event_id.d2d3a28519": [], "test.sql_repository_bz.not_null_stg_consentless_page_views_live_pageview_event_id.97f8a40159": [], "test.sql_repository_bz.unique_stg_consentless_page_views_live_pageview_event_id.1337a78cbf": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_consentless_page_views_live_pageview_event_id.3c2c68eb0f": [], "test.sql_repository_bz.not_null_stg_gcp_bigquery_job_cost_sk_id.b4c10abd3f": [], "test.sql_repository_bz.not_null_stg_gcp_cost_export_cost_entry_id.21de0cfd4f": [], "test.sql_repository_bz.unique_stg_gcp_bigquery_table_storage_table_creation_id.fd77db0431": [], "test.sql_repository_bz.not_null_stg_gcp_bigquery_table_storage_table_creation_id.b24d8f11ad": [], "test.sql_repository_bz.not_null_stg_gcp_bigquery_table_storage_total_rows.801a97c96f": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_gcp_bigquery_table_storage_total_rows__0.d218a50205": [], "test.sql_repository_bz.unique_stg_trusted_shops_reviews_review_id.949835d18d": [], "test.sql_repository_bz.not_null_stg_trusted_shops_reviews_review_id.77ca29d3c0": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_trusted_shops_reviews_review_id.44892f2ea9": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_review_id.ea887442e7": [], "test.sql_repository_bz.not_null_stg_trusted_shops_reviews_date.81dcacb8ea": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_trusted_shops_reviews_date.480d173b22": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_trusted_shops_reviews_date__day__date_between_date_sub_current_date_interval_60_day_and_date_sub_current_date_interval_1_day_.ff0cd72a6e": [], "test.sql_repository_bz.unique_stg_gsheets_currency_factor_ch_currency_date.dadb8f5b80": [], "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_ch_currency_date.8caf318b93": [], "test.sql_repository_bz.unique_stg_gsheets_currency_factor_gb_currency_date.dc6df0c420": [], "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_gb_currency_date.60c08266a3": [], "test.sql_repository_bz.unique_stg_gsheets_currency_factor_all_countries_sk_id.d65e47a9df": [], "test.sql_repository_bz.not_null_stg_gsheets_currency_factor_all_countries_sk_id.46183c91bf": [], "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_country_soll.375d5a033e": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_gsheets_order_value_planned_country_soll.b550d014a1": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_in_set_stg_gsheets_order_value_planned_country_soll__de__at__ch__it__nl__uk__int.38a8c54181": [], "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_month_soll.18b7a3df24": [], "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_order_value_soll_overall.24d2f1b2f5": [], "test.sql_repository_bz.unique_stg_gsheets_order_value_planned_sk_id.ef401765b3": [], "test.sql_repository_bz.not_null_stg_gsheets_order_value_planned_sk_id.7015de60fd": [], "test.sql_repository_bz.unique_stg_gsheets_channel_shares_planned_sk_id.badaec310f": [], "test.sql_repository_bz.not_null_stg_gsheets_channel_shares_planned_sk_id.3653da3a29": [], "test.sql_repository_bz.unique_stg_gsheets_seo_top_pages_url_noutm.7212c20bfa": [], "test.sql_repository_bz.not_null_stg_gsheets_seo_top_pages_url_noutm.110efcbb9c": [], "test.sql_repository_bz.unique_stg_gsheets_seo_magazin_reworked_url_noutm.685baa01e6": [], "test.sql_repository_bz.not_null_stg_gsheets_seo_magazin_reworked_url_noutm.dbd0d88abf": [], "test.sql_repository_bz.unique_stg_awin_return_adjustment_errors_order_id_awin.04b602641e": [], "test.sql_repository_bz.not_null_stg_awin_return_adjustment_errors_order_id_awin.85c503044f": [], "test.sql_repository_bz.not_null_stg_awin_return_adjustment_errors_inv_h_shop_order_id.96a5995894": [], "test.sql_repository_bz.unique_stg_awin_return_adjustment_errors_inv_h_shop_order_id.2bd5e7e3da": [], "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_stg_awin_return_adjustment_errors_15__False.4bcfe012bd": [], "test.sql_repository_bz.not_null_stg_awin_orders_all_order_id_awin.b7a1da485c": [], "test.sql_repository_bz.unique_stg_awin_orders_all_order_id_awin.1ec1a6104e": [], "test.sql_repository_bz.unique_stg_awin_orders_all_order_id.2f1c74c206": [], "test.sql_repository_bz.not_null_stg_awin_orders_all_order_id.587cb4b3c0": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_awin_orders_all_order_id.2506a6b5f5": [], "test.sql_repository_bz.not_null_stg_awin_orders_all_sale_amount_awin.cfd6a08f74": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__1__awin_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.ce4c453dd9": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_awin_orders_all_sale_amount_awin__5000__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_.a4cb09bf6b": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_awin_orders_all_awin_date__day__awin_date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.6b0230aaa7": [], "test.sql_repository_bz.max_row_count_change_from_prev_day_to_yesterday_in_percent_stg_awin_orders_all_100__awin_date.b4c3180cdc": [], "test.sql_repository_bz.not_null_stg_pagespeed_url_data_date_url_id.022036751d": [], "test.sql_repository_bz.unique_stg_pagespeed_url_data_date_url_id.df1b23f779": [], "test.sql_repository_bz.not_null_stg_pagespeed_url_data_date.de9a6dd3e8": [], "test.sql_repository_bz.not_null_stg_pagespeed_url_data_country.b705d25b17": [], "test.sql_repository_bz.not_null_stg_pagespeed_url_data_domain.13cc19c93c": [], "test.sql_repository_bz.not_null_stg_pagespeed_url_data_cumulative_layout_shift_s.22056433d4": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_pagespeed_url_data_cumulative_layout_shift_s__5__0__date_2022_09_09_.868a68f183": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_pagespeed_url_data_date__day.b864fe735a": [], "test.sql_repository_bz.unique_stg_ga_performance_costs_sk_id.bf171ab0d3": [], "test.sql_repository_bz.not_null_stg_ga_performance_costs_sk_id.3dbb6b9b6a": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_performance_costs_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.6f52d48874": [], "test.sql_repository_bz.unique_stg_ga_performance_cost_validation_sk_id.1458d8ac6d": [], "test.sql_repository_bz.not_null_stg_ga_performance_cost_validation_sk_id.1f89130650": [], "test.sql_repository_bz.unique_stg_ga_pagespeed_per_pagetype_sk_id.9eddc42fea": [], "test.sql_repository_bz.not_null_stg_ga_pagespeed_per_pagetype_sk_id.7aec915dea": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pagespeed_per_pagetype_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.50512cba29": [], "test.sql_repository_bz.not_null_stg_ga_page_types_date.013abb6e60": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_page_types_date.d195ea7cc4": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_page_types_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.dd4ba2f67e": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_pageviews_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.b28b8c6670": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_detail_pages_pv_date__day__pv_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.e2cd1791a2": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_internal_search_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.d3b47f08ba": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_product_checkouts_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.68a80f7534": [], "test.sql_repository_bz.not_null_stg_ga_products_sk_id.df1d8c24ac": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_products_sk_id__date_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_.9642857c67": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_products_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.2773918a90": [], "test.sql_repository_bz.not_null_stg_ga4_products_sk_id.b1a82e3783": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_products_sk_id__event_date_dt_between_date_sub_current_date_interval_1_day_and_date_sub_current_date_interval_1_day_.d99030f1d4": [], "test.sql_repository_bz.unique_stg_ga_session_totals_sk_id.5a638092dc": [], "test.sql_repository_bz.not_null_stg_ga_session_totals_channel_grouping.21feb97e6a": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_ga_session_totals_channel_grouping.ac3f4db203": [], "test.sql_repository_bz.not_null_stg_ga_session_totals_hits.462e48d6f1": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_session_totals_hits.049b727064": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_stg_ga_session_totals_hits.e9c650e839": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_ga_session_totals_hits__499__1__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day___False.e0582a4e16": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_session_totals_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.bf9ac5798f": [], "test.sql_repository_bz.accepted_values_stg_ga4_events_custom_event_name___custom_category_tree_click___custom_filter_click___custom_flyout_click___custom_magazine_click___custom_search_suggest_click___custom_sort_click___custom_triggermail_entrance___custom_wishlist_click___custom_magazine_product_carousel_click.0dab3351b0": [], "test.sql_repository_bz.not_null_stg_ga4_events_custom_sk_id.41a4aba218": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_custom_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.c255fac6ff": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_custom_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.c3deba17f9": [], "test.sql_repository_bz.not_null_stg_ga4_events_checkout_sk_id.4597eea933": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_checkout_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.db7ab27ce1": [], "test.sql_repository_bz.accepted_values_stg_ga4_events_checkout_event_name__add_to_cart__view_cart__remove_from_cart__begin_checkout__add_payment_info__purchase.543e26a8f4": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_checkout_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.476c8ec576": [], "test.sql_repository_bz.accepted_values_stg_ga4_events_standard_event_name__view_item__view_item_list__select_item__view_promotion__select_promotion__session_start__first_visit__user_engagement__click__page_view__file_download__scroll__view_search_results__video_start__video_progress__video_complete.9fca75c894": [], "test.sql_repository_bz.not_null_stg_ga4_events_standard_sk_id.8ed9669bdb": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga4_events_standard_sk_id__event_date_dt_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.e66abf2b96": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga4_events_standard_event_date_dt__day__event_date_dt_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.5d7a41328b": [], "test.sql_repository_bz.not_null_stg_ga_events_per_page_sk_id.0055b71d8c": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_per_page_sk_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.3b4617b45a": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_per_page_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.e5e16acb72": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_promotion_teaser_event_id__date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.689eb79adf": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_name__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.7cb01b44eb": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_stg_ga_events_promotion_promo_creative__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.874b0d1267": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_promotion_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.3233811fec": [], "test.sql_repository_bz.not_null_stg_ga_events_event_id.197c93642a": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_events_event_id__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_and_event_action_eec_promoView_.a4d39cc847": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_events_date__day__date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.a8d306408b": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_filter_events_date__day__date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.832cc46197": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_hits_all_properties_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.741ff36f99": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_ecommerce_actions_c_date__day__c_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.53ae9161a9": [], "test.sql_repository_bz.unique_stg_ga_magazin_custom_dims_sk_id.e9d73751a1": [], "test.sql_repository_bz.not_null_stg_ga_magazin_custom_dims_sk_id.27c359e513": [], "test.sql_repository_bz.unique_stg_ga_transactions_with_adclick_involvement_ad_transactionid.2e94cfb8df": [], "test.sql_repository_bz.not_null_stg_ga_transactions_with_adclick_involvement_ad_transactionid.93f103603a": [], "test.sql_repository_bz.unique_stg_ga_transactions_conversion_backfill_ga_transaction_id.ff960f4d00": [], "test.sql_repository_bz.not_null_stg_ga_transactions_conversion_backfill_ga_transaction_id.85403ad4fb": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_ga_transactions_ga_transaction_id__ga_date_2022_03_22_.deb23661cb": [], "test.sql_repository_bz.not_null_stg_ga_transactions_ga_transaction_id.ffcd5181e4": [], "test.sql_repository_bz.dbt_utils_at_least_one_stg_ga_transactions_ga_transaction_id.ebc24c41f0": [], "test.sql_repository_bz.not_null_stg_ga_transactions_sk_id.a9e4fe4e7f": [], "test.sql_repository_bz.not_null_stg_ga_transactions_ga_date.043a94113f": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_recent_data_stg_ga_transactions_ga_date__day__2.51546af5d3": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_ga_transactions_ga_date__day__ga_date_between_date_sub_current_date_interval_10_day_and_date_sub_current_date_interval_1_day_.be9d909b40": [], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_country_product_id.4ecced115b": [], "test.sql_repository_bz.unique_stg_channel_pilot_source_feeds_ipim_country_product_id.091cd5d960": [], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_productid.97767b6846": [], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_short_description.169591f8d7": [], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_brand.4619596cbd": [], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_category_path.993b592a57": [], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_verkaufspreis.7239cac51f": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_verkaufspreis__0__verkaufspreis_is_not_null.9b96c4e3f5": [], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_uvp.dafb6006e2": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_stg_channel_pilot_source_feeds_ipim_uvp__0.20a3b1aa3b": [], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_ean.6548678f49": [], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_base_title.6b55a746de": [], "test.sql_repository_bz.not_null_stg_channel_pilot_source_feeds_ipim_externeid.7830fb5a2b": [], "test.sql_repository_bz.dbt_expectations_expect_table_column_count_to_equal_stg_channel_pilot_source_feeds_ipim_32.b369279dc6": [], "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_stg_channel_pilot_source_feeds_ipim_1800000.011dcf5879": [], "test.sql_repository_bz.dbt_expectations_expect_grouped_row_values_to_have_recent_data_stg_channel_pilot_source_feeds_ipim_day__country__1__file_datetime.1016f9cf03": [], "test.sql_repository_bz.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_stg_channel_pilot_source_feeds_ipim_uvp__verkaufspreis__True__uvp_is_not_null_and_verkaufspreis_is_not_null.11b9601583": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_crawl_advertools_logs_url_crawl_id__parse_date_Y_m_d_date_between_date_sub_current_date_interval_14_day_and_date_sub_current_date_interval_1_day_.afc25836a7": [], "test.sql_repository_bz.not_null_stg_crawl_advertools_logs_url_crawl_id.ec4d5af0b4": [], "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_de_sitemap_name.70f5d2f525": [], "test.sql_repository_bz.accepted_values_stg_crawl_sitemap_urls_de_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special.1a7d3b09cb": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_stg_crawl_sitemap_urls_all_sk_id__crawl_date_between_date_sub_current_date_interval_30_day_and_date_sub_current_date_interval_1_day_.0365716f95": [], "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_all_sk_id.9c86037f76": [], "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_all_sitemap_name.cba5f2461b": [], "test.sql_repository_bz.accepted_values_stg_crawl_sitemap_urls_all_sitemap_name__articles__campaigns__categories__categories_attributes__categories_manufacturers__category__content__event_articles__event_categories__manufacturers__pictures_imago__product__searchterms__special.9e60cd2c50": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_crawl_sitemap_urls_all_crawl_date__day.10793617ba": [], "test.sql_repository_bz.not_null_stg_crawl_sitemap_urls_bergfreunde_url.4aef2acff8": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_invoice_header_and_lines_order_date__day__order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_.b1c83b7d54": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_stg_nav_transactions_T_order_date__day__T_order_date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_3_day_.a042accd5a": [], "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_date.2c0e5f7ac3": [], "test.sql_repository_bz.dbt_utils_at_least_one_weather_avg_temp_to_monthly_avg_date.c88ebad30c": [], "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_avg_temp.8fd2bfd46b": [], "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_m_avg_temp.2a744adda8": [], "test.sql_repository_bz.not_null_weather_avg_temp_to_monthly_avg_temp_diff_to_m_avg.8c30a0bda6": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_weather_avg_temp_to_monthly_avg_date__day__date_between_date_sub_current_date_interval_90_day_and_date_sub_current_date_interval_0_day_.bc1cde2c30": [], "test.sql_repository_bz.not_null_pb_full_working_query_date.db6859164d": [], "test.sql_repository_bz.dbt_utils_at_least_one_pb_full_working_query_date.183367a5f0": [], "test.sql_repository_bz.not_null_pb_full_working_query_conversion_name.38941044cd": [], "test.sql_repository_bz.not_null_pb_full_working_query_transactionId.3b1bdf2539": [], "test.sql_repository_bz.unique_pb_full_working_query_transactionId.12c3f941a2": [], "test.sql_repository_bz.not_null_pb_full_working_query_totalRevenue.7d8ef55f4a": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_totalRevenue__0_01.194e5ddff4": [], "test.sql_repository_bz.not_null_pb_full_working_query_order_margins_after_returns.93f374c0c2": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_pb_full_working_query_order_margins_after_returns__0_01.9a575baf5e": [], "test.sql_repository_bz.unique_onsite_duplicate_teaser_events_teaser_event_id.795ca7b5f0": [], "test.sql_repository_bz.not_null_onsite_duplicate_teaser_events_teaser_event_id.1439c5bb2b": [], "test.sql_repository_bz.not_null_onsite_ga_filter_usage_page.036c570431": [], "test.sql_repository_bz.dbt_utils_at_least_one_onsite_ga_filter_usage_page.62acd149c6": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_page.bcc635be0c": [], "test.sql_repository_bz.not_null_onsite_ga_filter_usage_filter_type.76df520867": [], "test.sql_repository_bz.dbt_utils_at_least_one_onsite_ga_filter_usage_filter_type.feb7c119d7": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_ga_filter_usage_filter_type.299c4c09a8": [], "test.sql_repository_bz.not_null_onsite_hits_by_property_and_day_ga_property.96f9de3646": [], "test.sql_repository_bz.dbt_utils_at_least_one_onsite_hits_by_property_and_day_ga_property.3dbf7c98a2": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_onsite_hits_by_property_and_day_ga_property.5dd838d10e": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_sessions_comp__1_2__0_8__date_date_sub_current_date_interval_2_day_.13395bde30": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_transactions_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_.1d297b4e98": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_between_onsite_ga4_metric_comparison_order_value_comp__1_05__0_95__date_date_sub_current_date_interval_2_day_.66d53dfc73": [], "test.sql_repository_bz.dbt_utils_at_least_one_gads_ads_for_url_check_final_url.9cafbd858b": [], "test.sql_repository_bz.not_null_gads_adstats_and_attributes_adgroup_id.edb7c2279b": [], "test.sql_repository_bz.dbt_utils_at_least_one_gads_adstats_and_attributes_adgroup_id.e490c275df": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_name.80647eef58": [], "test.sql_repository_bz.dbt_utils_at_least_one_gads_backfill_consentless_transactions_conversion_name.dc61bca00f": [], "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_name.a4be000e25": [], "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_value.ee7967395f": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_value.1ebff85aae": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_gads_backfill_consentless_transactions_google_click_id__conversion_name_in_Sale_PB_AT_Import_Sale_PB_NL_Import_Sale_PB_IT_Import_Sale_DE_Import_Sale_CH_Import_Sale_UK_Import_Sale__Import_.9d7b13ec85": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_google_click_id.4197bfa548": [], "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_google_click_id.73d41f11b3": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_gads_backfill_consentless_transactions_conversion_time.c7b1d11e16": [], "test.sql_repository_bz.not_null_gads_backfill_consentless_transactions_conversion_time.300785956b": [], "test.sql_repository_bz.dbt_expectations_expect_table_column_count_to_equal_gads_backfill_consentless_transactions_5.29426e22c7": [], "test.sql_repository_bz.dbt_expectations_expect_table_row_count_to_be_between_gads_backfill_consentless_transactions_1000__200__False.0096963cea": [], "test.sql_repository_bz.dbt_utils_at_least_one_gmc_missing_brands_per_country_country.7c615e55c7": [], "test.sql_repository_bz.dbt_utils_at_least_one_gmc_missing_brands_per_country_account_id.066b1cb92a": [], "test.sql_repository_bz.not_null_gmc_missing_brands_per_country_product_group.faa607cf81": [], "test.sql_repository_bz.not_null_awin_transactions_pending_with_returns_order_id_awin.9d5fb70f34": [], "test.sql_repository_bz.dbt_utils_at_least_one_awin_transactions_pending_with_returns_order_id_awin.ada8261cb8": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_order_id_awin.47c5befa4a": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_order_id_awin__awin_date_between_date_sub_current_date_interval_3_day_and_date_sub_current_date_interval_1_day_.9a103157be": [], "test.sql_repository_bz.not_null_awin_transactions_pending_with_returns_sale_amount_awin.e764fc75bc": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_be_unique_awin_transactions_pending_with_returns_inv_h_shop_order_id.40f8727dcc": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_inv_h_shop_order_id.177285c64b": [], "test.sql_repository_bz.dbt_expectations_expect_column_to_exist_awin_transactions_pending_with_returns_umsatz_netto.a5b484a50a": [], "test.sql_repository_bz.dbt_expectations_expect_column_values_to_not_be_null_awin_transactions_pending_with_returns_umsatz_netto__inv_h_shop_order_id_is_not_null.40fdd0e1d0": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_ga_data_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.8ed5bd2364": [], "test.sql_repository_bz.dbt_expectations_expect_row_values_to_have_data_for_every_n_datepart_product_attributes_and_stock_by_day_date__day__date_between_date_sub_current_date_interval_7_day_and_date_sub_current_date_interval_1_day_.06519299f6": [], "test.ga4.unique_dim_ga4__sessions_session_key.5ade237063": [], "test.ga4.unique_dim_ga4__users_user_key.bdf442708d": [], "test.ga4.unique_fct_ga4__sessions_session_key.93f6a798f0": [], "test.ga4.not_null_stg_ga4__event_page_view_page_location.8b37318084": [], "test.ga4.unique_stg_ga4__users_first_last_pageviews_user_key.3c574733bb": [], "test.ga4.unique_stg_ga4__users_first_last_events_user_key.dc787935d6": [], "test.ga4.unique_stg_ga4__events_event_key.985cc306e5": [], "test.ga4.unique_stg_ga4__derived_user_properties_user_key.8ef3970648": [], "test.ga4.unique_stg_ga4__sessions_traffic_sources_session_key.417549e35d": [], "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_source.49313fe211": [], "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_medium.90883df125": [], "test.ga4.not_null_stg_ga4__sessions_traffic_sources_session_campaign.63d42c772d": [], "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_channel_attribution_markov_attribution_channel_level_country_grouping__date__date_2022_05_20_and_country_grouping_de___19.3eefbef85f": [], "test.sql_repository_bz.dbt_expectations_source_expect_row_values_to_have_recent_data_channel_attribution_markov_attribution_channel_level_date__hour__39.07f7fbb608": [], "test.sql_repository_bz.dbt_expectations_source_expect_row_values_to_have_data_for_every_n_datepart_dbt_test_results_test_results_history_test_date__day__2022_07_01.ef831ae303": [], "test.sql_repository_bz.dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_Land__Monat__Wert.b09caac309": [], "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__Monat__1.5d85f3b378": [], "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__12.888a866c6b": [], "test.sql_repository_bz.dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_channels_Land__Channel__Anteil__KUR.754e05eaad": [], "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_channels_Land__Channel__Land_is_not_null_and_Channel_is_not_null__1.f09a2be471": [], "source.sql_repository_bz.channel_attribution.markov_attribution_channel_level": ["model.sql_repository_bz.stg_channelattribution_channel_level", "test.sql_repository_bz.dbt_expectations_source_expect_row_values_to_have_recent_data_channel_attribution_markov_attribution_channel_level_date__hour__39.07f7fbb608", "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_channel_attribution_markov_attribution_channel_level_country_grouping__date__date_2022_05_20_and_country_grouping_de___19.3eefbef85f"], "source.sql_repository_bz.channel_attribution.markov_attribution_path_level": ["model.sql_repository_bz.stg_channelattribution_path_level"], "source.sql_repository_bz.weather_data.weather_dach_daily": ["model.sql_repository_bz.stg_weather_dach_daily"], "source.sql_repository_bz.weather_data.weather_dach_7d_forecast": ["model.sql_repository_bz.stg_weather_dach_7d_forecast"], "source.sql_repository_bz.google_ads_transfer_de.gads_shopping_product_stats": ["model.sql_repository_bz.stg_gads_all_product_stats"], "source.sql_repository_bz.google_ads_transfer_de.gads_search_query_stats": ["model.sql_repository_bz.stg_gads_all_query_stats"], "source.sql_repository_bz.google_ads_transfer_de.gads_campaigns": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "source.sql_repository_bz.google_ads_transfer_de.gads_campaign_stats": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "source.sql_repository_bz.google_ads_transfer_de.gads_ads_stats": ["model.sql_repository_bz.stg_gads_all_ads_stats"], "source.sql_repository_bz.google_ads_transfer_de.gads_ads": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "source.sql_repository_bz.google_ads_transfer_de.gads_adgroups": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "source.sql_repository_bz.google_ads_transfer_de.gads_adgroup_stats": [], "source.sql_repository_bz.google_ads_transfer_de.gads_criteria": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "source.sql_repository_bz.google_ads_transfer_at.gads_shopping_product_stats": ["model.sql_repository_bz.stg_gads_all_product_stats"], "source.sql_repository_bz.google_ads_transfer_at.gads_search_query_stats": ["model.sql_repository_bz.stg_gads_all_query_stats"], "source.sql_repository_bz.google_ads_transfer_at.gads_campaigns": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "source.sql_repository_bz.google_ads_transfer_at.gads_campaign_stats": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "source.sql_repository_bz.google_ads_transfer_at.gads_ads_stats": ["model.sql_repository_bz.stg_gads_all_ads_stats"], "source.sql_repository_bz.google_ads_transfer_at.gads_ads": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "source.sql_repository_bz.google_ads_transfer_at.gads_adgroups": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "source.sql_repository_bz.google_ads_transfer_at.gads_criteria": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "source.sql_repository_bz.google_ads_transfer_ch.gads_shopping_product_stats": ["model.sql_repository_bz.stg_gads_all_product_stats"], "source.sql_repository_bz.google_ads_transfer_ch.gads_search_query_stats": ["model.sql_repository_bz.stg_gads_all_query_stats"], "source.sql_repository_bz.google_ads_transfer_ch.gads_campaigns": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "source.sql_repository_bz.google_ads_transfer_ch.gads_campaign_stats": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "source.sql_repository_bz.google_ads_transfer_ch.gads_ads_stats": ["model.sql_repository_bz.stg_gads_all_ads_stats"], "source.sql_repository_bz.google_ads_transfer_ch.gads_ads": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "source.sql_repository_bz.google_ads_transfer_ch.gads_adgroups": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "source.sql_repository_bz.google_ads_transfer_ch.gads_criteria": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "source.sql_repository_bz.google_ads_transfer_nl.gads_shopping_product_stats": ["model.sql_repository_bz.stg_gads_all_product_stats"], "source.sql_repository_bz.google_ads_transfer_nl.gads_search_query_stats": ["model.sql_repository_bz.stg_gads_all_query_stats"], "source.sql_repository_bz.google_ads_transfer_nl.gads_campaigns": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "source.sql_repository_bz.google_ads_transfer_nl.gads_campaign_stats": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "source.sql_repository_bz.google_ads_transfer_nl.gads_ads_stats": ["model.sql_repository_bz.stg_gads_all_ads_stats"], "source.sql_repository_bz.google_ads_transfer_nl.gads_ads": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "source.sql_repository_bz.google_ads_transfer_nl.gads_adgroups": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "source.sql_repository_bz.google_ads_transfer_nl.gads_criteria": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "source.sql_repository_bz.google_ads_transfer_be.gads_shopping_product_stats": ["model.sql_repository_bz.stg_gads_all_product_stats"], "source.sql_repository_bz.google_ads_transfer_be.gads_search_query_stats": ["model.sql_repository_bz.stg_gads_all_query_stats"], "source.sql_repository_bz.google_ads_transfer_be.gads_campaigns": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "source.sql_repository_bz.google_ads_transfer_be.gads_campaign_stats": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "source.sql_repository_bz.google_ads_transfer_be.gads_ads_stats": ["model.sql_repository_bz.stg_gads_all_ads_stats"], "source.sql_repository_bz.google_ads_transfer_be.gads_ads": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "source.sql_repository_bz.google_ads_transfer_be.gads_adgroups": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "source.sql_repository_bz.google_ads_transfer_be.gads_criteria": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "source.sql_repository_bz.google_ads_transfer_it.gads_shopping_product_stats": ["model.sql_repository_bz.stg_gads_all_product_stats"], "source.sql_repository_bz.google_ads_transfer_it.gads_search_query_stats": ["model.sql_repository_bz.stg_gads_all_query_stats"], "source.sql_repository_bz.google_ads_transfer_it.gads_campaigns": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "source.sql_repository_bz.google_ads_transfer_it.gads_campaign_stats": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "source.sql_repository_bz.google_ads_transfer_it.gads_ads_stats": ["model.sql_repository_bz.stg_gads_all_ads_stats"], "source.sql_repository_bz.google_ads_transfer_it.gads_ads": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "source.sql_repository_bz.google_ads_transfer_it.gads_adgroups": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "source.sql_repository_bz.google_ads_transfer_it.gads_criteria": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "source.sql_repository_bz.google_ads_transfer_uk.gads_shopping_product_stats": ["model.sql_repository_bz.stg_gads_all_product_stats"], "source.sql_repository_bz.google_ads_transfer_uk.gads_search_query_stats": ["model.sql_repository_bz.stg_gads_all_query_stats"], "source.sql_repository_bz.google_ads_transfer_uk.gads_campaigns": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "source.sql_repository_bz.google_ads_transfer_uk.gads_campaign_stats": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "source.sql_repository_bz.google_ads_transfer_uk.gads_ads_stats": ["model.sql_repository_bz.stg_gads_all_ads_stats"], "source.sql_repository_bz.google_ads_transfer_uk.gads_ads": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "source.sql_repository_bz.google_ads_transfer_uk.gads_adgroups": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "source.sql_repository_bz.google_ads_transfer_uk.gads_criteria": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "source.sql_repository_bz.google_ads_transfer_dk.gads_shopping_product_stats": ["model.sql_repository_bz.stg_gads_all_product_stats"], "source.sql_repository_bz.google_ads_transfer_dk.gads_search_query_stats": ["model.sql_repository_bz.stg_gads_all_query_stats"], "source.sql_repository_bz.google_ads_transfer_dk.gads_campaigns": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "source.sql_repository_bz.google_ads_transfer_dk.gads_campaign_stats": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "source.sql_repository_bz.google_ads_transfer_dk.gads_ads_stats": ["model.sql_repository_bz.stg_gads_all_ads_stats"], "source.sql_repository_bz.google_ads_transfer_dk.gads_ads": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "source.sql_repository_bz.google_ads_transfer_dk.gads_adgroups": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "source.sql_repository_bz.google_ads_transfer_dk.gads_criteria": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "source.sql_repository_bz.google_ads_transfer_se.gads_shopping_product_stats": ["model.sql_repository_bz.stg_gads_all_product_stats"], "source.sql_repository_bz.google_ads_transfer_se.gads_search_query_stats": ["model.sql_repository_bz.stg_gads_all_query_stats"], "source.sql_repository_bz.google_ads_transfer_se.gads_campaigns": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "source.sql_repository_bz.google_ads_transfer_se.gads_campaign_stats": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "source.sql_repository_bz.google_ads_transfer_se.gads_ads_stats": ["model.sql_repository_bz.stg_gads_all_ads_stats"], "source.sql_repository_bz.google_ads_transfer_se.gads_ads": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "source.sql_repository_bz.google_ads_transfer_se.gads_adgroups": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "source.sql_repository_bz.google_ads_transfer_se.gads_criteria": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "source.sql_repository_bz.google_ads_transfer_fr.gads_shopping_product_stats": ["model.sql_repository_bz.stg_gads_all_product_stats"], "source.sql_repository_bz.google_ads_transfer_fr.gads_search_query_stats": ["model.sql_repository_bz.stg_gads_all_query_stats"], "source.sql_repository_bz.google_ads_transfer_fr.gads_campaigns": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "source.sql_repository_bz.google_ads_transfer_fr.gads_campaign_stats": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "source.sql_repository_bz.google_ads_transfer_fr.gads_ads_stats": ["model.sql_repository_bz.stg_gads_all_ads_stats"], "source.sql_repository_bz.google_ads_transfer_fr.gads_ads": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "source.sql_repository_bz.google_ads_transfer_fr.gads_adgroups": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "source.sql_repository_bz.google_ads_transfer_fr.gads_criteria": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "source.sql_repository_bz.google_ads_transfer_fi.gads_shopping_product_stats": ["model.sql_repository_bz.stg_gads_all_product_stats"], "source.sql_repository_bz.google_ads_transfer_fi.gads_search_query_stats": ["model.sql_repository_bz.stg_gads_all_query_stats"], "source.sql_repository_bz.google_ads_transfer_fi.gads_campaigns": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "source.sql_repository_bz.google_ads_transfer_fi.gads_campaign_stats": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "source.sql_repository_bz.google_ads_transfer_fi.gads_ads_stats": ["model.sql_repository_bz.stg_gads_all_ads_stats"], "source.sql_repository_bz.google_ads_transfer_fi.gads_ads": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "source.sql_repository_bz.google_ads_transfer_fi.gads_adgroups": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "source.sql_repository_bz.google_ads_transfer_fi.gads_criteria": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "source.sql_repository_bz.google_ads_transfer_cz.gads_shopping_product_stats": ["model.sql_repository_bz.stg_gads_all_product_stats"], "source.sql_repository_bz.google_ads_transfer_cz.gads_search_query_stats": ["model.sql_repository_bz.stg_gads_all_query_stats"], "source.sql_repository_bz.google_ads_transfer_cz.gads_campaigns": ["model.sql_repository_bz.stg_gads_all_campaign_names", "model.sql_repository_bz.stg_gads_all_campaigns_info_current"], "source.sql_repository_bz.google_ads_transfer_cz.gads_campaign_stats": ["model.sql_repository_bz.stg_gads_all_campaign_stats"], "source.sql_repository_bz.google_ads_transfer_cz.gads_ads_stats": ["model.sql_repository_bz.stg_gads_all_ads_stats"], "source.sql_repository_bz.google_ads_transfer_cz.gads_ads": ["model.sql_repository_bz.stg_gads_all_ads_info_current"], "source.sql_repository_bz.google_ads_transfer_cz.gads_adgroups": ["model.sql_repository_bz.stg_gads_all_adgroups_info_current"], "source.sql_repository_bz.google_ads_transfer_cz.gads_criteria": ["model.sql_repository_bz.stg_gads_all_criteria_info_current"], "source.sql_repository_bz.crawled_ad_urls.crawled_ad_urls": ["model.sql_repository_bz.stg_gads_all_crawled_ads_urls"], "source.sql_repository_bz.dbt_test_results.test_results_central": ["model.sql_repository_bz.stg_test_results_last_run"], "source.sql_repository_bz.dbt_test_results.test_results_history": ["model.sql_repository_bz.stg_test_results_historic", "test.sql_repository_bz.dbt_expectations_source_expect_row_values_to_have_data_for_every_n_datepart_dbt_test_results_test_results_history_test_date__day__2022_07_01.ef831ae303"], "source.sql_repository_bz.google_search_console.gsc_data": ["model.sql_repository_bz.stg_gsc_data"], "source.sql_repository_bz.product_inventory.cp_product_attributes_daily": ["model.sql_repository_bz.stg_channel_pilot_profit_bidding_90d", "model.sql_repository_bz.stg_gmc_product_attributes_daily"], "source.sql_repository_bz.merchant_center_transfer_de.mc_products_de": ["analysis.sql_repository_bz.available_products_by_country", "model.sql_repository_bz.stg_gmc_all_products", "model.sql_repository_bz.stg_gmc_product_brands", "model.sql_repository_bz.stg_gmc_product_issues", "model.sql_repository_bz.stg_gmc_product_issues"], "source.sql_repository_bz.merchant_center_transfer_de.mc_products_uk": ["analysis.sql_repository_bz.available_products_by_country", "model.sql_repository_bz.stg_gmc_product_issues", "model.sql_repository_bz.stg_gmc_product_issues"], "source.sql_repository_bz.merchant_center_transfer_de.mc_products_ch": ["analysis.sql_repository_bz.available_products_by_country", "model.sql_repository_bz.stg_gmc_all_products", "model.sql_repository_bz.stg_gmc_product_issues", "model.sql_repository_bz.stg_gmc_product_issues"], "source.sql_repository_bz.merchant_center_transfer_de.mc_products_at": ["analysis.sql_repository_bz.available_products_by_country", "model.sql_repository_bz.stg_gmc_product_issues", "model.sql_repository_bz.stg_gmc_product_issues"], "source.sql_repository_bz.merchant_center_transfer_de.mc_products_nl": ["analysis.sql_repository_bz.available_products_by_country", "model.sql_repository_bz.stg_gmc_product_issues", "model.sql_repository_bz.stg_gmc_product_issues"], "source.sql_repository_bz.merchant_center_transfer_de.mc_products_it": ["analysis.sql_repository_bz.available_products_by_country", "model.sql_repository_bz.stg_gmc_product_issues", "model.sql_repository_bz.stg_gmc_product_issues"], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_stock_de": ["model.sql_repository_bz.stg_gmc_product_stock"], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_price_benchmark_de": ["model.sql_repository_bz.zz_stg_gmc_price_benchmarks"], "source.sql_repository_bz.merchant_center_transfer_de.mc_return_rates": ["model.sql_repository_bz.stg_qlik_return_rates"], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins": ["model.sql_repository_bz.zz_stg_gmc_product_margins"], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_de": ["model.sql_repository_bz.stg_gmc_margins_all"], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_ch": ["model.sql_repository_bz.stg_gmc_margins_all"], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_int": ["model.sql_repository_bz.stg_gmc_margins_all"], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_it": ["model.sql_repository_bz.stg_gmc_margins_all"], "source.sql_repository_bz.merchant_center_transfer_de.mc_product_margins_uk": ["model.sql_repository_bz.stg_gmc_margins_all"], "source.sql_repository_bz.seo_analytics.finished_seo_jira_tickets": ["model.sql_repository_bz.stg_jira_finished_seo_tickets"], "source.sql_repository_bz.analytics_datamart.minubo_ga_export": ["model.sql_repository_bz.stg_minubo_ga_kpis_daily"], "source.sql_repository_bz.customer_analytics.antavo_optins": ["model.sql_repository_bz.stg_antavo_club_optins"], "source.sql_repository_bz.consentless_tracking.ishop_consentless_prod": ["model.sql_repository_bz.stg_consentless_consent_interaction", "model.sql_repository_bz.stg_consentless_page_views_live", "model.sql_repository_bz.stg_consentless_transactions", "model.sql_repository_bz.stg_consentless_transactions_live"], "source.sql_repository_bz.consentless_tracking.ishop_consentless_staging": [], "source.sql_repository_bz.bz_information_schema.TABLE_STORAGE": ["model.sql_repository_bz.stg_gcp_bigquery_table_storage"], "source.sql_repository_bz.bz_information_schema.bigquery_jobs": ["model.sql_repository_bz.stg_gcp_bigquery_job_cost"], "source.sql_repository_bz.gcp_cost.gcp_cost_data": ["model.sql_repository_bz.stg_gcp_cost_export"], "source.sql_repository_bz.gcp_cost.gcp_cost_data_legacy": ["model.sql_repository_bz.stg_gcp_cost_export"], "source.sql_repository_bz.gcp_cloud_logs.cloudscheduler_executions": [], "source.sql_repository_bz.trusted_shops.ts_reviews_all": ["model.sql_repository_bz.stg_trusted_shops_reviews"], "source.sql_repository_bz.price_intelligence.currency_factor_chf": ["model.sql_repository_bz.stg_gsheets_currency_factor_ch"], "source.sql_repository_bz.price_intelligence.currency_factor_gbp": ["model.sql_repository_bz.stg_gsheets_currency_factor_gb"], "source.sql_repository_bz.price_intelligence.budgetplan_soll": ["model.sql_repository_bz.stg_gsheets_order_value_planned", "test.sql_repository_bz.dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_Land__Monat__Wert.b09caac309", "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__12.888a866c6b", "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_Land__Monat__1.5d85f3b378"], "source.sql_repository_bz.price_intelligence.budgetplan_soll_channels": ["model.sql_repository_bz.stg_gsheets_channel_shares_planned", "test.sql_repository_bz.dbt_expectations_source_expect_table_columns_to_match_set_price_intelligence_budgetplan_soll_channels_Land__Channel__Anteil__KUR.754e05eaad", "test.sql_repository_bz.dbt_expectations_source_expect_table_row_count_to_equal_price_intelligence_budgetplan_soll_channels_Land__Channel__Land_is_not_null_and_Channel_is_not_null__1.f09a2be471"], "source.sql_repository_bz.seo_analytics.top_pages_input_list": ["model.sql_repository_bz.stg_gsheets_seo_top_pages"], "source.sql_repository_bz.seo_analytics.magazin_posts_reworked_input_list": ["model.sql_repository_bz.stg_gsheets_seo_magazin_reworked"], "source.sql_repository_bz.awin.awin_orders_all_ch": ["model.sql_repository_bz.stg_awin_orders_all"], "source.sql_repository_bz.awin.awin_orders_all_deat": ["model.sql_repository_bz.stg_awin_orders_all"], "source.sql_repository_bz.awin.awin_orders_all_it": ["model.sql_repository_bz.stg_awin_orders_all"], "source.sql_repository_bz.awin.awin_orders_all_uk": ["model.sql_repository_bz.stg_awin_orders_all"], "source.sql_repository_bz.awin.awin_orders_all_nl": ["model.sql_repository_bz.stg_awin_orders_all"], "source.sql_repository_bz.awin.awin_return_adjustment_errors": ["model.sql_repository_bz.stg_awin_return_adjustment_errors"], "source.sql_repository_bz.customer_analytics.emarsys_ids": ["model.sql_repository_bz.stg_emarsys_ids"], "source.sql_repository_bz.pagespeed_measurement.pagespeed_api_metrics": ["model.sql_repository_bz.stg_pagespeed_url_data"], "source.sql_repository_bz.ga_bz_master_view_overall.ga_sessions_all": ["exposure.sql_repository_bz.BZ-SEA Dashboard", "exposure.sql_repository_bz.CRM - eMail Analyse", "exposure.sql_repository_bz.Coops_Bergzeit - Adidas - Retail Partner Performance Dashboard", "exposure.sql_repository_bz.Coops_CSR Marketing Report", "exposure.sql_repository_bz.Shop_BZ Startseite", "exposure.sql_repository_bz.Shop_BZ Startseite Overall", "exposure.sql_repository_bz.Shop_Benelux Market Analysis", "exposure.sql_repository_bz.Shop_Beratungs-Report", "exposure.sql_repository_bz.Shop_Brand Report", "exposure.sql_repository_bz.Shop_Configurator Report", "exposure.sql_repository_bz.Shop_Flyout Report", "exposure.sql_repository_bz.Shop_Focus Markets Performance Overview", "exposure.sql_repository_bz.Shop_Market Analysis | Italia", "exposure.sql_repository_bz.Shop_Page_Tracking_Check", "exposure.sql_repository_bz.Shop_Performance Overview | DACH", "model.sql_repository_bz.stg_ga_ecommerce_actions", "model.sql_repository_bz.stg_ga_events", "model.sql_repository_bz.stg_ga_events_per_page", "model.sql_repository_bz.stg_ga_events_promotion", "model.sql_repository_bz.stg_ga_filter_events", "model.sql_repository_bz.stg_ga_hits_all_properties", "model.sql_repository_bz.stg_ga_internal_search", "model.sql_repository_bz.stg_ga_magazin_custom_dims", "model.sql_repository_bz.stg_ga_page_types", "model.sql_repository_bz.stg_ga_pagespeed_per_pagetype", "model.sql_repository_bz.stg_ga_pageviews", "model.sql_repository_bz.stg_ga_product_checkouts", "model.sql_repository_bz.stg_ga_product_detail_pages", "model.sql_repository_bz.stg_ga_product_performance_profit_bidding", "model.sql_repository_bz.stg_ga_products", "model.sql_repository_bz.stg_ga_session_totals", "model.sql_repository_bz.stg_ga_sessions_attribution_calculation", "model.sql_repository_bz.stg_ga_transactions", "model.sql_repository_bz.stg_ga_transactions_conversion_backfill", "model.sql_repository_bz.stg_ga_transactions_with_adclick_involvement", "model.sql_repository_bz.stg_ga_transactions_with_adclick_involvement"], "source.sql_repository_bz.ga_bz_master_view_de.ga_sessions_de": ["model.sql_repository_bz.stg_ga_de_overall_session_attributes", "model.sql_repository_bz.stg_ga_hits_all_properties"], "source.sql_repository_bz.ga_bz_master_view_at.ga_sessions_at": ["model.sql_repository_bz.stg_ga_hits_all_properties"], "source.sql_repository_bz.ga_bz_master_view_ch.ga_sessions_ch": ["model.sql_repository_bz.stg_ga_hits_all_properties"], "source.sql_repository_bz.ga4_bz_overall.ga4_bz_overall_events": ["analysis.sql_repository_bz.extract_event_params_data_type", "model.sql_repository_bz.stg_ga4_events_checkout", "model.sql_repository_bz.stg_ga4_events_custom", "model.sql_repository_bz.stg_ga4_events_standard", "model.sql_repository_bz.stg_ga4_products"], "source.sql_repository_bz.performance_cost.performance_cost_DE": ["model.sql_repository_bz.stg_ga_performance_costs"], "source.sql_repository_bz.performance_cost.performance_cost_AT": ["model.sql_repository_bz.stg_ga_performance_costs"], "source.sql_repository_bz.performance_cost.performance_cost_CH": ["model.sql_repository_bz.stg_ga_performance_costs_CH"], "source.sql_repository_bz.performance_cost.performance_cost_BE": ["model.sql_repository_bz.stg_ga_performance_costs"], "source.sql_repository_bz.performance_cost.performance_cost_UK": ["model.sql_repository_bz.stg_ga_performance_costs_UK"], "source.sql_repository_bz.performance_cost.performance_cost_CZ": ["model.sql_repository_bz.stg_ga_performance_costs"], "source.sql_repository_bz.performance_cost.performance_cost_DK": ["model.sql_repository_bz.stg_ga_performance_costs"], "source.sql_repository_bz.performance_cost.performance_cost_FI": ["model.sql_repository_bz.stg_ga_performance_costs"], "source.sql_repository_bz.performance_cost.performance_cost_FR": ["model.sql_repository_bz.stg_ga_performance_costs"], "source.sql_repository_bz.performance_cost.performance_cost_IT": ["model.sql_repository_bz.stg_ga_performance_costs"], "source.sql_repository_bz.performance_cost.performance_cost_NL": ["model.sql_repository_bz.stg_ga_performance_costs"], "source.sql_repository_bz.performance_cost.performance_cost_NO": ["model.sql_repository_bz.stg_ga_performance_costs"], "source.sql_repository_bz.performance_cost.performance_cost_PL": ["model.sql_repository_bz.stg_ga_performance_costs"], "source.sql_repository_bz.performance_cost.performance_cost_SE": ["model.sql_repository_bz.stg_ga_performance_costs"], "source.sql_repository_bz.performance_cost.performance_cost_validation_all_views": ["model.sql_repository_bz.stg_ga_performance_cost_validation"], "source.sql_repository_bz.product_inventory.channelpilot_source_feeds_all": ["model.sql_repository_bz.stg_channel_pilot_source_feeds_ipim"], "source.sql_repository_bz.crawl_data.crawl_advertools_logs": ["model.sql_repository_bz.stg_crawl_advertools_logs"], "source.sql_repository_bz.crawl_data.gbot_crawl_data": ["model.sql_repository_bz.stg_crawl_gbot_logfiles"], "source.sql_repository_bz.crawl_data.sitemap_data_de": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all", "model.sql_repository_bz.stg_crawl_sitemap_urls_de"], "source.sql_repository_bz.crawl_data.sitemap_data_it": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all"], "source.sql_repository_bz.crawl_data.sitemap_data_nl": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all"], "source.sql_repository_bz.crawl_data.sitemap_data_uk": ["model.sql_repository_bz.stg_crawl_sitemap_urls_all"], "source.sql_repository_bz.crawl_data.bf_sitemap_current": ["model.sql_repository_bz.stg_crawl_sitemap_urls_bergfreunde"], "source.sql_repository_bz.crawl_data.backlinks_and_inlinks_per_url": [], "source.sql_repository_bz.azure_dwh_discovery.nav_transactions": ["model.sql_repository_bz.stg_nav_transactions"], "source.sql_repository_bz.azure_dwh_discovery.nav_customers": ["model.sql_repository_bz.stg_nav_customers"], "source.sql_repository_bz.azure_dwh_discovery.nav_invoice_line": ["model.sql_repository_bz.stg_nav_invoice_header_and_lines"], "source.sql_repository_bz.azure_dwh_discovery.nav_invoice_header": ["model.sql_repository_bz.stg_nav_invoice_header_and_lines"], "source.sql_repository_bz.azure_dwh_discovery.nav_credit_memo_line": ["model.sql_repository_bz.stg_nav_credit_memo_header_and_lines"], "source.sql_repository_bz.azure_dwh_discovery.nav_credit_memo_header": ["model.sql_repository_bz.stg_nav_credit_memo_header_and_lines"], "source.sql_repository_bz.azure_dwh_discovery.nav_sales_channel": ["model.sql_repository_bz.stg_nav_sales_channel_description"], "source.sql_repository_bz.azure_dwh_discovery.nav_customers_new_id": ["model.sql_repository_bz.stg_nav_customers_new_id"], "source.sql_repository_bz.analytics_datamart.return_rates_country_brand_topcat": [], "source.ga4.ga4.events": ["model.ga4.base_ga4__events"], "source.ga4.ga4.events_intraday": [], "exposure.sql_repository_bz.Repurchase Forecast": [], "exposure.sql_repository_bz.BZ OXID Revenue Daily": [], "exposure.sql_repository_bz.Bergzeit Management Report": [], "exposure.sql_repository_bz.BZ Performance Soll Ist": [], "exposure.sql_repository_bz.Affiliate Gutscheinexport": [], "exposure.sql_repository_bz.Profit Bidding Upload CSV": [], "exposure.sql_repository_bz.Shop_Filter Report": [], "exposure.sql_repository_bz.Shop_Page_Tracking_Check": [], "exposure.sql_repository_bz.Shop_Beratungs-Report": [], "exposure.sql_repository_bz.Coops_CSR Marketing Report": [], "exposure.sql_repository_bz.GA4 Data Validation": [], "exposure.sql_repository_bz.Coops_Bergzeit - Adidas - Retail Partner Performance Dashboard": [], "exposure.sql_repository_bz.Shop_Performance Overview | DACH": [], "exposure.sql_repository_bz.Shop_Configurator Report": [], "exposure.sql_repository_bz.Shop_Flyout Report": [], "exposure.sql_repository_bz.BZ-SEA Dashboard": [], "exposure.sql_repository_bz.Shop_Brand Report": [], "exposure.sql_repository_bz.Shop_Benelux Market Analysis": [], "exposure.sql_repository_bz.Shop_Focus Markets Performance Overview": [], "exposure.sql_repository_bz.Shop_BZ Startseite Overall": [], "exposure.sql_repository_bz.Shop_BZ Startseite": [], "exposure.sql_repository_bz.CRM - eMail Analyse": [], "exposure.sql_repository_bz.Shop_Market Analysis | Italia": [], "exposure.sql_repository_bz.Alert Consentless Offline Pages": [], "exposure.sql_repository_bz.Alert Consentless Missing Transactions": [], "exposure.sql_repository_bz.Alert Consentless Missing Consent Events": [], "exposure.sql_repository_bz.Alert Consentless Missing Magazine Pageviews": [], "exposure.sql_repository_bz.CRM_BZ Club Analysis": [], "exposure.sql_repository_bz.All_Market Review": [], "exposure.sql_repository_bz.CRM_Kundenanalysen Explorativ": [], "exposure.sql_repository_bz.Multichannel Attribution Dashboard": [], "exposure.sql_repository_bz.Channel Level Attribution Notebook (attribution-calculation)": [], "exposure.sql_repository_bz.Path Level Attribution Notebook (r-3-steffi)": [], "exposure.sql_repository_bz.BZ-Performance_SOLL-IST_GJ 22/23": [], "exposure.sql_repository_bz.GA Data Validation - AdCost Validation": [], "exposure.sql_repository_bz.Adgroups With Error Ads Upload to be Paused": [], "exposure.sql_repository_bz.Google Ads URLs Crawler": [], "exposure.sql_repository_bz.GAds Stats and Attributes Table": [], "exposure.sql_repository_bz.Gads Backfill Consentless Transactions": [], "exposure.sql_repository_bz.Channelpilot Feed Input Hygiene": [], "exposure.sql_repository_bz.Missing Products in SMA Shopping Campaigns per Account": [], "exposure.sql_repository_bz.Google Ads Script to Upload the Json File to Google Ads": [], "exposure.sql_repository_bz.Vorlage Hersteller Report (extern)": [], "exposure.sql_repository_bz.Awin Sales Comparison Cloud Function": [], "exposure.sql_repository_bz.Awin Publisher Dashboard": [], "exposure.sql_repository_bz.Test Errors and Warnings to Teams Cloud Function": [], "exposure.sql_repository_bz.Analytics Admin Report (GCP & GA360)": [], "exposure.sql_repository_bz.B&S_Produkt Performance Report": [], "exposure.sql_repository_bz.B&S_Sales Aktionen Report": [], "exposure.sql_repository_bz.Shop_Merchandising Report": [], "exposure.sql_repository_bz.B&S_Warenkorb Analyse": [], "exposure.sql_repository_bz.B&S_Fremdlager PowerBI Report": [], "exposure.sql_repository_bz.B&S_Pricing PowerBI Report": [], "exposure.sql_repository_bz.B&S_Topseller OutofStock Report": [], "exposure.sql_repository_bz.SEO_Overall Report": [], "exposure.sql_repository_bz.SEO_Pagespeed Report": [], "exposure.sql_repository_bz.LP SEO Monitor": []}}